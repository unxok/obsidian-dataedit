"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const obsidian = require("obsidian");
const sharedConfig = {
  context: void 0,
  registry: void 0
};
const equalFn = (a, b) => a === b;
const $PROXY = Symbol("solid-proxy");
const $TRACK = Symbol("solid-track");
const signalOptions = {
  equals: equalFn
};
let runEffects = runQueue;
const STALE = 1;
const PENDING = 2;
const UNOWNED = {
  owned: null,
  cleanups: null,
  context: null,
  owner: null
};
var Owner = null;
let Transition = null;
let ExternalSourceConfig = null;
let Listener = null;
let Updates = null;
let Effects = null;
let ExecCount = 0;
function createRoot(fn, detachedOwner) {
  const listener = Listener, owner = Owner, unowned = fn.length === 0, current = detachedOwner === void 0 ? owner : detachedOwner, root = unowned ? UNOWNED : {
    owned: null,
    cleanups: null,
    context: current ? current.context : null,
    owner: current
  }, updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));
  Owner = root;
  Listener = null;
  try {
    return runUpdates(updateFn, true);
  } finally {
    Listener = listener;
    Owner = owner;
  }
}
function createSignal(value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  const s = {
    value,
    observers: null,
    observerSlots: null,
    comparator: options.equals || void 0
  };
  const setter = (value2) => {
    if (typeof value2 === "function") {
      value2 = value2(s.value);
    }
    return writeSignal(s, value2);
  };
  return [readSignal.bind(s), setter];
}
function createComputed(fn, value, options) {
  const c = createComputation(fn, value, true, STALE);
  updateComputation(c);
}
function createRenderEffect(fn, value, options) {
  const c = createComputation(fn, value, false, STALE);
  updateComputation(c);
}
function createEffect(fn, value, options) {
  runEffects = runUserEffects;
  const c = createComputation(fn, value, false, STALE);
  if (!options || !options.render) c.user = true;
  Effects ? Effects.push(c) : updateComputation(c);
}
function createMemo(fn, value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  const c = createComputation(fn, value, true, 0);
  c.observers = null;
  c.observerSlots = null;
  c.comparator = options.equals || void 0;
  updateComputation(c);
  return readSignal.bind(c);
}
function batch(fn) {
  return runUpdates(fn, false);
}
function untrack(fn) {
  if (Listener === null) return fn();
  const listener = Listener;
  Listener = null;
  try {
    if (ExternalSourceConfig) ;
    return fn();
  } finally {
    Listener = listener;
  }
}
function on(deps, fn, options) {
  const isArray = Array.isArray(deps);
  let prevInput;
  let defer = options && options.defer;
  return (prevValue) => {
    let input;
    if (isArray) {
      input = Array(deps.length);
      for (let i = 0; i < deps.length; i++) input[i] = deps[i]();
    } else input = deps();
    if (defer) {
      defer = false;
      return prevValue;
    }
    const result = untrack(() => fn(input, prevInput, prevValue));
    prevInput = input;
    return result;
  };
}
function onMount(fn) {
  createEffect(() => untrack(fn));
}
function onCleanup(fn) {
  if (Owner === null) ;
  else if (Owner.cleanups === null) Owner.cleanups = [fn];
  else Owner.cleanups.push(fn);
  return fn;
}
function getListener() {
  return Listener;
}
function getOwner() {
  return Owner;
}
function runWithOwner(o, fn) {
  const prev = Owner;
  const prevListener = Listener;
  Owner = o;
  Listener = null;
  try {
    return runUpdates(fn, true);
  } catch (err) {
    handleError(err);
  } finally {
    Owner = prev;
    Listener = prevListener;
  }
}
function createContext(defaultValue, options) {
  const id = Symbol("context");
  return {
    id,
    Provider: createProvider(id),
    defaultValue
  };
}
function useContext(context) {
  return Owner && Owner.context && Owner.context[context.id] !== void 0 ? Owner.context[context.id] : context.defaultValue;
}
function children(fn) {
  const children2 = createMemo(fn);
  const memo = createMemo(() => resolveChildren(children2()));
  memo.toArray = () => {
    const c = memo();
    return Array.isArray(c) ? c : c != null ? [c] : [];
  };
  return memo;
}
function readSignal() {
  if (this.sources && this.state) {
    if (this.state === STALE) updateComputation(this);
    else {
      const updates = Updates;
      Updates = null;
      runUpdates(() => lookUpstream(this), false);
      Updates = updates;
    }
  }
  if (Listener) {
    const sSlot = this.observers ? this.observers.length : 0;
    if (!Listener.sources) {
      Listener.sources = [this];
      Listener.sourceSlots = [sSlot];
    } else {
      Listener.sources.push(this);
      Listener.sourceSlots.push(sSlot);
    }
    if (!this.observers) {
      this.observers = [Listener];
      this.observerSlots = [Listener.sources.length - 1];
    } else {
      this.observers.push(Listener);
      this.observerSlots.push(Listener.sources.length - 1);
    }
  }
  return this.value;
}
function writeSignal(node, value, isComp) {
  let current = node.value;
  if (!node.comparator || !node.comparator(current, value)) {
    node.value = value;
    if (node.observers && node.observers.length) {
      runUpdates(() => {
        for (let i = 0; i < node.observers.length; i += 1) {
          const o = node.observers[i];
          const TransitionRunning = Transition && Transition.running;
          if (TransitionRunning && Transition.disposed.has(o)) ;
          if (TransitionRunning ? !o.tState : !o.state) {
            if (o.pure) Updates.push(o);
            else Effects.push(o);
            if (o.observers) markDownstream(o);
          }
          if (!TransitionRunning) o.state = STALE;
        }
        if (Updates.length > 1e6) {
          Updates = [];
          if (false) ;
          throw new Error();
        }
      }, false);
    }
  }
  return value;
}
function updateComputation(node) {
  if (!node.fn) return;
  cleanNode(node);
  const time = ExecCount;
  runComputation(
    node,
    node.value,
    time
  );
}
function runComputation(node, value, time) {
  let nextValue;
  const owner = Owner, listener = Listener;
  Listener = Owner = node;
  try {
    nextValue = node.fn(value);
  } catch (err) {
    if (node.pure) {
      {
        node.state = STALE;
        node.owned && node.owned.forEach(cleanNode);
        node.owned = null;
      }
    }
    node.updatedAt = time + 1;
    return handleError(err);
  } finally {
    Listener = listener;
    Owner = owner;
  }
  if (!node.updatedAt || node.updatedAt <= time) {
    if (node.updatedAt != null && "observers" in node) {
      writeSignal(node, nextValue);
    } else node.value = nextValue;
    node.updatedAt = time;
  }
}
function createComputation(fn, init, pure, state = STALE, options) {
  const c = {
    fn,
    state,
    updatedAt: null,
    owned: null,
    sources: null,
    sourceSlots: null,
    cleanups: null,
    value: init,
    owner: Owner,
    context: Owner ? Owner.context : null,
    pure
  };
  if (Owner === null) ;
  else if (Owner !== UNOWNED) {
    {
      if (!Owner.owned) Owner.owned = [c];
      else Owner.owned.push(c);
    }
  }
  return c;
}
function runTop(node) {
  if (node.state === 0) return;
  if (node.state === PENDING) return lookUpstream(node);
  if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);
  const ancestors = [node];
  while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {
    if (node.state) ancestors.push(node);
  }
  for (let i = ancestors.length - 1; i >= 0; i--) {
    node = ancestors[i];
    if (node.state === STALE) {
      updateComputation(node);
    } else if (node.state === PENDING) {
      const updates = Updates;
      Updates = null;
      runUpdates(() => lookUpstream(node, ancestors[0]), false);
      Updates = updates;
    }
  }
}
function runUpdates(fn, init) {
  if (Updates) return fn();
  let wait = false;
  if (!init) Updates = [];
  if (Effects) wait = true;
  else Effects = [];
  ExecCount++;
  try {
    const res = fn();
    completeUpdates(wait);
    return res;
  } catch (err) {
    if (!wait) Effects = null;
    Updates = null;
    handleError(err);
  }
}
function completeUpdates(wait) {
  if (Updates) {
    runQueue(Updates);
    Updates = null;
  }
  if (wait) return;
  const e = Effects;
  Effects = null;
  if (e.length) runUpdates(() => runEffects(e), false);
}
function runQueue(queue) {
  for (let i = 0; i < queue.length; i++) runTop(queue[i]);
}
function runUserEffects(queue) {
  let i, userLength = 0;
  for (i = 0; i < queue.length; i++) {
    const e = queue[i];
    if (!e.user) runTop(e);
    else queue[userLength++] = e;
  }
  for (i = 0; i < userLength; i++) runTop(queue[i]);
}
function lookUpstream(node, ignore) {
  node.state = 0;
  for (let i = 0; i < node.sources.length; i += 1) {
    const source = node.sources[i];
    if (source.sources) {
      const state = source.state;
      if (state === STALE) {
        if (source !== ignore && (!source.updatedAt || source.updatedAt < ExecCount))
          runTop(source);
      } else if (state === PENDING) lookUpstream(source, ignore);
    }
  }
}
function markDownstream(node) {
  for (let i = 0; i < node.observers.length; i += 1) {
    const o = node.observers[i];
    if (!o.state) {
      o.state = PENDING;
      if (o.pure) Updates.push(o);
      else Effects.push(o);
      o.observers && markDownstream(o);
    }
  }
}
function cleanNode(node) {
  let i;
  if (node.sources) {
    while (node.sources.length) {
      const source = node.sources.pop(), index = node.sourceSlots.pop(), obs = source.observers;
      if (obs && obs.length) {
        const n = obs.pop(), s = source.observerSlots.pop();
        if (index < obs.length) {
          n.sourceSlots[s] = index;
          obs[index] = n;
          source.observerSlots[index] = s;
        }
      }
    }
  }
  if (node.owned) {
    for (i = node.owned.length - 1; i >= 0; i--) cleanNode(node.owned[i]);
    node.owned = null;
  }
  if (node.cleanups) {
    for (i = node.cleanups.length - 1; i >= 0; i--) node.cleanups[i]();
    node.cleanups = null;
  }
  node.state = 0;
}
function castError(err) {
  if (err instanceof Error) return err;
  return new Error(typeof err === "string" ? err : "Unknown error", {
    cause: err
  });
}
function handleError(err, owner = Owner) {
  const error = castError(err);
  throw error;
}
function resolveChildren(children2) {
  if (typeof children2 === "function" && !children2.length) return resolveChildren(children2());
  if (Array.isArray(children2)) {
    const results = [];
    for (let i = 0; i < children2.length; i++) {
      const result = resolveChildren(children2[i]);
      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
    }
    return results;
  }
  return children2;
}
function createProvider(id, options) {
  return function provider(props) {
    let res;
    createRenderEffect(
      () => res = untrack(() => {
        Owner.context = {
          ...Owner.context,
          [id]: props.value
        };
        return children(() => props.children);
      }),
      void 0
    );
    return res;
  };
}
const FALLBACK$1 = Symbol("fallback");
function dispose$1(d) {
  for (let i = 0; i < d.length; i++) d[i]();
}
function mapArray(list, mapFn, options = {}) {
  let items = [], mapped = [], disposers = [], len = 0, indexes = mapFn.length > 1 ? [] : null;
  onCleanup(() => dispose$1(disposers));
  return () => {
    let newItems = list() || [], i, j;
    newItems[$TRACK];
    return untrack(() => {
      let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;
      if (newLen === 0) {
        if (len !== 0) {
          dispose$1(disposers);
          disposers = [];
          items = [];
          mapped = [];
          len = 0;
          indexes && (indexes = []);
        }
        if (options.fallback) {
          items = [FALLBACK$1];
          mapped[0] = createRoot((disposer) => {
            disposers[0] = disposer;
            return options.fallback();
          });
          len = 1;
        }
      } else if (len === 0) {
        mapped = new Array(newLen);
        for (j = 0; j < newLen; j++) {
          items[j] = newItems[j];
          mapped[j] = createRoot(mapper);
        }
        len = newLen;
      } else {
        temp = new Array(newLen);
        tempdisposers = new Array(newLen);
        indexes && (tempIndexes = new Array(newLen));
        for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++) ;
        for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
          temp[newEnd] = mapped[end];
          tempdisposers[newEnd] = disposers[end];
          indexes && (tempIndexes[newEnd] = indexes[end]);
        }
        newIndices = /* @__PURE__ */ new Map();
        newIndicesNext = new Array(newEnd + 1);
        for (j = newEnd; j >= start; j--) {
          item = newItems[j];
          i = newIndices.get(item);
          newIndicesNext[j] = i === void 0 ? -1 : i;
          newIndices.set(item, j);
        }
        for (i = start; i <= end; i++) {
          item = items[i];
          j = newIndices.get(item);
          if (j !== void 0 && j !== -1) {
            temp[j] = mapped[i];
            tempdisposers[j] = disposers[i];
            indexes && (tempIndexes[j] = indexes[i]);
            j = newIndicesNext[j];
            newIndices.set(item, j);
          } else disposers[i]();
        }
        for (j = start; j < newLen; j++) {
          if (j in temp) {
            mapped[j] = temp[j];
            disposers[j] = tempdisposers[j];
            if (indexes) {
              indexes[j] = tempIndexes[j];
              indexes[j](j);
            }
          } else mapped[j] = createRoot(mapper);
        }
        mapped = mapped.slice(0, len = newLen);
        items = newItems.slice(0);
      }
      return mapped;
    });
    function mapper(disposer) {
      disposers[j] = disposer;
      if (indexes) {
        const [s, set] = createSignal(j);
        indexes[j] = set;
        return mapFn(newItems[j], s);
      }
      return mapFn(newItems[j]);
    }
  };
}
function indexArray(list, mapFn, options = {}) {
  let items = [], mapped = [], disposers = [], signals = [], len = 0, i;
  onCleanup(() => dispose$1(disposers));
  return () => {
    const newItems = list() || [];
    newItems[$TRACK];
    return untrack(() => {
      if (newItems.length === 0) {
        if (len !== 0) {
          dispose$1(disposers);
          disposers = [];
          items = [];
          mapped = [];
          len = 0;
          signals = [];
        }
        if (options.fallback) {
          items = [FALLBACK$1];
          mapped[0] = createRoot((disposer) => {
            disposers[0] = disposer;
            return options.fallback();
          });
          len = 1;
        }
        return mapped;
      }
      if (items[0] === FALLBACK$1) {
        disposers[0]();
        disposers = [];
        items = [];
        mapped = [];
        len = 0;
      }
      for (i = 0; i < newItems.length; i++) {
        if (i < items.length && items[i] !== newItems[i]) {
          signals[i](() => newItems[i]);
        } else if (i >= items.length) {
          mapped[i] = createRoot(mapper);
        }
      }
      for (; i < items.length; i++) {
        disposers[i]();
      }
      len = signals.length = disposers.length = newItems.length;
      items = newItems.slice(0);
      return mapped = mapped.slice(0, len);
    });
    function mapper(disposer) {
      disposers[i] = disposer;
      const [s, set] = createSignal(newItems[i]);
      signals[i] = set;
      return mapFn(s, i);
    }
  };
}
let hydrationEnabled = false;
function createComponent(Comp, props) {
  if (hydrationEnabled) ;
  return untrack(() => Comp(props || {}));
}
function trueFn() {
  return true;
}
const propTraps = {
  get(_, property, receiver) {
    if (property === $PROXY) return receiver;
    return _.get(property);
  },
  has(_, property) {
    if (property === $PROXY) return true;
    return _.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor(_, property) {
    return {
      configurable: true,
      enumerable: true,
      get() {
        return _.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys(_) {
    return _.keys();
  }
};
function resolveSource(s) {
  return !(s = typeof s === "function" ? s() : s) ? {} : s;
}
function resolveSources() {
  for (let i = 0, length = this.length; i < length; ++i) {
    const v = this[i]();
    if (v !== void 0) return v;
  }
}
function mergeProps(...sources) {
  let proxy = false;
  for (let i = 0; i < sources.length; i++) {
    const s = sources[i];
    proxy = proxy || !!s && $PROXY in s;
    sources[i] = typeof s === "function" ? (proxy = true, createMemo(s)) : s;
  }
  if (proxy) {
    return new Proxy(
      {
        get(property) {
          for (let i = sources.length - 1; i >= 0; i--) {
            const v = resolveSource(sources[i])[property];
            if (v !== void 0) return v;
          }
        },
        has(property) {
          for (let i = sources.length - 1; i >= 0; i--) {
            if (property in resolveSource(sources[i])) return true;
          }
          return false;
        },
        keys() {
          const keys = [];
          for (let i = 0; i < sources.length; i++)
            keys.push(...Object.keys(resolveSource(sources[i])));
          return [...new Set(keys)];
        }
      },
      propTraps
    );
  }
  const sourcesMap = {};
  const defined = /* @__PURE__ */ Object.create(null);
  for (let i = sources.length - 1; i >= 0; i--) {
    const source = sources[i];
    if (!source) continue;
    const sourceKeys = Object.getOwnPropertyNames(source);
    for (let i2 = sourceKeys.length - 1; i2 >= 0; i2--) {
      const key = sourceKeys[i2];
      if (key === "__proto__" || key === "constructor") continue;
      const desc = Object.getOwnPropertyDescriptor(source, key);
      if (!defined[key]) {
        defined[key] = desc.get ? {
          enumerable: true,
          configurable: true,
          get: resolveSources.bind(sourcesMap[key] = [desc.get.bind(source)])
        } : desc.value !== void 0 ? desc : void 0;
      } else {
        const sources2 = sourcesMap[key];
        if (sources2) {
          if (desc.get) sources2.push(desc.get.bind(source));
          else if (desc.value !== void 0) sources2.push(() => desc.value);
        }
      }
    }
  }
  const target = {};
  const definedKeys = Object.keys(defined);
  for (let i = definedKeys.length - 1; i >= 0; i--) {
    const key = definedKeys[i], desc = defined[key];
    if (desc && desc.get) Object.defineProperty(target, key, desc);
    else target[key] = desc ? desc.value : void 0;
  }
  return target;
}
function splitProps(props, ...keys) {
  if ($PROXY in props) {
    const blocked = new Set(keys.length > 1 ? keys.flat() : keys[0]);
    const res = keys.map((k) => {
      return new Proxy(
        {
          get(property) {
            return k.includes(property) ? props[property] : void 0;
          },
          has(property) {
            return k.includes(property) && property in props;
          },
          keys() {
            return k.filter((property) => property in props);
          }
        },
        propTraps
      );
    });
    res.push(
      new Proxy(
        {
          get(property) {
            return blocked.has(property) ? void 0 : props[property];
          },
          has(property) {
            return blocked.has(property) ? false : property in props;
          },
          keys() {
            return Object.keys(props).filter((k) => !blocked.has(k));
          }
        },
        propTraps
      )
    );
    return res;
  }
  const otherObject = {};
  const objects = keys.map(() => ({}));
  for (const propName of Object.getOwnPropertyNames(props)) {
    const desc = Object.getOwnPropertyDescriptor(props, propName);
    const isDefaultDesc = !desc.get && !desc.set && desc.enumerable && desc.writable && desc.configurable;
    let blocked = false;
    let objectIndex = 0;
    for (const k of keys) {
      if (k.includes(propName)) {
        blocked = true;
        isDefaultDesc ? objects[objectIndex][propName] = desc.value : Object.defineProperty(objects[objectIndex], propName, desc);
      }
      ++objectIndex;
    }
    if (!blocked) {
      isDefaultDesc ? otherObject[propName] = desc.value : Object.defineProperty(otherObject, propName, desc);
    }
  }
  return [...objects, otherObject];
}
let counter = 0;
function createUniqueId() {
  return `cl-${counter++}`;
}
const narrowedError = (name) => `Stale read from <${name}>.`;
function For(props) {
  const fallback = "fallback" in props && {
    fallback: () => props.fallback
  };
  return createMemo(mapArray(() => props.each, props.children, fallback || void 0));
}
function Index(props) {
  const fallback = "fallback" in props && {
    fallback: () => props.fallback
  };
  return createMemo(indexArray(() => props.each, props.children, fallback || void 0));
}
function Show(props) {
  const keyed = props.keyed;
  const condition = createMemo(() => props.when, void 0, {
    equals: (a, b) => keyed ? a === b : !a === !b
  });
  return createMemo(
    () => {
      const c = condition();
      if (c) {
        const child = props.children;
        const fn = typeof child === "function" && child.length > 0;
        return fn ? untrack(
          () => child(
            keyed ? c : () => {
              if (!untrack(condition)) throw narrowedError("Show");
              return props.when;
            }
          )
        ) : child;
      }
      return props.fallback;
    },
    void 0,
    void 0
  );
}
function Switch(props) {
  let keyed = false;
  const equals = (a, b) => (keyed ? a[1] === b[1] : !a[1] === !b[1]) && a[2] === b[2];
  const conditions = children(() => props.children), evalConditions = createMemo(
    () => {
      let conds = conditions();
      if (!Array.isArray(conds)) conds = [conds];
      for (let i = 0; i < conds.length; i++) {
        const c = conds[i].when;
        if (c) {
          keyed = !!conds[i].keyed;
          return [i, c, conds[i]];
        }
      }
      return [-1];
    },
    void 0,
    {
      equals
    }
  );
  return createMemo(
    () => {
      const [index, when, cond] = evalConditions();
      if (index < 0) return props.fallback;
      const c = cond.children;
      const fn = typeof c === "function" && c.length > 0;
      return fn ? untrack(
        () => c(
          keyed ? when : () => {
            if (untrack(evalConditions)[0] !== index) throw narrowedError("Match");
            return cond.when;
          }
        )
      ) : c;
    },
    void 0,
    void 0
  );
}
function Match(props) {
  return props;
}
const booleans = [
  "allowfullscreen",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "disabled",
  "formnovalidate",
  "hidden",
  "indeterminate",
  "inert",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "seamless",
  "selected"
];
const Properties = /* @__PURE__ */ new Set([
  "className",
  "value",
  "readOnly",
  "formNoValidate",
  "isMap",
  "noModule",
  "playsInline",
  ...booleans
]);
const ChildProperties = /* @__PURE__ */ new Set([
  "innerHTML",
  "textContent",
  "innerText",
  "children"
]);
const Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  className: "class",
  htmlFor: "for"
});
const PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  class: "className",
  formnovalidate: {
    $: "formNoValidate",
    BUTTON: 1,
    INPUT: 1
  },
  ismap: {
    $: "isMap",
    IMG: 1
  },
  nomodule: {
    $: "noModule",
    SCRIPT: 1
  },
  playsinline: {
    $: "playsInline",
    VIDEO: 1
  },
  readonly: {
    $: "readOnly",
    INPUT: 1,
    TEXTAREA: 1
  }
});
function getPropAlias(prop, tagName) {
  const a = PropAliases[prop];
  return typeof a === "object" ? a[tagName] ? a["$"] : void 0 : a;
}
const DelegatedEvents = /* @__PURE__ */ new Set([
  "beforeinput",
  "click",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  "input",
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
]);
const SVGElements = /* @__PURE__ */ new Set([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animate",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "circle",
  "clipPath",
  "color-profile",
  "cursor",
  "defs",
  "desc",
  "ellipse",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "filter",
  "font",
  "font-face",
  "font-face-format",
  "font-face-name",
  "font-face-src",
  "font-face-uri",
  "foreignObject",
  "g",
  "glyph",
  "glyphRef",
  "hkern",
  "image",
  "line",
  "linearGradient",
  "marker",
  "mask",
  "metadata",
  "missing-glyph",
  "mpath",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "set",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "textPath",
  "tref",
  "tspan",
  "use",
  "view",
  "vkern"
]);
const SVGNamespace = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
};
function reconcileArrays(parentNode, a, b) {
  let bLength = b.length, aEnd = a.length, bEnd = bLength, aStart = 0, bStart = 0, after = a[aEnd - 1].nextSibling, map = null;
  while (aStart < aEnd || bStart < bEnd) {
    if (a[aStart] === b[bStart]) {
      aStart++;
      bStart++;
      continue;
    }
    while (a[aEnd - 1] === b[bEnd - 1]) {
      aEnd--;
      bEnd--;
    }
    if (aEnd === aStart) {
      const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
      while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);
    } else if (bEnd === bStart) {
      while (aStart < aEnd) {
        if (!map || !map.has(a[aStart])) a[aStart].remove();
        aStart++;
      }
    } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {
      const node = a[--aEnd].nextSibling;
      parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);
      parentNode.insertBefore(b[--bEnd], node);
      a[aEnd] = b[bEnd];
    } else {
      if (!map) {
        map = /* @__PURE__ */ new Map();
        let i = bStart;
        while (i < bEnd) map.set(b[i], i++);
      }
      const index = map.get(a[aStart]);
      if (index != null) {
        if (bStart < index && index < bEnd) {
          let i = aStart, sequence = 1, t;
          while (++i < aEnd && i < bEnd) {
            if ((t = map.get(a[i])) == null || t !== index + sequence) break;
            sequence++;
          }
          if (sequence > index - bStart) {
            const node = a[aStart];
            while (bStart < index) parentNode.insertBefore(b[bStart++], node);
          } else parentNode.replaceChild(b[bStart++], a[aStart++]);
        } else aStart++;
      } else a[aStart++].remove();
    }
  }
}
const $$EVENTS = "_$DX_DELEGATE";
function render(code, element, init, options = {}) {
  let disposer;
  createRoot((dispose2) => {
    disposer = dispose2;
    element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);
  }, options.owner);
  return () => {
    disposer();
    element.textContent = "";
  };
}
function template(html, isCE, isSVG) {
  let node;
  const create = () => {
    const t = document.createElement("template");
    t.innerHTML = html;
    return t.content.firstChild;
  };
  const fn = () => (node || (node = create())).cloneNode(true);
  fn.cloneNode = fn;
  return fn;
}
function delegateEvents(eventNames, document2 = window.document) {
  const e = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());
  for (let i = 0, l = eventNames.length; i < l; i++) {
    const name = eventNames[i];
    if (!e.has(name)) {
      e.add(name);
      document2.addEventListener(name, eventHandler);
    }
  }
}
function setAttribute(node, name, value) {
  if (value == null) node.removeAttribute(name);
  else node.setAttribute(name, value);
}
function setAttributeNS(node, namespace, name, value) {
  if (value == null) node.removeAttributeNS(namespace, name);
  else node.setAttributeNS(namespace, name, value);
}
function className(node, value) {
  if (value == null) node.removeAttribute("class");
  else node.className = value;
}
function addEventListener(node, name, handler, delegate) {
  if (delegate) {
    if (Array.isArray(handler)) {
      node[`$$${name}`] = handler[0];
      node[`$$${name}Data`] = handler[1];
    } else node[`$$${name}`] = handler;
  } else if (Array.isArray(handler)) {
    const handlerFn = handler[0];
    node.addEventListener(name, handler[0] = (e) => handlerFn.call(node, handler[1], e));
  } else node.addEventListener(name, handler);
}
function classList(node, value, prev = {}) {
  const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);
  let i, len;
  for (i = 0, len = prevKeys.length; i < len; i++) {
    const key = prevKeys[i];
    if (!key || key === "undefined" || value[key]) continue;
    toggleClassKey(node, key, false);
    delete prev[key];
  }
  for (i = 0, len = classKeys.length; i < len; i++) {
    const key = classKeys[i], classValue = !!value[key];
    if (!key || key === "undefined" || prev[key] === classValue || !classValue) continue;
    toggleClassKey(node, key, true);
    prev[key] = classValue;
  }
  return prev;
}
function style(node, value, prev) {
  if (!value) return prev ? setAttribute(node, "style") : value;
  const nodeStyle = node.style;
  if (typeof value === "string") return nodeStyle.cssText = value;
  typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
  prev || (prev = {});
  value || (value = {});
  let v, s;
  for (s in prev) {
    value[s] == null && nodeStyle.removeProperty(s);
    delete prev[s];
  }
  for (s in value) {
    v = value[s];
    if (v !== prev[s]) {
      nodeStyle.setProperty(s, v);
      prev[s] = v;
    }
  }
  return prev;
}
function spread(node, props = {}, isSVG, skipChildren) {
  const prevProps = {};
  if (!skipChildren) {
    createRenderEffect(
      () => prevProps.children = insertExpression(node, props.children, prevProps.children)
    );
  }
  createRenderEffect(
    () => typeof props.ref === "function" ? use(props.ref, node) : props.ref = node
  );
  createRenderEffect(() => assign(node, props, isSVG, true, prevProps, true));
  return prevProps;
}
function use(fn, element, arg) {
  return untrack(() => fn(element, arg));
}
function insert(parent, accessor, marker, initial) {
  if (marker !== void 0 && !initial) initial = [];
  if (typeof accessor !== "function") return insertExpression(parent, accessor, initial, marker);
  createRenderEffect((current) => insertExpression(parent, accessor(), current, marker), initial);
}
function assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {
  props || (props = {});
  for (const prop in prevProps) {
    if (!(prop in props)) {
      if (prop === "children") continue;
      prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);
    }
  }
  for (const prop in props) {
    if (prop === "children") {
      continue;
    }
    const value = props[prop];
    prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);
  }
}
function toPropertyName(name) {
  return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());
}
function toggleClassKey(node, key, value) {
  const classNames = key.trim().split(/\s+/);
  for (let i = 0, nameLen = classNames.length; i < nameLen; i++)
    node.classList.toggle(classNames[i], value);
}
function assignProp(node, prop, value, prev, isSVG, skipRef) {
  let isCE, isProp, isChildProp, propAlias, forceProp;
  if (prop === "style") return style(node, value, prev);
  if (prop === "classList") return classList(node, value, prev);
  if (value === prev) return prev;
  if (prop === "ref") {
    if (!skipRef) value(node);
  } else if (prop.slice(0, 3) === "on:") {
    const e = prop.slice(3);
    prev && node.removeEventListener(e, prev);
    value && node.addEventListener(e, value);
  } else if (prop.slice(0, 10) === "oncapture:") {
    const e = prop.slice(10);
    prev && node.removeEventListener(e, prev, true);
    value && node.addEventListener(e, value, true);
  } else if (prop.slice(0, 2) === "on") {
    const name = prop.slice(2).toLowerCase();
    const delegate = DelegatedEvents.has(name);
    if (!delegate && prev) {
      const h = Array.isArray(prev) ? prev[0] : prev;
      node.removeEventListener(name, h);
    }
    if (delegate || value) {
      addEventListener(node, name, value, delegate);
      delegate && delegateEvents([name]);
    }
  } else if (prop.slice(0, 5) === "attr:") {
    setAttribute(node, prop.slice(5), value);
  } else if ((forceProp = prop.slice(0, 5) === "prop:") || (isChildProp = ChildProperties.has(prop)) || !isSVG && ((propAlias = getPropAlias(prop, node.tagName)) || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes("-"))) {
    if (forceProp) {
      prop = prop.slice(5);
      isProp = true;
    }
    if (prop === "class" || prop === "className") className(node, value);
    else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;
    else node[propAlias || prop] = value;
  } else {
    const ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
    if (ns) setAttributeNS(node, ns, prop, value);
    else setAttribute(node, Aliases[prop] || prop, value);
  }
  return value;
}
function eventHandler(e) {
  const key = `$$${e.type}`;
  let node = e.composedPath && e.composedPath()[0] || e.target;
  if (e.target !== node) {
    Object.defineProperty(e, "target", {
      configurable: true,
      value: node
    });
  }
  Object.defineProperty(e, "currentTarget", {
    configurable: true,
    get() {
      return node || document;
    }
  });
  while (node) {
    const handler = node[key];
    if (handler && !node.disabled) {
      const data = node[`${key}Data`];
      data !== void 0 ? handler.call(node, data, e) : handler.call(node, e);
      if (e.cancelBubble) return;
    }
    node = node._$host || node.parentNode || node.host;
  }
}
function insertExpression(parent, value, current, marker, unwrapArray) {
  while (typeof current === "function") current = current();
  if (value === current) return current;
  const t = typeof value, multi = marker !== void 0;
  parent = multi && current[0] && current[0].parentNode || parent;
  if (t === "string" || t === "number") {
    if (t === "number") {
      value = value.toString();
      if (value === current) return current;
    }
    if (multi) {
      let node = current[0];
      if (node && node.nodeType === 3) {
        node.data !== value && (node.data = value);
      } else node = document.createTextNode(value);
      current = cleanChildren(parent, current, marker, node);
    } else {
      if (current !== "" && typeof current === "string") {
        current = parent.firstChild.data = value;
      } else current = parent.textContent = value;
    }
  } else if (value == null || t === "boolean") {
    current = cleanChildren(parent, current, marker);
  } else if (t === "function") {
    createRenderEffect(() => {
      let v = value();
      while (typeof v === "function") v = v();
      current = insertExpression(parent, v, current, marker);
    });
    return () => current;
  } else if (Array.isArray(value)) {
    const array = [];
    const currentArray = current && Array.isArray(current);
    if (normalizeIncomingArray(array, value, current, unwrapArray)) {
      createRenderEffect(() => current = insertExpression(parent, array, current, marker, true));
      return () => current;
    }
    if (array.length === 0) {
      current = cleanChildren(parent, current, marker);
      if (multi) return current;
    } else if (currentArray) {
      if (current.length === 0) {
        appendNodes(parent, array, marker);
      } else reconcileArrays(parent, current, array);
    } else {
      current && cleanChildren(parent);
      appendNodes(parent, array);
    }
    current = array;
  } else if (value.nodeType) {
    if (Array.isArray(current)) {
      if (multi) return current = cleanChildren(parent, current, marker, value);
      cleanChildren(parent, current, null, value);
    } else if (current == null || current === "" || !parent.firstChild) {
      parent.appendChild(value);
    } else parent.replaceChild(value, parent.firstChild);
    current = value;
  } else ;
  return current;
}
function normalizeIncomingArray(normalized, array, current, unwrap2) {
  let dynamic = false;
  for (let i = 0, len = array.length; i < len; i++) {
    let item = array[i], prev = current && current[normalized.length], t;
    if (item == null || item === true || item === false) ;
    else if ((t = typeof item) === "object" && item.nodeType) {
      normalized.push(item);
    } else if (Array.isArray(item)) {
      dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
    } else if (t === "function") {
      if (unwrap2) {
        while (typeof item === "function") item = item();
        dynamic = normalizeIncomingArray(
          normalized,
          Array.isArray(item) ? item : [item],
          Array.isArray(prev) ? prev : [prev]
        ) || dynamic;
      } else {
        normalized.push(item);
        dynamic = true;
      }
    } else {
      const value = String(item);
      if (prev && prev.nodeType === 3 && prev.data === value) normalized.push(prev);
      else normalized.push(document.createTextNode(value));
    }
  }
  return dynamic;
}
function appendNodes(parent, array, marker = null) {
  for (let i = 0, len = array.length; i < len; i++) parent.insertBefore(array[i], marker);
}
function cleanChildren(parent, current, marker, replacement) {
  if (marker === void 0) return parent.textContent = "";
  const node = replacement || document.createTextNode("");
  if (current.length) {
    let inserted = false;
    for (let i = current.length - 1; i >= 0; i--) {
      const el = current[i];
      if (node !== el) {
        const isParent = el.parentNode === parent;
        if (!inserted && !i)
          isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);
        else isParent && el.remove();
      } else inserted = true;
    }
  } else parent.insertBefore(node, marker);
  return [node];
}
const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
function createElement(tagName, isSVG = false) {
  return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
}
function Portal(props) {
  const { useShadow } = props, marker = document.createTextNode(""), mount = () => props.mount || document.body, owner = getOwner();
  let content;
  let hydrating = !!sharedConfig.context;
  createEffect(
    () => {
      content || (content = runWithOwner(owner, () => createMemo(() => props.children)));
      const el = mount();
      if (el instanceof HTMLHeadElement) {
        const [clean, setClean] = createSignal(false);
        const cleanup = () => setClean(true);
        createRoot((dispose2) => insert(el, () => !clean() ? content() : dispose2(), null));
        onCleanup(cleanup);
      } else {
        const container = createElement(props.isSVG ? "g" : "div", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({
          mode: "open"
        }) : container;
        Object.defineProperty(container, "_$host", {
          get() {
            return marker.parentNode;
          },
          configurable: true
        });
        insert(renderRoot, content);
        el.appendChild(container);
        props.ref && props.ref(container);
        onCleanup(() => el.removeChild(container));
      }
    },
    void 0,
    {
      render: !hydrating
    }
  );
  return marker;
}
function Dynamic(props) {
  const [p, others] = splitProps(props, ["component"]);
  const cached = createMemo(() => p.component);
  return createMemo(() => {
    const component = cached();
    switch (typeof component) {
      case "function":
        return untrack(() => component(others));
      case "string":
        const isSvg = SVGElements.has(component);
        const el = createElement(component, isSvg);
        spread(el, others, isSvg);
        return el;
    }
  });
}
const $RAW = Symbol("store-raw"), $NODE = Symbol("store-node"), $HAS = Symbol("store-has"), $SELF = Symbol("store-self");
function wrap$1(value) {
  let p = value[$PROXY];
  if (!p) {
    Object.defineProperty(value, $PROXY, {
      value: p = new Proxy(value, proxyTraps$1)
    });
    if (!Array.isArray(value)) {
      const keys = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);
      for (let i = 0, l = keys.length; i < l; i++) {
        const prop = keys[i];
        if (desc[prop].get) {
          Object.defineProperty(value, prop, {
            enumerable: desc[prop].enumerable,
            get: desc[prop].get.bind(p)
          });
        }
      }
    }
  }
  return p;
}
function isWrappable(obj) {
  let proto;
  return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
}
function unwrap(item, set = /* @__PURE__ */ new Set()) {
  let result, unwrapped, v, prop;
  if (result = item != null && item[$RAW]) return result;
  if (!isWrappable(item) || set.has(item)) return item;
  if (Array.isArray(item)) {
    if (Object.isFrozen(item)) item = item.slice(0);
    else set.add(item);
    for (let i = 0, l = item.length; i < l; i++) {
      v = item[i];
      if ((unwrapped = unwrap(v, set)) !== v) item[i] = unwrapped;
    }
  } else {
    if (Object.isFrozen(item)) item = Object.assign({}, item);
    else set.add(item);
    const keys = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);
    for (let i = 0, l = keys.length; i < l; i++) {
      prop = keys[i];
      if (desc[prop].get) continue;
      v = item[prop];
      if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;
    }
  }
  return item;
}
function getNodes(target, symbol) {
  let nodes = target[symbol];
  if (!nodes)
    Object.defineProperty(target, symbol, {
      value: nodes = /* @__PURE__ */ Object.create(null)
    });
  return nodes;
}
function getNode(nodes, property, value) {
  if (nodes[property]) return nodes[property];
  const [s, set] = createSignal(value, {
    equals: false,
    internal: true
  });
  s.$ = set;
  return nodes[property] = s;
}
function proxyDescriptor$1(target, property) {
  const desc = Reflect.getOwnPropertyDescriptor(target, property);
  if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE)
    return desc;
  delete desc.value;
  delete desc.writable;
  desc.get = () => target[$PROXY][property];
  return desc;
}
function trackSelf(target) {
  getListener() && getNode(getNodes(target, $NODE), $SELF)();
}
function ownKeys(target) {
  trackSelf(target);
  return Reflect.ownKeys(target);
}
const proxyTraps$1 = {
  get(target, property, receiver) {
    if (property === $RAW) return target;
    if (property === $PROXY) return receiver;
    if (property === $TRACK) {
      trackSelf(target);
      return receiver;
    }
    const nodes = getNodes(target, $NODE);
    const tracked = nodes[property];
    let value = tracked ? tracked() : target[property];
    if (property === $NODE || property === $HAS || property === "__proto__") return value;
    if (!tracked) {
      const desc = Object.getOwnPropertyDescriptor(target, property);
      if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get))
        value = getNode(nodes, property, value)();
    }
    return isWrappable(value) ? wrap$1(value) : value;
  },
  has(target, property) {
    if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === $HAS || property === "__proto__")
      return true;
    getListener() && getNode(getNodes(target, $HAS), property)();
    return property in target;
  },
  set() {
    return true;
  },
  deleteProperty() {
    return true;
  },
  ownKeys,
  getOwnPropertyDescriptor: proxyDescriptor$1
};
function setProperty(state, property, value, deleting = false) {
  if (!deleting && state[property] === value) return;
  const prev = state[property], len = state.length;
  if (value === void 0) {
    delete state[property];
    if (state[$HAS] && state[$HAS][property] && prev !== void 0) state[$HAS][property].$();
  } else {
    state[property] = value;
    if (state[$HAS] && state[$HAS][property] && prev === void 0) state[$HAS][property].$();
  }
  let nodes = getNodes(state, $NODE), node;
  if (node = getNode(nodes, property, prev)) node.$(() => value);
  if (Array.isArray(state) && state.length !== len) {
    for (let i = state.length; i < len; i++) (node = nodes[i]) && node.$();
    (node = getNode(nodes, "length", len)) && node.$(state.length);
  }
  (node = nodes[$SELF]) && node.$();
}
function mergeStoreNode(state, value) {
  const keys = Object.keys(value);
  for (let i = 0; i < keys.length; i += 1) {
    const key = keys[i];
    setProperty(state, key, value[key]);
  }
}
function updateArray(current, next) {
  if (typeof next === "function") next = next(current);
  next = unwrap(next);
  if (Array.isArray(next)) {
    if (current === next) return;
    let i = 0, len = next.length;
    for (; i < len; i++) {
      const value = next[i];
      if (current[i] !== value) setProperty(current, i, value);
    }
    setProperty(current, "length", len);
  } else mergeStoreNode(current, next);
}
function updatePath(current, path, traversed = []) {
  let part, prev = current;
  if (path.length > 1) {
    part = path.shift();
    const partType = typeof part, isArray = Array.isArray(current);
    if (Array.isArray(part)) {
      for (let i = 0; i < part.length; i++) {
        updatePath(current, [part[i]].concat(path), traversed);
      }
      return;
    } else if (isArray && partType === "function") {
      for (let i = 0; i < current.length; i++) {
        if (part(current[i], i)) updatePath(current, [i].concat(path), traversed);
      }
      return;
    } else if (isArray && partType === "object") {
      const { from = 0, to = current.length - 1, by = 1 } = part;
      for (let i = from; i <= to; i += by) {
        updatePath(current, [i].concat(path), traversed);
      }
      return;
    } else if (path.length > 1) {
      updatePath(current[part], path, [part].concat(traversed));
      return;
    }
    prev = current[part];
    traversed = [part].concat(traversed);
  }
  let value = path[0];
  if (typeof value === "function") {
    value = value(prev, traversed);
    if (value === prev) return;
  }
  if (part === void 0 && value == void 0) return;
  value = unwrap(value);
  if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
    mergeStoreNode(prev, value);
  } else setProperty(current, part, value);
}
function createStore(...[store, options]) {
  const unwrappedStore = unwrap(store || {});
  const isArray = Array.isArray(unwrappedStore);
  const wrappedStore = wrap$1(unwrappedStore);
  function setStore(...args) {
    batch(() => {
      isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
    });
  }
  return [wrappedStore, setStore];
}
const COMPLEX_PROPERTY_PLACEHOLDER = "file.complex-property";
const defaultQueryResult = {
  successful: true,
  value: {
    headers: [""],
    values: [[null]],
    type: "table"
  },
  truePropertyNames: []
};
const NO_MATCH_FOUND = "No match found";
const toNumber = (v, defaultNumber, min2, max2, validator) => {
  const num = Number(v);
  if (Number.isNaN(num)) return 0;
  return num;
};
const checkIfDateHasTime = (dt) => {
  const isTime = dt.hour !== 0 || dt.minute !== 0 || dt.second !== 0;
  return isTime;
};
const getValueType = (value, property, luxon) => {
  const t = typeof value;
  if (t === "string") return "text";
  if (t === "number") return "number";
  if (t === "boolean") return "checkbox";
  if (t === "object") {
    if (Array.isArray(value)) {
      return property === "tags" ? "tags" : "multitext";
    }
    if (luxon.DateTime.isDateTime(value)) {
      const dt = value;
      const isTime = checkIfDateHasTime(dt);
      return isTime ? "datetime" : "date";
    }
    return "text";
  }
  throw new Error("Failed to get property value type");
};
const getPropertyTypes = (properties, metadataCache) => {
  const infos = metadataCache.getAllPropertyInfos();
  return properties.map((p) => {
    if (!infos[p]) return "unknown";
    return infos[p].type;
  });
};
const registerDataviewEvents = (plugin, callback) => {
  plugin.app.metadataCache.on("dataview:index-ready", callback);
  plugin.app.metadataCache.on(
    "dataview:metadata-change",
    callback
  );
};
const unregisterDataviewEvents = (plugin, callback) => {
  plugin.app.metadataCache.off("dataview:index-ready", callback);
  plugin.app.metadataCache.off(
    "dataview:metadata-change",
    callback
  );
};
const getIdColumnIndex = (headers, tableIdColumnName) => {
  const i = headers.findIndex(
    (h) => h.toLowerCase() === tableIdColumnName.toLowerCase() || h === "file.link"
  );
  if (i === -1) {
    throw new Error("Couldn't fine ID column index");
  }
  return i;
};
const checkIfDataviewLink = (val) => {
  if (!val) return false;
  if (typeof val !== "object") return false;
  if (!val.hasOwnProperty("type")) return false;
  if (val.type !== "file") return false;
  return true;
};
const tryDataviewLinkToMarkdown = (val) => {
  if (!checkIfDataviewLink(val)) return val;
  return val.markdown();
};
const tryDataviewArrayToArray = (val) => {
  if (typeof val !== "object") return val;
  if (!(val == null ? void 0 : val.hasOwnProperty("array"))) return val;
  return { ...val }.array();
};
const getColumnPropertyNames = (source) => {
  const line = source.split("\n")[0];
  const isWithoutId = line.toLowerCase().includes("without id");
  const cols = source.split("\n")[0].substring(isWithoutId ? 17 : 6).split(",").map((c) => {
    const str = c.trim();
    const potential = str.split(/\sAS\s/gim)[0].trim();
    const invalidChars = [
      "(",
      ")",
      "[",
      "]",
      "{",
      "}",
      "+",
      // "-", dashes are pretty common in property names
      "*",
      "/",
      "%",
      "<",
      ">",
      "!",
      "=",
      '"'
    ];
    const isComplex = !Number.isNaN(Number(potential)) || //prettier-ignore
    potential.split("").some((char) => invalidChars.includes(char));
    if (isComplex) {
      return COMPLEX_PROPERTY_PLACEHOLDER;
    }
    return potential;
  });
  if (isWithoutId) return cols;
  return ["File", ...cols];
};
const updateMetadataProperty = async (property, value, filePath, plugin, previousValue, itemIndex) => {
  const {
    app: { fileManager, vault }
  } = plugin;
  const file = vault.getFileByPath(filePath);
  if (!file) {
    throw new Error(
      "Tried updating frontmatter property but couldn't find file"
    );
  }
  let fmUpdated = false;
  await fileManager.processFrontMatter(file, (fm) => {
    if (!fm.hasOwnProperty(property)) {
      if (property.includes(".")) {
        assignDotPropertyValue(fm, property, value);
        return fmUpdated = true;
      }
      return;
    }
    fm[property] = value;
    return fmUpdated = true;
  });
  if (fmUpdated) return;
  const inlineUpdated = await tryUpdateInlineProperty(
    property,
    value,
    previousValue,
    file,
    vault,
    itemIndex
  );
  if (inlineUpdated) return;
  await fileManager.processFrontMatter(file, (fm) => {
    fm[property] = value;
  });
};
const assignDotPropertyValue = (obj, property, value) => {
  const keys = property.split(".");
  let current = obj;
  keys.forEach((key, index) => {
    if (index === keys.length - 1) {
      current[key] = value;
    } else {
      if (!current[key] || typeof current[key] !== "object") {
        current[key] = {};
      }
      current = current[key];
    }
  });
};
const parseLinesForInlineFields = (lines) => {
  const reg = new RegExp(/[\[\(]?([^\n\r\(\[]*)::[ ]*([^\)\]\n\r]*)[\]\)]?/gm);
  return lines.reduce((prev, curr, index) => {
    let matches = reg.exec(curr ?? "");
    if (!matches) {
      return prev;
    }
    const key = matches[1].trim();
    const oldVal = matches[2].trim();
    return [
      ...prev,
      {
        key,
        value: oldVal,
        line: index,
        match: matches[0]
      }
    ];
  }, []);
};
const tryUpdateInlineProperty = async (property, value, previousValue, file, vault, itemIndex) => {
  var _a;
  const content = await vault.read(file);
  const lines = content.split("\n");
  const yaml = [];
  if (lines[0] === "---") {
    const lastYamlDashesIndex = lines.findIndex(
      (l, i) => l === "---" && i !== 0
    );
    if (lastYamlDashesIndex !== -1 && lines[lastYamlDashesIndex + 1] !== void 0) {
      for (let j = 0; j < lastYamlDashesIndex + 1; j++) {
        yaml.push(lines[j]);
        lines[j] = null;
      }
    }
  }
  const parsedFields = parseLinesForInlineFields(lines);
  const foundInline = parsedFields.find(
    (f) => f.value === (previousValue == null ? void 0 : previousValue.toString())
  );
  if (!foundInline) {
    const isNameMatchedInline = parsedFields.some((f) => f.key === property);
    if (isNameMatchedInline) {
      new obsidian.Notice(
        "Inline fields found for property, so you can't use the plus button"
      );
      return true;
    }
    return false;
  }
  const newValue = Array.isArray(value) ? value[itemIndex ?? 0] : value;
  lines[foundInline.line] = ((_a = lines[foundInline.line]) == null ? void 0 : _a.replace(
    // TODO I don't think space after colons is required
    property + ":: " + foundInline.value,
    property + ":: " + (newValue ?? "").toString()
  )) ?? null;
  let finalContent = "";
  for (let m = 0; m < lines.length; m++) {
    const v = lines[m];
    if (v === null) continue;
    finalContent += "\n" + v;
  }
  await vault.modify(file, yaml.join("\n") + finalContent);
  return true;
};
const getExistingProperties = (app2) => {
  const { metadataCache } = app2;
  return metadataCache.getAllPropertyInfos();
};
const getTableLine = (codeBlockText) => {
  const lines = codeBlockText.split("\n");
  let index = 0;
  for (index; index < lines.length; index++) {
    const line = lines[index];
    if (!line.toLowerCase().startsWith("table")) continue;
    return {
      line,
      index
    };
  }
  throw new Error(
    "Unable to find table line from codeBlockText. This should be impossible."
  );
};
const defaultDataEditBlockConfig = {
  lockEditing: false,
  headerIcons: true,
  newNoteTemplatePath: "",
  tableClassName: ""
};
const splitQueryOnConfig = (codeBlockText) => {
  const [query, configStr] = codeBlockText.split(/\n^---$\n/gim);
  try {
    const config = obsidian.parseYaml(configStr);
    if (typeof config !== "object") throw new Error();
    return {
      query,
      config: {
        ...defaultDataEditBlockConfig,
        ...config
      }
    };
  } catch (e) {
    return { query, config: defaultDataEditBlockConfig };
  }
};
class ScrollFixer {
  constructor(el) {
    const scroller = el.closest(".cm-scroller");
    if (!scroller) {
      throw new Error("Could not find scroller");
    }
    this.scroller = scroller;
    this.prevScroll = scroller.scrollTop;
  }
  /**
   * Restores scroll position back to the previously recorded position.
   */
  fix() {
    setTimeout(() => {
      this.scroller.scrollTo({ top: this.prevScroll, behavior: "instant" });
    });
  }
}
const updateBlockConfig = (key, value, codeBlockInfo) => {
  var _a;
  const {
    config,
    ctx,
    el,
    plugin: {
      app: { workspace }
    },
    query: preQuery,
    hideFileCol
  } = codeBlockInfo;
  const newConfig = { ...config, [key]: value };
  const newConfigStr = obsidian.stringifyYaml(newConfig);
  const { lineStart, lineEnd } = ctx.getSectionInfo(el);
  const query = hideFileCol ? preQuery.slice(0, -11) : preQuery;
  const newCodeBlockText = "```dataedit\n" + query + "\n---\n" + newConfigStr + "```";
  const editor = (_a = workspace.activeEditor) == null ? void 0 : _a.editor;
  if (!editor) {
    return;
  }
  const scrollFixer = new ScrollFixer(el);
  editor.replaceRange(
    newCodeBlockText,
    { line: lineStart, ch: 0 },
    { line: lineEnd, ch: NaN }
  );
  scrollFixer.fix();
};
const setBlockConfig = (config, codeBlockInfo) => {
  var _a;
  const {
    ctx,
    el,
    plugin: {
      app: { workspace }
    },
    query: preQuery,
    hideFileCol
  } = codeBlockInfo;
  const newConfigStr = obsidian.stringifyYaml(config);
  const { lineStart, lineEnd } = ctx.getSectionInfo(el);
  const query = hideFileCol ? preQuery.slice(0, -11) : preQuery;
  const newCodeBlockText = "```dataedit\n" + query + "\n---\n" + newConfigStr + "```";
  const editor = (_a = workspace.activeEditor) == null ? void 0 : _a.editor;
  if (!editor) {
    return;
  }
  const scrollFixer = new ScrollFixer(el);
  editor.replaceRange(
    newCodeBlockText,
    { line: lineStart, ch: 0 },
    { line: lineEnd, ch: NaN }
  );
  scrollFixer.fix();
};
const getTemplateFiles = (app2) => {
  const folderPath = (
    // @ts-expect-error
    app2.internalPlugins.plugins.templates.instance.options.folder
  );
  if (!folderPath) return;
  const folder = app2.vault.getFolderByPath(folderPath);
  if (!folder) return;
  if (!folder.children.length) return;
  return folder.children.filter((t) => t instanceof obsidian.TFile);
};
const ensureFileLinkColumn = (source) => {
  if (!source.toLowerCase().startsWith("table without id"))
    return { source, hide: false };
  const lines = source.split("\n");
  if (lines[0].includes("file.link")) return { source, hide: false };
  lines[0] += ", file.link";
  return { source: lines.join("\n"), hide: true };
};
/**
* @license lucide-solid v0.412.0 - ISC
*
* This source code is licensed under the ISC license.
* See the LICENSE file in the root directory of this source tree.
*/
var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
var defaultAttributes_default = defaultAttributes;
var _tmpl$$h = /* @__PURE__ */ template(`<svg>`);
var toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
var mergeClasses = (...classes) => classes.filter((className2, index, array) => {
  return Boolean(className2) && array.indexOf(className2) === index;
}).join(" ");
var Icon = (props) => {
  const [localProps, rest] = splitProps(props, ["color", "size", "strokeWidth", "children", "class", "name", "iconNode", "absoluteStrokeWidth"]);
  return (() => {
    var _el$ = _tmpl$$h();
    spread(_el$, mergeProps(defaultAttributes_default, {
      get width() {
        return localProps.size ?? defaultAttributes_default.width;
      },
      get height() {
        return localProps.size ?? defaultAttributes_default.height;
      },
      get stroke() {
        return localProps.color ?? defaultAttributes_default.stroke;
      },
      get ["stroke-width"]() {
        return createMemo(() => !!localProps.absoluteStrokeWidth)() ? Number(localProps.strokeWidth ?? defaultAttributes_default["stroke-width"]) * 24 / Number(localProps.size) : Number(localProps.strokeWidth ?? defaultAttributes_default["stroke-width"]);
      },
      get ["class"]() {
        return mergeClasses("lucide", "lucide-icon", localProps.name != null ? `lucide-${toKebabCase(localProps == null ? void 0 : localProps.name)}` : void 0, localProps.class != null ? localProps.class : "");
      }
    }, rest), true, true);
    insert(_el$, createComponent(For, {
      get each() {
        return localProps.iconNode;
      },
      children: ([elementName, attrs]) => {
        return createComponent(Dynamic, mergeProps({
          component: elementName
        }, attrs));
      }
    }));
    return _el$;
  })();
};
var Icon_default = Icon;
var iconNode$g = [["rect", {
  width: "18",
  height: "11",
  x: "3",
  y: "11",
  rx: "2",
  ry: "2",
  key: "1w4ew1"
}], ["path", {
  d: "M7 11V7a5 5 0 0 1 10 0v4",
  key: "fwvmzm"
}]];
var Lock = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Lock",
  iconNode: iconNode$g
}));
var lock_default = Lock;
var iconNode$f = [["rect", {
  width: "18",
  height: "11",
  x: "3",
  y: "11",
  rx: "2",
  ry: "2",
  key: "1w4ew1"
}], ["path", {
  d: "M7 11V7a5 5 0 0 1 9.9-1",
  key: "1mm8w8"
}]];
var LockOpen = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "LockOpen",
  iconNode: iconNode$f
}));
var lock_open_default = LockOpen;
var iconNode$e = [["path", {
  d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
  key: "1qme2f"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3",
  key: "1v7zrd"
}]];
var Settings = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Settings",
  iconNode: iconNode$e
}));
var settings_default = Settings;
const CLASS_PART_SEPARATOR = "-";
function createClassGroupUtils(config) {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  function getClassGroupId(className2) {
    const classParts = className2.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className2);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _a;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a = classPartObject.validators.find(({
    validator
  }) => validator(classRest))) == null ? void 0 : _a.classGroupId;
}
const arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className2) {
  if (arbitraryPropertyRegex.test(className2)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className2)[1];
    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config) {
  const {
    theme,
    prefix
  } = config;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path) {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map((classDefinition) => {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache2 = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  function update(key, value) {
    cache2.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache2;
      cache2 = /* @__PURE__ */ new Map();
    }
  }
  return {
    get(key) {
      let value = cache2.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache2.has(key)) {
        cache2.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}
const IMPORTANT_MODIFIER = "!";
function createParseClassName(config) {
  const {
    separator,
    experimentalParseClassName
  } = config;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  function parseClassName(className2) {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index = 0; index < className2.length; index++) {
      let currentCharacter = className2[index];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className2.slice(index, index + separatorLength) === separator)) {
          modifiers.push(className2.slice(modifierStart, index));
          modifierStart = index + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className2 : className2.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  }
  if (experimentalParseClassName) {
    return function parseClassNameExperimental(className2) {
      return experimentalParseClassName({
        className: className2,
        parseClassName
      });
    };
  }
  return parseClassName;
}
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach((modifier) => {
    const isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
}
function createConfigUtils(config) {
  return {
    cache: createLruCache(config.cacheSize),
    parseClassName: createParseClassName(config),
    ...createClassGroupUtils(config)
  };
}
const SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList2, configUtils) {
  const {
    parseClassName,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  const classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList2.trim().split(SPLIT_CLASSES_REGEX).map((originalClassName) => {
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = parseClassName(originalClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    if (!classGroupId) {
      if (!hasPostfixModifier) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter((parsed) => {
    if (!parsed.isTailwindClass) {
      return true;
    }
    const {
      modifierId,
      classGroupId,
      hasPostfixModifier
    } = parsed;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach((group) => classGroupsInConflict.add(modifierId + group));
    return true;
  }).reverse().map((parsed) => parsed.originalClassName).join(" ");
}
function twJoin() {
  let index = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index < arguments.length) {
    if (argument = arguments[index++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue(mix[k])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList2) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList2);
  }
  function tailwindMerge(classList2) {
    const cachedResult = cacheGet(classList2);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList2, configUtils);
    cacheSet(classList2, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
function fromTheme(key) {
  const themeGetter = (theme) => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
const fractionRegex = /^\d+\/\d+$/;
const stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
function isLength(value) {
  return isNumber$1(value) || stringLengths.has(value) || fractionRegex.test(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isNumber$1(value) {
  return Boolean(value) && !Number.isNaN(Number(value));
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber$1);
}
function isInteger(value) {
  return Boolean(value) && Number.isInteger(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber$1(value.slice(0, -1));
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
const sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, sizeLabels, isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
const imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
function isArbitraryImage(value) {
  return getIsArbitraryValue(value, imageLabels, isImage);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function isAny() {
  return true;
}
function getIsArbitraryValue(value, label, testValue) {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === "string" ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
}
function isNever() {
  return false;
}
function isShadow(value) {
  return shadowRegex.test(value);
}
function isImage(value) {
  return imageRegex.test(value);
}
function getDefaultConfig() {
  const colors = fromTheme("colors");
  const spacing = fromTheme("spacing");
  const blur = fromTheme("blur");
  const brightness = fromTheme("brightness");
  const borderColor = fromTheme("borderColor");
  const borderRadius = fromTheme("borderRadius");
  const borderSpacing = fromTheme("borderSpacing");
  const borderWidth = fromTheme("borderWidth");
  const contrast = fromTheme("contrast");
  const grayscale = fromTheme("grayscale");
  const hueRotate = fromTheme("hueRotate");
  const invert = fromTheme("invert");
  const gap = fromTheme("gap");
  const gradientColorStops = fromTheme("gradientColorStops");
  const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  const inset = fromTheme("inset");
  const margin = fromTheme("margin");
  const opacity = fromTheme("opacity");
  const padding = fromTheme("padding");
  const saturate = fromTheme("saturate");
  const scale = fromTheme("scale");
  const sepia = fromTheme("sepia");
  const skew = fromTheme("skew");
  const space = fromTheme("space");
  const translate = fromTheme("translate");
  const getOverscroll = () => ["auto", "contain", "none"];
  const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ["auto", isNumber$1, isArbitraryValue];
  const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
  const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
  const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
  const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const getNumber = () => [isNumber$1, isArbitraryNumber];
  const getNumberAndArbitrary = () => [isNumber$1, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...getAlign(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...getAlign(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber$1, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...getLineStyles(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...getLineStyles(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}
const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
var _tmpl$$g = /* @__PURE__ */ template(`<div>`);
const Markdown = (props) => {
  let ref;
  const [localProps, divProps] = splitProps(props, ["app", "markdown", "sourcePath", "class"]);
  const md = createMemo(() => {
    const str = localProps.markdown ?? "&nbsp;";
    if (Array.isArray(str)) return str.join(", ");
    if (str === "" || typeof str === "object") return "&nbsp;";
    return str.toString();
  });
  const component = new obsidian.Component();
  createEffect(() => {
    ref.empty();
    obsidian.MarkdownRenderer.render(localProps.app, md(), ref, localProps.sourcePath, component);
  });
  return (() => {
    var _el$ = _tmpl$$g();
    use((r2) => ref = r2, _el$);
    spread(_el$, mergeProps(divProps, {
      get ["class"]() {
        return twMerge("w-fit [&>p]:m-0", localProps.class);
      }
    }), false, false);
    return _el$;
  })();
};
const CodeBlockContext = createContext({
  plugin: {},
  el: {},
  source: "",
  query: "",
  config: {},
  ctx: {},
  dataviewAPI: {},
  hideFileCol: false
});
const useCodeBlock = () => useContext(CodeBlockContext);
var _tmpl$$f = /* @__PURE__ */ template(`<input class=""type=checkbox>`);
const CheckboxInput = (props) => {
  const {
    plugin,
    config
  } = useCodeBlock();
  return (() => {
    var _el$ = _tmpl$$f();
    _el$.$$click = async (e) => {
      await updateMetadataProperty(props.property, e.currentTarget.checked, props.filePath, plugin, props.value);
    };
    createRenderEffect(() => _el$.disabled = config.lockEditing);
    createRenderEffect(() => _el$.checked = !!props.value);
    return _el$;
  })();
};
delegateEvents(["click"]);
var autofocus = (element, autofocus2) => {
  if ((autofocus2 == null ? void 0 : autofocus2()) === false) {
    return;
  }
  onMount(() => {
    if (element.hasAttribute("autofocus"))
      setTimeout(() => element.focus());
  });
};
var _tmpl$$e = /* @__PURE__ */ template(`<input autofocus class="">`);
const DateDatetimeInput = (props) => {
  const {
    plugin,
    dataviewAPI: {
      luxon: {
        DateTime: DateTime2
      }
    }
  } = useCodeBlock();
  const isTime = createMemo(() => {
    return checkIfDateHasTime(props.value);
  });
  return (() => {
    var _el$ = _tmpl$$e();
    _el$.addEventListener("blur", async (e) => {
      const isValid = e.target.validity;
      if (!isValid) return props.setEditing(false);
      const format = isTime() ? "yyyy-MM-dd'T'hh:mm" : "yyyy-MM-dd";
      const dt = DateTime2.fromFormat(e.target.value, format);
      const newValue = dt.toFormat(format);
      const formattedOld = props.value.toFormat(format);
      await updateMetadataProperty(props.property, newValue, props.filePath, plugin, formattedOld);
      props.setEditing(false);
    });
    use(autofocus, _el$, () => true);
    createRenderEffect(() => setAttribute(_el$, "type", isTime() ? "datetime-local" : "date"));
    createRenderEffect(() => _el$.value = isTime() ? props.value.toFormat("yyyy-MM-dd'T'hh:mm") : props.value.toFormat("yyyy-MM-dd"));
    return _el$;
  })();
};
var iconNode$d = [["path", {
  d: "M5 12h14",
  key: "1ays0h"
}], ["path", {
  d: "M12 5v14",
  key: "s699le"
}]];
var Plus = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Plus",
  iconNode: iconNode$d
}));
var plus_default = Plus;
var _tmpl$$d = /* @__PURE__ */ template(`<input autofocus class="h-auto rounded-none border-none bg-transparent p-0 !shadow-none"type=text>`);
const TextInput = (props) => {
  var _a;
  const [size2, setSize] = createSignal(((_a = props.value) == null ? void 0 : _a.toString().length) ?? 5);
  const {
    plugin
  } = useCodeBlock();
  return (() => {
    var _el$ = _tmpl$$d();
    _el$.$$input = (e) => {
      setSize(e.target.value.length);
    };
    _el$.addEventListener("blur", async (e) => {
      if (props.updateProperty) {
        await props.updateProperty(e.target.value);
      } else {
        await updateMetadataProperty(props.property, e.target.value, props.filePath, plugin, props.value);
      }
      props.setEditing(false);
    });
    use(autofocus, _el$, () => true);
    createRenderEffect(() => setAttribute(_el$, "size", size2()));
    createRenderEffect(() => {
      var _a2;
      return _el$.value = ((_a2 = props.value) == null ? void 0 : _a2.toString()) ?? "";
    });
    return _el$;
  })();
};
delegateEvents(["input"]);
var _tmpl$$c = /* @__PURE__ */ template(`<ul class="m-0 flex flex-col gap-1 p-0 [&amp;>li]:list-disc"><button class="clickable-icon size-fit p-1">`), _tmpl$2$a = /* @__PURE__ */ template(`<li class="m-0 ml-3">`);
const ListTableDataWrapper = (props) => {
  const {
    plugin,
    ctx,
    config
  } = useCodeBlock();
  return (() => {
    var _el$ = _tmpl$$c(), _el$2 = _el$.firstChild;
    insert(_el$, createComponent(For, {
      get each() {
        return props.value;
      },
      children: (val, index) => createComponent(ListTableDataItem, mergeProps(props, {
        plugin,
        ctx,
        itemValue: val,
        get itemIndex() {
          return index();
        },
        config
      }))
    }), _el$2);
    _el$2.$$click = async (e) => {
      e.preventDefault();
      await updateMetadataProperty(props.property, [...props.value, ""], props.filePath, plugin, props.value);
    };
    insert(_el$2, createComponent(plus_default, {
      "class": "pointer-events-none size-3"
    }));
    createRenderEffect(() => _el$2.disabled = config.lockEditing);
    return _el$;
  })();
};
const ListTableDataItem = (props) => {
  const [isEditing, setEditing] = createSignal(false);
  return (() => {
    var _el$3 = _tmpl$2$a();
    insert(_el$3, createComponent(Show, {
      get when() {
        return createMemo(() => !!!props.config.lockEditing)() && isEditing();
      },
      get fallback() {
        return createComponent(Markdown, {
          "class": "size-full",
          get app() {
            return props.plugin.app;
          },
          get markdown() {
            return tryDataviewLinkToMarkdown(props.itemValue);
          },
          get sourcePath() {
            return props.ctx.sourcePath;
          },
          get onClick() {
            return props.config.lockEditing ? void 0 : () => setEditing(true);
          }
        });
      },
      get children() {
        return createComponent(ListInput, mergeProps(props, {
          setEditing
        }));
      }
    }));
    return _el$3;
  })();
};
const ListInput = (props) => {
  return createComponent(TextInput, mergeProps(props, {
    get value() {
      return props.itemValue;
    },
    valueType: "list",
    updateProperty: async (newVal) => {
      const value = [...props.value];
      if (!newVal && newVal !== 0) {
        const arr = value.filter((_, i) => i !== props.itemIndex);
        await updateMetadataProperty(props.property, arr, props.filePath, props.plugin, props.itemValue, props.itemIndex);
        return;
      }
      value[props.itemIndex] = newVal;
      await updateMetadataProperty(props.property, value, props.filePath, props.plugin, props.itemValue, props.itemIndex);
    }
  }));
};
delegateEvents(["click"]);
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
const cn = (...classLists) => twMerge(clsx(classLists));
function chain(callbacks) {
  return (...args) => {
    for (const callback of callbacks)
      callback && callback(...args);
  };
}
var access$1 = (v) => typeof v === "function" && !v.length ? v() : v;
var asArray = (value) => Array.isArray(value) ? value : value ? [value] : [];
function accessWith(valueOrFn, ...args) {
  return typeof valueOrFn === "function" ? valueOrFn(...args) : valueOrFn;
}
var tryOnCleanup = onCleanup;
function makeEventListener(target, type, handler, options) {
  target.addEventListener(type, handler, options);
  return tryOnCleanup(target.removeEventListener.bind(target, type, handler, options));
}
function createEventListener(targets, type, handler, options) {
  const attachListeners = () => {
    asArray(access$1(targets)).forEach((el) => {
      if (el)
        asArray(access$1(type)).forEach((type2) => makeEventListener(el, type2, handler, options));
    });
  };
  if (typeof targets === "function")
    createEffect(attachListeners);
  else
    createRenderEffect(attachListeners);
}
var FALLBACK = Symbol("fallback");
function dispose(list) {
  for (const o of list)
    o.dispose();
}
function keyArray(items, keyFn, mapFn, options = {}) {
  const prev = /* @__PURE__ */ new Map();
  onCleanup(() => dispose(prev.values()));
  return () => {
    const list = items() || [];
    list[$TRACK];
    return untrack(() => {
      var _a, _b;
      if (!list.length) {
        dispose(prev.values());
        prev.clear();
        if (!options.fallback)
          return [];
        const fb2 = createRoot((dispose2) => {
          prev.set(FALLBACK, { dispose: dispose2 });
          return options.fallback();
        });
        return [fb2];
      }
      const result = new Array(list.length);
      const fb = prev.get(FALLBACK);
      if (!prev.size || fb) {
        fb == null ? void 0 : fb.dispose();
        prev.delete(FALLBACK);
        for (let i = 0; i < list.length; i++) {
          const item = list[i];
          const key = keyFn(item, i);
          addNewItem(result, item, i, key);
        }
        return result;
      }
      const prevKeys = new Set(prev.keys());
      for (let i = 0; i < list.length; i++) {
        const item = list[i];
        const key = keyFn(item, i);
        prevKeys.delete(key);
        const lookup = prev.get(key);
        if (lookup) {
          result[i] = lookup.mapped;
          (_a = lookup.setIndex) == null ? void 0 : _a.call(lookup, i);
          lookup.setItem(() => item);
        } else
          addNewItem(result, item, i, key);
      }
      for (const key of prevKeys) {
        (_b = prev.get(key)) == null ? void 0 : _b.dispose();
        prev.delete(key);
      }
      return result;
    });
  };
  function addNewItem(list, item, i, key) {
    createRoot((dispose2) => {
      const [getItem, setItem] = createSignal(item);
      const save = { setItem, dispose: dispose2 };
      if (mapFn.length > 1) {
        const [index, setIndex] = createSignal(i);
        save.setIndex = setIndex;
        save.mapped = mapFn(getItem, index);
      } else
        save.mapped = mapFn(getItem);
      prev.set(key, save);
      list[i] = save.mapped;
    });
  }
}
function Key(props) {
  const { by } = props;
  return createMemo(
    keyArray(
      () => props.each,
      typeof by === "function" ? by : (v) => v[by],
      props.children,
      "fallback" in props ? { fallback: () => props.fallback } : void 0
    )
  );
}
function mergeRefs(...refs) {
  return chain(refs);
}
function removeItemFromArray(array, item) {
  const updatedArray = [...array];
  const index = updatedArray.indexOf(item);
  if (index !== -1) {
    updatedArray.splice(index, 1);
  }
  return updatedArray;
}
function isNumber(value) {
  return typeof value === "number";
}
function isString(value) {
  return Object.prototype.toString.call(value) === "[object String]";
}
function isFunction(value) {
  return typeof value === "function";
}
function createGenerateId(baseId) {
  return (suffix) => `${baseId()}-${suffix}`;
}
function contains$1(parent, child) {
  if (!parent) {
    return false;
  }
  return parent === child || parent.contains(child);
}
function getActiveElement(node, activeDescendant = false) {
  const { activeElement } = getDocument(node);
  if (!(activeElement == null ? void 0 : activeElement.nodeName)) {
    return null;
  }
  if (isFrame(activeElement) && activeElement.contentDocument) {
    return getActiveElement(activeElement.contentDocument.body, activeDescendant);
  }
  if (activeDescendant) {
    const id = activeElement.getAttribute("aria-activedescendant");
    if (id) {
      const element = getDocument(activeElement).getElementById(id);
      if (element) {
        return element;
      }
    }
  }
  return activeElement;
}
function getWindow$1(node) {
  return getDocument(node).defaultView || window;
}
function getDocument(node) {
  return node ? node.ownerDocument || node : document;
}
function isFrame(element) {
  return element.tagName === "IFRAME";
}
var EventKey = /* @__PURE__ */ ((EventKey2) => {
  EventKey2["Escape"] = "Escape";
  EventKey2["Enter"] = "Enter";
  EventKey2["Tab"] = "Tab";
  EventKey2["Space"] = " ";
  EventKey2["ArrowDown"] = "ArrowDown";
  EventKey2["ArrowLeft"] = "ArrowLeft";
  EventKey2["ArrowRight"] = "ArrowRight";
  EventKey2["ArrowUp"] = "ArrowUp";
  EventKey2["End"] = "End";
  EventKey2["Home"] = "Home";
  EventKey2["PageDown"] = "PageDown";
  EventKey2["PageUp"] = "PageUp";
  return EventKey2;
})(EventKey || {});
function testUserAgent(re) {
  var _a;
  if (typeof window === "undefined" || window.navigator == null) {
    return false;
  }
  return (
    // @ts-ignore
    ((_a = window.navigator["userAgentData"]) == null ? void 0 : _a.brands.some(
      (brand) => re.test(brand.brand)
    )) || re.test(window.navigator.userAgent)
  );
}
function testPlatform(re) {
  var _a;
  return typeof window !== "undefined" && window.navigator != null ? (
    // @ts-ignore
    re.test(((_a = window.navigator["userAgentData"]) == null ? void 0 : _a.platform) || window.navigator.platform)
  ) : false;
}
function isMac() {
  return testPlatform(/^Mac/i);
}
function isIPhone() {
  return testPlatform(/^iPhone/i);
}
function isIPad() {
  return testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  isMac() && navigator.maxTouchPoints > 1;
}
function isIOS() {
  return isIPhone() || isIPad();
}
function isAppleDevice() {
  return isMac() || isIOS();
}
function isWebKit$1() {
  return testUserAgent(/AppleWebKit/i) && !isChrome();
}
function isChrome() {
  return testUserAgent(/Chrome/i);
}
function callHandler(event, handler) {
  if (handler) {
    if (isFunction(handler)) {
      handler(event);
    } else {
      handler[0](handler[1], event);
    }
  }
  return event == null ? void 0 : event.defaultPrevented;
}
function composeEventHandlers(handlers) {
  return (event) => {
    for (const handler of handlers) {
      callHandler(event, handler);
    }
  };
}
function isCtrlKey(e) {
  if (isMac()) {
    return e.metaKey && !e.ctrlKey;
  }
  return e.ctrlKey && !e.metaKey;
}
function focusWithoutScrolling(element) {
  if (!element) {
    return;
  }
  if (supportsPreventScroll()) {
    element.focus({ preventScroll: true });
  } else {
    const scrollableElements = getScrollableElements(element);
    element.focus();
    restoreScrollPosition(scrollableElements);
  }
}
var supportsPreventScrollCached = null;
function supportsPreventScroll() {
  if (supportsPreventScrollCached == null) {
    supportsPreventScrollCached = false;
    try {
      const focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
    }
  }
  return supportsPreventScrollCached;
}
function getScrollableElements(element) {
  let parent = element.parentNode;
  const scrollableElements = [];
  const rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    }
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) {
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  }
  return scrollableElements;
}
function restoreScrollPosition(scrollableElements) {
  for (const { element, scrollTop, scrollLeft } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
var focusableElements = [
  "input:not([type='hidden']):not([disabled])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "[tabindex]",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]:not([contenteditable='false'])"
];
var tabbableElements = [...focusableElements, '[tabindex]:not([tabindex="-1"]):not([disabled])'];
var FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
var TABBABLE_ELEMENT_SELECTOR = tabbableElements.join(
  ':not([hidden]):not([tabindex="-1"]),'
);
function getAllTabbableIn(container, includeContainer) {
  const elements = Array.from(container.querySelectorAll(FOCUSABLE_ELEMENT_SELECTOR));
  const tabbableElements2 = elements.filter(isTabbable);
  if (includeContainer && isTabbable(container)) {
    tabbableElements2.unshift(container);
  }
  tabbableElements2.forEach((element, i) => {
    if (isFrame(element) && element.contentDocument) {
      const frameBody = element.contentDocument.body;
      const allFrameTabbable = getAllTabbableIn(frameBody, false);
      tabbableElements2.splice(i, 1, ...allFrameTabbable);
    }
  });
  return tabbableElements2;
}
function isTabbable(element) {
  return isFocusable(element) && !hasNegativeTabIndex(element);
}
function isFocusable(element) {
  return element.matches(FOCUSABLE_ELEMENT_SELECTOR) && isElementVisible(element);
}
function hasNegativeTabIndex(element) {
  const tabIndex = parseInt(element.getAttribute("tabindex") || "0", 10);
  return tabIndex < 0;
}
function isElementVisible(element, childElement) {
  return element.nodeName !== "#comment" && isStyleVisible(element) && isAttributeVisible(element, childElement) && (!element.parentElement || isElementVisible(element.parentElement, element));
}
function isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {
    return false;
  }
  const { display, visibility } = element.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    if (!element.ownerDocument.defaultView) {
      return isVisible;
    }
    const { getComputedStyle: getComputedStyle2 } = element.ownerDocument.defaultView;
    const { display: computedDisplay, visibility: computedVisibility } = getComputedStyle2(element);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function getFocusableTreeWalker(root, opts, scope) {
  const selector = (opts == null ? void 0 : opts.tabbable) ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;
  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _a;
      if ((_a = opts == null ? void 0 : opts.from) == null ? void 0 : _a.contains(node)) {
        return NodeFilter.FILTER_REJECT;
      }
      if (node.matches(selector) && isElementVisible(node) && !scope && (!(opts == null ? void 0 : opts.accept) || opts.accept(node))) {
        return NodeFilter.FILTER_ACCEPT;
      }
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts == null ? void 0 : opts.from) {
    walker.currentNode = opts.from;
  }
  return walker;
}
function noop() {
  return;
}
function mergeDefaultProps(defaultProps, props) {
  return mergeProps(defaultProps, props);
}
var transitionsByElement = /* @__PURE__ */ new Map();
var transitionCallbacks = /* @__PURE__ */ new Set();
function setupGlobalEvents() {
  if (typeof window === "undefined") {
    return;
  }
  const onTransitionStart = (e) => {
    if (!e.target) {
      return;
    }
    let transitions = transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      transitionsByElement.set(e.target, transitions);
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  const onTransitionEnd = (e) => {
    if (!e.target) {
      return;
    }
    const properties = transitionsByElement.get(e.target);
    if (!properties) {
      return;
    }
    properties.delete(e.propertyName);
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      transitionsByElement.delete(e.target);
    }
    if (transitionsByElement.size === 0) {
      for (const cb of transitionCallbacks) {
        cb();
      }
      transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") {
    setupGlobalEvents();
  } else {
    document.addEventListener("DOMContentLoaded", setupGlobalEvents);
  }
}
function scrollIntoView(scrollView, element) {
  const offsetX = relativeOffset(scrollView, element, "left");
  const offsetY = relativeOffset(scrollView, element, "top");
  const width = element.offsetWidth;
  const height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  const maxX = x + scrollView.offsetWidth;
  const maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) {
    x = offsetX;
  } else if (offsetX + width > maxX) {
    x += offsetX + width - maxX;
  }
  if (offsetY <= y) {
    y = offsetY;
  } else if (offsetY + height > maxY) {
    y += offsetY + height - maxY;
  }
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
function relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) {
      break;
    } else if (child.offsetParent.contains(ancestor)) {
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}
var visuallyHiddenStyles = {
  border: "0",
  clip: "rect(0 0 0 0)",
  "clip-path": "inset(50%)",
  height: "1px",
  margin: "0 -1px -1px 0",
  overflow: "hidden",
  padding: "0",
  position: "absolute",
  width: "1px",
  "white-space": "nowrap"
};
var DATA_TOP_LAYER_ATTR = "data-kb-top-layer";
var originalBodyPointerEvents;
var hasDisabledBodyPointerEvents = false;
var layers = [];
function indexOf(node) {
  return layers.findIndex((layer) => layer.node === node);
}
function find(node) {
  return layers[indexOf(node)];
}
function isTopMostLayer(node) {
  return layers[layers.length - 1].node === node;
}
function getPointerBlockingLayers() {
  return layers.filter((layer) => layer.isPointerBlocking);
}
function getTopMostPointerBlockingLayer() {
  return [...getPointerBlockingLayers()].slice(-1)[0];
}
function hasPointerBlockingLayer() {
  return getPointerBlockingLayers().length > 0;
}
function isBelowPointerBlockingLayer(node) {
  var _a;
  const highestBlockingIndex = indexOf((_a = getTopMostPointerBlockingLayer()) == null ? void 0 : _a.node);
  return indexOf(node) < highestBlockingIndex;
}
function addLayer(layer) {
  layers.push(layer);
}
function removeLayer(node) {
  const index = indexOf(node);
  if (index < 0) {
    return;
  }
  layers.splice(index, 1);
}
function assignPointerEventToLayers() {
  for (const {
    node
  } of layers) {
    node.style.pointerEvents = isBelowPointerBlockingLayer(node) ? "none" : "auto";
  }
}
function disableBodyPointerEvents(node) {
  if (hasPointerBlockingLayer() && !hasDisabledBodyPointerEvents) {
    const ownerDocument = getDocument(node);
    originalBodyPointerEvents = document.body.style.pointerEvents;
    ownerDocument.body.style.pointerEvents = "none";
    hasDisabledBodyPointerEvents = true;
  }
}
function restoreBodyPointerEvents(node) {
  if (hasPointerBlockingLayer()) {
    return;
  }
  const ownerDocument = getDocument(node);
  ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
  if (ownerDocument.body.style.length === 0) {
    ownerDocument.body.removeAttribute("style");
  }
  hasDisabledBodyPointerEvents = false;
}
var layerStack = {
  layers,
  isTopMostLayer,
  hasPointerBlockingLayer,
  isBelowPointerBlockingLayer,
  addLayer,
  removeLayer,
  indexOf,
  find,
  assignPointerEventToLayers,
  disableBodyPointerEvents,
  restoreBodyPointerEvents
};
var AUTOFOCUS_ON_MOUNT_EVENT = "focusScope.autoFocusOnMount";
var AUTOFOCUS_ON_UNMOUNT_EVENT = "focusScope.autoFocusOnUnmount";
var EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
var focusScopeStack = {
  /** A stack of focus scopes, with the active one at the top */
  stack: [],
  active() {
    return this.stack[0];
  },
  add(scope) {
    var _a;
    if (scope !== this.active()) {
      (_a = this.active()) == null ? void 0 : _a.pause();
    }
    this.stack = removeItemFromArray(this.stack, scope);
    this.stack.unshift(scope);
  },
  remove(scope) {
    var _a;
    this.stack = removeItemFromArray(this.stack, scope);
    (_a = this.active()) == null ? void 0 : _a.resume();
  }
};
function createFocusScope(props, ref) {
  const [isPaused, setIsPaused] = createSignal(false);
  const focusScope = {
    pause() {
      setIsPaused(true);
    },
    resume() {
      setIsPaused(false);
    }
  };
  let lastFocusedElement = null;
  const onMountAutoFocus = (e) => {
    var _a;
    return (_a = props.onMountAutoFocus) == null ? void 0 : _a.call(props, e);
  };
  const onUnmountAutoFocus = (e) => {
    var _a;
    return (_a = props.onUnmountAutoFocus) == null ? void 0 : _a.call(props, e);
  };
  const ownerDocument = () => getDocument(ref());
  const createSentinel = () => {
    const element = ownerDocument().createElement("span");
    element.setAttribute("data-focus-trap", "");
    element.tabIndex = 0;
    Object.assign(element.style, visuallyHiddenStyles);
    return element;
  };
  const tabbables = () => {
    const container = ref();
    if (!container) {
      return [];
    }
    return getAllTabbableIn(container, true).filter((el) => !el.hasAttribute("data-focus-trap"));
  };
  const firstTabbable = () => {
    const items = tabbables();
    return items.length > 0 ? items[0] : null;
  };
  const lastTabbable = () => {
    const items = tabbables();
    return items.length > 0 ? items[items.length - 1] : null;
  };
  const shouldPreventUnmountAutoFocus = () => {
    const container = ref();
    if (!container) {
      return false;
    }
    const activeElement = getActiveElement(container);
    if (!activeElement) {
      return false;
    }
    if (contains$1(container, activeElement)) {
      return false;
    }
    return isFocusable(activeElement);
  };
  createEffect(() => {
    const container = ref();
    if (!container) {
      return;
    }
    focusScopeStack.add(focusScope);
    const previouslyFocusedElement = getActiveElement(container);
    const hasFocusedCandidate = contains$1(container, previouslyFocusedElement);
    if (!hasFocusedCandidate) {
      const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT_EVENT, EVENT_OPTIONS);
      container.addEventListener(AUTOFOCUS_ON_MOUNT_EVENT, onMountAutoFocus);
      container.dispatchEvent(mountEvent);
      if (!mountEvent.defaultPrevented) {
        setTimeout(() => {
          focusWithoutScrolling(firstTabbable());
          if (getActiveElement(container) === previouslyFocusedElement) {
            focusWithoutScrolling(container);
          }
        }, 0);
      }
    }
    onCleanup(() => {
      container.removeEventListener(AUTOFOCUS_ON_MOUNT_EVENT, onMountAutoFocus);
      setTimeout(() => {
        const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT_EVENT, EVENT_OPTIONS);
        if (shouldPreventUnmountAutoFocus()) {
          unmountEvent.preventDefault();
        }
        container.addEventListener(AUTOFOCUS_ON_UNMOUNT_EVENT, onUnmountAutoFocus);
        container.dispatchEvent(unmountEvent);
        if (!unmountEvent.defaultPrevented) {
          focusWithoutScrolling(previouslyFocusedElement ?? ownerDocument().body);
        }
        container.removeEventListener(AUTOFOCUS_ON_UNMOUNT_EVENT, onUnmountAutoFocus);
        focusScopeStack.remove(focusScope);
      }, 0);
    });
  });
  createEffect(() => {
    const container = ref();
    if (!container || !access$1(props.trapFocus) || isPaused()) {
      return;
    }
    const onFocusIn = (event) => {
      const target = event.target;
      if (target == null ? void 0 : target.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {
        return;
      }
      if (contains$1(container, target)) {
        lastFocusedElement = target;
      } else {
        focusWithoutScrolling(lastFocusedElement);
      }
    };
    const onFocusOut = (event) => {
      const relatedTarget = event.relatedTarget;
      const target = relatedTarget ?? getActiveElement(container);
      if (target == null ? void 0 : target.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {
        return;
      }
      if (!contains$1(container, target)) {
        focusWithoutScrolling(lastFocusedElement);
      }
    };
    ownerDocument().addEventListener("focusin", onFocusIn);
    ownerDocument().addEventListener("focusout", onFocusOut);
    onCleanup(() => {
      ownerDocument().removeEventListener("focusin", onFocusIn);
      ownerDocument().removeEventListener("focusout", onFocusOut);
    });
  });
  createEffect(() => {
    const container = ref();
    if (!container || !access$1(props.trapFocus) || isPaused()) {
      return;
    }
    const startSentinel = createSentinel();
    container.insertAdjacentElement("afterbegin", startSentinel);
    const endSentinel = createSentinel();
    container.insertAdjacentElement("beforeend", endSentinel);
    function onFocus(event) {
      const first = firstTabbable();
      const last = lastTabbable();
      if (event.relatedTarget === first) {
        focusWithoutScrolling(last);
      } else {
        focusWithoutScrolling(first);
      }
    }
    startSentinel.addEventListener("focusin", onFocus);
    endSentinel.addEventListener("focusin", onFocus);
    const observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.previousSibling === endSentinel) {
          endSentinel.remove();
          container.insertAdjacentElement("beforeend", endSentinel);
        }
        if (mutation.nextSibling === startSentinel) {
          startSentinel.remove();
          container.insertAdjacentElement("afterbegin", startSentinel);
        }
      }
    });
    observer.observe(container, {
      childList: true,
      subtree: false
    });
    onCleanup(() => {
      startSentinel.removeEventListener("focusin", onFocus);
      endSentinel.removeEventListener("focusin", onFocus);
      startSentinel.remove();
      endSentinel.remove();
      observer.disconnect();
    });
  });
}
var LIVEREGION_TIMEOUT_DELAY = 7e3;
var liveAnnouncer = null;
var DATA_LIVE_ANNOUNCER_ATTR = "data-live-announcer";
function announce(message, assertiveness = "assertive", timeout = LIVEREGION_TIMEOUT_DELAY) {
  if (!liveAnnouncer) {
    liveAnnouncer = new LiveAnnouncer();
  }
  liveAnnouncer.announce(message, assertiveness, timeout);
}
var LiveAnnouncer = class {
  constructor() {
    __publicField(this, "node");
    __publicField(this, "assertiveLog");
    __publicField(this, "politeLog");
    this.node = document.createElement("div");
    this.node.dataset.liveAnnouncer = "true";
    Object.assign(this.node.style, visuallyHiddenStyles);
    this.assertiveLog = this.createLog("assertive");
    this.node.appendChild(this.assertiveLog);
    this.politeLog = this.createLog("polite");
    this.node.appendChild(this.politeLog);
    document.body.prepend(this.node);
  }
  createLog(ariaLive) {
    const node = document.createElement("div");
    node.setAttribute("role", "log");
    node.setAttribute("aria-live", ariaLive);
    node.setAttribute("aria-relevant", "additions");
    return node;
  }
  destroy() {
    if (!this.node) {
      return;
    }
    document.body.removeChild(this.node);
    this.node = null;
  }
  announce(message, assertiveness = "assertive", timeout = LIVEREGION_TIMEOUT_DELAY) {
    if (!this.node) {
      return;
    }
    const node = document.createElement("div");
    node.textContent = message;
    if (assertiveness === "assertive") {
      this.assertiveLog.appendChild(node);
    } else {
      this.politeLog.appendChild(node);
    }
    if (message !== "") {
      setTimeout(() => {
        node.remove();
      }, timeout);
    }
  }
  clear(assertiveness) {
    if (!this.node) {
      return;
    }
    if (!assertiveness || assertiveness === "assertive") {
      this.assertiveLog.innerHTML = "";
    }
    if (!assertiveness || assertiveness === "polite") {
      this.politeLog.innerHTML = "";
    }
  }
};
function createHideOutside(props) {
  createEffect(() => {
    if (access$1(props.isDisabled)) {
      return;
    }
    onCleanup(ariaHideOutside(access$1(props.targets), access$1(props.root)));
  });
}
var refCountMap = /* @__PURE__ */ new WeakMap();
var observerStack = [];
function ariaHideOutside(targets, root = document.body) {
  const visibleNodes = new Set(targets);
  const hiddenNodes = /* @__PURE__ */ new Set();
  const walk = (root2) => {
    for (const element of root2.querySelectorAll(`[${DATA_LIVE_ANNOUNCER_ATTR}], [${DATA_TOP_LAYER_ATTR}]`)) {
      visibleNodes.add(element);
    }
    const acceptNode = (node) => {
      if (visibleNodes.has(node) || node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute("role") !== "row") {
        return NodeFilter.FILTER_REJECT;
      }
      for (const target of visibleNodes) {
        if (node.contains(target)) {
          return NodeFilter.FILTER_SKIP;
        }
      }
      return NodeFilter.FILTER_ACCEPT;
    };
    const walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {
      acceptNode
    });
    const acceptRoot = acceptNode(root2);
    if (acceptRoot === NodeFilter.FILTER_ACCEPT) {
      hide2(root2);
    }
    if (acceptRoot !== NodeFilter.FILTER_REJECT) {
      let node = walker.nextNode();
      while (node != null) {
        hide2(node);
        node = walker.nextNode();
      }
    }
  };
  const hide2 = (node) => {
    const refCount = refCountMap.get(node) ?? 0;
    if (node.getAttribute("aria-hidden") === "true" && refCount === 0) {
      return;
    }
    if (refCount === 0) {
      node.setAttribute("aria-hidden", "true");
    }
    hiddenNodes.add(node);
    refCountMap.set(node, refCount + 1);
  };
  if (observerStack.length) {
    observerStack[observerStack.length - 1].disconnect();
  }
  walk(root);
  const observer = new MutationObserver((changes) => {
    for (const change of changes) {
      if (change.type !== "childList" || change.addedNodes.length === 0) {
        continue;
      }
      if (![...visibleNodes, ...hiddenNodes].some((node) => node.contains(change.target))) {
        for (const node of change.removedNodes) {
          if (node instanceof Element) {
            visibleNodes.delete(node);
            hiddenNodes.delete(node);
          }
        }
        for (const node of change.addedNodes) {
          if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === "true" || node.dataset.reactAriaTopLayer === "true")) {
            visibleNodes.add(node);
          } else if (node instanceof Element) {
            walk(node);
          }
        }
      }
    }
  });
  observer.observe(root, {
    childList: true,
    subtree: true
  });
  const observerWrapper = {
    observe() {
      observer.observe(root, {
        childList: true,
        subtree: true
      });
    },
    disconnect() {
      observer.disconnect();
    }
  };
  observerStack.push(observerWrapper);
  return () => {
    observer.disconnect();
    for (const node of hiddenNodes) {
      const count = refCountMap.get(node);
      if (count == null) {
        return;
      }
      if (count === 1) {
        node.removeAttribute("aria-hidden");
        refCountMap.delete(node);
      } else {
        refCountMap.set(node, count - 1);
      }
    }
    if (observerWrapper === observerStack[observerStack.length - 1]) {
      observerStack.pop();
      if (observerStack.length) {
        observerStack[observerStack.length - 1].observe();
      }
    } else {
      observerStack.splice(observerStack.indexOf(observerWrapper), 1);
    }
  };
}
function createEscapeKeyDown(props) {
  const handleKeyDown = (event) => {
    var _a;
    if (event.key === EventKey.Escape) {
      (_a = props.onEscapeKeyDown) == null ? void 0 : _a.call(props, event);
    }
  };
  createEffect(() => {
    var _a;
    if (access$1(props.isDisabled)) {
      return;
    }
    const document2 = ((_a = props.ownerDocument) == null ? void 0 : _a.call(props)) ?? getDocument();
    document2.addEventListener("keydown", handleKeyDown);
    onCleanup(() => {
      document2.removeEventListener("keydown", handleKeyDown);
    });
  });
}
var POINTER_DOWN_OUTSIDE_EVENT = "interactOutside.pointerDownOutside";
var FOCUS_OUTSIDE_EVENT = "interactOutside.focusOutside";
function createInteractOutside(props, ref) {
  let pointerDownTimeoutId;
  let clickHandler = noop;
  const ownerDocument = () => getDocument(ref());
  const onPointerDownOutside = (e) => {
    var _a;
    return (_a = props.onPointerDownOutside) == null ? void 0 : _a.call(props, e);
  };
  const onFocusOutside = (e) => {
    var _a;
    return (_a = props.onFocusOutside) == null ? void 0 : _a.call(props, e);
  };
  const onInteractOutside = (e) => {
    var _a;
    return (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, e);
  };
  const isEventOutside = (e) => {
    var _a;
    const target = e.target;
    if (!(target instanceof HTMLElement)) {
      return false;
    }
    if (target.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {
      return false;
    }
    if (!contains$1(ownerDocument(), target)) {
      return false;
    }
    if (contains$1(ref(), target)) {
      return false;
    }
    return !((_a = props.shouldExcludeElement) == null ? void 0 : _a.call(props, target));
  };
  const onPointerDown = (e) => {
    function handler() {
      const container = ref();
      const target = e.target;
      if (!container || !target || !isEventOutside(e)) {
        return;
      }
      const handler2 = composeEventHandlers([onPointerDownOutside, onInteractOutside]);
      target.addEventListener(POINTER_DOWN_OUTSIDE_EVENT, handler2, {
        once: true
      });
      const pointerDownOutsideEvent = new CustomEvent(POINTER_DOWN_OUTSIDE_EVENT, {
        bubbles: false,
        cancelable: true,
        detail: {
          originalEvent: e,
          isContextMenu: e.button === 2 || isCtrlKey(e) && e.button === 0
        }
      });
      target.dispatchEvent(pointerDownOutsideEvent);
    }
    if (e.pointerType === "touch") {
      ownerDocument().removeEventListener("click", handler);
      clickHandler = handler;
      ownerDocument().addEventListener("click", handler, {
        once: true
      });
    } else {
      handler();
    }
  };
  const onFocusIn = (e) => {
    const container = ref();
    const target = e.target;
    if (!container || !target || !isEventOutside(e)) {
      return;
    }
    const handler = composeEventHandlers([onFocusOutside, onInteractOutside]);
    target.addEventListener(FOCUS_OUTSIDE_EVENT, handler, {
      once: true
    });
    const focusOutsideEvent = new CustomEvent(FOCUS_OUTSIDE_EVENT, {
      bubbles: false,
      cancelable: true,
      detail: {
        originalEvent: e,
        isContextMenu: false
      }
    });
    target.dispatchEvent(focusOutsideEvent);
  };
  createEffect(() => {
    if (access$1(props.isDisabled)) {
      return;
    }
    pointerDownTimeoutId = window.setTimeout(() => {
      ownerDocument().addEventListener("pointerdown", onPointerDown, true);
    }, 0);
    ownerDocument().addEventListener("focusin", onFocusIn, true);
    onCleanup(() => {
      window.clearTimeout(pointerDownTimeoutId);
      ownerDocument().removeEventListener("click", clickHandler);
      ownerDocument().removeEventListener("pointerdown", onPointerDown, true);
      ownerDocument().removeEventListener("focusin", onFocusIn, true);
    });
  });
}
function Polymorphic(props) {
  const [local, others] = splitProps(props, ["as"]);
  if (!local.as) {
    throw new Error("[kobalte]: Polymorphic is missing the required `as` prop.");
  }
  return (
    // @ts-ignore: Props are valid but not worth calculating
    createComponent(Dynamic, mergeProps({
      get component() {
        return local.as;
      }
    }, others))
  );
}
var DismissableLayerContext = createContext();
function useOptionalDismissableLayerContext() {
  return useContext(DismissableLayerContext);
}
function DismissableLayer(props) {
  let ref;
  const parentContext = useOptionalDismissableLayerContext();
  const [local, others] = splitProps(props, ["ref", "disableOutsidePointerEvents", "excludedElements", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss", "bypassTopMostLayerCheck"]);
  const nestedLayers = /* @__PURE__ */ new Set([]);
  const registerNestedLayer = (element) => {
    nestedLayers.add(element);
    const parentUnregister = parentContext == null ? void 0 : parentContext.registerNestedLayer(element);
    return () => {
      nestedLayers.delete(element);
      parentUnregister == null ? void 0 : parentUnregister();
    };
  };
  const shouldExcludeElement = (element) => {
    var _a;
    if (!ref) {
      return false;
    }
    return ((_a = local.excludedElements) == null ? void 0 : _a.some((node) => contains$1(node(), element))) || [...nestedLayers].some((layer) => contains$1(layer, element));
  };
  const onPointerDownOutside = (e) => {
    var _a, _b, _c;
    if (!ref || layerStack.isBelowPointerBlockingLayer(ref)) {
      return;
    }
    if (!local.bypassTopMostLayerCheck && !layerStack.isTopMostLayer(ref)) {
      return;
    }
    (_a = local.onPointerDownOutside) == null ? void 0 : _a.call(local, e);
    (_b = local.onInteractOutside) == null ? void 0 : _b.call(local, e);
    if (!e.defaultPrevented) {
      (_c = local.onDismiss) == null ? void 0 : _c.call(local);
    }
  };
  const onFocusOutside = (e) => {
    var _a, _b, _c;
    (_a = local.onFocusOutside) == null ? void 0 : _a.call(local, e);
    (_b = local.onInteractOutside) == null ? void 0 : _b.call(local, e);
    if (!e.defaultPrevented) {
      (_c = local.onDismiss) == null ? void 0 : _c.call(local);
    }
  };
  createInteractOutside({
    shouldExcludeElement,
    onPointerDownOutside,
    onFocusOutside
  }, () => ref);
  createEscapeKeyDown({
    ownerDocument: () => getDocument(ref),
    onEscapeKeyDown: (e) => {
      var _a;
      if (!ref || !layerStack.isTopMostLayer(ref)) {
        return;
      }
      (_a = local.onEscapeKeyDown) == null ? void 0 : _a.call(local, e);
      if (!e.defaultPrevented && local.onDismiss) {
        e.preventDefault();
        local.onDismiss();
      }
    }
  });
  onMount(() => {
    if (!ref) {
      return;
    }
    layerStack.addLayer({
      node: ref,
      isPointerBlocking: local.disableOutsidePointerEvents,
      dismiss: local.onDismiss
    });
    const unregisterFromParentLayer = parentContext == null ? void 0 : parentContext.registerNestedLayer(ref);
    layerStack.assignPointerEventToLayers();
    layerStack.disableBodyPointerEvents(ref);
    onCleanup(() => {
      if (!ref) {
        return;
      }
      layerStack.removeLayer(ref);
      unregisterFromParentLayer == null ? void 0 : unregisterFromParentLayer();
      layerStack.assignPointerEventToLayers();
      layerStack.restoreBodyPointerEvents(ref);
    });
  });
  createEffect(on([() => ref, () => local.disableOutsidePointerEvents], ([ref2, disableOutsidePointerEvents]) => {
    if (!ref2) {
      return;
    }
    const layer = layerStack.find(ref2);
    if (layer && layer.isPointerBlocking !== disableOutsidePointerEvents) {
      layer.isPointerBlocking = disableOutsidePointerEvents;
      layerStack.assignPointerEventToLayers();
    }
    if (disableOutsidePointerEvents) {
      layerStack.disableBodyPointerEvents(ref2);
    }
    onCleanup(() => {
      layerStack.restoreBodyPointerEvents(ref2);
    });
  }, {
    defer: true
  }));
  const context = {
    registerNestedLayer
  };
  return createComponent(DismissableLayerContext.Provider, {
    value: context,
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "div",
        ref(r$) {
          var _ref$ = mergeRefs((el) => ref = el, local.ref);
          typeof _ref$ === "function" && _ref$(r$);
        }
      }, others));
    }
  });
}
function createControllableSignal(props) {
  var _a;
  const [_value, _setValue] = createSignal((_a = props.defaultValue) == null ? void 0 : _a.call(props));
  const isControlled = createMemo(() => {
    var _a2;
    return ((_a2 = props.value) == null ? void 0 : _a2.call(props)) !== void 0;
  });
  const value = createMemo(() => {
    var _a2;
    return isControlled() ? (_a2 = props.value) == null ? void 0 : _a2.call(props) : _value();
  });
  const setValue = (next) => {
    untrack(() => {
      var _a2;
      const nextValue = accessWith(next, value());
      if (!Object.is(nextValue, value())) {
        if (!isControlled()) {
          _setValue(nextValue);
        }
        (_a2 = props.onChange) == null ? void 0 : _a2.call(props, nextValue);
      }
      return nextValue;
    });
  };
  return [value, setValue];
}
function createControllableBooleanSignal(props) {
  const [_value, setValue] = createControllableSignal(props);
  const value = () => _value() ?? false;
  return [value, setValue];
}
function createDisclosureState(props = {}) {
  const [isOpen, setIsOpen] = createControllableBooleanSignal({
    value: () => access$1(props.open),
    defaultValue: () => !!access$1(props.defaultOpen),
    onChange: (value) => {
      var _a;
      return (_a = props.onOpenChange) == null ? void 0 : _a.call(props, value);
    }
  });
  const open = () => {
    setIsOpen(true);
  };
  const close = () => {
    setIsOpen(false);
  };
  const toggle = () => {
    isOpen() ? close() : open();
  };
  return {
    isOpen,
    setIsOpen,
    open,
    close,
    toggle
  };
}
function createTagName(ref, fallback) {
  const [tagName, setTagName] = createSignal(stringOrUndefined(fallback == null ? void 0 : fallback()));
  createEffect(() => {
    var _a;
    setTagName(((_a = ref()) == null ? void 0 : _a.tagName.toLowerCase()) || stringOrUndefined(fallback == null ? void 0 : fallback()));
  });
  return tagName;
}
function stringOrUndefined(value) {
  return isString(value) ? value : void 0;
}
var __defProp2 = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all) __defProp2(target, name, {
    get: all[name],
    enumerable: true
  });
};
var button_exports = {};
__export(button_exports, {
  Button: () => Button,
  Root: () => ButtonRoot
});
var BUTTON_INPUT_TYPES = ["button", "color", "file", "image", "reset", "submit"];
function isButton(element) {
  const tagName = element.tagName.toLowerCase();
  if (tagName === "button") {
    return true;
  }
  if (tagName === "input" && element.type) {
    return BUTTON_INPUT_TYPES.indexOf(element.type) !== -1;
  }
  return false;
}
function ButtonRoot(props) {
  let ref;
  const mergedProps = mergeDefaultProps({
    type: "button"
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref", "type", "disabled"]);
  const tagName = createTagName(() => ref, () => "button");
  const isNativeButton = createMemo(() => {
    const elementTagName = tagName();
    if (elementTagName == null) {
      return false;
    }
    return isButton({
      tagName: elementTagName,
      type: local.type
    });
  });
  const isNativeInput = createMemo(() => {
    return tagName() === "input";
  });
  const isNativeLink = createMemo(() => {
    return tagName() === "a" && (ref == null ? void 0 : ref.getAttribute("href")) != null;
  });
  return createComponent(Polymorphic, mergeProps({
    as: "button",
    ref(r$) {
      var _ref$ = mergeRefs((el) => ref = el, local.ref);
      typeof _ref$ === "function" && _ref$(r$);
    },
    get type() {
      return isNativeButton() || isNativeInput() ? local.type : void 0;
    },
    get role() {
      return !isNativeButton() && !isNativeLink() ? "button" : void 0;
    },
    get tabIndex() {
      return !isNativeButton() && !isNativeLink() && !local.disabled ? 0 : void 0;
    },
    get disabled() {
      return isNativeButton() || isNativeInput() ? local.disabled : void 0;
    },
    get ["aria-disabled"]() {
      return !isNativeButton() && !isNativeInput() && local.disabled ? true : void 0;
    },
    get ["data-disabled"]() {
      return local.disabled ? "" : void 0;
    }
  }, others));
}
var Button = ButtonRoot;
function createRegisterId(setter) {
  return (id) => {
    setter(id);
    return () => setter(void 0);
  };
}
var access = (v) => typeof v === "function" ? v() : v;
var activeStyles = /* @__PURE__ */ new Map();
var createStyle = (props) => {
  createEffect(() => {
    const style2 = access(props.style) ?? {};
    const properties = access(props.properties) ?? [];
    const originalStyles = {};
    for (const key in style2) {
      originalStyles[key] = props.element.style[key];
    }
    const activeStyle = activeStyles.get(props.key);
    if (activeStyle) {
      activeStyle.activeCount++;
    } else {
      activeStyles.set(props.key, {
        activeCount: 1,
        originalStyles,
        properties: properties.map((property) => property.key)
      });
    }
    Object.assign(props.element.style, props.style);
    for (const property of properties) {
      props.element.style.setProperty(property.key, property.value);
    }
    onCleanup(() => {
      var _a;
      const activeStyle2 = activeStyles.get(props.key);
      if (!activeStyle2) return;
      if (activeStyle2.activeCount !== 1) {
        activeStyle2.activeCount--;
        return;
      }
      activeStyles.delete(props.key);
      for (const [key, value] of Object.entries(activeStyle2.originalStyles)) {
        props.element.style[key] = value;
      }
      for (const property of activeStyle2.properties) {
        props.element.style.removeProperty(property);
      }
      if (props.element.style.length === 0) {
        props.element.removeAttribute("style");
      }
      (_a = props.cleanup) == null ? void 0 : _a.call(props);
    });
  });
};
var style_default = createStyle;
var getScrollDimensions = (element, axis) => {
  switch (axis) {
    case "x":
      return [element.clientWidth, element.scrollLeft, element.scrollWidth];
    case "y":
      return [element.clientHeight, element.scrollTop, element.scrollHeight];
  }
};
var isScrollContainer = (element, axis) => {
  const styles = getComputedStyle(element);
  const overflow = axis === "x" ? styles.overflowX : styles.overflowY;
  return overflow === "auto" || overflow === "scroll" || // The HTML element is a scroll container if it has overflow visible
  element.tagName === "HTML" && overflow === "visible";
};
var getScrollAtLocation = (location, axis, stopAt) => {
  const directionFactor = axis === "x" && window.getComputedStyle(location).direction === "rtl" ? -1 : 1;
  let currentElement = location;
  let availableScroll = 0;
  let availableScrollTop = 0;
  let wrapperReached = false;
  do {
    const [clientSize, scrollOffset, scrollSize] = getScrollDimensions(currentElement, axis);
    const scrolled = scrollSize - clientSize - directionFactor * scrollOffset;
    if ((scrollOffset !== 0 || scrolled !== 0) && isScrollContainer(currentElement, axis)) {
      availableScroll += scrolled;
      availableScrollTop += scrollOffset;
    }
    if (currentElement === (stopAt ?? document.documentElement)) {
      wrapperReached = true;
    } else {
      currentElement = currentElement._$host ?? currentElement.parentElement;
    }
  } while (currentElement && !wrapperReached);
  return [availableScroll, availableScrollTop];
};
var [preventScrollStack, setPreventScrollStack] = createSignal([]);
var isActive = (id) => preventScrollStack().indexOf(id) === preventScrollStack().length - 1;
var createPreventScroll = (props) => {
  const defaultedProps = mergeProps({
    element: null,
    enabled: true,
    hideScrollbar: true,
    preventScrollbarShift: true,
    preventScrollbarShiftMode: "padding",
    restoreScrollPosition: true,
    allowPinchZoom: false
  }, props);
  const preventScrollId = createUniqueId();
  let currentTouchStart = [0, 0];
  let currentTouchStartAxis = null;
  let currentTouchStartDelta = null;
  createEffect(() => {
    if (!access(defaultedProps.enabled)) return;
    setPreventScrollStack((stack) => [...stack, preventScrollId]);
    onCleanup(() => {
      setPreventScrollStack((stack) => stack.filter((id) => id !== preventScrollId));
    });
  });
  createEffect(() => {
    if (!access(defaultedProps.enabled) || !access(defaultedProps.hideScrollbar)) return;
    const {
      body
    } = document;
    const scrollbarWidth = window.innerWidth - body.offsetWidth;
    if (access(defaultedProps.preventScrollbarShift)) {
      const style2 = {
        overflow: "hidden"
      };
      const properties = [];
      if (scrollbarWidth > 0) {
        if (access(defaultedProps.preventScrollbarShiftMode) === "padding") {
          style2.paddingRight = `calc(${window.getComputedStyle(body).paddingRight} + ${scrollbarWidth}px)`;
        } else {
          style2.marginRight = `calc(${window.getComputedStyle(body).marginRight} + ${scrollbarWidth}px)`;
        }
        properties.push({
          key: "--scrollbar-width",
          value: `${scrollbarWidth}px`
        });
      }
      const offsetTop = window.scrollY;
      const offsetLeft = window.scrollX;
      style_default({
        key: "prevent-scroll",
        element: body,
        style: style2,
        properties,
        cleanup: () => {
          if (access(defaultedProps.restoreScrollPosition) && scrollbarWidth > 0) {
            window.scrollTo(offsetLeft, offsetTop);
          }
        }
      });
    } else {
      style_default({
        key: "prevent-scroll",
        element: body,
        style: {
          overflow: "hidden"
        }
      });
    }
  });
  createEffect(() => {
    if (!isActive(preventScrollId) || !access(defaultedProps.enabled)) return;
    document.addEventListener("wheel", maybePreventWheel, {
      passive: false
    });
    document.addEventListener("touchstart", logTouchStart, {
      passive: false
    });
    document.addEventListener("touchmove", maybePreventTouch, {
      passive: false
    });
    onCleanup(() => {
      document.removeEventListener("wheel", maybePreventWheel);
      document.removeEventListener("touchstart", logTouchStart);
      document.removeEventListener("touchmove", maybePreventTouch);
    });
  });
  const logTouchStart = (event) => {
    currentTouchStart = getTouchXY(event);
    currentTouchStartAxis = null;
    currentTouchStartDelta = null;
  };
  const maybePreventWheel = (event) => {
    const target = event.target;
    const wrapper = access(defaultedProps.element);
    const delta = getDeltaXY(event);
    const axis = Math.abs(delta[0]) > Math.abs(delta[1]) ? "x" : "y";
    const axisDelta = axis === "x" ? delta[0] : delta[1];
    const resultsInScroll = wouldScroll(target, axis, axisDelta, wrapper);
    let shouldCancel;
    if (wrapper && contains(wrapper, target)) {
      shouldCancel = !resultsInScroll;
    } else {
      shouldCancel = true;
    }
    if (shouldCancel && event.cancelable) {
      event.preventDefault();
    }
  };
  const maybePreventTouch = (event) => {
    const wrapper = access(defaultedProps.element);
    const target = event.target;
    let shouldCancel;
    if (event.touches.length === 2) {
      shouldCancel = !access(defaultedProps.allowPinchZoom);
    } else {
      if (currentTouchStartAxis == null || currentTouchStartDelta === null) {
        const delta = getTouchXY(event).map((touch, i) => currentTouchStart[i] - touch);
        const axis = Math.abs(delta[0]) > Math.abs(delta[1]) ? "x" : "y";
        currentTouchStartAxis = axis;
        currentTouchStartDelta = axis === "x" ? delta[0] : delta[1];
      }
      if (target.type === "range") {
        shouldCancel = false;
      } else {
        const wouldResultInScroll = wouldScroll(target, currentTouchStartAxis, currentTouchStartDelta, wrapper);
        if (wrapper && contains(wrapper, target)) {
          shouldCancel = !wouldResultInScroll;
        } else {
          shouldCancel = true;
        }
      }
    }
    if (shouldCancel && event.cancelable) {
      event.preventDefault();
    }
  };
};
var getDeltaXY = (event) => [event.deltaX, event.deltaY];
var getTouchXY = (event) => event.changedTouches[0] ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
var wouldScroll = (target, axis, delta, wrapper) => {
  const targetInWrapper = wrapper !== null && contains(wrapper, target);
  const [availableScroll, availableScrollTop] = getScrollAtLocation(target, axis, targetInWrapper ? wrapper : void 0);
  if (delta > 0 && Math.abs(availableScroll) <= 1) {
    return false;
  }
  if (delta < 0 && Math.abs(availableScrollTop) < 1) {
    return false;
  }
  return true;
};
var contains = (wrapper, target) => {
  if (wrapper.contains(target)) return true;
  let currentElement = target;
  while (currentElement) {
    if (currentElement === wrapper) return true;
    currentElement = currentElement._$host ?? currentElement.parentElement;
  }
  return false;
};
var preventScroll_default = createPreventScroll;
var src_default$1 = preventScroll_default;
var createPresence = (props) => {
  const refStyles = createMemo(() => {
    const element = access(props.element);
    if (!element) return;
    return getComputedStyle(element);
  });
  const getAnimationName = () => {
    var _a;
    return ((_a = refStyles()) == null ? void 0 : _a.animationName) ?? "none";
  };
  const [presentState, setPresentState] = createSignal(access(props.show) ? "present" : "hidden");
  let animationName = "none";
  createEffect((prevShow) => {
    const show = access(props.show);
    untrack(() => {
      var _a;
      if (prevShow === show) return show;
      const prevAnimationName = animationName;
      const currentAnimationName = getAnimationName();
      if (show) {
        setPresentState("present");
      } else if (currentAnimationName === "none" || ((_a = refStyles()) == null ? void 0 : _a.display) === "none") {
        setPresentState("hidden");
      } else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (prevShow === true && isAnimating) {
          setPresentState("hiding");
        } else {
          setPresentState("hidden");
        }
      }
    });
    return show;
  });
  createEffect(() => {
    const element = access(props.element);
    if (!element) return;
    const handleAnimationStart = (event) => {
      if (event.target === element) {
        animationName = getAnimationName();
      }
    };
    const handleAnimationEnd = (event) => {
      const currentAnimationName = getAnimationName();
      const isCurrentAnimation = currentAnimationName.includes(event.animationName);
      if (event.target === element && isCurrentAnimation && presentState() === "hiding") {
        setPresentState("hidden");
      }
    };
    element.addEventListener("animationstart", handleAnimationStart);
    element.addEventListener("animationcancel", handleAnimationEnd);
    element.addEventListener("animationend", handleAnimationEnd);
    onCleanup(() => {
      element.removeEventListener("animationstart", handleAnimationStart);
      element.removeEventListener("animationcancel", handleAnimationEnd);
      element.removeEventListener("animationend", handleAnimationEnd);
    });
  });
  return {
    present: () => presentState() === "present" || presentState() === "hiding",
    state: presentState
  };
};
var presence_default = createPresence;
var src_default = presence_default;
var dialog_exports = {};
__export(dialog_exports, {
  CloseButton: () => DialogCloseButton,
  Content: () => DialogContent$1,
  Description: () => DialogDescription$1,
  Dialog: () => Dialog$1,
  Overlay: () => DialogOverlay,
  Portal: () => DialogPortal,
  Root: () => DialogRoot,
  Title: () => DialogTitle$1,
  Trigger: () => DialogTrigger$1
});
var DialogContext = createContext();
function useDialogContext() {
  const context = useContext(DialogContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `useDialogContext` must be used within a `Dialog` component");
  }
  return context;
}
function DialogCloseButton(props) {
  const context = useDialogContext();
  const [local, others] = splitProps(props, ["aria-label", "onClick"]);
  const onClick = (e) => {
    callHandler(e, local.onClick);
    context.close();
  };
  return createComponent(ButtonRoot, mergeProps({
    get ["aria-label"]() {
      return local["aria-label"] || context.translations().dismiss;
    },
    onClick
  }, others));
}
function DialogContent$1(props) {
  let ref;
  const context = useDialogContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("content")
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref", "onOpenAutoFocus", "onCloseAutoFocus", "onPointerDownOutside", "onFocusOutside", "onInteractOutside"]);
  let hasInteractedOutside = false;
  let hasPointerDownOutside = false;
  const onPointerDownOutside = (e) => {
    var _a;
    (_a = local.onPointerDownOutside) == null ? void 0 : _a.call(local, e);
    if (context.modal() && e.detail.isContextMenu) {
      e.preventDefault();
    }
  };
  const onFocusOutside = (e) => {
    var _a;
    (_a = local.onFocusOutside) == null ? void 0 : _a.call(local, e);
    if (context.modal()) {
      e.preventDefault();
    }
  };
  const onInteractOutside = (e) => {
    var _a;
    (_a = local.onInteractOutside) == null ? void 0 : _a.call(local, e);
    if (context.modal()) {
      return;
    }
    if (!e.defaultPrevented) {
      hasInteractedOutside = true;
      if (e.detail.originalEvent.type === "pointerdown") {
        hasPointerDownOutside = true;
      }
    }
    if (contains$1(context.triggerRef(), e.target)) {
      e.preventDefault();
    }
    if (e.detail.originalEvent.type === "focusin" && hasPointerDownOutside) {
      e.preventDefault();
    }
  };
  const onCloseAutoFocus = (e) => {
    var _a;
    (_a = local.onCloseAutoFocus) == null ? void 0 : _a.call(local, e);
    if (context.modal()) {
      e.preventDefault();
      focusWithoutScrolling(context.triggerRef());
    } else {
      if (!e.defaultPrevented) {
        if (!hasInteractedOutside) {
          focusWithoutScrolling(context.triggerRef());
        }
        e.preventDefault();
      }
      hasInteractedOutside = false;
      hasPointerDownOutside = false;
    }
  };
  createHideOutside({
    isDisabled: () => !(context.isOpen() && context.modal()),
    targets: () => ref ? [ref] : []
  });
  src_default$1({
    element: () => ref ?? null,
    enabled: () => context.isOpen() && context.preventScroll()
  });
  createFocusScope({
    trapFocus: () => context.isOpen() && context.modal(),
    onMountAutoFocus: local.onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, () => ref);
  createEffect(() => onCleanup(context.registerContentId(others.id)));
  return createComponent(Show, {
    get when() {
      return context.contentPresent();
    },
    get children() {
      return createComponent(DismissableLayer, mergeProps({
        ref(r$) {
          var _ref$ = mergeRefs((el) => {
            context.setContentRef(el);
            ref = el;
          }, local.ref);
          typeof _ref$ === "function" && _ref$(r$);
        },
        role: "dialog",
        tabIndex: -1,
        get disableOutsidePointerEvents() {
          return createMemo(() => !!context.modal())() && context.isOpen();
        },
        get excludedElements() {
          return [context.triggerRef];
        },
        get ["aria-labelledby"]() {
          return context.titleId();
        },
        get ["aria-describedby"]() {
          return context.descriptionId();
        },
        get ["data-expanded"]() {
          return context.isOpen() ? "" : void 0;
        },
        get ["data-closed"]() {
          return !context.isOpen() ? "" : void 0;
        },
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        get onDismiss() {
          return context.close;
        }
      }, others));
    }
  });
}
function DialogDescription$1(props) {
  const context = useDialogContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("description")
  }, props);
  const [local, others] = splitProps(mergedProps, ["id"]);
  createEffect(() => onCleanup(context.registerDescriptionId(local.id)));
  return createComponent(Polymorphic, mergeProps({
    as: "p",
    get id() {
      return local.id;
    }
  }, others));
}
function DialogOverlay(props) {
  const context = useDialogContext();
  const [local, others] = splitProps(props, ["ref", "style", "onPointerDown"]);
  const onPointerDown = (e) => {
    callHandler(e, local.onPointerDown);
    if (e.target === e.currentTarget) {
      e.preventDefault();
    }
  };
  return createComponent(Show, {
    get when() {
      return context.overlayPresent();
    },
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "div",
        ref(r$) {
          var _ref$2 = mergeRefs(context.setOverlayRef, local.ref);
          typeof _ref$2 === "function" && _ref$2(r$);
        },
        get style() {
          return {
            "pointer-events": "auto",
            ...local.style
          };
        },
        get ["data-expanded"]() {
          return context.isOpen() ? "" : void 0;
        },
        get ["data-closed"]() {
          return !context.isOpen() ? "" : void 0;
        },
        onPointerDown
      }, others));
    }
  });
}
function DialogPortal(props) {
  const context = useDialogContext();
  return createComponent(Show, {
    get when() {
      return context.contentPresent() || context.overlayPresent();
    },
    get children() {
      return createComponent(Portal, props);
    }
  });
}
var DIALOG_INTL_TRANSLATIONS = {
  // `aria-label` of Dialog.CloseButton.
  dismiss: "Dismiss"
};
function DialogRoot(props) {
  const defaultId = `dialog-${createUniqueId()}`;
  const mergedProps = mergeDefaultProps({
    id: defaultId,
    modal: true,
    translations: DIALOG_INTL_TRANSLATIONS
  }, props);
  const [contentId, setContentId] = createSignal();
  const [titleId, setTitleId] = createSignal();
  const [descriptionId, setDescriptionId] = createSignal();
  const [overlayRef, setOverlayRef] = createSignal();
  const [contentRef, setContentRef] = createSignal();
  const [triggerRef, setTriggerRef] = createSignal();
  const disclosureState = createDisclosureState({
    open: () => mergedProps.open,
    defaultOpen: () => mergedProps.defaultOpen,
    onOpenChange: (isOpen) => {
      var _a;
      return (_a = mergedProps.onOpenChange) == null ? void 0 : _a.call(mergedProps, isOpen);
    }
  });
  const shouldMount = () => mergedProps.forceMount || disclosureState.isOpen();
  const {
    present: overlayPresent
  } = src_default({
    show: shouldMount,
    element: () => overlayRef() ?? null
  });
  const {
    present: contentPresent
  } = src_default({
    show: shouldMount,
    element: () => contentRef() ?? null
  });
  const context = {
    translations: () => mergedProps.translations ?? DIALOG_INTL_TRANSLATIONS,
    isOpen: disclosureState.isOpen,
    modal: () => mergedProps.modal ?? true,
    preventScroll: () => mergedProps.preventScroll ?? context.modal(),
    contentId,
    titleId,
    descriptionId,
    triggerRef,
    overlayRef,
    setOverlayRef,
    contentRef,
    setContentRef,
    overlayPresent,
    contentPresent,
    close: disclosureState.close,
    toggle: disclosureState.toggle,
    setTriggerRef,
    generateId: createGenerateId(() => mergedProps.id),
    registerContentId: createRegisterId(setContentId),
    registerTitleId: createRegisterId(setTitleId),
    registerDescriptionId: createRegisterId(setDescriptionId)
  };
  return createComponent(DialogContext.Provider, {
    value: context,
    get children() {
      return mergedProps.children;
    }
  });
}
function DialogTitle$1(props) {
  const context = useDialogContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("title")
  }, props);
  const [local, others] = splitProps(mergedProps, ["id"]);
  createEffect(() => onCleanup(context.registerTitleId(local.id)));
  return createComponent(Polymorphic, mergeProps({
    as: "h2",
    get id() {
      return local.id;
    }
  }, others));
}
function DialogTrigger$1(props) {
  const context = useDialogContext();
  const [local, others] = splitProps(props, ["ref", "onClick"]);
  const onClick = (e) => {
    callHandler(e, local.onClick);
    context.toggle();
  };
  return createComponent(ButtonRoot, mergeProps({
    ref(r$) {
      var _ref$3 = mergeRefs(context.setTriggerRef, local.ref);
      typeof _ref$3 === "function" && _ref$3(r$);
    },
    "aria-haspopup": "dialog",
    get ["aria-expanded"]() {
      return context.isOpen();
    },
    get ["aria-controls"]() {
      return createMemo(() => !!context.isOpen())() ? context.contentId() : void 0;
    },
    get ["data-expanded"]() {
      return context.isOpen() ? "" : void 0;
    },
    get ["data-closed"]() {
      return !context.isOpen() ? "" : void 0;
    },
    onClick
  }, others));
}
var Dialog$1 = Object.assign(DialogRoot, {
  CloseButton: DialogCloseButton,
  Content: DialogContent$1,
  Description: DialogDescription$1,
  Overlay: DialogOverlay,
  Portal: DialogPortal,
  Title: DialogTitle$1,
  Trigger: DialogTrigger$1
});
const buttonVariants = {
  default: "inline-flex h-[var(--input-height)] cursor-[var(--cursor)] select-none items-center justify-center whitespace-nowrap rounded-button border-0 p-button text-[length:var(--font-ui-small)] font-[var(--input-font-weight)] text-normal outline-none bg-interactive-normal hover:bg-interactive-hover shadow-['var(--input-shadow)']",
  ghost: "bg-transparent shadow-none",
  // TODO find better width here
  outline: "bg-transparent shadow-none border-border border-[length:var(--prompt-border-width)]",
  accent: "bg-interactive-accent text-on-accent hover:bg-interactive-accent-hover hover:text-accent-hover",
  destructive: "bg-error hover:bg-error hover:opacity-70 text-on-error"
};
var _tmpl$$b = /* @__PURE__ */ template(`<svg xmlns=http://www.w3.org/2000/svg viewBox="0 0 24 24"class="h-4 w-4"><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=2 d="M18 6L6 18M6 6l12 12">`), _tmpl$2$9 = /* @__PURE__ */ template(`<div class=twcss>`), _tmpl$3$6 = /* @__PURE__ */ template(`<div>`);
const Dialog = Dialog$1;
const DialogTrigger = Dialog$1.Trigger;
const DialogClose = (props) => {
  const [local, rest] = splitProps(props, ["class"]);
  return createComponent(Dialog$1.CloseButton, mergeProps(rest, {
    get ["class"]() {
      return cn(buttonVariants.default, local.class);
    }
  }));
};
const DialogCloseX = () => createComponent(Dialog$1.CloseButton, {
  "class": "clickable-icon absolute right-4 top-4 rounded-sm p-1 opacity-70 ring-offset-background transition-[opacity,box-shadow] hover:opacity-100 focus:outline-none focus:ring-[1.5px] focus:ring-selection focus:ring-offset-2 disabled:pointer-events-none",
  get children() {
    return _tmpl$$b();
  }
});
const DialogContent = (props) => {
  const [local, rest] = splitProps(props, ["class", "children"]);
  return createComponent(Dialog$1.Portal, {
    get children() {
      var _el$2 = _tmpl$2$9();
      insert(_el$2, createComponent(Dialog$1.Overlay, mergeProps({
        get ["class"]() {
          return cn("modal-bg z-50 opacity-85");
        }
      }, rest)), null);
      insert(_el$2, createComponent(Dialog$1.Content, mergeProps({
        get ["class"]() {
          return cn("prompt left-1/2 z-50 w-full -translate-x-1/2 gap-4 border-[length:var(--prompt-border-width)] border-modal p-6", local.class);
        }
      }, rest, {
        get children() {
          return [createMemo(() => local.children), createComponent(DialogCloseX, {})];
        }
      })), null);
      return _el$2;
    }
  });
};
const DialogTitle = (props) => {
  const [local, rest] = splitProps(props, ["class"]);
  return createComponent(Dialog$1.Title, mergeProps({
    get ["class"]() {
      return cn("text-foreground m-0 text-lg font-semibold", local.class);
    }
  }, rest));
};
const DialogDescription = (props) => {
  const [local, rest] = splitProps(props, ["class"]);
  return createComponent(Dialog$1.Description, mergeProps({
    get ["class"]() {
      return cn("text-muted-foreground m-0 text-sm", local.class);
    }
  }, rest));
};
const DialogHeader = (props) => {
  const [local, rest] = splitProps(props, ["class"]);
  return (() => {
    var _el$3 = _tmpl$3$6();
    spread(_el$3, mergeProps({
      get ["class"]() {
        return cn("flex flex-col space-y-2 text-center sm:text-left", local.class);
      }
    }, rest), false, false);
    return _el$3;
  })();
};
const DialogFooter = (props) => {
  const [local, rest] = splitProps(props, ["class"]);
  return (() => {
    var _el$4 = _tmpl$3$6();
    spread(_el$4, mergeProps({
      get ["class"]() {
        return cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", local.class);
      }
    }, rest), false, false);
    return _el$4;
  })();
};
var _tmpl$$a = /* @__PURE__ */ template(`<span class=cm-link><a>`), _tmpl$2$8 = /* @__PURE__ */ template(`<span class=external-link>`);
const ExternalLink = (props) => [(() => {
  var _el$ = _tmpl$$a(), _el$2 = _el$.firstChild;
  spread(_el$2, mergeProps(props, {
    "class": "text-accent underline hover:text-accent-hover"
  }), false, false);
  return _el$;
})(), _tmpl$2$8()];
var iconNode$c = [["path", {
  d: "M5 12h14",
  key: "1ays0h"
}]];
var Minus = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Minus",
  iconNode: iconNode$c
}));
var minus_default = Minus;
var iconNode$b = [["path", {
  d: "M8 21s-4-3-4-9 4-9 4-9",
  key: "uto9ud"
}], ["path", {
  d: "M16 3s4 3 4 9-4 9-4 9",
  key: "4w2vsq"
}]];
var Parentheses = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Parentheses",
  iconNode: iconNode$b
}));
var parentheses_default = Parentheses;
var _tmpl$$9 = /* @__PURE__ */ template(`<input autofocus class="h-auto rounded-none border-none bg-transparent p-0 !shadow-none"type=number>`), _tmpl$2$7 = /* @__PURE__ */ template(`<div class="flex w-full items-center gap-1"><button class="clickable-icon size-fit p-1"></button><button class="clickable-icon size-fit p-1">`), _tmpl$3$5 = /* @__PURE__ */ template(`<br>`), _tmpl$4$4 = /* @__PURE__ */ template(`<code>x`), _tmpl$5$3 = /* @__PURE__ */ template(`<input autofocus class="border-border px-1"type=text placeholder="x + 2 / x * 3">`), _tmpl$6$3 = /* @__PURE__ */ template(`<span class=text-error>error`), _tmpl$7$3 = /* @__PURE__ */ template(`<p><span>Calculated:&nbsp;`), _tmpl$8$2 = /* @__PURE__ */ template(`<button class="rounded-button bg-interactive-accent p-button text-on-accent hover:bg-interactive-accent-hover">update`), _tmpl$9$2 = /* @__PURE__ */ template(`<span class=text-success>`);
const NumberInput = (props) => {
  var _a;
  const [size2, setSize] = createSignal(((_a = props.value) == null ? void 0 : _a.toString().length) ?? 5);
  const {
    plugin
  } = useCodeBlock();
  return (() => {
    var _el$ = _tmpl$$9();
    _el$.$$input = (e) => {
      setSize(e.target.value.length);
    };
    _el$.addEventListener("blur", async (e) => {
      await updateMetadataProperty(props.property, toNumber(e.target.value), props.filePath, plugin, props.value);
      props.setEditing(false);
    });
    use(autofocus, _el$, () => true);
    createRenderEffect(() => setAttribute(_el$, "size", size2()));
    createRenderEffect(() => {
      var _a2;
      return _el$.value = ((_a2 = props.value) == null ? void 0 : _a2.toString()) ?? "";
    });
    return _el$;
  })();
};
const NumberButtons = (props) => (() => {
  var _el$2 = _tmpl$2$7(), _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;
  _el$3.$$click = async (e) => {
    e.preventDefault();
    await updateMetadataProperty(props.property, props.value - 1, props.filePath, props.plugin, props.value);
  };
  insert(_el$3, createComponent(minus_default, {
    "class": "pointer-events-none size-3"
  }));
  insert(_el$2, createComponent(NumberExpressionButton, props), _el$4);
  _el$4.$$click = async (e) => {
    e.preventDefault();
    await updateMetadataProperty(props.property, props.value + 1, props.filePath, props.plugin, props.value);
  };
  insert(_el$4, createComponent(plus_default, {
    "class": "pointer-events-none size-3"
  }));
  return _el$2;
})();
const NumberExpressionButton = (props) => {
  const [isOpen, setOpen] = createSignal(false);
  const [calculated, setCalculated] = createSignal(Number(props.value));
  const updateProperty = async (v) => {
    await updateMetadataProperty(props.property, v, props.filePath, props.plugin, props.value);
  };
  return createComponent(Dialog, {
    modal: true,
    get open() {
      return isOpen();
    },
    onOpenChange: (b) => setOpen(b),
    get children() {
      return [createComponent(DialogTrigger, {
        "class": "clickable-icon size-fit p-1",
        get children() {
          return createComponent(parentheses_default, {
            "class": "pointer-events-none size-3"
          });
        }
      }), createComponent(DialogContent, {
        get children() {
          return [createComponent(DialogHeader, {
            get children() {
              return [createComponent(DialogTitle, {
                children: "Update by expression"
              }), createComponent(DialogDescription, {
                get children() {
                  return ["Enter a valid", " ", createComponent(ExternalLink, {
                    href: "https://blacksmithgu.github.io/obsidian-dataview/reference/expressions/",
                    children: "Dataview mathematical expression"
                  }), _tmpl$3$5(), "You can use ", _tmpl$4$4(), " as the current value."];
                }
              })];
            }
          }), (() => {
            var _el$7 = _tmpl$5$3();
            _el$7.$$input = async (e) => {
              const exp = e.target.value.replaceAll("x", props.value.toString()).trim();
              const result = (
                // @ts-expect-error
                await app.plugins.plugins.dataview.api.evaluate(exp)
              );
              setCalculated(() => {
                if (result.successful) return Number(result.value);
                return NaN;
              });
            };
            _el$7.$$keydown = async (e) => {
              if (e.key === "Enter" && !Number.isNaN(calculated())) {
                await updateProperty(calculated());
                setOpen(false);
              }
            };
            use(autofocus, _el$7, () => true);
            return _el$7;
          })(), (() => {
            var _el$8 = _tmpl$7$3();
            _el$8.firstChild;
            insert(_el$8, createComponent(Show, {
              get when() {
                return Number.isNaN(calculated());
              },
              get fallback() {
                return (() => {
                  var _el$12 = _tmpl$9$2();
                  insert(_el$12, calculated);
                  return _el$12;
                })();
              },
              get children() {
                return _tmpl$6$3();
              }
            }), null);
            return _el$8;
          })(), createComponent(DialogFooter, {
            get children() {
              var _el$11 = _tmpl$8$2();
              _el$11.$$click = async () => {
                await updateProperty(calculated());
                setOpen(false);
              };
              createRenderEffect(() => _el$11.disabled = Number.isNaN(calculated()));
              return _el$11;
            }
          })];
        }
      })];
    }
  });
};
delegateEvents(["input", "click", "keydown"]);
var _tmpl$$8 = /* @__PURE__ */ template(`<td class="whitespace-normal text-nowrap"tabindex=0>`), _tmpl$2$6 = /* @__PURE__ */ template(`<div>`), _tmpl$3$4 = /* @__PURE__ */ template(`<div class=size-full>`);
const TableData = (props) => {
  const [isEditing, setEditing] = createSignal(false);
  const {
    plugin,
    dataviewAPI: {
      settings: {
        tableIdColumnName,
        defaultDateFormat,
        defaultDateTimeFormat,
        renderNullAs
      },
      luxon
    },
    config,
    ctx
  } = useCodeBlock();
  const valueType = createMemo(() => {
    return getValueType(props.value, props.header, luxon);
  });
  const isEditableProperty = (property) => {
    const str = (property ?? "").toLowerCase();
    if (str === COMPLEX_PROPERTY_PLACEHOLDER.toLowerCase()) return false;
    if (str === tableIdColumnName.toLowerCase()) return false;
    if (str.includes("file.")) return false;
    return true;
  };
  return (() => {
    var _el$ = _tmpl$$8();
    addEventListener(_el$, "mousemove", props.onMouseMove, true);
    _el$.$$click = (e) => {
      if (e.target.tagName.toLowerCase() === "button") return;
      if (valueType() === "multitext") return;
      setEditing(true);
    };
    insert(_el$, createComponent(Show, {
      get when() {
        return valueType() !== "multitext" || valueType() !== "aliases";
      },
      get fallback() {
        return createComponent(ListTableDataWrapper, props);
      },
      get children() {
        return [createComponent(Show, {
          get when() {
            return createMemo(() => !!(!config.lockEditing && isEditing()))() && isEditableProperty(props.property);
          },
          get fallback() {
            return (() => {
              var _el$2 = _tmpl$2$6();
              addEventListener(_el$2, "click", isEditableProperty(props.property) ? void 0 : config.lockEditing ? void 0 : () => new obsidian.Notice("This is a calculated property, so you can't edit it!"), true);
              insert(_el$2, createComponent(TableDataDisplay, mergeProps(props, {
                setEditing,
                get valueType() {
                  return valueType();
                },
                plugin,
                ctx,
                defaultDateFormat,
                defaultDateTimeFormat,
                renderNullAs
              })));
              return _el$2;
            })();
          },
          get children() {
            return createComponent(TableDataEdit, mergeProps(props, {
              setEditing,
              get valueType() {
                return valueType();
              }
            }));
          }
        }), createComponent(Show, {
          get when() {
            return valueType() === "number" && isEditableProperty(props.property) && !config.lockEditing;
          },
          get children() {
            return createComponent(NumberButtons, mergeProps(props, {
              plugin
            }));
          }
        })];
      }
    }));
    createRenderEffect((_$p) => style(_el$, props.style, _$p));
    return _el$;
  })();
};
const TableDataDisplay = (props) => {
  return [createComponent(Show, {
    get when() {
      return props.valueType === "text" || props.valueType === "number";
    },
    get children() {
      return createComponent(Markdown, {
        "class": "size-full",
        get app() {
          return props.plugin.app;
        },
        get markdown() {
          return tryDataviewLinkToMarkdown(props.value) || props.renderNullAs;
        },
        get sourcePath() {
          return props.ctx.sourcePath;
        }
      });
    }
  }), createComponent(Show, {
    get when() {
      return props.valueType === "checkbox";
    },
    get children() {
      return createComponent(CheckboxInput, props);
    }
  }), createComponent(Show, {
    get when() {
      return props.valueType === "date" || props.valueType === "datetime";
    },
    get children() {
      var _el$3 = _tmpl$3$4();
      insert(_el$3, () => props.value.toFormat(checkIfDateHasTime(props.value) ? props.defaultDateTimeFormat : props.defaultDateFormat));
      return _el$3;
    }
  })];
};
const TableDataEdit = (props) => {
  return [createComponent(Show, {
    get when() {
      return props.valueType === "text";
    },
    get children() {
      return createComponent(TextInput, props);
    }
  }), createComponent(Show, {
    get when() {
      return props.valueType === "number";
    },
    get children() {
      return createComponent(NumberInput, props);
    }
  }), createComponent(Show, {
    get when() {
      return props.valueType === "date" || props.valueType === "datetime";
    },
    get children() {
      return createComponent(DateDatetimeInput, props);
    }
  })];
};
delegateEvents(["click", "mousemove"]);
var _tmpl$$7 = /* @__PURE__ */ template(`<tbody>`), _tmpl$2$5 = /* @__PURE__ */ template(`<tr>`);
const highlightStyle = {
  "border-left-width": "2px",
  "border-right-width": "2px",
  "border-left-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))",
  "border-right-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))",
  "background-color": `hsl(var(--accent-h) var(--accent-s) var(--accent-l) / 10%)`
};
const draggedOverRight = {
  "border-right-width": "2px",
  "border-right-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))"
};
const draggedOverLeft = {
  "border-left-width": "2px",
  "border-left-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))"
};
const lastCellHighlight = {
  "border-bottom-width": "2px",
  "border-bottom-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))"
};
const TableBody = (props) => {
  const codeBlockInfo = useCodeBlock();
  const {
    dataviewAPI: {
      settings: {
        tableIdColumnName
      }
    }
  } = codeBlockInfo;
  return (() => {
    var _el$ = _tmpl$$7();
    insert(_el$, createComponent(For, {
      get each() {
        return props.rows;
      },
      children: (row, rowIndex) => (() => {
        var _el$2 = _tmpl$2$5();
        insert(_el$2, createComponent(For, {
          each: row,
          children: (value, valueIndex) => createComponent(Show, {
            get when() {
              return !(codeBlockInfo.hideFileCol && valueIndex() === props.headers.length - 1);
            },
            get children() {
              return createComponent(TableData, {
                value,
                get header() {
                  return props.headers[valueIndex()];
                },
                get property() {
                  return props.properties[valueIndex()];
                },
                get filePath() {
                  return row[getIdColumnIndex(props.headers, tableIdColumnName)].path ?? "";
                },
                onMouseMove: () => {
                  if (props.highlightIndex === -1) return;
                  props.setDraggedOverIndex(valueIndex());
                },
                get style() {
                  return createMemo(() => valueIndex() === props.highlightIndex)() ? rowIndex() === props.rows.length - 1 ? {
                    ...highlightStyle,
                    ...lastCellHighlight
                  } : highlightStyle : createMemo(() => valueIndex() === props.draggedOverIndex)() ? props.highlightIndex < valueIndex() ? draggedOverRight : draggedOverLeft : {};
                }
              });
            }
          })
        }));
        return _el$2;
      })()
    }));
    return _el$;
  })();
};
var iconNode$a = [["circle", {
  cx: "12",
  cy: "9",
  r: "1",
  key: "124mty"
}], ["circle", {
  cx: "19",
  cy: "9",
  r: "1",
  key: "1ruzo2"
}], ["circle", {
  cx: "5",
  cy: "9",
  r: "1",
  key: "1a8b28"
}], ["circle", {
  cx: "12",
  cy: "15",
  r: "1",
  key: "1e56xg"
}], ["circle", {
  cx: "19",
  cy: "15",
  r: "1",
  key: "1a92ep"
}], ["circle", {
  cx: "5",
  cy: "15",
  r: "1",
  key: "5r1jwy"
}]];
var GripHorizontal = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "GripHorizontal",
  iconNode: iconNode$a
}));
var grip_horizontal_default = GripHorizontal;
var iconNode$9 = [["line", {
  x1: "21",
  x2: "3",
  y1: "6",
  y2: "6",
  key: "1fp77t"
}], ["line", {
  x1: "15",
  x2: "3",
  y1: "12",
  y2: "12",
  key: "v6grx8"
}], ["line", {
  x1: "17",
  x2: "3",
  y1: "18",
  y2: "18",
  key: "1awlsn"
}]];
var AlignLeft = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "AlignLeft",
  iconNode: iconNode$9
}));
var align_left_default = AlignLeft;
var iconNode$8 = [["path", {
  d: "m9 11 3 3L22 4",
  key: "1pflzl"
}], ["path", {
  d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11",
  key: "1jnkn4"
}]];
var SquareCheckBig = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "SquareCheckBig",
  iconNode: iconNode$8
}));
var square_check_big_default = SquareCheckBig;
var iconNode$7 = [["line", {
  x1: "8",
  x2: "21",
  y1: "6",
  y2: "6",
  key: "7ey8pc"
}], ["line", {
  x1: "8",
  x2: "21",
  y1: "12",
  y2: "12",
  key: "rjfblc"
}], ["line", {
  x1: "8",
  x2: "21",
  y1: "18",
  y2: "18",
  key: "c3b1m8"
}], ["line", {
  x1: "3",
  x2: "3.01",
  y1: "6",
  y2: "6",
  key: "1g7gq3"
}], ["line", {
  x1: "3",
  x2: "3.01",
  y1: "12",
  y2: "12",
  key: "1pjlvk"
}], ["line", {
  x1: "3",
  x2: "3.01",
  y1: "18",
  y2: "18",
  key: "28t2mc"
}]];
var List = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "List",
  iconNode: iconNode$7
}));
var list_default = List;
var iconNode$6 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10",
  key: "1mglay"
}], ["polyline", {
  points: "12 6 12 12 16 14",
  key: "68esgv"
}]];
var Clock = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Clock",
  iconNode: iconNode$6
}));
var clock_default = Clock;
var iconNode$5 = [["path", {
  d: "M8 2v4",
  key: "1cmpym"
}], ["path", {
  d: "M16 2v4",
  key: "4m81vk"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2",
  key: "1hopcy"
}], ["path", {
  d: "M3 10h18",
  key: "8toen8"
}]];
var Calendar = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Calendar",
  iconNode: iconNode$5
}));
var calendar_default = Calendar;
var iconNode$4 = [["rect", {
  x: "14",
  y: "14",
  width: "4",
  height: "6",
  rx: "2",
  key: "p02svl"
}], ["rect", {
  x: "6",
  y: "4",
  width: "4",
  height: "6",
  rx: "2",
  key: "xm4xkj"
}], ["path", {
  d: "M6 20h4",
  key: "1i6q5t"
}], ["path", {
  d: "M14 10h4",
  key: "ru81e7"
}], ["path", {
  d: "M6 14h2v6",
  key: "16z9wg"
}], ["path", {
  d: "M14 4h2v6",
  key: "1idq9u"
}]];
var Binary = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Binary",
  iconNode: iconNode$4
}));
var binary_default = Binary;
var iconNode$3 = [["path", {
  d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
  key: "4pj2yx"
}], ["path", {
  d: "M20 3v4",
  key: "1olli1"
}], ["path", {
  d: "M22 5h-4",
  key: "1gvqau"
}], ["path", {
  d: "M4 17v2",
  key: "vumght"
}], ["path", {
  d: "M5 18H3",
  key: "zchphs"
}]];
var Sparkles = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Sparkles",
  iconNode: iconNode$3
}));
var sparkles_default = Sparkles;
var iconNode$2 = [["path", {
  d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19",
  key: "1cbfv1"
}], ["path", {
  d: "M9.586 5.586A2 2 0 0 0 8.172 5H3a1 1 0 0 0-1 1v5.172a2 2 0 0 0 .586 1.414L8.29 18.29a2.426 2.426 0 0 0 3.42 0l3.58-3.58a2.426 2.426 0 0 0 0-3.42z",
  key: "135mg7"
}], ["circle", {
  cx: "6.5",
  cy: "9.5",
  r: ".5",
  fill: "currentColor",
  key: "5pm5xn"
}]];
var Tags = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "Tags",
  iconNode: iconNode$2
}));
var tags_default = Tags;
var iconNode$1 = [["polyline", {
  points: "15 14 20 9 15 4",
  key: "1tbx3s"
}], ["path", {
  d: "M4 20v-7a4 4 0 0 1 4-4h12",
  key: "1lu4f8"
}]];
var CornerUpRight = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "CornerUpRight",
  iconNode: iconNode$1
}));
var corner_up_right_default = CornerUpRight;
var iconNode = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
  key: "1rqfz7"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4",
  key: "tnqrlb"
}]];
var File = (props) => createComponent(Icon_default, mergeProps(props, {
  name: "File",
  iconNode
}));
var file_default = File;
const PropertyIcon = (props) => {
  const {
    dataviewAPI: {
      settings: {
        tableIdColumnName
      }
    },
    config: {
      headerIcons
    }
  } = useCodeBlock();
  return (
    // <div
    //   class="metadata-property"
    //   data-property-key={props.property}
    //   data-property-type={props.type}
    // >
    //   <span class="metadata-property-icon">
    createComponent(Show, {
      when: headerIcons,
      get children() {
        return createComponent(Switch, {
          get children() {
            return [createComponent(Match, {
              get when() {
                var _a;
                return props.property === tableIdColumnName || ((_a = props.property) == null ? void 0 : _a.toLowerCase()) === "file.link";
              },
              get children() {
                return createComponent(file_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "text";
              },
              get children() {
                return createComponent(align_left_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "multitext";
              },
              get children() {
                return createComponent(list_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "checkbox";
              },
              get children() {
                return createComponent(square_check_big_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "number";
              },
              get children() {
                return createComponent(binary_default, {
                  size: "1rem",
                  "class": "svg-icon lucide-binary"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "date";
              },
              get children() {
                return createComponent(calendar_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "datetime";
              },
              get children() {
                return createComponent(clock_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "tags";
              },
              get children() {
                return createComponent(tags_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "aliases";
              },
              get children() {
                return createComponent(corner_up_right_default, {
                  size: "1rem"
                });
              }
            }), createComponent(Match, {
              get when() {
                return props.type === "unknown";
              },
              get children() {
                return createComponent(sparkles_default, {
                  size: "1rem"
                });
              }
            })];
          }
        });
      }
    })
  );
};
var _tmpl$$6 = /* @__PURE__ */ template(`<tr>`), _tmpl$2$4 = /* @__PURE__ */ template(`<thead><tr>`), _tmpl$3$3 = /* @__PURE__ */ template(`<th><div aria-roledescription=column-drag-handle class="flex size-full items-end justify-center">`), _tmpl$4$3 = /* @__PURE__ */ template(`<th class="relative text-nowrap"><div class="flex items-center">&nbsp;`);
const TableHead = (props) => {
  const codeBlockInfo = useCodeBlock();
  const {
    plugin,
    ctx,
    el,
    query,
    dataviewAPI: {
      settings: {
        tableIdColumnName
      }
    },
    hideFileCol
  } = codeBlockInfo;
  const [translateX, setTranslateX] = createSignal(0);
  const propertyTypes = createMemo(() => getPropertyTypes(props.properties, plugin.app.metadataCache));
  let lastMousePos = 0;
  const onMouseMove = (e) => {
    if (props.highlightIndex === -1) return;
    setTranslateX(() => e.clientX - lastMousePos);
  };
  const onMouseUp = () => {
    if (props.draggedOverIndex !== -1 && props.draggedOverIndex !== props.highlightIndex) {
      const {
        app: {
          workspace
        }
      } = plugin;
      const view = workspace.getActiveViewOfType(obsidian.MarkdownView);
      const sectionInfo = ctx.getSectionInfo(el);
      if (!sectionInfo || !view) {
        throw new Error("This should be impossible");
      }
      const {
        lineStart
      } = sectionInfo;
      const {
        line: prePreTableLine,
        index
      } = getTableLine(query);
      const preTableLine = hideFileCol ? prePreTableLine.slice(0, -11) : prePreTableLine;
      const tableLineIndex = lineStart + index + 1;
      const isWithoutId = new RegExp(/TABLE\s+WITHOUT\s+ID/gim).test(preTableLine);
      const isDraggingDefaultId = (
        // if query has 'WITHOUT ID' we don't care
        !isWithoutId && // default id col is always first
        props.highlightIndex === 0 && // the header will always be the name from dataview settings
        props.headers[props.highlightIndex] === tableIdColumnName
      );
      const isDraggedOverDefaultId = !isWithoutId && props.draggedOverIndex === 0 && props.headers[props.draggedOverIndex] === tableIdColumnName;
      const isRelatingToDefaultId = isDraggingDefaultId || isDraggedOverDefaultId;
      const tableLine = isRelatingToDefaultId ? (
        // to 'move' the default id col, we have to modify the query to have this and a file.link col
        preTableLine.replace(/table/i, "TABLE WITHOUT ID")
      ) : preTableLine;
      const tableKeyword = tableLine.slice(0, isWithoutId || isRelatingToDefaultId ? 16 : 5).trim();
      const preCols = tableLine.slice(isWithoutId || isRelatingToDefaultId ? 17 : 6).split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/).map((c) => c.trim());
      const cols = isRelatingToDefaultId ? (
        // this is how we allow the default id col to be 'moved'
        ["file.link AS " + tableIdColumnName, ...preCols]
      ) : preCols;
      const highlightIndex = props.highlightIndex - (isWithoutId || isRelatingToDefaultId ? 0 : 1);
      const draggedIndex = props.draggedOverIndex - (isWithoutId || isRelatingToDefaultId ? 0 : 1);
      const colsWithoutHighlight = cols.toSpliced(highlightIndex, 1);
      const newCols = colsWithoutHighlight.toSpliced(draggedIndex, 0, cols[highlightIndex]);
      const scrollFixer = new ScrollFixer(el);
      view.editor.setLine(tableLineIndex, tableKeyword + " " + newCols.join(", "));
      scrollFixer.fix();
    }
    props.setHighlightIndex(-1);
    props.setDraggedOverIndex(-1);
    setTranslateX(0);
    lastMousePos = 0;
    window.removeEventListener("mousemove", onMouseMove);
  };
  window.addEventListener("mouseup", onMouseUp);
  onCleanup(() => {
    window.removeEventListener("mousemove", onMouseMove);
    window.removeEventListener("mouseup", onMouseUp);
  });
  return (() => {
    var _el$ = _tmpl$2$4(), _el$3 = _el$.firstChild;
    insert(_el$, createComponent(Show, {
      get when() {
        return !codeBlockInfo.config.lockEditing;
      },
      get children() {
        var _el$2 = _tmpl$$6();
        insert(_el$2, createComponent(For, {
          get each() {
            return props.headers;
          },
          children: (_, index) => createComponent(Show, {
            get when() {
              return !(codeBlockInfo.hideFileCol && index() === props.headers.length - 1);
            },
            get children() {
              var _el$4 = _tmpl$3$3(), _el$5 = _el$4.firstChild;
              _el$4.$$mousemove = () => {
                if (props.highlightIndex === -1) return;
                props.setDraggedOverIndex(index());
              };
              _el$4.$$mousedown = (e) => {
                props.setHighlightIndex(index());
                setTranslateX(0);
                lastMousePos = e.clientX;
                window.addEventListener("mousemove", onMouseMove);
              };
              insert(_el$5, createComponent(grip_horizontal_default, {
                size: "1rem"
              }));
              createRenderEffect((_p$) => {
                var _v$ = `relative m-0 cursor-grab overflow-visible border-x-transparent border-t-transparent p-0 text-muted active:cursor-grabbing ${index() === props.highlightIndex ? "opacity-100" : "opacity-0"} ${props.highlightIndex === -1 ? "hover:opacity-100" : ""}`, _v$2 = index() === props.highlightIndex ? {
                  background: "hsl(var(--accent-h) var(--accent-s) var(--accent-l))",
                  "border-radius": "var(--radius-s) var(--radius-s) 0 0",
                  translate: translateX() + "px 0",
                  "pointer-events": "none"
                } : props.highlightIndex !== -1 ? {
                  cursor: "grabbing"
                } : {};
                _v$ !== _p$.e && className(_el$4, _p$.e = _v$);
                _p$.t = style(_el$5, _v$2, _p$.t);
                return _p$;
              }, {
                e: void 0,
                t: void 0
              });
              return _el$4;
            }
          })
        }));
        return _el$2;
      }
    }), _el$3);
    insert(_el$3, createComponent(For, {
      get each() {
        return props.headers;
      },
      children: (h, index) => createComponent(Show, {
        get when() {
          return !(codeBlockInfo.hideFileCol && index() === props.headers.length - 1);
        },
        get children() {
          var _el$6 = _tmpl$4$3(), _el$7 = _el$6.firstChild, _el$8 = _el$7.firstChild;
          _el$6.$$mousemove = () => {
            if (props.highlightIndex === -1) return;
            props.setDraggedOverIndex(index());
          };
          insert(_el$7, createComponent(Markdown, {
            get app() {
              return plugin.app;
            },
            markdown: h,
            get sourcePath() {
              return ctx.sourcePath;
            }
          }), _el$8);
          insert(_el$7, createComponent(PropertyIcon, {
            get property() {
              return props.properties[index()];
            },
            get type() {
              return propertyTypes()[index()];
            }
          }), null);
          createRenderEffect((_$p) => style(_el$6, index() === props.highlightIndex ? {
            "border-top-width": "2px",
            "border-left-width": "2px",
            "border-right-width": "2px",
            "border-top-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))",
            "border-left-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))",
            "border-right-color": "hsl(var(--accent-h) var(--accent-s) var(--accent-l))",
            "background-color": `hsl(var(--accent-h) var(--accent-s) var(--accent-l) / 10%)`
          } : props.highlightIndex !== -1 && index() === props.draggedOverIndex ? props.highlightIndex < index() ? draggedOverRight : draggedOverLeft : {}, _$p));
          return _el$6;
        }
      })
    }));
    return _el$;
  })();
};
delegateEvents(["mousedown", "mousemove"]);
var _tmpl$$5 = /* @__PURE__ */ template(`<span aria-label="Add row after"class="absolute bottom-[-1rem] left-0 flex w-full cursor-ns-resize items-center justify-center rounded-[1px] border border-t-0 border-solid border-border opacity-0 hover:opacity-50">`), _tmpl$2$3 = /* @__PURE__ */ template(`<div class="relative mb-4 mr-4 h-fit w-fit"><table>`), _tmpl$3$2 = /* @__PURE__ */ template(`<div><h2>Dataview error</h2><p>`), _tmpl$4$2 = /* @__PURE__ */ template(`<div class="flex w-full flex-wrap items-center justify-between"><label for=property-input>Property: </label><input autofocus name=property-input id=property-input type=text list=properties-datalist><datalist id=properties-datalist>`), _tmpl$5$2 = /* @__PURE__ */ template(`<div class="flex w-full flex-wrap items-center justify-between"><label for=alias-input>Alias (optional): </label><input name=alias-input id=alias-input type=text>`), _tmpl$6$2 = /* @__PURE__ */ template(`<div class=w-full><button class="float-right bg-interactive-accent p-button text-on-accent hover:bg-interactive-accent-hover hover:text-accent-hover disabled:cursor-not-allowed">add`), _tmpl$7$2 = /* @__PURE__ */ template(`<option>`), _tmpl$8$1 = /* @__PURE__ */ template(`<div class="flex w-full items-center justify-between"><label for=title-input>Title: </label><input autofocus name=title-input id=title-input type=text>`), _tmpl$9$1 = /* @__PURE__ */ template(`<datalist id=template-datalist>`), _tmpl$10$1 = /* @__PURE__ */ template(`<div class="flex w-full items-center justify-between"><label for=template-input>Template (optional): </label><input name=template-input id=template-input type=text list=template-datalist>`), _tmpl$11 = /* @__PURE__ */ template(`<div class="flex items-center gap-1"><input type=checkbox id=save-as-default-template name=save-as-default-template><label for=save-as-default-template>Save as default for this block`);
const Table = (props) => {
  const codeBlockInfo = useCodeBlock();
  const {
    config: {
      tableClassName
    }
  } = codeBlockInfo;
  const [highlightIndex, setHighlightIndex] = createSignal(-1);
  const [draggedOverIndex, setDraggedOverIndex] = createSignal(-1);
  const [isAddColumnDialogOpen, setAddColumnDialogOpen] = createSignal(false);
  const [isAddRowDialogOpen, setAddRowDialogOpen] = createSignal(false);
  return createComponent(Show, {
    get when() {
      return props.queryResults.successful;
    },
    get fallback() {
      return createComponent(TableFallback, {
        get queryResults() {
          return props.queryResults;
        }
      });
    },
    get children() {
      var _el$ = _tmpl$2$3(), _el$2 = _el$.firstChild;
      className(_el$2, tableClassName);
      insert(_el$2, createComponent(TableHead, {
        get headers() {
          return props.queryResults.value.headers;
        },
        get properties() {
          return props.queryResults.truePropertyNames;
        },
        get highlightIndex() {
          return highlightIndex();
        },
        setHighlightIndex,
        get draggedOverIndex() {
          return draggedOverIndex();
        },
        setDraggedOverIndex
      }), null);
      insert(_el$2, createComponent(TableBody, {
        get headers() {
          return props.queryResults.value.headers;
        },
        get properties() {
          return props.queryResults.truePropertyNames;
        },
        get rows() {
          return props.queryResults.value.values;
        },
        get highlightIndex() {
          return highlightIndex();
        },
        setHighlightIndex,
        get draggedOverIndex() {
          return draggedOverIndex();
        },
        setDraggedOverIndex
      }), null);
      insert(_el$, createComponent(Show, {
        get when() {
          return !codeBlockInfo.config.lockEditing;
        },
        get children() {
          return [createComponent(AddColumnButton, {
            get open() {
              return isAddColumnDialogOpen();
            },
            setOpen: setAddColumnDialogOpen
          }), (() => {
            var _el$3 = _tmpl$$5();
            _el$3.$$click = () => setAddRowDialogOpen(true);
            insert(_el$3, createComponent(plus_default, {
              size: "1rem"
            }));
            return _el$3;
          })(), createComponent(AddRowButton, {
            get open() {
              return isAddRowDialogOpen();
            },
            setOpen: setAddRowDialogOpen
          })];
        }
      }), null);
      createRenderEffect((_$p) => style(_el$2, highlightIndex() !== -1 ? {
        "user-select": "none"
      } : {}, _$p));
      return _el$;
    }
  });
};
const TableFallback = (props) => {
  return (() => {
    var _el$4 = _tmpl$3$2(), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;
    insert(_el$6, () => props.queryResults.error);
    return _el$4;
  })();
};
const AddColumnButton = (props) => {
  const {
    plugin: {
      app: app2
    },
    ctx,
    el,
    query
  } = useCodeBlock();
  const view = app2.workspace.getActiveViewOfType(obsidian.MarkdownView);
  if (!view) {
    return;
  }
  const sectionInfo = ctx.getSectionInfo(el);
  if (!sectionInfo) {
    return;
  }
  const {
    lineStart
  } = sectionInfo;
  const [propertyValue, setPropertyValue] = createSignal("");
  const [aliasValue, setAliasValue] = createSignal("");
  const markdown = createMemo(() => {
    const prop = propertyValue().trim();
    const lines = ("```dataview\n" + query + "\n```").split("\n");
    if (!prop) return lines.join("\n");
    const alias = aliasValue();
    const aliasStr = alias ? " AS " + (alias.includes(" ") ? '"' + alias + '"' : alias) : "";
    const {
      index
    } = getTableLine(query);
    lines[index + 1] += ", " + prop + aliasStr;
    return lines.join("\n");
  });
  const addCol = () => {
    const prop = propertyValue().trim();
    const alias = aliasValue();
    const aliasStr = alias ? " AS " + (alias.includes(" ") ? '"' + alias + '"' : alias) : "";
    const {
      line,
      index
    } = getTableLine(query);
    const relativeIndex = lineStart + index + 1;
    view.editor.setLine(relativeIndex, line + ", " + prop + aliasStr);
  };
  const properties = getExistingProperties(app2);
  const propertyNames = Object.keys(properties).sort();
  return createComponent(Dialog, {
    get open() {
      return props.open;
    },
    onOpenChange: (b) => props.setOpen(b),
    get children() {
      return [createComponent(DialogTrigger, {
        "aria-label": "Add column after",
        "class": "absolute right-[-1rem] top-[calc(1rem+var(--border-width))] m-0 flex size-fit h-[calc(100%-1rem-var(--border-width))] cursor-ew-resize items-center justify-center rounded-none border border-l-0 border-solid border-border bg-transparent p-0 opacity-0 shadow-none hover:opacity-50",
        get children() {
          return createComponent(plus_default, {
            size: "1rem"
          });
        }
      }), createComponent(DialogContent, {
        get children() {
          return [createComponent(DialogTitle, {
            children: "Add column"
          }), (() => {
            var _el$7 = _tmpl$4$2(), _el$8 = _el$7.firstChild, _el$9 = _el$8.nextSibling, _el$10 = _el$9.nextSibling;
            _el$9.$$input = (e) => setPropertyValue(e.target.value);
            use(autofocus, _el$9, () => true);
            insert(_el$10, createComponent(For, {
              each: propertyNames,
              children: (prop) => (() => {
                var _el$16 = _tmpl$7$2();
                _el$16.value = prop;
                insert(_el$16, () => properties[prop].type);
                return _el$16;
              })()
            }));
            createRenderEffect(() => _el$9.value = propertyValue());
            return _el$7;
          })(), (() => {
            var _el$11 = _tmpl$5$2(), _el$12 = _el$11.firstChild, _el$13 = _el$12.nextSibling;
            _el$13.$$input = (e) => setAliasValue(e.target.value);
            createRenderEffect(() => _el$13.value = aliasValue());
            return _el$11;
          })(), createComponent(Markdown, {
            app: app2,
            get markdown() {
              return markdown();
            },
            get sourcePath() {
              return ctx.sourcePath;
            },
            "class": "max-h-[50%] overflow-y-auto"
          }), (() => {
            var _el$14 = _tmpl$6$2(), _el$15 = _el$14.firstChild;
            _el$15.$$click = async () => {
              addCol();
              props.setOpen(false);
            };
            createRenderEffect(() => _el$15.disabled = !propertyValue());
            return _el$14;
          })()];
        }
      })];
    }
  });
};
const AddRowButton = (props) => {
  const codeBlockInfo = useCodeBlock();
  const {
    plugin: {
      app: app2
    },
    config
  } = codeBlockInfo;
  const [titleValue, setTitleValue] = createSignal("");
  const [templateValue, setTemplateValue] = createSignal("");
  const [isSaveDefault, setSaveDefault] = createSignal(false);
  const templates = getTemplateFiles(app2);
  const handleHasDefault = () => {
    if (!config.newNoteTemplatePath) return;
    const found = templates == null ? void 0 : templates.find((f) => f.path === config.newNoteTemplatePath);
    if (!found) return;
    setTemplateValue(found.name.slice(0, -3));
  };
  handleHasDefault();
  return createComponent(Dialog, {
    get open() {
      return props.open;
    },
    onOpenChange: (b) => props.setOpen(b),
    get children() {
      return createComponent(DialogContent, {
        get children() {
          return [createComponent(DialogTitle, {
            children: "Create new note"
          }), (() => {
            var _el$17 = _tmpl$8$1(), _el$18 = _el$17.firstChild, _el$19 = _el$18.nextSibling;
            _el$19.$$input = (e) => setTitleValue(e.target.value);
            use(autofocus, _el$19, () => true);
            createRenderEffect(() => _el$19.value = titleValue());
            return _el$17;
          })(), (() => {
            var _el$20 = _tmpl$10$1(), _el$21 = _el$20.firstChild, _el$22 = _el$21.nextSibling;
            _el$22.$$input = (e) => setTemplateValue(e.target.value);
            _el$22.disabled = !templates;
            insert(_el$20, createComponent(Show, {
              when: templates,
              get children() {
                var _el$23 = _tmpl$9$1();
                insert(_el$23, createComponent(For, {
                  each: templates,
                  children: (file) => (() => {
                    var _el$28 = _tmpl$7$2();
                    insert(_el$28, () => file.path);
                    createRenderEffect(() => _el$28.value = file.name.slice(0, -3));
                    return _el$28;
                  })()
                }));
                return _el$23;
              }
            }), null);
            createRenderEffect(() => _el$22.value = templateValue());
            return _el$20;
          })(), (() => {
            var _el$24 = _tmpl$11(), _el$25 = _el$24.firstChild;
            _el$25.$$click = () => setSaveDefault((prev) => !prev);
            createRenderEffect(() => _el$25.checked = isSaveDefault());
            return _el$24;
          })(), (() => {
            var _el$26 = _tmpl$6$2(), _el$27 = _el$26.firstChild;
            _el$27.$$click = async () => {
              const title = titleValue().includes(".md") ? titleValue() : titleValue() + ".md";
              if (!templates) {
                try {
                  await app2.vault.create(title, "");
                  props.setOpen(false);
                  return;
                } catch (_) {
                  new obsidian.Notice("Note already exists, choose a different name");
                  return;
                }
              }
              const templateFile = templates.find((t) => t.name === templateValue() + ".md");
              const content = await app2.vault.cachedRead(templateFile);
              try {
                await app2.vault.create(title, content);
              } catch (_) {
                new obsidian.Notice("Note already exists, choose a different name");
                return;
              }
              if (isSaveDefault()) {
                const path = templates.find((f) => f.name === templateValue() + ".md").path;
                updateBlockConfig("newNoteTemplatePath", path, codeBlockInfo);
              }
              props.setOpen(false);
            };
            createRenderEffect(() => _el$27.disabled = !titleValue());
            return _el$26;
          })()];
        }
      });
    }
  });
};
delegateEvents(["click", "input"]);
var _tmpl$$4 = /* @__PURE__ */ template(`<div><input type=checkbox>`);
const Toggle = (props) => {
  const [local, rest] = splitProps(props, ["containerClass", "onCheckedChange"]);
  const [isChecked, setChecked] = createSignal(!!rest.checked);
  return (() => {
    var _el$ = _tmpl$$4(), _el$2 = _el$.firstChild;
    _el$.$$click = () => {
      setChecked((prev) => {
        if (local.onCheckedChange) local.onCheckedChange(!prev);
        return !prev;
      });
    };
    spread(_el$2, mergeProps(rest, {
      get checked() {
        return isChecked();
      }
    }), false, false);
    createRenderEffect(() => className(_el$, `checkbox-container ${isChecked() ? "is-enabled" : " "}`));
    return _el$;
  })();
};
delegateEvents(["click"]);
var FORM_CONTROL_PROP_NAMES = ["id", "name", "validationState", "required", "disabled", "readOnly"];
function createFormControl(props) {
  const defaultId = `form-control-${createUniqueId()}`;
  const mergedProps = mergeDefaultProps({
    id: defaultId
  }, props);
  const [labelId, setLabelId] = createSignal();
  const [fieldId, setFieldId] = createSignal();
  const [descriptionId, setDescriptionId] = createSignal();
  const [errorMessageId, setErrorMessageId] = createSignal();
  const getAriaLabelledBy = (fieldId2, fieldAriaLabel, fieldAriaLabelledBy) => {
    const hasAriaLabelledBy = fieldAriaLabelledBy != null || labelId() != null;
    return [
      fieldAriaLabelledBy,
      labelId(),
      // If there is both an aria-label and aria-labelledby, add the field itself has an aria-labelledby
      hasAriaLabelledBy && fieldAriaLabel != null ? fieldId2 : void 0
    ].filter(Boolean).join(" ") || void 0;
  };
  const getAriaDescribedBy = (fieldAriaDescribedBy) => {
    return [
      descriptionId(),
      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA.
      // See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
      errorMessageId(),
      fieldAriaDescribedBy
    ].filter(Boolean).join(" ") || void 0;
  };
  const dataset = createMemo(() => ({
    "data-valid": access$1(mergedProps.validationState) === "valid" ? "" : void 0,
    "data-invalid": access$1(mergedProps.validationState) === "invalid" ? "" : void 0,
    "data-required": access$1(mergedProps.required) ? "" : void 0,
    "data-disabled": access$1(mergedProps.disabled) ? "" : void 0,
    "data-readonly": access$1(mergedProps.readOnly) ? "" : void 0
  }));
  const formControlContext = {
    name: () => access$1(mergedProps.name) ?? access$1(mergedProps.id),
    dataset,
    validationState: () => access$1(mergedProps.validationState),
    isRequired: () => access$1(mergedProps.required),
    isDisabled: () => access$1(mergedProps.disabled),
    isReadOnly: () => access$1(mergedProps.readOnly),
    labelId,
    fieldId,
    descriptionId,
    errorMessageId,
    getAriaLabelledBy,
    getAriaDescribedBy,
    generateId: createGenerateId(() => access$1(mergedProps.id)),
    registerLabel: createRegisterId(setLabelId),
    registerField: createRegisterId(setFieldId),
    registerDescription: createRegisterId(setDescriptionId),
    registerErrorMessage: createRegisterId(setErrorMessageId)
  };
  return {
    formControlContext
  };
}
var FormControlContext = createContext();
function useFormControlContext() {
  const context = useContext(FormControlContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `useFormControlContext` must be used within a `FormControlContext.Provider` component");
  }
  return context;
}
function FormControlDescription(props) {
  const context = useFormControlContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("description")
  }, props);
  createEffect(() => onCleanup(context.registerDescription(mergedProps.id)));
  return createComponent(Polymorphic, mergeProps({
    as: "div"
  }, () => context.dataset(), mergedProps));
}
function FormControlErrorMessage(props) {
  const context = useFormControlContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("error-message")
  }, props);
  const [local, others] = splitProps(mergedProps, ["forceMount"]);
  const isInvalid = () => context.validationState() === "invalid";
  createEffect(() => {
    if (!isInvalid()) {
      return;
    }
    onCleanup(context.registerErrorMessage(others.id));
  });
  return createComponent(Show, {
    get when() {
      return local.forceMount || isInvalid();
    },
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "div"
      }, () => context.dataset(), others));
    }
  });
}
function FormControlLabel(props) {
  let ref;
  const context = useFormControlContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("label")
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref"]);
  const tagName = createTagName(() => ref, () => "label");
  createEffect(() => onCleanup(context.registerLabel(others.id)));
  return createComponent(Polymorphic, mergeProps({
    as: "label",
    ref(r$) {
      var _ref$ = mergeRefs((el) => ref = el, local.ref);
      typeof _ref$ === "function" && _ref$(r$);
    },
    get ["for"]() {
      return createMemo(() => tagName() === "label")() ? context.fieldId() : void 0;
    }
  }, () => context.dataset(), others));
}
var FORM_CONTROL_FIELD_PROP_NAMES = ["id", "aria-label", "aria-labelledby", "aria-describedby"];
function createFormControlField(props) {
  const context = useFormControlContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("field")
  }, props);
  createEffect(() => onCleanup(context.registerField(access$1(mergedProps.id))));
  return {
    fieldProps: {
      id: () => access$1(mergedProps.id),
      ariaLabel: () => access$1(mergedProps["aria-label"]),
      ariaLabelledBy: () => context.getAriaLabelledBy(access$1(mergedProps.id), access$1(mergedProps["aria-label"]), access$1(mergedProps["aria-labelledby"])),
      ariaDescribedBy: () => context.getAriaDescribedBy(access$1(mergedProps["aria-describedby"]))
    }
  };
}
function createFormResetListener(element, handler) {
  createEffect(on(element, (element2) => {
    if (element2 == null) {
      return;
    }
    const form = getClosestForm(element2);
    if (form == null) {
      return;
    }
    form.addEventListener("reset", handler, {
      passive: true
    });
    onCleanup(() => {
      form.removeEventListener("reset", handler);
    });
  }));
}
function getClosestForm(element) {
  return isFormElement(element) ? element.form : element.closest("form");
}
function isFormElement(element) {
  return element.matches("textarea, input, select, button");
}
function buildNodes(params) {
  let index = params.startIndex ?? 0;
  const level = params.startLevel ?? 0;
  const nodes = [];
  const getKey = (data) => {
    if (data == null) {
      return "";
    }
    const _getKey = params.getKey ?? "key";
    const dataKey = isString(_getKey) ? data[_getKey] : _getKey(data);
    return dataKey != null ? String(dataKey) : "";
  };
  const getTextValue = (data) => {
    if (data == null) {
      return "";
    }
    const _getTextValue = params.getTextValue ?? "textValue";
    const dataTextValue = isString(_getTextValue) ? data[_getTextValue] : _getTextValue(data);
    return dataTextValue != null ? String(dataTextValue) : "";
  };
  const getDisabled = (data) => {
    if (data == null) {
      return false;
    }
    const _getDisabled = params.getDisabled ?? "disabled";
    return (isString(_getDisabled) ? data[_getDisabled] : _getDisabled(data)) ?? false;
  };
  const getSectionChildren = (data) => {
    var _a;
    if (data == null) {
      return void 0;
    }
    if (isString(params.getSectionChildren)) {
      return data[params.getSectionChildren];
    }
    return (_a = params.getSectionChildren) == null ? void 0 : _a.call(params, data);
  };
  for (const data of params.dataSource) {
    if (isString(data) || isNumber(data)) {
      nodes.push({
        type: "item",
        rawValue: data,
        key: String(data),
        textValue: String(data),
        disabled: getDisabled(data),
        level,
        index
      });
      index++;
      continue;
    }
    if (getSectionChildren(data) != null) {
      nodes.push({
        type: "section",
        rawValue: data,
        key: "",
        // not applicable here
        textValue: "",
        // not applicable here
        disabled: false,
        // not applicable here
        level,
        index
      });
      index++;
      const sectionChildren = getSectionChildren(data) ?? [];
      if (sectionChildren.length > 0) {
        const childNodes = buildNodes({
          dataSource: sectionChildren,
          getKey: params.getKey,
          getTextValue: params.getTextValue,
          getDisabled: params.getDisabled,
          getSectionChildren: params.getSectionChildren,
          startIndex: index,
          startLevel: level + 1
        });
        nodes.push(...childNodes);
        index += childNodes.length;
      }
    } else {
      nodes.push({
        type: "item",
        rawValue: data,
        key: getKey(data),
        textValue: getTextValue(data),
        disabled: getDisabled(data),
        level,
        index
      });
      index++;
    }
  }
  return nodes;
}
function createCollection(props, deps = []) {
  return createMemo(() => {
    const nodes = buildNodes({
      dataSource: access$1(props.dataSource),
      getKey: access$1(props.getKey),
      getTextValue: access$1(props.getTextValue),
      getDisabled: access$1(props.getDisabled),
      getSectionChildren: access$1(props.getSectionChildren)
    });
    for (let i = 0; i < deps.length; i++) deps[i]();
    return props.factory(nodes);
  });
}
var RTL_SCRIPTS = /* @__PURE__ */ new Set(["Avst", "Arab", "Armi", "Syrc", "Samr", "Mand", "Thaa", "Mend", "Nkoo", "Adlm", "Rohg", "Hebr"]);
var RTL_LANGS = /* @__PURE__ */ new Set(["ae", "ar", "arc", "bcc", "bqi", "ckb", "dv", "fa", "glk", "he", "ku", "mzn", "nqo", "pnb", "ps", "sd", "ug", "ur", "yi"]);
function isRTL$1(locale) {
  if (Intl.Locale) {
    const script = new Intl.Locale(locale).maximize().script ?? "";
    return RTL_SCRIPTS.has(script);
  }
  const lang = locale.split("-")[0];
  return RTL_LANGS.has(lang);
}
function getReadingDirection(locale) {
  return isRTL$1(locale) ? "rtl" : "ltr";
}
function getDefaultLocale() {
  let locale = typeof navigator !== "undefined" && // @ts-ignore
  (navigator.language || navigator.userLanguage) || "en-US";
  try {
    Intl.DateTimeFormat.supportedLocalesOf([locale]);
  } catch (_err) {
    locale = "en-US";
  }
  return {
    locale,
    direction: getReadingDirection(locale)
  };
}
var currentLocale = getDefaultLocale();
var listeners = /* @__PURE__ */ new Set();
function updateLocale() {
  currentLocale = getDefaultLocale();
  for (const listener of listeners) {
    listener(currentLocale);
  }
}
function createDefaultLocale() {
  const [defaultClientLocale, setDefaultClientLocale] = createSignal(currentLocale);
  const defaultLocale = createMemo(() => defaultClientLocale());
  onMount(() => {
    if (listeners.size === 0) {
      window.addEventListener("languagechange", updateLocale);
    }
    listeners.add(setDefaultClientLocale);
    onCleanup(() => {
      listeners.delete(setDefaultClientLocale);
      if (listeners.size === 0) {
        window.removeEventListener("languagechange", updateLocale);
      }
    });
  });
  return {
    locale: () => defaultLocale().locale,
    direction: () => defaultLocale().direction
  };
}
var I18nContext = createContext();
function useLocale() {
  const defaultLocale = createDefaultLocale();
  const context = useContext(I18nContext);
  return context || defaultLocale;
}
var cache$1 = /* @__PURE__ */ new Map();
function createCollator(options) {
  const {
    locale
  } = useLocale();
  const cacheKey = createMemo(() => {
    return locale() + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  });
  return createMemo(() => {
    const key = cacheKey();
    let collator;
    if (cache$1.has(key)) {
      collator = cache$1.get(key);
    }
    if (!collator) {
      collator = new Intl.Collator(locale(), options);
      cache$1.set(key, collator);
    }
    return collator;
  });
}
function createFilter(options) {
  const collator = createCollator({
    usage: "search",
    ...options
  });
  const startsWith = (str, substr) => {
    if (substr.length === 0) {
      return true;
    }
    const normalizedStr = str.normalize("NFC");
    const normalizedSubstr = substr.normalize("NFC");
    return collator().compare(normalizedStr.slice(0, normalizedSubstr.length), normalizedSubstr) === 0;
  };
  const endsWith = (str, substr) => {
    if (substr.length === 0) {
      return true;
    }
    const normalizedStr = str.normalize("NFC");
    const normalizedSubstr = substr.normalize("NFC");
    return collator().compare(normalizedStr.slice(-normalizedSubstr.length), normalizedSubstr) === 0;
  };
  const contains2 = (str, substr) => {
    if (substr.length === 0) {
      return true;
    }
    const normalizedStr = str.normalize("NFC");
    const normalizedSubstr = substr.normalize("NFC");
    let scan = 0;
    const sliceLen = substr.length;
    for (; scan + sliceLen <= normalizedStr.length; scan++) {
      const slice = normalizedStr.slice(scan, scan + sliceLen);
      if (collator().compare(normalizedSubstr, slice) === 0) {
        return true;
      }
    }
    return false;
  };
  return {
    startsWith,
    endsWith,
    contains: contains2
  };
}
var Selection = class _Selection extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);
    __publicField(this, "anchorKey");
    __publicField(this, "currentKey");
    if (keys instanceof _Selection) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }
};
function createControllableSelectionSignal(props) {
  const [_value, setValue] = createControllableSignal(props);
  const value = () => _value() ?? new Selection();
  return [value, setValue];
}
function isNonContiguousSelectionModifier(e) {
  return isAppleDevice() ? e.altKey : e.ctrlKey;
}
function isCtrlKeyPressed(e) {
  if (isMac()) {
    return e.metaKey;
  }
  return e.ctrlKey;
}
function convertSelection(selection) {
  return new Selection(selection);
}
function isSameSelection(setA, setB) {
  if (setA.size !== setB.size) {
    return false;
  }
  for (const item of setA) {
    if (!setB.has(item)) {
      return false;
    }
  }
  return true;
}
function createMultipleSelectionState(props) {
  const mergedProps = mergeDefaultProps({
    selectionMode: "none",
    selectionBehavior: "toggle"
  }, props);
  const [isFocused, setFocused] = createSignal(false);
  const [focusedKey, setFocusedKey] = createSignal();
  const selectedKeysProp = createMemo(() => {
    const selection = access$1(mergedProps.selectedKeys);
    if (selection != null) {
      return convertSelection(selection);
    }
    return selection;
  });
  const defaultSelectedKeys = createMemo(() => {
    const defaultSelection = access$1(mergedProps.defaultSelectedKeys);
    if (defaultSelection != null) {
      return convertSelection(defaultSelection);
    }
    return new Selection();
  });
  const [selectedKeys, _setSelectedKeys] = createControllableSelectionSignal({
    value: selectedKeysProp,
    defaultValue: defaultSelectedKeys,
    onChange: (value) => {
      var _a;
      return (_a = mergedProps.onSelectionChange) == null ? void 0 : _a.call(mergedProps, value);
    }
  });
  const [selectionBehavior, setSelectionBehavior] = createSignal(access$1(mergedProps.selectionBehavior));
  const selectionMode = () => access$1(mergedProps.selectionMode);
  const disallowEmptySelection = () => access$1(mergedProps.disallowEmptySelection) ?? false;
  const setSelectedKeys = (keys) => {
    if (access$1(mergedProps.allowDuplicateSelectionEvents) || !isSameSelection(keys, selectedKeys())) {
      _setSelectedKeys(keys);
    }
  };
  createEffect(() => {
    const selection = selectedKeys();
    if (access$1(mergedProps.selectionBehavior) === "replace" && selectionBehavior() === "toggle" && typeof selection === "object" && selection.size === 0) {
      setSelectionBehavior("replace");
    }
  });
  createEffect(() => {
    setSelectionBehavior(access$1(mergedProps.selectionBehavior) ?? "toggle");
  });
  return {
    selectionMode,
    disallowEmptySelection,
    selectionBehavior,
    setSelectionBehavior,
    isFocused,
    setFocused,
    focusedKey,
    setFocusedKey,
    selectedKeys,
    setSelectedKeys
  };
}
function createTypeSelect(props) {
  const [search, setSearch] = createSignal("");
  const [timeoutId, setTimeoutId] = createSignal(-1);
  const onKeyDown = (e) => {
    var _a;
    if (access$1(props.isDisabled)) {
      return;
    }
    const delegate = access$1(props.keyboardDelegate);
    const manager = access$1(props.selectionManager);
    if (!delegate.getKeyForSearch) {
      return;
    }
    const character = getStringForKey(e.key);
    if (!character || e.ctrlKey || e.metaKey) {
      return;
    }
    if (character === " " && search().trim().length > 0) {
      e.preventDefault();
      e.stopPropagation();
    }
    let newSearch = setSearch((prev) => prev + character);
    let key = delegate.getKeyForSearch(newSearch, manager.focusedKey()) ?? delegate.getKeyForSearch(newSearch);
    if (key == null && isAllSameLetter(newSearch)) {
      newSearch = newSearch[0];
      key = delegate.getKeyForSearch(newSearch, manager.focusedKey()) ?? delegate.getKeyForSearch(newSearch);
    }
    if (key != null) {
      manager.setFocusedKey(key);
      (_a = props.onTypeSelect) == null ? void 0 : _a.call(props, key);
    }
    clearTimeout(timeoutId());
    setTimeoutId(window.setTimeout(() => setSearch(""), 500));
  };
  return {
    typeSelectHandlers: {
      onKeyDown
    }
  };
}
function getStringForKey(key) {
  if (key.length === 1 || !/^[A-Z]/i.test(key)) {
    return key;
  }
  return "";
}
function isAllSameLetter(search) {
  return search.split("").every((letter) => letter === search[0]);
}
function createSelectableCollection(props, ref, scrollRef) {
  const defaultProps = {
    selectOnFocus: () => access$1(props.selectionManager).selectionBehavior() === "replace"
  };
  const mergedProps = mergeProps(defaultProps, props);
  const finalScrollRef = () => (scrollRef == null ? void 0 : scrollRef()) ?? ref();
  const {
    direction
  } = useLocale();
  let scrollPos = {
    top: 0,
    left: 0
  };
  createEventListener(() => !access$1(mergedProps.isVirtualized) ? finalScrollRef() : void 0, "scroll", () => {
    const scrollEl = finalScrollRef();
    if (!scrollEl) {
      return;
    }
    scrollPos = {
      top: scrollEl.scrollTop,
      left: scrollEl.scrollLeft
    };
  });
  const {
    typeSelectHandlers
  } = createTypeSelect({
    isDisabled: () => access$1(mergedProps.disallowTypeAhead),
    keyboardDelegate: () => access$1(mergedProps.keyboardDelegate),
    selectionManager: () => access$1(mergedProps.selectionManager)
  });
  const orientation = () => access$1(mergedProps.orientation) ?? "vertical";
  const onKeyDown = (e) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    callHandler(e, typeSelectHandlers.onKeyDown);
    if (e.altKey && e.key === "Tab") {
      e.preventDefault();
    }
    const refEl = ref();
    if (!(refEl == null ? void 0 : refEl.contains(e.target))) {
      return;
    }
    const manager = access$1(mergedProps.selectionManager);
    const selectOnFocus = access$1(mergedProps.selectOnFocus);
    const navigateToKey = (key) => {
      if (key != null) {
        manager.setFocusedKey(key);
        if (e.shiftKey && manager.selectionMode() === "multiple") {
          manager.extendSelection(key);
        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {
          manager.replaceSelection(key);
        }
      }
    };
    const delegate = access$1(mergedProps.keyboardDelegate);
    const shouldFocusWrap = access$1(mergedProps.shouldFocusWrap);
    const focusedKey = manager.focusedKey();
    switch (e.key) {
      case (orientation() === "vertical" ? "ArrowDown" : "ArrowRight"): {
        if (delegate.getKeyBelow) {
          e.preventDefault();
          let nextKey;
          if (focusedKey != null) {
            nextKey = delegate.getKeyBelow(focusedKey);
          } else {
            nextKey = (_a = delegate.getFirstKey) == null ? void 0 : _a.call(delegate);
          }
          if (nextKey == null && shouldFocusWrap) {
            nextKey = (_b = delegate.getFirstKey) == null ? void 0 : _b.call(delegate, focusedKey);
          }
          navigateToKey(nextKey);
        }
        break;
      }
      case (orientation() === "vertical" ? "ArrowUp" : "ArrowLeft"): {
        if (delegate.getKeyAbove) {
          e.preventDefault();
          let nextKey;
          if (focusedKey != null) {
            nextKey = delegate.getKeyAbove(focusedKey);
          } else {
            nextKey = (_c = delegate.getLastKey) == null ? void 0 : _c.call(delegate);
          }
          if (nextKey == null && shouldFocusWrap) {
            nextKey = (_d = delegate.getLastKey) == null ? void 0 : _d.call(delegate, focusedKey);
          }
          navigateToKey(nextKey);
        }
        break;
      }
      case (orientation() === "vertical" ? "ArrowLeft" : "ArrowUp"): {
        if (delegate.getKeyLeftOf) {
          e.preventDefault();
          const isRTL2 = direction() === "rtl";
          let nextKey;
          if (focusedKey != null) {
            nextKey = delegate.getKeyLeftOf(focusedKey);
          } else {
            nextKey = isRTL2 ? (_e = delegate.getFirstKey) == null ? void 0 : _e.call(delegate) : (_f = delegate.getLastKey) == null ? void 0 : _f.call(delegate);
          }
          navigateToKey(nextKey);
        }
        break;
      }
      case (orientation() === "vertical" ? "ArrowRight" : "ArrowDown"): {
        if (delegate.getKeyRightOf) {
          e.preventDefault();
          const isRTL2 = direction() === "rtl";
          let nextKey;
          if (focusedKey != null) {
            nextKey = delegate.getKeyRightOf(focusedKey);
          } else {
            nextKey = isRTL2 ? (_g = delegate.getLastKey) == null ? void 0 : _g.call(delegate) : (_h = delegate.getFirstKey) == null ? void 0 : _h.call(delegate);
          }
          navigateToKey(nextKey);
        }
        break;
      }
      case "Home":
        if (delegate.getFirstKey) {
          e.preventDefault();
          const firstKey = delegate.getFirstKey(focusedKey, isCtrlKeyPressed(e));
          if (firstKey != null) {
            manager.setFocusedKey(firstKey);
            if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode() === "multiple") {
              manager.extendSelection(firstKey);
            } else if (selectOnFocus) {
              manager.replaceSelection(firstKey);
            }
          }
        }
        break;
      case "End":
        if (delegate.getLastKey) {
          e.preventDefault();
          const lastKey = delegate.getLastKey(focusedKey, isCtrlKeyPressed(e));
          if (lastKey != null) {
            manager.setFocusedKey(lastKey);
            if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode() === "multiple") {
              manager.extendSelection(lastKey);
            } else if (selectOnFocus) {
              manager.replaceSelection(lastKey);
            }
          }
        }
        break;
      case "PageDown":
        if (delegate.getKeyPageBelow && focusedKey != null) {
          e.preventDefault();
          const nextKey = delegate.getKeyPageBelow(focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "PageUp":
        if (delegate.getKeyPageAbove && focusedKey != null) {
          e.preventDefault();
          const nextKey = delegate.getKeyPageAbove(focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "a":
        if (isCtrlKeyPressed(e) && manager.selectionMode() === "multiple" && access$1(mergedProps.disallowSelectAll) !== true) {
          e.preventDefault();
          manager.selectAll();
        }
        break;
      case "Escape":
        if (!e.defaultPrevented) {
          e.preventDefault();
          if (!access$1(mergedProps.disallowEmptySelection)) {
            manager.clearSelection();
          }
        }
        break;
      case "Tab": {
        if (!access$1(mergedProps.allowsTabNavigation)) {
          if (e.shiftKey) {
            refEl.focus();
          } else {
            const walker = getFocusableTreeWalker(refEl, {
              tabbable: true
            });
            let next;
            let last;
            do {
              last = walker.lastChild();
              if (last) {
                next = last;
              }
            } while (last);
            if (next && !next.contains(document.activeElement)) {
              focusWithoutScrolling(next);
            }
          }
          break;
        }
      }
    }
  };
  const onFocusIn = (e) => {
    var _a, _b;
    const manager = access$1(mergedProps.selectionManager);
    const delegate = access$1(mergedProps.keyboardDelegate);
    const selectOnFocus = access$1(mergedProps.selectOnFocus);
    if (manager.isFocused()) {
      if (!e.currentTarget.contains(e.target)) {
        manager.setFocused(false);
      }
      return;
    }
    if (!e.currentTarget.contains(e.target)) {
      return;
    }
    manager.setFocused(true);
    if (manager.focusedKey() == null) {
      const navigateToFirstKey = (key) => {
        if (key == null) {
          return;
        }
        manager.setFocusedKey(key);
        if (selectOnFocus) {
          manager.replaceSelection(key);
        }
      };
      const relatedTarget = e.relatedTarget;
      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) {
        navigateToFirstKey(manager.lastSelectedKey() ?? ((_a = delegate.getLastKey) == null ? void 0 : _a.call(delegate)));
      } else {
        navigateToFirstKey(manager.firstSelectedKey() ?? ((_b = delegate.getFirstKey) == null ? void 0 : _b.call(delegate)));
      }
    } else if (!access$1(mergedProps.isVirtualized)) {
      const scrollEl = finalScrollRef();
      if (scrollEl) {
        scrollEl.scrollTop = scrollPos.top;
        scrollEl.scrollLeft = scrollPos.left;
        const element = scrollEl.querySelector(`[data-key="${manager.focusedKey()}"]`);
        if (element) {
          focusWithoutScrolling(element);
          scrollIntoView(scrollEl, element);
        }
      }
    }
  };
  const onFocusOut = (e) => {
    const manager = access$1(mergedProps.selectionManager);
    if (!e.currentTarget.contains(e.relatedTarget)) {
      manager.setFocused(false);
    }
  };
  const onMouseDown = (e) => {
    if (finalScrollRef() === e.target) {
      e.preventDefault();
    }
  };
  const tryAutoFocus = () => {
    var _a, _b;
    const autoFocus = access$1(mergedProps.autoFocus);
    if (!autoFocus) {
      return;
    }
    const manager = access$1(mergedProps.selectionManager);
    const delegate = access$1(mergedProps.keyboardDelegate);
    let focusedKey;
    if (autoFocus === "first") {
      focusedKey = (_a = delegate.getFirstKey) == null ? void 0 : _a.call(delegate);
    }
    if (autoFocus === "last") {
      focusedKey = (_b = delegate.getLastKey) == null ? void 0 : _b.call(delegate);
    }
    const selectedKeys = manager.selectedKeys();
    if (selectedKeys.size) {
      focusedKey = selectedKeys.values().next().value;
    }
    manager.setFocused(true);
    manager.setFocusedKey(focusedKey);
    const refEl = ref();
    if (refEl && focusedKey == null && !access$1(mergedProps.shouldUseVirtualFocus)) {
      focusWithoutScrolling(refEl);
    }
  };
  onMount(() => {
    if (mergedProps.deferAutoFocus) {
      setTimeout(tryAutoFocus, 0);
    } else {
      tryAutoFocus();
    }
  });
  createEffect(on([finalScrollRef, () => access$1(mergedProps.isVirtualized), () => access$1(mergedProps.selectionManager).focusedKey()], (newValue) => {
    var _a;
    const [scrollEl, isVirtualized, focusedKey] = newValue;
    if (isVirtualized) {
      focusedKey && ((_a = mergedProps.scrollToKey) == null ? void 0 : _a.call(mergedProps, focusedKey));
    } else {
      if (focusedKey && scrollEl) {
        const element = scrollEl.querySelector(`[data-key="${focusedKey}"]`);
        if (element) {
          scrollIntoView(scrollEl, element);
        }
      }
    }
  }));
  const tabIndex = createMemo(() => {
    if (access$1(mergedProps.shouldUseVirtualFocus)) {
      return void 0;
    }
    return access$1(mergedProps.selectionManager).focusedKey() == null ? 0 : -1;
  });
  return {
    tabIndex,
    onKeyDown,
    onMouseDown,
    onFocusIn,
    onFocusOut
  };
}
function createSelectableItem(props, ref) {
  const manager = () => access$1(props.selectionManager);
  const key = () => access$1(props.key);
  const shouldUseVirtualFocus = () => access$1(props.shouldUseVirtualFocus);
  const onSelect = (e) => {
    if (manager().selectionMode() === "none") {
      return;
    }
    if (manager().selectionMode() === "single") {
      if (manager().isSelected(key()) && !manager().disallowEmptySelection()) {
        manager().toggleSelection(key());
      } else {
        manager().replaceSelection(key());
      }
    } else if (e == null ? void 0 : e.shiftKey) {
      manager().extendSelection(key());
    } else if (manager().selectionBehavior() === "toggle" || isCtrlKeyPressed(e) || "pointerType" in e && e.pointerType === "touch") {
      manager().toggleSelection(key());
    } else {
      manager().replaceSelection(key());
    }
  };
  const isSelected = () => manager().isSelected(key());
  const isDisabled = () => access$1(props.disabled) || manager().isDisabled(key());
  const allowsSelection = () => !isDisabled() && manager().canSelectItem(key());
  let pointerDownType = null;
  const onPointerDown = (e) => {
    if (!allowsSelection()) {
      return;
    }
    pointerDownType = e.pointerType;
    if (e.pointerType === "mouse" && e.button === 0 && !access$1(props.shouldSelectOnPressUp)) {
      onSelect(e);
    }
  };
  const onPointerUp = (e) => {
    if (!allowsSelection()) {
      return;
    }
    if (e.pointerType === "mouse" && e.button === 0 && access$1(props.shouldSelectOnPressUp) && access$1(props.allowsDifferentPressOrigin)) {
      onSelect(e);
    }
  };
  const onClick = (e) => {
    if (!allowsSelection()) {
      return;
    }
    if (access$1(props.shouldSelectOnPressUp) && !access$1(props.allowsDifferentPressOrigin) || pointerDownType !== "mouse") {
      onSelect(e);
    }
  };
  const onKeyDown = (e) => {
    if (!allowsSelection() || !["Enter", " "].includes(e.key)) {
      return;
    }
    if (isNonContiguousSelectionModifier(e)) {
      manager().toggleSelection(key());
    } else {
      onSelect(e);
    }
  };
  const onMouseDown = (e) => {
    if (isDisabled()) {
      e.preventDefault();
    }
  };
  const onFocus = (e) => {
    const refEl = ref();
    if (shouldUseVirtualFocus() || isDisabled() || !refEl) {
      return;
    }
    if (e.target === refEl) {
      manager().setFocusedKey(key());
    }
  };
  const tabIndex = createMemo(() => {
    if (shouldUseVirtualFocus() || isDisabled()) {
      return void 0;
    }
    return key() === manager().focusedKey() ? 0 : -1;
  });
  const dataKey = createMemo(() => {
    return access$1(props.virtualized) ? void 0 : key();
  });
  createEffect(on([ref, key, shouldUseVirtualFocus, () => manager().focusedKey(), () => manager().isFocused()], ([refEl, key2, shouldUseVirtualFocus2, focusedKey, isFocused]) => {
    if (refEl && key2 === focusedKey && isFocused && !shouldUseVirtualFocus2 && document.activeElement !== refEl) {
      if (props.focus) {
        props.focus();
      } else {
        focusWithoutScrolling(refEl);
      }
    }
  }));
  return {
    isSelected,
    isDisabled,
    allowsSelection,
    tabIndex,
    dataKey,
    onPointerDown,
    onPointerUp,
    onClick,
    onKeyDown,
    onMouseDown,
    onFocus
  };
}
var SelectionManager = class {
  constructor(collection, state) {
    __publicField(this, "collection");
    __publicField(this, "state");
    this.collection = collection;
    this.state = state;
  }
  /** The type of selection that is allowed in the collection. */
  selectionMode() {
    return this.state.selectionMode();
  }
  /** Whether the collection allows empty selection. */
  disallowEmptySelection() {
    return this.state.disallowEmptySelection();
  }
  /** The selection behavior for the collection. */
  selectionBehavior() {
    return this.state.selectionBehavior();
  }
  /** Sets the selection behavior for the collection. */
  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  /** Whether the collection is currently focused. */
  isFocused() {
    return this.state.isFocused();
  }
  /** Sets whether the collection is focused. */
  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  /** The current focused key in the collection. */
  focusedKey() {
    return this.state.focusedKey();
  }
  /** Sets the focused key. */
  setFocusedKey(key) {
    if (key == null || this.collection().getItem(key)) {
      this.state.setFocusedKey(key);
    }
  }
  /** The currently selected keys in the collection. */
  selectedKeys() {
    return this.state.selectedKeys();
  }
  /** Returns whether a key is selected. */
  isSelected(key) {
    if (this.state.selectionMode() === "none") {
      return false;
    }
    const retrievedKey = this.getKey(key);
    if (retrievedKey == null) {
      return false;
    }
    return this.state.selectedKeys().has(retrievedKey);
  }
  /** Whether the selection is empty. */
  isEmpty() {
    return this.state.selectedKeys().size === 0;
  }
  /** Whether all items in the collection are selected. */
  isSelectAll() {
    if (this.isEmpty()) {
      return false;
    }
    const selectedKeys = this.state.selectedKeys();
    return this.getAllSelectableKeys().every((k) => selectedKeys.has(k));
  }
  firstSelectedKey() {
    let first;
    for (const key of this.state.selectedKeys()) {
      const item = this.collection().getItem(key);
      const isItemBeforeFirst = (item == null ? void 0 : item.index) != null && (first == null ? void 0 : first.index) != null && item.index < first.index;
      if (!first || isItemBeforeFirst) {
        first = item;
      }
    }
    return first == null ? void 0 : first.key;
  }
  lastSelectedKey() {
    let last;
    for (const key of this.state.selectedKeys()) {
      const item = this.collection().getItem(key);
      const isItemAfterLast = (item == null ? void 0 : item.index) != null && (last == null ? void 0 : last.index) != null && item.index > last.index;
      if (!last || isItemAfterLast) {
        last = item;
      }
    }
    return last == null ? void 0 : last.key;
  }
  /** Extends the selection to the given key. */
  extendSelection(toKey) {
    if (this.selectionMode() === "none") {
      return;
    }
    if (this.selectionMode() === "single") {
      this.replaceSelection(toKey);
      return;
    }
    const retrievedToKey = this.getKey(toKey);
    if (retrievedToKey == null) {
      return;
    }
    const selectedKeys = this.state.selectedKeys();
    const anchorKey = selectedKeys.anchorKey || retrievedToKey;
    const selection = new Selection(selectedKeys, anchorKey, retrievedToKey);
    for (const key of this.getKeyRange(anchorKey, selectedKeys.currentKey || retrievedToKey)) {
      selection.delete(key);
    }
    for (const key of this.getKeyRange(retrievedToKey, anchorKey)) {
      if (this.canSelectItem(key)) {
        selection.add(key);
      }
    }
    this.state.setSelectedKeys(selection);
  }
  getKeyRange(from, to) {
    const fromItem = this.collection().getItem(from);
    const toItem = this.collection().getItem(to);
    if (fromItem && toItem) {
      if (fromItem.index != null && toItem.index != null && fromItem.index <= toItem.index) {
        return this.getKeyRangeInternal(from, to);
      }
      return this.getKeyRangeInternal(to, from);
    }
    return [];
  }
  getKeyRangeInternal(from, to) {
    const keys = [];
    let key = from;
    while (key != null) {
      const item = this.collection().getItem(key);
      if (item && item.type === "item") {
        keys.push(key);
      }
      if (key === to) {
        return keys;
      }
      key = this.collection().getKeyAfter(key);
    }
    return [];
  }
  getKey(key) {
    const item = this.collection().getItem(key);
    if (!item) {
      return key;
    }
    if (!item || item.type !== "item") {
      return null;
    }
    return item.key;
  }
  /** Toggles whether the given key is selected. */
  toggleSelection(key) {
    if (this.selectionMode() === "none") {
      return;
    }
    if (this.selectionMode() === "single" && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }
    const retrievedKey = this.getKey(key);
    if (retrievedKey == null) {
      return;
    }
    const keys = new Selection(this.state.selectedKeys());
    if (keys.has(retrievedKey)) {
      keys.delete(retrievedKey);
    } else if (this.canSelectItem(retrievedKey)) {
      keys.add(retrievedKey);
      keys.anchorKey = retrievedKey;
      keys.currentKey = retrievedKey;
    }
    if (this.disallowEmptySelection() && keys.size === 0) {
      return;
    }
    this.state.setSelectedKeys(keys);
  }
  /** Replaces the selection with only the given key. */
  replaceSelection(key) {
    if (this.selectionMode() === "none") {
      return;
    }
    const retrievedKey = this.getKey(key);
    if (retrievedKey == null) {
      return;
    }
    const selection = this.canSelectItem(retrievedKey) ? new Selection([retrievedKey], retrievedKey, retrievedKey) : new Selection();
    this.state.setSelectedKeys(selection);
  }
  /** Replaces the selection with the given keys. */
  setSelectedKeys(keys) {
    if (this.selectionMode() === "none") {
      return;
    }
    const selection = new Selection();
    for (const key of keys) {
      const retrievedKey = this.getKey(key);
      if (retrievedKey != null) {
        selection.add(retrievedKey);
        if (this.selectionMode() === "single") {
          break;
        }
      }
    }
    this.state.setSelectedKeys(selection);
  }
  /** Selects all items in the collection. */
  selectAll() {
    if (this.selectionMode() === "multiple") {
      this.state.setSelectedKeys(new Set(this.getAllSelectableKeys()));
    }
  }
  /**
   * Removes all keys from the selection.
   */
  clearSelection() {
    const selectedKeys = this.state.selectedKeys();
    if (!this.disallowEmptySelection() && selectedKeys.size > 0) {
      this.state.setSelectedKeys(new Selection());
    }
  }
  /**
   * Toggles between select all and an empty selection.
   */
  toggleSelectAll() {
    if (this.isSelectAll()) {
      this.clearSelection();
    } else {
      this.selectAll();
    }
  }
  select(key, e) {
    if (this.selectionMode() === "none") {
      return;
    }
    if (this.selectionMode() === "single") {
      if (this.isSelected(key) && !this.disallowEmptySelection()) {
        this.toggleSelection(key);
      } else {
        this.replaceSelection(key);
      }
    } else if (this.selectionBehavior() === "toggle" || e && e.pointerType === "touch") {
      this.toggleSelection(key);
    } else {
      this.replaceSelection(key);
    }
  }
  /** Returns whether the current selection is equal to the given selection. */
  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys()) {
      return true;
    }
    const selectedKeys = this.selectedKeys();
    if (selection.size !== selectedKeys.size) {
      return false;
    }
    for (const key of selection) {
      if (!selectedKeys.has(key)) {
        return false;
      }
    }
    for (const key of selectedKeys) {
      if (!selection.has(key)) {
        return false;
      }
    }
    return true;
  }
  canSelectItem(key) {
    if (this.state.selectionMode() === "none") {
      return false;
    }
    const item = this.collection().getItem(key);
    return item != null && !item.disabled;
  }
  isDisabled(key) {
    const item = this.collection().getItem(key);
    return !item || item.disabled;
  }
  getAllSelectableKeys() {
    const keys = [];
    const addKeys = (key) => {
      while (key != null) {
        if (this.canSelectItem(key)) {
          const item = this.collection().getItem(key);
          if (!item) {
            continue;
          }
          if (item.type === "item") {
            keys.push(key);
          }
        }
        key = this.collection().getKeyAfter(key);
      }
    };
    addKeys(this.collection().getFirstKey());
    return keys;
  }
};
var ListCollection = class {
  constructor(nodes) {
    __publicField(this, "keyMap", /* @__PURE__ */ new Map());
    __publicField(this, "iterable");
    __publicField(this, "firstKey");
    __publicField(this, "lastKey");
    this.iterable = nodes;
    for (const node of nodes) {
      this.keyMap.set(node.key, node);
    }
    if (this.keyMap.size === 0) {
      return;
    }
    let last;
    let index = 0;
    for (const [key, node] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node.prevKey = last.key;
      } else {
        this.firstKey = key;
        node.prevKey = void 0;
      }
      if (node.type === "item") {
        node.index = index++;
      }
      last = node;
      last.nextKey = void 0;
    }
    this.lastKey = last.key;
  }
  *[Symbol.iterator]() {
    yield* this.iterable;
  }
  getSize() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    var _a;
    return (_a = this.keyMap.get(key)) == null ? void 0 : _a.prevKey;
  }
  getKeyAfter(key) {
    var _a;
    return (_a = this.keyMap.get(key)) == null ? void 0 : _a.nextKey;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }
};
function createListState(props) {
  const selectionState = createMultipleSelectionState(props);
  const factory = (nodes) => {
    return props.filter ? new ListCollection(props.filter(nodes)) : new ListCollection(nodes);
  };
  const collection = createCollection({
    dataSource: () => access$1(props.dataSource),
    getKey: () => access$1(props.getKey),
    getTextValue: () => access$1(props.getTextValue),
    getDisabled: () => access$1(props.getDisabled),
    getSectionChildren: () => access$1(props.getSectionChildren),
    factory
  }, [() => props.filter]);
  const selectionManager = new SelectionManager(collection, selectionState);
  createComputed(() => {
    const focusedKey = selectionState.focusedKey();
    if (focusedKey != null && !collection().getItem(focusedKey)) {
      selectionState.setFocusedKey(void 0);
    }
  });
  return {
    collection,
    selectionManager: () => selectionManager
  };
}
const sides = ["top", "right", "bottom", "left"];
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v) => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const arrow$1 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
const flip$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
const hide$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset$1 = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
const shift$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
const size$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isYAxis) {
        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle$1(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isTopLayer(currentNode)) {
      return null;
    }
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache2) {
  const cachedResult = cache2.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache2.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle$1(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
const getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle$1(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const offset = offset$1;
const shift = shift$1;
const flip = flip$1;
const size = size$1;
const hide = hide$1;
const arrow = arrow$1;
const computePosition = (reference, floating, options) => {
  const cache2 = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache2
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
var _tmpl$$3 = /* @__PURE__ */ template(`<svg display=block viewBox="0 0 30 30"style=transform:scale(1.02)><g><path fill=none d=M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z></path><path stroke=none d=M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z>`);
var PopperContext = createContext();
function usePopperContext() {
  const context = useContext(PopperContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `usePopperContext` must be used within a `Popper` component");
  }
  return context;
}
var DEFAULT_SIZE = 30;
var HALF_DEFAULT_SIZE = DEFAULT_SIZE / 2;
var ROTATION_DEG = {
  top: 180,
  right: -90,
  bottom: 0,
  left: 90
};
function PopperArrow(props) {
  const context = usePopperContext();
  const mergedProps = mergeDefaultProps({
    size: DEFAULT_SIZE
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref", "style", "size"]);
  const dir = () => context.currentPlacement().split("-")[0];
  const contentStyle = createComputedStyle(context.contentRef);
  const fill = () => {
    var _a;
    return ((_a = contentStyle()) == null ? void 0 : _a.getPropertyValue("background-color")) || "none";
  };
  const stroke = () => {
    var _a;
    return ((_a = contentStyle()) == null ? void 0 : _a.getPropertyValue(`border-${dir()}-color`)) || "none";
  };
  const borderWidth = () => {
    var _a;
    return ((_a = contentStyle()) == null ? void 0 : _a.getPropertyValue(`border-${dir()}-width`)) || "0px";
  };
  const strokeWidth = () => {
    return parseInt(borderWidth()) * 2 * (DEFAULT_SIZE / local.size);
  };
  const rotate = () => {
    return `rotate(${ROTATION_DEG[dir()]} ${HALF_DEFAULT_SIZE} ${HALF_DEFAULT_SIZE}) translate(0 2)`;
  };
  return createComponent(Polymorphic, mergeProps({
    as: "div",
    ref(r$) {
      var _ref$ = mergeRefs(context.setArrowRef, local.ref);
      typeof _ref$ === "function" && _ref$(r$);
    },
    "aria-hidden": "true",
    get style() {
      return {
        // server side rendering
        position: "absolute",
        "font-size": `${local.size}px`,
        width: "1em",
        height: "1em",
        "pointer-events": "none",
        fill: fill(),
        stroke: stroke(),
        "stroke-width": strokeWidth(),
        ...local.style
      };
    }
  }, others, {
    get children() {
      var _el$ = _tmpl$$3(), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;
      _el$3.nextSibling;
      createRenderEffect(() => setAttribute(_el$2, "transform", rotate()));
      return _el$;
    }
  }));
}
function createComputedStyle(element) {
  const [style2, setStyle] = createSignal();
  createEffect(() => {
    const el = element();
    el && setStyle(getWindow$1(el).getComputedStyle(el));
  });
  return style2;
}
function PopperPositioner(props) {
  const context = usePopperContext();
  const [local, others] = splitProps(props, ["ref", "style"]);
  return createComponent(Polymorphic, mergeProps({
    as: "div",
    ref(r$) {
      var _ref$2 = mergeRefs(context.setPositionerRef, local.ref);
      typeof _ref$2 === "function" && _ref$2(r$);
    },
    "data-popper-positioner": "",
    get style() {
      return {
        position: "absolute",
        top: 0,
        left: 0,
        "min-width": "max-content",
        ...local.style
      };
    }
  }, others));
}
function createDOMRect(anchorRect) {
  const {
    x = 0,
    y = 0,
    width = 0,
    height = 0
  } = anchorRect ?? {};
  if (typeof DOMRect === "function") {
    return new DOMRect(x, y, width, height);
  }
  const rect = {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x
  };
  return {
    ...rect,
    toJSON: () => rect
  };
}
function getAnchorElement(anchor, getAnchorRect) {
  const contextElement = anchor;
  return {
    contextElement,
    getBoundingClientRect: () => {
      const anchorRect = getAnchorRect(anchor);
      if (anchorRect) {
        return createDOMRect(anchorRect);
      }
      if (anchor) {
        return anchor.getBoundingClientRect();
      }
      return createDOMRect();
    }
  };
}
function isValidPlacement(flip2) {
  return /^(?:top|bottom|left|right)(?:-(?:start|end))?$/.test(flip2);
}
var REVERSE_BASE_PLACEMENT = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
function getTransformOrigin(placement, readingDirection) {
  const [basePlacement, alignment] = placement.split("-");
  const reversePlacement = REVERSE_BASE_PLACEMENT[basePlacement];
  if (!alignment) {
    return `${reversePlacement} center`;
  }
  if (basePlacement === "left" || basePlacement === "right") {
    return `${reversePlacement} ${alignment === "start" ? "top" : "bottom"}`;
  }
  if (alignment === "start") {
    return `${reversePlacement} ${readingDirection === "rtl" ? "right" : "left"}`;
  }
  return `${reversePlacement} ${readingDirection === "rtl" ? "left" : "right"}`;
}
function PopperRoot(props) {
  const mergedProps = mergeDefaultProps({
    getAnchorRect: (anchor) => anchor == null ? void 0 : anchor.getBoundingClientRect(),
    placement: "bottom",
    gutter: 0,
    shift: 0,
    flip: true,
    slide: true,
    overlap: false,
    sameWidth: false,
    fitViewport: false,
    hideWhenDetached: false,
    detachedPadding: 0,
    arrowPadding: 4,
    overflowPadding: 8
  }, props);
  const [positionerRef, setPositionerRef] = createSignal();
  const [arrowRef, setArrowRef] = createSignal();
  const [currentPlacement, setCurrentPlacement] = createSignal(mergedProps.placement);
  const anchorRef = () => {
    var _a;
    return getAnchorElement((_a = mergedProps.anchorRef) == null ? void 0 : _a.call(mergedProps), mergedProps.getAnchorRect);
  };
  const {
    direction
  } = useLocale();
  async function updatePosition() {
    var _a, _b;
    const referenceEl = anchorRef();
    const floatingEl = positionerRef();
    const arrowEl = arrowRef();
    if (!referenceEl || !floatingEl) {
      return;
    }
    const arrowOffset = ((arrowEl == null ? void 0 : arrowEl.clientHeight) || 0) / 2;
    const finalGutter = typeof mergedProps.gutter === "number" ? mergedProps.gutter + arrowOffset : mergedProps.gutter ?? arrowOffset;
    floatingEl.style.setProperty("--kb-popper-content-overflow-padding", `${mergedProps.overflowPadding}px`);
    referenceEl.getBoundingClientRect();
    const middleware = [
      // https://floating-ui.com/docs/offset
      offset(({
        placement
      }) => {
        const hasAlignment = !!placement.split("-")[1];
        return {
          mainAxis: finalGutter,
          crossAxis: !hasAlignment ? mergedProps.shift : void 0,
          alignmentAxis: mergedProps.shift
        };
      })
    ];
    if (mergedProps.flip !== false) {
      const fallbackPlacements = typeof mergedProps.flip === "string" ? mergedProps.flip.split(" ") : void 0;
      if (fallbackPlacements !== void 0 && !fallbackPlacements.every(isValidPlacement)) {
        throw new Error("`flip` expects a spaced-delimited list of placements");
      }
      middleware.push(flip({
        padding: mergedProps.overflowPadding,
        fallbackPlacements
      }));
    }
    if (mergedProps.slide || mergedProps.overlap) {
      middleware.push(shift({
        mainAxis: mergedProps.slide,
        crossAxis: mergedProps.overlap,
        padding: mergedProps.overflowPadding
      }));
    }
    middleware.push(size({
      padding: mergedProps.overflowPadding,
      apply({
        availableWidth,
        availableHeight,
        rects
      }) {
        const referenceWidth = Math.round(rects.reference.width);
        availableWidth = Math.floor(availableWidth);
        availableHeight = Math.floor(availableHeight);
        floatingEl.style.setProperty("--kb-popper-anchor-width", `${referenceWidth}px`);
        floatingEl.style.setProperty("--kb-popper-content-available-width", `${availableWidth}px`);
        floatingEl.style.setProperty("--kb-popper-content-available-height", `${availableHeight}px`);
        if (mergedProps.sameWidth) {
          floatingEl.style.width = `${referenceWidth}px`;
        }
        if (mergedProps.fitViewport) {
          floatingEl.style.maxWidth = `${availableWidth}px`;
          floatingEl.style.maxHeight = `${availableHeight}px`;
        }
      }
    }));
    if (mergedProps.hideWhenDetached) {
      middleware.push(hide({
        padding: mergedProps.detachedPadding
      }));
    }
    if (arrowEl) {
      middleware.push(arrow({
        element: arrowEl,
        padding: mergedProps.arrowPadding
      }));
    }
    const pos = await computePosition(referenceEl, floatingEl, {
      placement: mergedProps.placement,
      strategy: "absolute",
      middleware,
      platform: {
        ...platform,
        isRTL: () => direction() === "rtl"
      }
    });
    setCurrentPlacement(pos.placement);
    (_a = mergedProps.onCurrentPlacementChange) == null ? void 0 : _a.call(mergedProps, pos.placement);
    if (!floatingEl) {
      return;
    }
    floatingEl.style.setProperty("--kb-popper-content-transform-origin", getTransformOrigin(pos.placement, direction()));
    const x = Math.round(pos.x);
    const y = Math.round(pos.y);
    let visibility;
    if (mergedProps.hideWhenDetached) {
      visibility = ((_b = pos.middlewareData.hide) == null ? void 0 : _b.referenceHidden) ? "hidden" : "visible";
    }
    Object.assign(floatingEl.style, {
      top: "0",
      left: "0",
      transform: `translate3d(${x}px, ${y}px, 0)`,
      visibility
    });
    if (arrowEl && pos.middlewareData.arrow) {
      const {
        x: arrowX,
        y: arrowY
      } = pos.middlewareData.arrow;
      const dir = pos.placement.split("-")[0];
      Object.assign(arrowEl.style, {
        left: arrowX != null ? `${arrowX}px` : "",
        top: arrowY != null ? `${arrowY}px` : "",
        [dir]: "100%"
      });
    }
  }
  createEffect(() => {
    const referenceEl = anchorRef();
    const floatingEl = positionerRef();
    if (!referenceEl || !floatingEl) {
      return;
    }
    const cleanupAutoUpdate = autoUpdate(referenceEl, floatingEl, updatePosition, {
      // JSDOM doesn't support ResizeObserver
      elementResize: typeof ResizeObserver === "function"
    });
    onCleanup(cleanupAutoUpdate);
  });
  createEffect(() => {
    var _a;
    const positioner = positionerRef();
    const content = (_a = mergedProps.contentRef) == null ? void 0 : _a.call(mergedProps);
    if (!positioner || !content) {
      return;
    }
    queueMicrotask(() => {
      positioner.style.zIndex = getComputedStyle(content).zIndex;
    });
  });
  const context = {
    currentPlacement,
    contentRef: () => {
      var _a;
      return (_a = mergedProps.contentRef) == null ? void 0 : _a.call(mergedProps);
    },
    setPositionerRef,
    setArrowRef
  };
  return createComponent(PopperContext.Provider, {
    value: context,
    get children() {
      return mergedProps.children;
    }
  });
}
var Popper = Object.assign(PopperRoot, {
  Arrow: PopperArrow,
  Context: PopperContext,
  usePopperContext,
  Positioner: PopperPositioner
});
var _tmpl$$2 = /* @__PURE__ */ template(`<option>`), _tmpl$2$2 = /* @__PURE__ */ template(`<div aria-hidden=true><input type=text><select tabindex=-1><option>`);
function HiddenSelectBase(props) {
  let ref;
  const [local, others] = splitProps(props, ["ref", "onChange", "collection", "selectionManager", "isOpen", "isMultiple", "isVirtualized", "focusTrigger"]);
  const formControlContext = useFormControlContext();
  const [isInternalChangeEvent, setIsInternalChangeEvent] = createSignal(false);
  const renderOption = (key) => {
    const item = local.collection.getItem(key);
    return createComponent(Show, {
      get when() {
        return (item == null ? void 0 : item.type) === "item";
      },
      get children() {
        var _el$ = _tmpl$$2();
        _el$.value = key;
        insert(_el$, () => item == null ? void 0 : item.textValue);
        createRenderEffect(() => _el$.selected = local.selectionManager.isSelected(key));
        return _el$;
      }
    });
  };
  createEffect(on(() => local.selectionManager.selectedKeys(), (keys, prevKeys) => {
    if (prevKeys && isSameSelection(keys, prevKeys)) {
      return;
    }
    setIsInternalChangeEvent(true);
    ref == null ? void 0 : ref.dispatchEvent(new Event("input", {
      bubbles: true,
      cancelable: true
    }));
    ref == null ? void 0 : ref.dispatchEvent(new Event("change", {
      bubbles: true,
      cancelable: true
    }));
  }, {
    defer: true
  }));
  return (() => {
    var _el$2 = _tmpl$2$2(), _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;
    _el$4.firstChild;
    _el$3.addEventListener("focus", () => local.focusTrigger());
    _el$3.style.setProperty("font-size", "16px");
    _el$4.addEventListener("change", (e) => {
      callHandler(e, local.onChange);
      if (!isInternalChangeEvent()) {
        local.selectionManager.setSelectedKeys(/* @__PURE__ */ new Set([e.target.value]));
      }
      setIsInternalChangeEvent(false);
    });
    var _ref$ = mergeRefs((el) => ref = el, local.ref);
    typeof _ref$ === "function" && use(_ref$, _el$4);
    spread(_el$4, mergeProps({
      get multiple() {
        return local.isMultiple;
      },
      get name() {
        return formControlContext.name();
      },
      get required() {
        return formControlContext.isRequired();
      },
      get disabled() {
        return formControlContext.isDisabled();
      },
      get size() {
        return local.collection.getSize();
      },
      get value() {
        return local.selectionManager.firstSelectedKey() ?? "";
      }
    }, others), false, true);
    insert(_el$4, createComponent(Show, {
      get when() {
        return local.isVirtualized;
      },
      get fallback() {
        return createComponent(For, {
          get each() {
            return [...local.collection.getKeys()];
          },
          children: renderOption
        });
      },
      get children() {
        return createComponent(For, {
          get each() {
            return [...local.selectionManager.selectedKeys()];
          },
          children: renderOption
        });
      }
    }), null);
    createRenderEffect((_p$) => {
      var _v$ = visuallyHiddenStyles, _v$2 = local.selectionManager.isFocused() || local.isOpen ? -1 : 0, _v$3 = formControlContext.isRequired(), _v$4 = formControlContext.isDisabled(), _v$5 = formControlContext.isReadOnly();
      _p$.e = style(_el$2, _v$, _p$.e);
      _v$2 !== _p$.t && setAttribute(_el$3, "tabindex", _p$.t = _v$2);
      _v$3 !== _p$.a && (_el$3.required = _p$.a = _v$3);
      _v$4 !== _p$.o && (_el$3.disabled = _p$.o = _v$4);
      _v$5 !== _p$.i && (_el$3.readOnly = _p$.i = _v$5);
      return _p$;
    }, {
      e: void 0,
      t: void 0,
      a: void 0,
      o: void 0,
      i: void 0
    });
    return _el$2;
  })();
}
var cache = /* @__PURE__ */ new WeakMap();
function getItemCount(collection) {
  let count = cache.get(collection);
  if (count != null) {
    return count;
  }
  count = 0;
  for (const item of collection) {
    if (item.type === "item") {
      count++;
    }
  }
  cache.set(collection, count);
  return count;
}
var ListKeyboardDelegate = class {
  constructor(collection, ref, collator) {
    __publicField(this, "collection");
    __publicField(this, "ref");
    __publicField(this, "collator");
    this.collection = collection;
    this.ref = ref;
    this.collator = collator;
  }
  getKeyBelow(key) {
    let keyAfter = this.collection().getKeyAfter(key);
    while (keyAfter != null) {
      const item = this.collection().getItem(keyAfter);
      if (item && item.type === "item" && !item.disabled) {
        return keyAfter;
      }
      keyAfter = this.collection().getKeyAfter(keyAfter);
    }
  }
  getKeyAbove(key) {
    let keyBefore = this.collection().getKeyBefore(key);
    while (keyBefore != null) {
      const item = this.collection().getItem(keyBefore);
      if (item && item.type === "item" && !item.disabled) {
        return keyBefore;
      }
      keyBefore = this.collection().getKeyBefore(keyBefore);
    }
  }
  getFirstKey() {
    let key = this.collection().getFirstKey();
    while (key != null) {
      const item = this.collection().getItem(key);
      if (item && item.type === "item" && !item.disabled) {
        return key;
      }
      key = this.collection().getKeyAfter(key);
    }
  }
  getLastKey() {
    let key = this.collection().getLastKey();
    while (key != null) {
      const item = this.collection().getItem(key);
      if (item && item.type === "item" && !item.disabled) {
        return key;
      }
      key = this.collection().getKeyBefore(key);
    }
  }
  getItem(key) {
    var _a, _b;
    return ((_b = (_a = this.ref) == null ? void 0 : _a.call(this)) == null ? void 0 : _b.querySelector(`[data-key="${key}"]`)) ?? null;
  }
  // TODO: not working correctly
  getKeyPageAbove(key) {
    var _a;
    const menu = (_a = this.ref) == null ? void 0 : _a.call(this);
    let item = this.getItem(key);
    if (!menu || !item) {
      return;
    }
    const pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);
    let keyAbove = key;
    while (keyAbove && item && item.offsetTop > pageY) {
      keyAbove = this.getKeyAbove(keyAbove);
      item = keyAbove != null ? this.getItem(keyAbove) : null;
    }
    return keyAbove;
  }
  // TODO: not working correctly
  getKeyPageBelow(key) {
    var _a;
    const menu = (_a = this.ref) == null ? void 0 : _a.call(this);
    let item = this.getItem(key);
    if (!menu || !item) {
      return;
    }
    const pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);
    let keyBelow = key;
    while (keyBelow && item && item.offsetTop < pageY) {
      keyBelow = this.getKeyBelow(keyBelow);
      item = keyBelow != null ? this.getItem(keyBelow) : null;
    }
    return keyBelow;
  }
  getKeyForSearch(search, fromKey) {
    var _a;
    const collator = (_a = this.collator) == null ? void 0 : _a.call(this);
    if (!collator) {
      return;
    }
    let key = fromKey != null ? this.getKeyBelow(fromKey) : this.getFirstKey();
    while (key != null) {
      const item = this.collection().getItem(key);
      if (item) {
        const substring = item.textValue.slice(0, search.length);
        if (item.textValue && collator.compare(substring, search) === 0) {
          return key;
        }
      }
      key = this.getKeyBelow(key);
    }
  }
};
function createSelectableList(props, ref, scrollRef) {
  const collator = createCollator({
    usage: "search",
    sensitivity: "base"
  });
  const delegate = createMemo(() => {
    const keyboardDelegate = access$1(props.keyboardDelegate);
    if (keyboardDelegate) {
      return keyboardDelegate;
    }
    return new ListKeyboardDelegate(props.collection, ref, collator);
  });
  return createSelectableCollection({
    selectionManager: () => access$1(props.selectionManager),
    keyboardDelegate: delegate,
    autoFocus: () => access$1(props.autoFocus),
    deferAutoFocus: () => access$1(props.deferAutoFocus),
    shouldFocusWrap: () => access$1(props.shouldFocusWrap),
    disallowEmptySelection: () => access$1(props.disallowEmptySelection),
    selectOnFocus: () => access$1(props.selectOnFocus),
    disallowTypeAhead: () => access$1(props.disallowTypeAhead),
    shouldUseVirtualFocus: () => access$1(props.shouldUseVirtualFocus),
    allowsTabNavigation: () => access$1(props.allowsTabNavigation),
    isVirtualized: () => access$1(props.isVirtualized),
    scrollToKey: (key) => {
      var _a;
      return (_a = access$1(props.scrollToKey)) == null ? void 0 : _a(key);
    },
    orientation: () => access$1(props.orientation)
  }, ref, scrollRef);
}
var listbox_exports = {};
__export(listbox_exports, {
  Item: () => ListboxItem,
  ItemDescription: () => ListboxItemDescription,
  ItemIndicator: () => ListboxItemIndicator,
  ItemLabel: () => ListboxItemLabel,
  Listbox: () => Listbox,
  Root: () => ListboxRoot,
  Section: () => ListboxSection
});
var ListboxContext = createContext();
function useListboxContext() {
  const context = useContext(ListboxContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `useListboxContext` must be used within a `Listbox` component");
  }
  return context;
}
var ListboxItemContext = createContext();
function useListboxItemContext() {
  const context = useContext(ListboxItemContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `useListboxItemContext` must be used within a `Listbox.Item` component");
  }
  return context;
}
function ListboxItem(props) {
  let ref;
  const listBoxContext = useListboxContext();
  const defaultId = `${listBoxContext.generateId("item")}-${createUniqueId()}`;
  const mergedProps = mergeDefaultProps({
    id: defaultId
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref", "item", "aria-label", "aria-labelledby", "aria-describedby", "onPointerMove", "onPointerDown", "onPointerUp", "onClick", "onKeyDown", "onMouseDown", "onFocus"]);
  const [labelId, setLabelId] = createSignal();
  const [descriptionId, setDescriptionId] = createSignal();
  const selectionManager = () => listBoxContext.listState().selectionManager();
  const isHighlighted = () => selectionManager().focusedKey() === local.item.key;
  const selectableItem = createSelectableItem({
    key: () => local.item.key,
    selectionManager,
    shouldSelectOnPressUp: listBoxContext.shouldSelectOnPressUp,
    allowsDifferentPressOrigin: () => {
      return listBoxContext.shouldSelectOnPressUp() && listBoxContext.shouldFocusOnHover();
    },
    shouldUseVirtualFocus: listBoxContext.shouldUseVirtualFocus,
    disabled: () => local.item.disabled
  }, () => ref);
  const ariaSelected = () => {
    if (selectionManager().selectionMode() === "none") {
      return void 0;
    }
    return selectableItem.isSelected();
  };
  const isNotSafariMacOS = createMemo(() => !(isMac() && isWebKit$1()));
  const ariaLabel = () => isNotSafariMacOS() ? local["aria-label"] : void 0;
  const ariaLabelledBy = () => isNotSafariMacOS() ? labelId() : void 0;
  const ariaDescribedBy = () => isNotSafariMacOS() ? descriptionId() : void 0;
  const ariaPosInSet = () => {
    var _a;
    if (!listBoxContext.isVirtualized()) {
      return void 0;
    }
    const index = (_a = listBoxContext.listState().collection().getItem(local.item.key)) == null ? void 0 : _a.index;
    return index != null ? index + 1 : void 0;
  };
  const ariaSetSize = () => {
    if (!listBoxContext.isVirtualized()) {
      return void 0;
    }
    return getItemCount(listBoxContext.listState().collection());
  };
  const onPointerMove = (e) => {
    callHandler(e, local.onPointerMove);
    if (e.pointerType !== "mouse") {
      return;
    }
    if (!selectableItem.isDisabled() && listBoxContext.shouldFocusOnHover()) {
      focusWithoutScrolling(e.currentTarget);
      selectionManager().setFocused(true);
      selectionManager().setFocusedKey(local.item.key);
    }
  };
  const dataset = createMemo(() => ({
    "data-disabled": selectableItem.isDisabled() ? "" : void 0,
    "data-selected": selectableItem.isSelected() ? "" : void 0,
    "data-highlighted": isHighlighted() ? "" : void 0
  }));
  const context = {
    isSelected: selectableItem.isSelected,
    dataset,
    generateId: createGenerateId(() => others.id),
    registerLabelId: createRegisterId(setLabelId),
    registerDescriptionId: createRegisterId(setDescriptionId)
  };
  return createComponent(ListboxItemContext.Provider, {
    value: context,
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "li",
        ref(r$) {
          var _ref$ = mergeRefs((el) => ref = el, local.ref);
          typeof _ref$ === "function" && _ref$(r$);
        },
        role: "option",
        get tabIndex() {
          return selectableItem.tabIndex();
        },
        get ["aria-disabled"]() {
          return selectableItem.isDisabled();
        },
        get ["aria-selected"]() {
          return ariaSelected();
        },
        get ["aria-label"]() {
          return ariaLabel();
        },
        get ["aria-labelledby"]() {
          return ariaLabelledBy();
        },
        get ["aria-describedby"]() {
          return ariaDescribedBy();
        },
        get ["aria-posinset"]() {
          return ariaPosInSet();
        },
        get ["aria-setsize"]() {
          return ariaSetSize();
        },
        get ["data-key"]() {
          return selectableItem.dataKey();
        },
        get onPointerDown() {
          return composeEventHandlers([local.onPointerDown, selectableItem.onPointerDown]);
        },
        get onPointerUp() {
          return composeEventHandlers([local.onPointerUp, selectableItem.onPointerUp]);
        },
        get onClick() {
          return composeEventHandlers([local.onClick, selectableItem.onClick]);
        },
        get onKeyDown() {
          return composeEventHandlers([local.onKeyDown, selectableItem.onKeyDown]);
        },
        get onMouseDown() {
          return composeEventHandlers([local.onMouseDown, selectableItem.onMouseDown]);
        },
        get onFocus() {
          return composeEventHandlers([local.onFocus, selectableItem.onFocus]);
        },
        onPointerMove
      }, dataset, others));
    }
  });
}
function ListboxItemDescription(props) {
  const context = useListboxItemContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("description")
  }, props);
  createEffect(() => onCleanup(context.registerDescriptionId(mergedProps.id)));
  return createComponent(Polymorphic, mergeProps({
    as: "div"
  }, () => context.dataset(), mergedProps));
}
function ListboxItemIndicator(props) {
  const context = useListboxItemContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("indicator")
  }, props);
  const [local, others] = splitProps(mergedProps, ["forceMount"]);
  return createComponent(Show, {
    get when() {
      return local.forceMount || context.isSelected();
    },
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "div",
        "aria-hidden": "true"
      }, () => context.dataset(), others));
    }
  });
}
function ListboxItemLabel(props) {
  const context = useListboxItemContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("label")
  }, props);
  createEffect(() => onCleanup(context.registerLabelId(mergedProps.id)));
  return createComponent(Polymorphic, mergeProps({
    as: "div"
  }, () => context.dataset(), mergedProps));
}
function ListboxRoot(props) {
  let ref;
  const defaultId = `listbox-${createUniqueId()}`;
  const mergedProps = mergeDefaultProps({
    id: defaultId,
    selectionMode: "single",
    virtualized: false
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref", "children", "renderItem", "renderSection", "value", "defaultValue", "onChange", "options", "optionValue", "optionTextValue", "optionDisabled", "optionGroupChildren", "state", "keyboardDelegate", "autoFocus", "selectionMode", "shouldFocusWrap", "shouldUseVirtualFocus", "shouldSelectOnPressUp", "shouldFocusOnHover", "allowDuplicateSelectionEvents", "disallowEmptySelection", "selectionBehavior", "selectOnFocus", "disallowTypeAhead", "allowsTabNavigation", "virtualized", "scrollToItem", "scrollRef", "onKeyDown", "onMouseDown", "onFocusIn", "onFocusOut"]);
  const listState = createMemo(() => {
    if (local.state) {
      return local.state;
    }
    return createListState({
      selectedKeys: () => local.value,
      defaultSelectedKeys: () => local.defaultValue,
      onSelectionChange: local.onChange,
      allowDuplicateSelectionEvents: () => access$1(local.allowDuplicateSelectionEvents),
      disallowEmptySelection: () => access$1(local.disallowEmptySelection),
      selectionBehavior: () => access$1(local.selectionBehavior),
      selectionMode: () => access$1(local.selectionMode),
      dataSource: () => local.options ?? [],
      getKey: () => local.optionValue,
      getTextValue: () => local.optionTextValue,
      getDisabled: () => local.optionDisabled,
      getSectionChildren: () => local.optionGroupChildren
    });
  });
  const selectableList = createSelectableList({
    selectionManager: () => listState().selectionManager(),
    collection: () => listState().collection(),
    autoFocus: () => access$1(local.autoFocus),
    shouldFocusWrap: () => access$1(local.shouldFocusWrap),
    keyboardDelegate: () => local.keyboardDelegate,
    disallowEmptySelection: () => access$1(local.disallowEmptySelection),
    selectOnFocus: () => access$1(local.selectOnFocus),
    disallowTypeAhead: () => access$1(local.disallowTypeAhead),
    shouldUseVirtualFocus: () => access$1(local.shouldUseVirtualFocus),
    allowsTabNavigation: () => access$1(local.allowsTabNavigation),
    isVirtualized: () => local.virtualized,
    scrollToKey: () => local.scrollToItem
  }, () => ref, () => {
    var _a;
    return (_a = local.scrollRef) == null ? void 0 : _a.call(local);
  });
  const context = {
    listState,
    generateId: createGenerateId(() => others.id),
    shouldUseVirtualFocus: () => mergedProps.shouldUseVirtualFocus,
    shouldSelectOnPressUp: () => mergedProps.shouldSelectOnPressUp,
    shouldFocusOnHover: () => mergedProps.shouldFocusOnHover,
    isVirtualized: () => local.virtualized
  };
  return createComponent(ListboxContext.Provider, {
    value: context,
    get children() {
      return createComponent(Polymorphic, mergeProps({
        as: "ul",
        ref(r$) {
          var _ref$2 = mergeRefs((el) => ref = el, local.ref);
          typeof _ref$2 === "function" && _ref$2(r$);
        },
        role: "listbox",
        get tabIndex() {
          return selectableList.tabIndex();
        },
        get ["aria-multiselectable"]() {
          return listState().selectionManager().selectionMode() === "multiple" ? true : void 0;
        },
        get onKeyDown() {
          return composeEventHandlers([local.onKeyDown, selectableList.onKeyDown]);
        },
        get onMouseDown() {
          return composeEventHandlers([local.onMouseDown, selectableList.onMouseDown]);
        },
        get onFocusIn() {
          return composeEventHandlers([local.onFocusIn, selectableList.onFocusIn]);
        },
        get onFocusOut() {
          return composeEventHandlers([local.onFocusOut, selectableList.onFocusOut]);
        }
      }, others, {
        get children() {
          return createComponent(Show, {
            get when() {
              return !local.virtualized;
            },
            get fallback() {
              var _a;
              return (_a = local.children) == null ? void 0 : _a.call(local, listState().collection);
            },
            get children() {
              return createComponent(Key, {
                get each() {
                  return [...listState().collection()];
                },
                by: "key",
                children: (item) => createComponent(Switch, {
                  get children() {
                    return [createComponent(Match, {
                      get when() {
                        return item().type === "section";
                      },
                      get children() {
                        var _a;
                        return (_a = local.renderSection) == null ? void 0 : _a.call(local, item());
                      }
                    }), createComponent(Match, {
                      get when() {
                        return item().type === "item";
                      },
                      get children() {
                        var _a;
                        return (_a = local.renderItem) == null ? void 0 : _a.call(local, item());
                      }
                    })];
                  }
                })
              });
            }
          });
        }
      }));
    }
  });
}
function ListboxSection(props) {
  return createComponent(Polymorphic, mergeProps({
    as: "li",
    role: "presentation"
  }, props));
}
var Listbox = Object.assign(ListboxRoot, {
  Item: ListboxItem,
  ItemDescription: ListboxItemDescription,
  ItemIndicator: ListboxItemIndicator,
  ItemLabel: ListboxItemLabel,
  Section: ListboxSection
});
var combobox_exports = {};
__export(combobox_exports, {
  Arrow: () => PopperArrow,
  Combobox: () => Combobox$1,
  Content: () => ComboboxContent$1,
  Control: () => ComboboxControl,
  Description: () => FormControlDescription,
  ErrorMessage: () => FormControlErrorMessage,
  HiddenSelect: () => ComboboxHiddenSelect,
  Icon: () => ComboboxIcon,
  Input: () => ComboboxInput$1,
  Item: () => ListboxItem,
  ItemDescription: () => ListboxItemDescription,
  ItemIndicator: () => ListboxItemIndicator,
  ItemLabel: () => ListboxItemLabel,
  Label: () => FormControlLabel,
  Listbox: () => ComboboxListbox,
  Portal: () => ComboboxPortal,
  Root: () => ComboboxRoot,
  Section: () => ListboxSection,
  Trigger: () => ComboboxTrigger$1
});
var ComboboxContext = createContext();
function useComboboxContext() {
  const context = useContext(ComboboxContext);
  if (context === void 0) {
    throw new Error("[kobalte]: `useComboboxContext` must be used within a `Combobox` component");
  }
  return context;
}
function ComboboxContent$1(props) {
  let ref;
  const context = useComboboxContext();
  const [local, others] = splitProps(props, ["ref", "style", "onCloseAutoFocus", "onFocusOutside"]);
  const close = () => {
    context.resetInputValue(context.listState().selectionManager().selectedKeys());
    context.close();
  };
  const onFocusOutside = (e) => {
    var _a;
    (_a = local.onFocusOutside) == null ? void 0 : _a.call(local, e);
    if (context.isOpen() && context.isModal()) {
      e.preventDefault();
    }
  };
  createHideOutside({
    isDisabled: () => !(context.isOpen() && context.isModal()),
    targets: () => {
      const excludedElements = [];
      if (ref) {
        excludedElements.push(ref);
      }
      const controlEl = context.controlRef();
      if (controlEl) {
        excludedElements.push(controlEl);
      }
      return excludedElements;
    }
  });
  src_default$1({
    element: () => ref ?? null,
    enabled: () => context.isOpen() && context.preventScroll()
  });
  createFocusScope({
    trapFocus: () => context.isOpen() && context.isModal(),
    onMountAutoFocus: (e) => {
      e.preventDefault();
    },
    onUnmountAutoFocus: (e) => {
      var _a;
      (_a = local.onCloseAutoFocus) == null ? void 0 : _a.call(local, e);
      if (!e.defaultPrevented) {
        focusWithoutScrolling(context.inputRef());
        e.preventDefault();
      }
    }
  }, () => ref);
  return createComponent(Show, {
    get when() {
      return context.contentPresent();
    },
    get children() {
      return createComponent(Popper.Positioner, {
        get children() {
          return createComponent(DismissableLayer, mergeProps({
            ref(r$) {
              var _ref$ = mergeRefs((el) => {
                context.setContentRef(el);
                ref = el;
              }, local.ref);
              typeof _ref$ === "function" && _ref$(r$);
            },
            get disableOutsidePointerEvents() {
              return createMemo(() => !!context.isModal())() && context.isOpen();
            },
            get excludedElements() {
              return [context.controlRef];
            },
            get style() {
              return {
                "--kb-combobox-content-transform-origin": "var(--kb-popper-content-transform-origin)",
                position: "relative",
                ...local.style
              };
            },
            onFocusOutside,
            onDismiss: close
          }, () => context.dataset(), others));
        }
      });
    }
  });
}
function ComboboxInput$1(props) {
  let ref;
  const formControlContext = useFormControlContext();
  const context = useComboboxContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("input")
  }, props);
  const [local, formControlFieldProps, others] = splitProps(mergedProps, ["ref", "disabled", "onInput", "onKeyDown", "onFocus", "onBlur", "onTouchEnd"], FORM_CONTROL_FIELD_PROP_NAMES);
  const collection = () => context.listState().collection();
  const selectionManager = () => context.listState().selectionManager();
  const isDisabled = () => {
    return local.disabled || context.isDisabled() || formControlContext.isDisabled();
  };
  const {
    fieldProps
  } = createFormControlField(formControlFieldProps);
  const onInput = (e) => {
    callHandler(e, local.onInput);
    if (formControlContext.isReadOnly() || isDisabled()) {
      return;
    }
    const target = e.target;
    context.setInputValue(target.value);
    target.value = context.inputValue() ?? "";
    if (context.isOpen()) {
      if (collection().getSize() <= 0 && !context.allowsEmptyCollection()) {
        context.close();
      }
    } else {
      if (collection().getSize() > 0) {
        context.open(false, "input");
      }
    }
  };
  const onKeyDown = (e) => {
    callHandler(e, local.onKeyDown);
    if (formControlContext.isReadOnly() || isDisabled()) {
      return;
    }
    if (context.isOpen()) {
      callHandler(e, context.onInputKeyDown);
    }
    switch (e.key) {
      case "Enter":
        if (context.isOpen()) {
          e.preventDefault();
          const focusedKey = selectionManager().focusedKey();
          if (focusedKey != null) {
            selectionManager().select(focusedKey);
          }
        }
        break;
      case "Tab":
        if (context.isOpen()) {
          context.close();
          context.resetInputValue(context.listState().selectionManager().selectedKeys());
        }
        break;
      case "Escape":
        if (context.isOpen()) {
          context.close();
          context.resetInputValue(context.listState().selectionManager().selectedKeys());
        } else {
          context.setInputValue("");
        }
        break;
      case "ArrowDown":
        if (!context.isOpen()) {
          context.open(e.altKey ? false : "first", "manual");
        }
        break;
      case "ArrowUp":
        if (!context.isOpen()) {
          context.open("last", "manual");
        } else {
          if (e.altKey) {
            context.close();
            context.resetInputValue(context.listState().selectionManager().selectedKeys());
          }
        }
        break;
      case "ArrowLeft":
      case "ArrowRight":
        selectionManager().setFocusedKey(void 0);
        break;
      case "Backspace":
        if (context.removeOnBackspace() && selectionManager().selectionMode() === "multiple" && context.inputValue() === "") {
          const lastSelectedKey = [...selectionManager().selectedKeys()].pop() ?? "";
          selectionManager().toggleSelection(lastSelectedKey);
        }
        break;
    }
  };
  const onFocus = (e) => {
    callHandler(e, local.onFocus);
    if (context.isInputFocused()) {
      return;
    }
    context.setIsInputFocused(true);
  };
  const onBlur = (e) => {
    callHandler(e, local.onBlur);
    if (contains$1(context.controlRef(), e.relatedTarget) || contains$1(context.contentRef(), e.relatedTarget)) {
      return;
    }
    context.setIsInputFocused(false);
  };
  let lastEventTime = 0;
  const onTouchEnd = (e) => {
    callHandler(e, local.onTouchEnd);
    if (!ref || formControlContext.isReadOnly() || isDisabled()) {
      return;
    }
    if (e.timeStamp - lastEventTime < 500) {
      e.preventDefault();
      ref.focus();
      return;
    }
    const rect = e.target.getBoundingClientRect();
    const touch = e.changedTouches[0];
    const centerX = Math.ceil(rect.left + 0.5 * rect.width);
    const centerY = Math.ceil(rect.top + 0.5 * rect.height);
    if (touch.clientX === centerX && touch.clientY === centerY) {
      e.preventDefault();
      ref.focus();
      context.toggle(false, "manual");
      lastEventTime = e.timeStamp;
    }
  };
  return createComponent(Polymorphic, mergeProps({
    as: "input",
    ref(r$) {
      var _ref$2 = mergeRefs((el) => {
        context.setInputRef(el);
        ref = el;
      }, local.ref);
      typeof _ref$2 === "function" && _ref$2(r$);
    },
    get id() {
      return fieldProps.id();
    },
    get value() {
      return context.inputValue();
    },
    get required() {
      return formControlContext.isRequired();
    },
    get disabled() {
      return formControlContext.isDisabled();
    },
    get readonly() {
      return formControlContext.isReadOnly();
    },
    get placeholder() {
      return context.placeholder();
    },
    type: "text",
    role: "combobox",
    autoComplete: "off",
    autoCorrect: "off",
    spellCheck: "false",
    "aria-haspopup": "listbox",
    "aria-autocomplete": "list",
    get ["aria-expanded"]() {
      return context.isOpen();
    },
    get ["aria-controls"]() {
      return createMemo(() => !!context.isOpen())() ? context.listboxId() : void 0;
    },
    get ["aria-activedescendant"]() {
      return context.activeDescendant();
    },
    get ["aria-label"]() {
      return fieldProps.ariaLabel();
    },
    get ["aria-labelledby"]() {
      return fieldProps.ariaLabelledBy();
    },
    get ["aria-describedby"]() {
      return fieldProps.ariaDescribedBy();
    },
    get ["aria-invalid"]() {
      return formControlContext.validationState() === "invalid" || void 0;
    },
    get ["aria-required"]() {
      return formControlContext.isRequired() || void 0;
    },
    get ["aria-disabled"]() {
      return formControlContext.isDisabled() || void 0;
    },
    get ["aria-readonly"]() {
      return formControlContext.isReadOnly() || void 0;
    },
    onInput,
    onKeyDown,
    onFocus,
    onBlur,
    onTouchEnd
  }, () => context.dataset(), () => formControlContext.dataset(), others));
}
function ComboboxListbox(props) {
  const formControlContext = useFormControlContext();
  const context = useComboboxContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("listbox")
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref"]);
  const ariaLabelledBy = () => {
    return formControlContext.getAriaLabelledBy(others.id, context.listboxAriaLabel(), void 0);
  };
  createEffect(() => onCleanup(context.registerListboxId(others.id)));
  return createComponent(ListboxRoot, mergeProps({
    ref(r$) {
      var _ref$3 = mergeRefs(context.setListboxRef, local.ref);
      typeof _ref$3 === "function" && _ref$3(r$);
    },
    get state() {
      return context.listState();
    },
    get autoFocus() {
      return context.autoFocus();
    },
    shouldUseVirtualFocus: true,
    shouldSelectOnPressUp: true,
    shouldFocusOnHover: true,
    get ["aria-label"]() {
      return context.listboxAriaLabel();
    },
    get ["aria-labelledby"]() {
      return ariaLabelledBy();
    },
    get renderItem() {
      return context.renderItem;
    },
    get renderSection() {
      return context.renderSection;
    },
    get virtualized() {
      return context.isVirtualized();
    }
  }, others));
}
function ComboboxPortal(props) {
  const context = useComboboxContext();
  return createComponent(Show, {
    get when() {
      return context.contentPresent();
    },
    get children() {
      return createComponent(Portal, props);
    }
  });
}
function ComboboxControl(props) {
  const formControlContext = useFormControlContext();
  const context = useComboboxContext();
  const [local, others] = splitProps(props, ["ref", "children"]);
  const selectionManager = () => context.listState().selectionManager();
  return createComponent(Polymorphic, mergeProps({
    as: "div",
    ref(r$) {
      var _ref$4 = mergeRefs(context.setControlRef, local.ref);
      typeof _ref$4 === "function" && _ref$4(r$);
    }
  }, () => context.dataset(), () => formControlContext.dataset(), others, {
    get children() {
      return createComponent(ComboboxControlChild, {
        state: {
          selectedOptions: () => context.selectedOptions(),
          remove: (option) => context.removeOptionFromSelection(option),
          clear: () => selectionManager().clearSelection()
        },
        get children() {
          return local.children;
        }
      });
    }
  }));
}
function ComboboxControlChild(props) {
  const resolvedChildren = children(() => {
    const body = props.children;
    return isFunction(body) ? body(props.state) : body;
  });
  return createMemo(resolvedChildren);
}
function ComboboxHiddenSelect(props) {
  const context = useComboboxContext();
  return createComponent(HiddenSelectBase, mergeProps({
    get collection() {
      return context.listState().collection();
    },
    get selectionManager() {
      return context.listState().selectionManager();
    },
    get isOpen() {
      return context.isOpen();
    },
    get isMultiple() {
      return context.isMultiple();
    },
    get isVirtualized() {
      return context.isVirtualized();
    },
    focusTrigger: () => {
      var _a;
      return (_a = context.inputRef()) == null ? void 0 : _a.focus();
    }
  }, props));
}
function ComboboxIcon(props) {
  const context = useComboboxContext();
  const mergedProps = mergeDefaultProps({
    children: "▼"
  }, props);
  return createComponent(Polymorphic, mergeProps({
    as: "span",
    "aria-hidden": "true"
  }, () => context.dataset(), mergedProps));
}
var COMBOBOX_INTL_TRANSLATIONS = {
  // Annouce option to screen readers on focus.
  focusAnnouncement: (optionText, isSelected) => `${optionText}${isSelected ? ", selected" : ""}`,
  // Annouce the number of options available to screen readers on open.
  countAnnouncement: (optionCount) => {
    switch (optionCount) {
      case 1:
        return "one option available";
    }
  },
  // Annouce the selection of an option to screen readers.
  selectedAnnouncement: (optionText) => `${optionText}, selected`,
  // `aria-label` of Combobox.Trigger.
  triggerLabel: "Show suggestions",
  // `aria-label` of Combobox.Listbox.
  listboxLabel: "Suggestions"
};
function ComboboxBase(props) {
  const defaultId = `combobox-${createUniqueId()}`;
  const filter2 = createFilter({
    sensitivity: "base"
  });
  const mergedProps = mergeDefaultProps({
    id: defaultId,
    selectionMode: "single",
    allowsEmptyCollection: false,
    disallowEmptySelection: false,
    allowDuplicateSelectionEvents: true,
    closeOnSelection: props.selectionMode === "single",
    removeOnBackspace: true,
    gutter: 8,
    sameWidth: true,
    modal: false,
    defaultFilter: "contains",
    triggerMode: "input",
    translations: COMBOBOX_INTL_TRANSLATIONS
  }, props);
  const [local, popperProps, formControlProps, others] = splitProps(mergedProps, ["translations", "itemComponent", "sectionComponent", "open", "defaultOpen", "onOpenChange", "onInputChange", "value", "defaultValue", "onChange", "triggerMode", "placeholder", "options", "optionValue", "optionTextValue", "optionLabel", "optionDisabled", "optionGroupChildren", "keyboardDelegate", "allowDuplicateSelectionEvents", "disallowEmptySelection", "defaultFilter", "shouldFocusWrap", "allowsEmptyCollection", "closeOnSelection", "removeOnBackspace", "selectionBehavior", "selectionMode", "virtualized", "modal", "preventScroll", "forceMount"], ["getAnchorRect", "placement", "gutter", "shift", "flip", "slide", "overlap", "sameWidth", "fitViewport", "hideWhenDetached", "detachedPadding", "arrowPadding", "overflowPadding"], FORM_CONTROL_PROP_NAMES);
  const [listboxId, setListboxId] = createSignal();
  const [controlRef, setControlRef] = createSignal();
  const [inputRef, setInputRef] = createSignal();
  const [triggerRef, setTriggerRef] = createSignal();
  const [contentRef, setContentRef] = createSignal();
  const [listboxRef, setListboxRef] = createSignal();
  const [focusStrategy, setFocusStrategy] = createSignal(false);
  const [isInputFocused, setIsInputFocusedState] = createSignal(false);
  const [showAllOptions, setShowAllOptions] = createSignal(false);
  const [lastDisplayedOptions, setLastDisplayedOptions] = createSignal(local.options);
  const disclosureState = createDisclosureState({
    open: () => local.open,
    defaultOpen: () => local.defaultOpen,
    onOpenChange: (isOpen) => {
      var _a;
      return (_a = local.onOpenChange) == null ? void 0 : _a.call(local, isOpen, openTriggerMode);
    }
  });
  const [inputValue, setInputValue] = createControllableSignal({
    defaultValue: () => "",
    onChange: (value) => {
      var _a;
      (_a = local.onInputChange) == null ? void 0 : _a.call(local, value);
      if (value === "" && local.selectionMode === "single" && !listState.selectionManager().isEmpty() && local.value === void 0) {
        listState.selectionManager().setSelectedKeys([]);
      }
      listState.selectionManager().setFocusedKey(void 0);
    }
  });
  const getOptionValue = (option) => {
    const optionValue = local.optionValue;
    if (optionValue == null) {
      return String(option);
    }
    return String(isFunction(optionValue) ? optionValue(option) : option[optionValue]);
  };
  const getOptionLabel = (option) => {
    const optionLabel = local.optionLabel;
    if (optionLabel == null) {
      return String(option);
    }
    return String(isFunction(optionLabel) ? optionLabel(option) : option[optionLabel]);
  };
  const allOptions = createMemo(() => {
    const optionGroupChildren = local.optionGroupChildren;
    if (optionGroupChildren == null) {
      return local.options;
    }
    return local.options.flatMap((item) => item[optionGroupChildren] ?? item);
  });
  const filterFn = (option) => {
    var _a;
    const inputVal = inputValue() ?? "";
    if (isFunction(local.defaultFilter)) {
      return (_a = local.defaultFilter) == null ? void 0 : _a.call(local, option, inputVal);
    }
    const textVal = getOptionLabel(option);
    switch (local.defaultFilter) {
      case "startsWith":
        return filter2.startsWith(textVal, inputVal);
      case "endsWith":
        return filter2.endsWith(textVal, inputVal);
      case "contains":
        return filter2.contains(textVal, inputVal);
    }
  };
  const filteredOptions = createMemo(() => {
    const optionGroupChildren = local.optionGroupChildren;
    if (optionGroupChildren == null) {
      return local.options.filter(filterFn);
    }
    const filteredGroups = [];
    for (const optGroup of local.options) {
      const filteredChildrenOptions = optGroup[optionGroupChildren].filter(filterFn);
      if (filteredChildrenOptions.length === 0) continue;
      filteredGroups.push({
        ...optGroup,
        [optionGroupChildren]: filteredChildrenOptions
      });
    }
    return filteredGroups;
  });
  const displayedOptions = createMemo(() => {
    if (disclosureState.isOpen()) {
      if (showAllOptions()) {
        return local.options;
      }
      return filteredOptions();
    }
    return lastDisplayedOptions();
  });
  let openTriggerMode = "focus";
  const getOptionsFromValues = (values) => {
    return [...values].map((value) => allOptions().find((option) => getOptionValue(option) === value)).filter((option) => option != null);
  };
  const listState = createListState({
    selectedKeys: () => {
      if (local.value != null) {
        return local.value.map(getOptionValue);
      }
      return local.value;
    },
    defaultSelectedKeys: () => {
      if (local.defaultValue != null) {
        return local.defaultValue.map(getOptionValue);
      }
      return local.defaultValue;
    },
    onSelectionChange: (selectedKeys) => {
      var _a;
      (_a = local.onChange) == null ? void 0 : _a.call(local, getOptionsFromValues(selectedKeys));
      if (local.closeOnSelection) {
        if (disclosureState.isOpen() && selectedKeys.size > 0) {
          close();
          setTimeout(close);
        }
      }
      const inputEl = inputRef();
      if (inputEl) {
        inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length);
        focusWithoutScrolling(inputEl);
      }
    },
    allowDuplicateSelectionEvents: () => access$1(local.allowDuplicateSelectionEvents),
    disallowEmptySelection: () => local.disallowEmptySelection,
    selectionBehavior: () => access$1(local.selectionBehavior),
    selectionMode: () => local.selectionMode,
    dataSource: displayedOptions,
    getKey: () => local.optionValue,
    getTextValue: () => local.optionTextValue,
    getDisabled: () => local.optionDisabled,
    getSectionChildren: () => local.optionGroupChildren
  });
  const selectedOptions = createMemo(() => {
    return getOptionsFromValues(listState.selectionManager().selectedKeys());
  });
  const removeOptionFromSelection = (option) => {
    listState.selectionManager().toggleSelection(getOptionValue(option));
  };
  const {
    present: contentPresent
  } = src_default({
    show: () => local.forceMount || disclosureState.isOpen(),
    element: contentRef
  });
  const open = (focusStrategy2, triggerMode) => {
    const showAllOptions2 = setShowAllOptions(triggerMode === "manual");
    const hasOptions = showAllOptions2 ? local.options.length > 0 : filteredOptions().length > 0;
    if (!hasOptions && !local.allowsEmptyCollection) {
      return;
    }
    openTriggerMode = triggerMode;
    setFocusStrategy(focusStrategy2);
    disclosureState.open();
    let focusedKey = listState.selectionManager().firstSelectedKey();
    if (focusedKey == null) {
      if (focusStrategy2 === "first") {
        focusedKey = listState.collection().getFirstKey();
      } else if (focusStrategy2 === "last") {
        focusedKey = listState.collection().getLastKey();
      }
    }
    listState.selectionManager().setFocused(true);
    listState.selectionManager().setFocusedKey(focusedKey);
  };
  const close = () => {
    disclosureState.close();
    listState.selectionManager().setFocused(false);
    listState.selectionManager().setFocusedKey(void 0);
  };
  const toggle = (focusStrategy2, triggerMode) => {
    if (disclosureState.isOpen()) {
      close();
    } else {
      open(focusStrategy2, triggerMode);
    }
  };
  const {
    formControlContext
  } = createFormControl(formControlProps);
  createFormResetListener(inputRef, () => {
    const defaultSelectedKeys = local.defaultValue ? [...local.defaultValue].map(getOptionValue) : new Selection();
    listState.selectionManager().setSelectedKeys(defaultSelectedKeys);
  });
  const delegate = createMemo(() => {
    const keyboardDelegate = access$1(local.keyboardDelegate);
    if (keyboardDelegate) {
      return keyboardDelegate;
    }
    return new ListKeyboardDelegate(listState.collection, listboxRef, void 0);
  });
  const selectableCollection = createSelectableCollection({
    selectionManager: () => listState.selectionManager(),
    keyboardDelegate: delegate,
    disallowTypeAhead: true,
    disallowEmptySelection: true,
    shouldFocusWrap: () => local.shouldFocusWrap,
    // Prevent item scroll behavior from being applied here, handled in the Listbox component.
    isVirtualized: true
  }, inputRef);
  const setIsInputFocused = (isFocused) => {
    if (isFocused && local.triggerMode === "focus") {
      open(false, "focus");
    }
    setIsInputFocusedState(isFocused);
    listState.selectionManager().setFocused(isFocused);
  };
  const activeDescendant = createMemo(() => {
    var _a, _b;
    const focusedKey = listState.selectionManager().focusedKey();
    if (focusedKey) {
      return (_b = (_a = listboxRef()) == null ? void 0 : _a.querySelector(`[data-key="${focusedKey}"]`)) == null ? void 0 : _b.id;
    }
    return void 0;
  });
  const resetInputValue = (selectedKeys) => {
    if (local.selectionMode === "single") {
      const selectedKey = [...selectedKeys][0];
      const selectedOption = allOptions().find((option) => getOptionValue(option) === selectedKey);
      setInputValue(selectedOption ? getOptionLabel(selectedOption) : "");
    } else {
      setInputValue("");
    }
  };
  const renderItem = (item) => {
    var _a;
    return (_a = local.itemComponent) == null ? void 0 : _a.call(local, {
      item
    });
  };
  const renderSection = (section) => {
    var _a;
    return (_a = local.sectionComponent) == null ? void 0 : _a.call(local, {
      section
    });
  };
  createEffect(on([filteredOptions, showAllOptions], (input, prevInput) => {
    if (disclosureState.isOpen() && prevInput != null) {
      const prevFilteredOptions = prevInput[0];
      const prevShowAllOptions = prevInput[1];
      setLastDisplayedOptions(prevShowAllOptions ? local.options : prevFilteredOptions);
    } else {
      const filteredOptions2 = input[0];
      const showAllOptions2 = input[1];
      setLastDisplayedOptions(showAllOptions2 ? local.options : filteredOptions2);
    }
  }));
  createEffect(on(inputValue, () => {
    if (showAllOptions()) {
      setShowAllOptions(false);
    }
  }));
  createEffect(on(() => listState.selectionManager().selectedKeys(), resetInputValue));
  let lastAnnouncedFocusedKey = "";
  createEffect(() => {
    var _a;
    const focusedKey = listState.selectionManager().focusedKey() ?? "";
    const focusedItem = listState.collection().getItem(focusedKey);
    if (isAppleDevice() && focusedItem != null && focusedKey !== lastAnnouncedFocusedKey) {
      const isSelected = listState.selectionManager().isSelected(focusedKey);
      const announcement = ((_a = local.translations) == null ? void 0 : _a.focusAnnouncement((focusedItem == null ? void 0 : focusedItem.textValue) || "", isSelected)) ?? "";
      announce(announcement);
    }
    if (focusedKey) {
      lastAnnouncedFocusedKey = focusedKey;
    }
  });
  let lastOptionCount = getItemCount(listState.collection());
  let lastOpen = disclosureState.isOpen();
  createEffect(() => {
    var _a;
    const optionCount = getItemCount(listState.collection());
    const isOpen = disclosureState.isOpen();
    const didOpenWithoutFocusedItem = isOpen !== lastOpen && (listState.selectionManager().focusedKey() == null || isAppleDevice());
    if (isOpen && (didOpenWithoutFocusedItem || optionCount !== lastOptionCount)) {
      const announcement = ((_a = local.translations) == null ? void 0 : _a.countAnnouncement(optionCount)) ?? "";
      announce(announcement);
    }
    lastOptionCount = optionCount;
    lastOpen = isOpen;
  });
  let lastAnnouncedSelectedKey = "";
  createEffect(() => {
    var _a;
    const lastSelectedKey = [...listState.selectionManager().selectedKeys()].pop() ?? "";
    const lastSelectedItem = listState.collection().getItem(lastSelectedKey);
    if (isAppleDevice() && isInputFocused() && lastSelectedItem && lastSelectedKey !== lastAnnouncedSelectedKey) {
      const announcement = ((_a = local.translations) == null ? void 0 : _a.selectedAnnouncement((lastSelectedItem == null ? void 0 : lastSelectedItem.textValue) || "")) ?? "";
      announce(announcement);
    }
    if (lastSelectedKey) {
      lastAnnouncedSelectedKey = lastSelectedKey;
    }
  });
  const dataset = createMemo(() => ({
    "data-expanded": disclosureState.isOpen() ? "" : void 0,
    "data-closed": !disclosureState.isOpen() ? "" : void 0
  }));
  const context = {
    dataset,
    isOpen: disclosureState.isOpen,
    isDisabled: () => formControlContext.isDisabled() ?? false,
    isMultiple: () => access$1(local.selectionMode) === "multiple",
    isVirtualized: () => local.virtualized ?? false,
    isModal: () => local.modal ?? false,
    preventScroll: () => local.preventScroll ?? context.isModal(),
    allowsEmptyCollection: () => local.allowsEmptyCollection ?? false,
    shouldFocusWrap: () => local.shouldFocusWrap ?? false,
    removeOnBackspace: () => local.removeOnBackspace ?? true,
    selectedOptions,
    isInputFocused,
    contentPresent,
    autoFocus: focusStrategy,
    inputValue,
    triggerMode: () => local.triggerMode,
    activeDescendant,
    controlRef,
    inputRef,
    triggerRef,
    contentRef,
    listState: () => listState,
    keyboardDelegate: delegate,
    listboxId,
    triggerAriaLabel: () => {
      var _a;
      return (_a = local.translations) == null ? void 0 : _a.triggerLabel;
    },
    listboxAriaLabel: () => {
      var _a;
      return (_a = local.translations) == null ? void 0 : _a.listboxLabel;
    },
    setIsInputFocused,
    resetInputValue,
    setInputValue,
    setControlRef,
    setInputRef,
    setTriggerRef,
    setContentRef,
    setListboxRef,
    open,
    close,
    toggle,
    placeholder: () => local.placeholder,
    renderItem,
    renderSection,
    removeOptionFromSelection,
    onInputKeyDown: (e) => selectableCollection.onKeyDown(e),
    generateId: createGenerateId(() => access$1(formControlProps.id)),
    registerListboxId: createRegisterId(setListboxId)
  };
  return createComponent(FormControlContext.Provider, {
    value: formControlContext,
    get children() {
      return createComponent(ComboboxContext.Provider, {
        value: context,
        get children() {
          return createComponent(Popper, mergeProps({
            anchorRef: controlRef,
            contentRef
          }, popperProps, {
            get children() {
              return createComponent(Polymorphic, mergeProps({
                as: "div",
                role: "group",
                get id() {
                  return access$1(formControlProps.id);
                }
              }, () => formControlContext.dataset(), dataset, others));
            }
          }));
        }
      });
    }
  });
}
function ComboboxRoot(props) {
  const [local, others] = splitProps(props, ["value", "defaultValue", "onChange", "multiple"]);
  const value = createMemo(() => {
    if (local.value != null) {
      return local.multiple ? local.value : [local.value];
    }
    return local.value;
  });
  const defaultValue = createMemo(() => {
    if (local.defaultValue != null) {
      return local.multiple ? local.defaultValue : [local.defaultValue];
    }
    return local.defaultValue;
  });
  const onChange = (value2) => {
    var _a, _b;
    if (local.multiple) {
      (_a = local.onChange) == null ? void 0 : _a.call(local, value2);
    } else {
      (_b = local.onChange) == null ? void 0 : _b.call(local, value2[0] ?? null);
    }
  };
  return createComponent(ComboboxBase, mergeProps({
    get value() {
      return value();
    },
    get defaultValue() {
      return defaultValue();
    },
    onChange,
    get selectionMode() {
      return local.multiple ? "multiple" : "single";
    }
  }, others));
}
function ComboboxTrigger$1(props) {
  const formControlContext = useFormControlContext();
  const context = useComboboxContext();
  const mergedProps = mergeDefaultProps({
    id: context.generateId("trigger")
  }, props);
  const [local, others] = splitProps(mergedProps, ["ref", "disabled", "onPointerDown", "onClick", "aria-labelledby"]);
  const isDisabled = () => {
    return local.disabled || context.isDisabled() || formControlContext.isDisabled() || formControlContext.isReadOnly();
  };
  const onPointerDown = (e) => {
    callHandler(e, local.onPointerDown);
    e.currentTarget.dataset.pointerType = e.pointerType;
    if (!isDisabled() && e.pointerType !== "touch" && e.button === 0) {
      e.preventDefault();
      context.toggle(false, "manual");
    }
  };
  const onClick = (e) => {
    var _a;
    callHandler(e, local.onClick);
    if (!isDisabled()) {
      if (e.currentTarget.dataset.pointerType === "touch") {
        context.toggle(false, "manual");
      }
      (_a = context.inputRef()) == null ? void 0 : _a.focus();
    }
  };
  const ariaLabelledBy = () => {
    return formControlContext.getAriaLabelledBy(others.id, context.triggerAriaLabel(), local["aria-labelledby"]);
  };
  return createComponent(ButtonRoot, mergeProps({
    ref(r$) {
      var _ref$5 = mergeRefs(context.setTriggerRef, local.ref);
      typeof _ref$5 === "function" && _ref$5(r$);
    },
    get disabled() {
      return isDisabled();
    },
    tabIndex: -1,
    "aria-haspopup": "listbox",
    get ["aria-expanded"]() {
      return context.isOpen();
    },
    get ["aria-controls"]() {
      return createMemo(() => !!context.isOpen())() ? context.listboxId() : void 0;
    },
    get ["aria-label"]() {
      return context.triggerAriaLabel();
    },
    get ["aria-labelledby"]() {
      return ariaLabelledBy();
    },
    onPointerDown,
    onClick
  }, () => context.dataset(), others));
}
var Combobox$1 = Object.assign(ComboboxRoot, {
  Arrow: PopperArrow,
  Content: ComboboxContent$1,
  Control: ComboboxControl,
  Description: FormControlDescription,
  ErrorMessage: FormControlErrorMessage,
  HiddenSelect: ComboboxHiddenSelect,
  Icon: ComboboxIcon,
  Input: ComboboxInput$1,
  Item: ListboxItem,
  ItemDescription: ListboxItemDescription,
  ItemIndicator: ListboxItemIndicator,
  ItemLabel: ListboxItemLabel,
  Label: FormControlLabel,
  Listbox: ComboboxListbox,
  Portal: ComboboxPortal,
  Section: ListboxSection,
  Trigger: ComboboxTrigger$1
});
var _tmpl$$1 = /* @__PURE__ */ template(`<div class=prompt-instructions>`), _tmpl$2$1 = /* @__PURE__ */ template(`<div class=twcss>`), _tmpl$3$1 = /* @__PURE__ */ template(`<div class=prompt-instruction><span class=prompt-instruction-command></span><span>`), _tmpl$4$1 = /* @__PURE__ */ template(`<svg xmlns=http://www.w3.org/2000/svg viewBox="0 0 24 24"class="h-4 w-4"><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=2 d="m5 12l5 5L20 7"></path><title>Checked`), _tmpl$5$1 = /* @__PURE__ */ template(`<div class=suggestion-title>`), _tmpl$6$1 = /* @__PURE__ */ template(`<div class=suggestion-note>`), _tmpl$7$1 = /* @__PURE__ */ template(`<div class=suggestion-aux>`);
const Combobox = Combobox$1;
Combobox$1.Description;
Combobox$1.ErrorMessage;
Combobox$1.ItemDescription;
Combobox$1.HiddenSelect;
const ComboboxInput = (props) => {
  const [local, rest] = splitProps(props, ["class"]);
  return createComponent(Combobox$1.Input, mergeProps({
    get ["class"]() {
      return cn("", local.class);
    }
  }, rest, rest));
};
const ComboboxTrigger = (props) => {
  const [local, rest] = splitProps(props, ["class", "children"]);
  return createComponent(Combobox$1.Control, {
    get children() {
      return createComponent(Combobox$1.Trigger, mergeProps({
        "aria-label": "",
        get ["class"]() {
          return cn("size-fit border-none bg-transparent p-1 shadow-none", local.class);
        }
      }, rest, {
        get children() {
          return local.children;
        }
      }));
    }
  });
};
const ComboboxContent = (props) => {
  const [local, rest] = splitProps(props, ["class", "promptInstructions"]);
  return createComponent(Combobox$1.Portal, {
    get children() {
      var _el$ = _tmpl$2$1();
      insert(_el$, createComponent(Combobox$1.Content, mergeProps({
        get ["class"]() {
          return cn("suggestion-container relative z-50 min-w-[8rem] overflow-hidden data-[expanded]:animate-in data-[closed]:animate-out data-[closed]:fade-out-0 data-[expanded]:fade-in-0 data-[closed]:zoom-out-95 data-[expanded]:zoom-in-95", local.class);
        }
      }, rest, {
        get children() {
          return [createComponent(Combobox$1.Listbox, {
            "aria-label": "",
            "class": "suggestion m-0"
          }), createComponent(Show, {
            get when() {
              return local.promptInstructions && local.promptInstructions.length;
            },
            get children() {
              var _el$2 = _tmpl$$1();
              insert(_el$2, createComponent(Index, {
                get each() {
                  return local.promptInstructions;
                },
                children: (arr) => (() => {
                  var _el$3 = _tmpl$3$1(), _el$4 = _el$3.firstChild, _el$5 = _el$4.nextSibling;
                  insert(_el$4, () => arr()[0]);
                  insert(_el$5, () => arr()[1]);
                  return _el$3;
                })()
              }));
              return _el$2;
            }
          })];
        }
      })));
      return _el$;
    }
  });
};
const ComboboxItem = (props) => {
  const [local, rest] = splitProps(props, ["class", "children", "note", "auxLabel"]);
  return createComponent(Combobox$1.Item, mergeProps({
    get ["class"]() {
      return cn("suggestion-item mod-complex relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-interactive-hover data-[highlighted]:text-accent-foreground data-[disabled]:opacity-50", local.class);
    }
  }, rest, {
    get children() {
      return [createComponent(Combobox$1.ItemIndicator, {
        "class": "absolute right-2 flex h-3.5 w-3.5 items-center justify-center",
        get children() {
          return _tmpl$4$1();
        }
      }), createComponent(Combobox$1.ItemLabel, {
        "class": "suggestion-content",
        get children() {
          return [(() => {
            var _el$7 = _tmpl$5$1();
            insert(_el$7, () => local.children);
            return _el$7;
          })(), (() => {
            var _el$8 = _tmpl$6$1();
            insert(_el$8, () => local.note);
            return _el$8;
          })()];
        }
      }), (() => {
        var _el$9 = _tmpl$7$1();
        insert(_el$9, () => local.auxLabel);
        return _el$9;
      })()];
    }
  }));
};
const defaultInstructions = [["Type [[", "to link note"], ["Type #", "to choose tag"]];
const linkInstructions = [["Type #", "to link heading"], ["Type ^", "to link blocks"], ["Type |", "to change display text"]];
const subLinkInstructions = [["↵", "to accept"]];
const filter = createFilter({
  sensitivity: "base"
});
const PromptComboBox = (props) => {
  const [inputValue, setInputValue] = createSignal("");
  const [options, setOptions] = createStore(props.defaultOptions);
  const [labels, setLabels] = createStore([]);
  const [aux, setAux] = createStore([]);
  const [promptInstructions, setPromptInstructions] = createStore(defaultInstructions);
  let isSubLink = false;
  const defaultOptions = [...props.defaultOptions];
  const defaultOnInputChange = (value) => {
    const val = value.toLowerCase();
    const filtered = defaultOptions.filter((option) => {
      const b = filter.contains(option, val);
      if (!b) return b;
      labels.push();
      return b;
    });
    setPromptInstructions(defaultInstructions);
    setOptions(filtered);
  };
  const handleNoMatchFound = () => {
    setOptions([NO_MATCH_FOUND]);
    setLabels([]);
    setAux([]);
  };
  const getLinkOptions = (value) => {
    const searchName = value.slice(2).toLowerCase();
    const files = props.app.vault.getAllLoadedFiles().filter((f) => f instanceof obsidian.TFile);
    const newLabels = [];
    const filtered = files.filter((f) => filter.contains(f.path, searchName)).map((f) => {
      newLabels.push(f.path);
      return f.basename;
    });
    setLabels(newLabels);
    setOptions(filtered);
    setPromptInstructions(linkInstructions);
  };
  const getTagOptions = (value) => {
    const searchTag = value.slice(1).toLowerCase();
    const tags = Object.keys(props.app.metadataCache.getTags());
    const opts = tags.map((t) => t.slice(1).toLowerCase());
    const filtered = opts.filter((t) => filter.contains(t, searchTag));
    setOptions(filtered);
    setLabels([]);
    setPromptInstructions([]);
  };
  const getHeaderOptions = (header, headings) => {
    const newAux = [];
    const filtered = headings.filter((h) => {
      const b = filter.contains(h.heading, header);
      if (!b) return b;
      newAux.push("H" + h.level);
      return b;
    }).map((h) => h.heading);
    if (!filtered.length) return handleNoMatchFound();
    setAux(newAux);
    setOptions(filtered);
  };
  const getSectionOptions = (blockId, sections) => {
    const filtered = sections.filter((s) => s.id && filter.contains(s.id, blockId)).map((s) => s.id);
    console.log("filtered: ", filtered);
    if (!filtered.length) return handleNoMatchFound();
    setOptions(filtered);
  };
  const getLinkSubOptions = (value) => {
    var _a, _b;
    isSubLink = true;
    setLabels([]);
    setAux([]);
    setPromptInstructions(subLinkInstructions);
    const match = /\[\[(?<title>\S|[^\[|\]|\]\]]+)(?:#|\^)(?<sub>.*[^\]]|)/gm.exec(value);
    const preTitle = (_a = match == null ? void 0 : match.groups) == null ? void 0 : _a.title;
    const sub = ((_b = match == null ? void 0 : match.groups) == null ? void 0 : _b.sub) ?? "";
    if (!preTitle) return handleNoMatchFound();
    const title = preTitle.endsWith(".md") ? preTitle : preTitle + ".md";
    const f = props.app.vault.getFileByPath(title);
    if (!f) return handleNoMatchFound();
    const cache2 = props.app.metadataCache.getFileCache(f);
    if (!cache2) return handleNoMatchFound();
    const {
      sections,
      headings
    } = cache2;
    if (value.includes("#")) {
      if (!headings) return handleNoMatchFound();
      return getHeaderOptions(sub, headings);
    }
    if (!sections) return handleNoMatchFound();
    getSectionOptions(sub, sections);
  };
  const onInputChange = (value) => {
    isSubLink = false;
    setAux([]);
    if (value[0] === "#") return getTagOptions(value);
    if (/\[\[.*#|\^/.test(value)) return getLinkSubOptions(value);
    if (value.startsWith("[[")) return getLinkOptions(value);
    return defaultOnInputChange(value);
  };
  return createComponent(Combobox, {
    triggerMode: "input",
    get value() {
      return inputValue();
    },
    onChange: (val) => {
      if (val === NO_MATCH_FOUND) {
        return setInputValue("");
      }
      if (isSubLink) {
        const inp = inputValue();
        const hashIndex = inp.indexOf("#");
        const index = hashIndex !== -1 ? hashIndex : inp.indexOf("^");
        if (index === -1) throw new Error("This shouldn't happen");
        return setInputValue(inp.slice(0, index + 1) + val + inp.slice(index + 1));
      }
      if (inputValue().includes("[[")) {
        return setInputValue("[[" + val + "]]");
      }
      if (inputValue().startsWith("#")) {
        return setInputValue("#" + val);
      }
      setInputValue(val);
    },
    options,
    onInputChange,
    defaultFilter: () => true,
    itemComponent: (iProps) => createComponent(ComboboxItem, mergeProps(() => props.itemProps, {
      get item() {
        return iProps.item;
      },
      get note() {
        return labels[iProps.item.index];
      },
      get auxLabel() {
        return aux[iProps.item.index];
      },
      get children() {
        return iProps.item.rawValue;
      }
    })),
    get children() {
      return [createComponent(ComboboxTrigger, mergeProps(() => props.triggerProps, {
        get children() {
          return createComponent(ComboboxInput, mergeProps(() => props.inputProps, {
            get value() {
              return inputValue();
            },
            onFocus: (e) => {
              onInputChange(e.currentTarget.value);
              const {
                onFocus
              } = props.inputProps ?? {};
              if (!onFocus || typeof onFocus !== "function") return;
              onFocus(e);
            },
            onInput: (e) => setInputValue(e.currentTarget.value)
          }));
        }
      })), createComponent(ComboboxContent, {
        promptInstructions
      })];
    }
  });
};
var _tmpl$ = /* @__PURE__ */ template(`<div class="h-fit w-full overflow-x-scroll">`), _tmpl$2 = /* @__PURE__ */ template(`<div class="flex items-center gap-2">`), _tmpl$3 = /* @__PURE__ */ template(`<div class=clickable-icon>`), _tmpl$4 = /* @__PURE__ */ template(`<div>`), _tmpl$5 = /* @__PURE__ */ template(`<input type=text id=new-note-template name=new-note-template list=template-list>`), _tmpl$6 = /* @__PURE__ */ template(`<datalist id=template-list>`), _tmpl$7 = /* @__PURE__ */ template(`<input type=text id=table-class-name name=table-class-name>`), _tmpl$8 = /* @__PURE__ */ template(`<div class="flex size-full max-h-[90%] flex-col gap-2 overflow-y-auto pr-2">`), _tmpl$9 = /* @__PURE__ */ template(`<option>`), _tmpl$10 = /* @__PURE__ */ template(`<div class="flex w-full items-center justify-between border-0 border-t-[1px] border-solid border-t-[var(--background-modifier-border)] pt-2"><label><div class=setting-item-name></div><div class=setting-item-description>`);
function App(props) {
  const [local, codeBlockInfo] = splitProps(props, ["uid", "queryResultStore", "setQueryResultStore"]);
  const {
    plugin,
    query,
    config,
    dataviewAPI
  } = codeBlockInfo;
  const queryResults = createMemo(() => {
    return props.queryResultStore[props.uid] ?? defaultQueryResult;
  }, defaultQueryResult);
  const updateQueryResults = async () => {
    const truePropertyNames = getColumnPropertyNames(query);
    const result = await dataviewAPI.query(query);
    if (!result.successful) {
      local.setQueryResultStore(local.uid, {
        ...result,
        truePropertyNames
      });
      return;
    }
    result.value.values = result.value.values.map((arr) => arr.map((v) => tryDataviewArrayToArray(v)));
    local.setQueryResultStore(local.uid, {
      ...result,
      truePropertyNames
    });
  };
  updateQueryResults();
  registerDataviewEvents(plugin, updateQueryResults);
  onCleanup(() => {
    unregisterDataviewEvents(plugin, updateQueryResults);
  });
  return createComponent(CodeBlockContext.Provider, {
    value: codeBlockInfo,
    get children() {
      return [(() => {
        var _el$ = _tmpl$();
        insert(_el$, createComponent(Table, {
          get queryResults() {
            return queryResults();
          },
          get hideFileCol() {
            return props.hideFileCol;
          }
        }));
        return _el$;
      })(), (() => {
        var _el$2 = _tmpl$2();
        insert(_el$2, createComponent(Toolbar, {
          config,
          get setConfigStore() {
            return props.setConfigStore;
          }
        }));
        return _el$2;
      })()];
    }
  });
}
const Toolbar = (props) => {
  const codeBlockInfo = useCodeBlock();
  const [isConfigOpen, setConfigOpen] = createSignal(false);
  const updateConfig = (key, value) => {
    updateBlockConfig(key, value, codeBlockInfo);
  };
  return [createComponent(BlockConfigModal, {
    get config() {
      return props.config;
    },
    codeBlockInfo,
    get open() {
      return isConfigOpen();
    },
    setOpen: setConfigOpen
  }), (() => {
    var _el$3 = _tmpl$3();
    _el$3.$$click = () => setConfigOpen((prev) => !prev);
    insert(_el$3, createComponent(settings_default, {
      size: "1rem"
    }));
    return _el$3;
  })(), createComponent(For, {
    get each() {
      return Object.keys(codeBlockInfo.config);
    },
    children: (key) => {
      const value = codeBlockInfo.config[key];
      return createComponent(Switch, {
        get children() {
          return createComponent(Match, {
            when: key === "lockEditing",
            get children() {
              var _el$5 = _tmpl$3();
              _el$5.$$click = async () => updateConfig(key, !value);
              insert(_el$5, createComponent(Show, {
                when: value === true,
                get fallback() {
                  return createComponent(lock_open_default, {
                    size: "1rem"
                  });
                },
                get children() {
                  return createComponent(lock_default, {
                    size: "1rem"
                  });
                }
              }));
              return _el$5;
            }
          });
        }
      });
    }
  }), (() => {
    var _el$4 = _tmpl$4();
    insert(_el$4, createComponent(PromptComboBox, {
      get app() {
        return codeBlockInfo.plugin.app;
      },
      defaultOptions: ["option a", "option b", "option c"]
    }));
    return _el$4;
  })()];
};
const BlockConfigModal = (props) => {
  const [form, setForm] = createStore(props.config);
  const templates = getTemplateFiles(props.codeBlockInfo.plugin.app);
  const updateForm = (key, value) => {
    setForm((prev) => ({
      ...prev,
      [key]: value
    }));
  };
  return createComponent(Dialog, {
    get open() {
      return props.open;
    },
    get onOpenChange() {
      return props.setOpen;
    },
    get children() {
      return [createComponent(Show, {
        get when() {
          return props.trigger;
        },
        get children() {
          return createComponent(DialogTrigger, {
            get children() {
              return props.trigger;
            }
          });
        }
      }), createComponent(DialogContent, {
        get children() {
          return [createComponent(DialogTitle, {
            children: "Block configuration"
          }), createComponent(DialogDescription, {
            get children() {
              return ["see the docs", " ", createComponent(ExternalLink, {
                href: "https://github.com/unxok/obsidian-dataedit",
                children: "here"
              }), " ", "for more information"];
            }
          }), (() => {
            var _el$6 = _tmpl$8();
            insert(_el$6, createComponent(Setting, {
              title: "Lock editing",
              description: "Prevents editing in all cells which makes links and tags\r\n                clickable.",
              labelFor: "lock-editing-toggle",
              get children() {
                return createComponent(Toggle, {
                  id: "lock-editing-toggle",
                  name: "lock-editing-toggle",
                  get checked() {
                    return form.lockEditing;
                  },
                  onCheckedChange: (b) => updateForm("lockEditing", b)
                });
              }
            }), null);
            insert(_el$6, createComponent(Setting, {
              title: "Header icons",
              description: "If enabled, will display the icon corresponding to the property type in the header cell.",
              labelFor: "header-icons-toggle",
              get children() {
                return createComponent(Toggle, {
                  id: "header-icons-toggle",
                  name: "header-icons-toggle",
                  get checked() {
                    return form.headerIcons;
                  },
                  onCheckedChange: (b) => updateForm("headerIcons", b)
                });
              }
            }), null);
            insert(_el$6, createComponent(Setting, {
              title: "New note template",
              description: "Path to the template file to use by default for notes created view the 'add row' button. Must be within the template folder configured in core plugin setting.",
              labelFor: "new-note-template",
              get children() {
                return [(() => {
                  var _el$7 = _tmpl$5();
                  _el$7.$$input = (e) => updateForm("newNoteTemplatePath", e.currentTarget.value);
                  createRenderEffect(() => _el$7.value = form.newNoteTemplatePath);
                  return _el$7;
                })(), (() => {
                  var _el$8 = _tmpl$6();
                  insert(_el$8, createComponent(For, {
                    each: templates,
                    children: (f) => (() => {
                      var _el$10 = _tmpl$9();
                      insert(_el$10, () => f.basename);
                      createRenderEffect(() => _el$10.value = f.path);
                      return _el$10;
                    })()
                  }));
                  return _el$8;
                })()];
              }
            }), null);
            insert(_el$6, createComponent(Setting, {
              title: "Table CSS class",
              description: "Class name to attach to the table element. Do spaces to separate multiple if desired.",
              labelFor: "table-class-name",
              get children() {
                var _el$9 = _tmpl$7();
                _el$9.$$input = (e) => updateForm("tableClassName", e.currentTarget.value);
                createRenderEffect(() => _el$9.value = form.tableClassName);
                return _el$9;
              }
            }), null);
            return _el$6;
          })(), createComponent(DialogFooter, {
            get children() {
              return [createComponent(
                DialogClose,
                {
                  get ["class"]() {
                    return buttonVariants.outline;
                  },
                  onClick: async () => {
                    setBlockConfig(defaultDataEditBlockConfig, props.codeBlockInfo);
                  },
                  children: "reset"
                }
              ), createComponent(
                DialogClose,
                {
                  get ["class"]() {
                    return buttonVariants.ghost;
                  },
                  onClick: () => props.setOpen && props.setOpen(false),
                  children: "cancel"
                }
              ), createComponent(
                DialogClose,
                {
                  get ["class"]() {
                    return buttonVariants.accent;
                  },
                  onClick: async () => {
                    setBlockConfig(form, props.codeBlockInfo);
                    if (!props.setOpen) return;
                    props.setOpen(false);
                  },
                  children: "save"
                }
              )];
            }
          })];
        }
      })];
    }
  });
};
const Setting = (props) => (() => {
  var _el$11 = _tmpl$10(), _el$12 = _el$11.firstChild, _el$13 = _el$12.firstChild, _el$14 = _el$13.nextSibling;
  insert(_el$13, () => props.title);
  insert(_el$14, () => props.description);
  insert(_el$11, () => props.children, null);
  createRenderEffect(() => setAttribute(_el$12, "for", props.labelFor));
  return _el$11;
})();
delegateEvents(["click", "input"]);
const getDataviewAPI = (pApp) => {
  if (pApp) {
    const {
      plugins
    } = pApp.plugins;
    if (plugins.hasOwnProperty("dataview")) {
      return plugins.dataview.api;
    }
  }
  const gPlugins = app.plugins.plugins;
  if (gPlugins.hasOwnProperty("dataview")) {
    return gPlugins.dataview.api;
  }
  const msg = "Failed to get Dataview API. Is Dataview installed & enabled?";
  new obsidian.Notice(msg);
  throw new Error(msg);
};
class DataEdit extends obsidian.Plugin {
  async onload() {
    await app.plugins.loadPlugin("dataview");
    this.registerMarkdownCodeBlockProcessor("dataedit", async (preSource, el, ctx) => {
      el.empty();
      el.classList.toggle("twcss", true);
      el.parentElement.style.boxShadow = "none";
      const {
        source,
        hide: hideFileCol
      } = ensureFileLinkColumn(preSource);
      const uid = createUniqueId();
      const dataviewAPI = getDataviewAPI(this.app);
      const {
        query,
        config
      } = splitQueryOnConfig(source);
      const [configStore, setConfigStore] = createStore(config);
      const observer = new MutationObserver((mutations) => {
        mutations.some((mut) => {
          if (mut.attributeName !== "data-mode") return false;
          const mode = mut.oldValue;
          console.log("got mode: ", mode);
          if (mode === "source") {
            setConfigStore("lockEditing", true);
            return true;
          }
          if (mode === "preview") {
            setConfigStore("lockEditing", false);
            return true;
          }
          return false;
        });
      });
      (async () => {
        await new Promise((res) => setTimeout(res, 0));
        const container = el.closest("[data-mode]");
        if (!container) {
          return;
        }
        observer.observe(container, {
          attributes: true,
          attributeOldValue: true
        });
        const mode = container.getAttribute("data-mode");
        if (mode === "preview") {
          setConfigStore("lockEditing", true);
        }
      })();
      const [queryResultStore, setQueryResultStore] = createStore({});
      const dispose2 = render(() => {
        const _self$ = this;
        return createComponent(App, {
          plugin: _self$,
          el,
          source,
          query,
          config: configStore,
          setConfigStore,
          ctx,
          dataviewAPI,
          uid,
          queryResultStore,
          setQueryResultStore,
          hideFileCol
        });
      }, el);
      const mdChild = new obsidian.MarkdownRenderChild(el);
      mdChild.register(() => {
        dispose2();
        setQueryResultStore((prev) => {
          delete prev[uid];
          return prev;
        });
      });
      ctx.addChild(mdChild);
    });
  }
}
module.exports = DataEdit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3NvbGlkLWpzL2Rpc3Qvc29saWQuanMiLCJub2RlX21vZHVsZXMvc29saWQtanMvd2ViL2Rpc3Qvd2ViLmpzIiwibm9kZV9tb2R1bGVzL3NvbGlkLWpzL3N0b3JlL2Rpc3Qvc3RvcmUuanMiLCJzcmMvbGliL2NvbnN0YW50cy50cyIsInNyYy9saWIvdXRpbC50cyIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvZGVmYXVsdEF0dHJpYnV0ZXMuanN4Iiwibm9kZV9tb2R1bGVzL2x1Y2lkZS1zb2xpZC9kaXN0L3NvdXJjZS9JY29uLmpzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvbG9jay5qc3giLCJub2RlX21vZHVsZXMvbHVjaWRlLXNvbGlkL2Rpc3Qvc291cmNlL2ljb25zL2xvY2stb3Blbi5qc3giLCJub2RlX21vZHVsZXMvbHVjaWRlLXNvbGlkL2Rpc3Qvc291cmNlL2ljb25zL3NldHRpbmdzLmpzeCIsIm5vZGVfbW9kdWxlcy90YWlsd2luZC1tZXJnZS9kaXN0L2J1bmRsZS1tanMubWpzIiwic3JjL2NvbXBvbmVudHMvTWFya2Rvd24vaW5kZXgudHN4Iiwic3JjL2hvb2tzL3VzZURhdGFFZGl0LnRzeCIsInNyYy9jb21wb25lbnRzL0lucHV0cy9jaGVja2JveC50c3giLCJub2RlX21vZHVsZXMvQHNvbGlkLXByaW1pdGl2ZXMvYXV0b2ZvY3VzL2Rpc3QvaW5kZXguanMiLCJzcmMvY29tcG9uZW50cy9JbnB1dHMvZGF0ZWRhdGV0aW1lLnRzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvcGx1cy5qc3giLCJzcmMvY29tcG9uZW50cy9JbnB1dHMvdGV4dC50c3giLCJzcmMvY29tcG9uZW50cy9JbnB1dHMvbGlzdC50c3giLCJub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzIiwic3JjL2xpYnMvY24udHMiLCJub2RlX21vZHVsZXMvQHNvbGlkLXByaW1pdGl2ZXMvdXRpbHMvZGlzdC9jaHVuay9SNTY3NVlNVS5qcyIsIm5vZGVfbW9kdWxlcy9Ac29saWQtcHJpbWl0aXZlcy9ldmVudC1saXN0ZW5lci9kaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0Bzb2xpZC1wcmltaXRpdmVzL2tleWVkL2Rpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHNvbGlkLXByaW1pdGl2ZXMvcmVmcy9kaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL3V0aWxzL2Rpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rLzNOSTZGVEEyLmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvN0EzR0RGNFkuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9KSE1OV09MWS5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL1A2WFU3NVpHLmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvV05SQU41R1YuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9CTU1DUTdZSi5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL0U3M1BLRkIzLmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvTk5HTVJZMk8uanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9GTjZFSUNHTy5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL0U1M0RCN0JTLmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvQ1dDQjQ0N0YuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay81V1hISkRDWi5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL1NBMjdWNVlKLmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvSk5DQ0Y2TVAuanN4Iiwibm9kZV9tb2R1bGVzL0Bjb3J2dS91dGlscy9kaXN0L2NodW5rL1U0MkVDTU5ELmpzeCIsIm5vZGVfbW9kdWxlcy9AY29ydnUvdXRpbHMvZGlzdC9jaHVuay9WRExFWEY2Qy5qc3giLCJub2RlX21vZHVsZXMvQGNvcnZ1L3V0aWxzL2Rpc3Qvc2Nyb2xsL2luZGV4LmpzeCIsIm5vZGVfbW9kdWxlcy9zb2xpZC1wcmV2ZW50LXNjcm9sbC9kaXN0L2luZGV4LmpzeCIsIm5vZGVfbW9kdWxlcy9zb2xpZC1wcmVzZW5jZS9kaXN0L2luZGV4LmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvNDZTRjY1QUMuanN4Iiwic3JjL2NvbXBvbmVudHMvdWkvYnV0dG9uLnRzeCIsInNyYy9jb21wb25lbnRzL3VpL2RpYWxvZy50c3giLCJzcmMvY29tcG9uZW50cy91aS9leHRlcm5hbC1saW5rLnRzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvbWludXMuanN4Iiwibm9kZV9tb2R1bGVzL2x1Y2lkZS1zb2xpZC9kaXN0L3NvdXJjZS9pY29ucy9wYXJlbnRoZXNlcy5qc3giLCJzcmMvY29tcG9uZW50cy9JbnB1dHMvbnVtYmVyLnRzeCIsInNyYy9jb21wb25lbnRzL1RhYmxlL1RhYmxlRGF0YS9pbmRleC50c3giLCJzcmMvY29tcG9uZW50cy9UYWJsZS9UYWJsZUJvZHkvaW5kZXgudHN4Iiwibm9kZV9tb2R1bGVzL2x1Y2lkZS1zb2xpZC9kaXN0L3NvdXJjZS9pY29ucy9ncmlwLWhvcml6b250YWwuanN4Iiwibm9kZV9tb2R1bGVzL2x1Y2lkZS1zb2xpZC9kaXN0L3NvdXJjZS9pY29ucy9hbGlnbi1sZWZ0LmpzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvc3F1YXJlLWNoZWNrLWJpZy5qc3giLCJub2RlX21vZHVsZXMvbHVjaWRlLXNvbGlkL2Rpc3Qvc291cmNlL2ljb25zL2xpc3QuanN4Iiwibm9kZV9tb2R1bGVzL2x1Y2lkZS1zb2xpZC9kaXN0L3NvdXJjZS9pY29ucy9jbG9jay5qc3giLCJub2RlX21vZHVsZXMvbHVjaWRlLXNvbGlkL2Rpc3Qvc291cmNlL2ljb25zL2NhbGVuZGFyLmpzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvYmluYXJ5LmpzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvc3BhcmtsZXMuanN4Iiwibm9kZV9tb2R1bGVzL2x1Y2lkZS1zb2xpZC9kaXN0L3NvdXJjZS9pY29ucy90YWdzLmpzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvY29ybmVyLXVwLXJpZ2h0LmpzeCIsIm5vZGVfbW9kdWxlcy9sdWNpZGUtc29saWQvZGlzdC9zb3VyY2UvaWNvbnMvZmlsZS5qc3giLCJzcmMvY29tcG9uZW50cy9Qcm9wZXJ0eUljb24vaW5kZXgudHN4Iiwic3JjL2NvbXBvbmVudHMvVGFibGUvVGFibGVIZWFkL2luZGV4LnRzeCIsInNyYy9jb21wb25lbnRzL1RhYmxlL2luZGV4LnRzeCIsInNyYy9jb21wb25lbnRzL3VpL3RvZ2dsZS50c3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL1BGQ1hLUVBWLmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvR0lGRFFFWFYuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9RSklCNkJERi5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL0ZLVUZQQ1E2LmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvTFI3TEJKTjMuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9STEdHRkFZUS5qc3giLCJub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL3V0aWxzL2Rpc3QvZmxvYXRpbmctdWkudXRpbHMubWpzIiwibm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS9jb3JlL2Rpc3QvZmxvYXRpbmctdWkuY29yZS5tanMiLCJub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL3V0aWxzL2Rpc3QvZmxvYXRpbmctdWkudXRpbHMuZG9tLm1qcyIsIm5vZGVfbW9kdWxlcy9AZmxvYXRpbmctdWkvZG9tL2Rpc3QvZmxvYXRpbmctdWkuZG9tLm1qcyIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvUUU3UVE0TkwuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9TWkRWSkpQNi5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL0ZJTldPM0E1LmpzeCIsIm5vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvY2h1bmsvUENMNkdNQlEuanN4Iiwibm9kZV9tb2R1bGVzL0Brb2JhbHRlL2NvcmUvZGlzdC9jaHVuay9FV0xDSFNPVC5qc3giLCJub2RlX21vZHVsZXMvQGtvYmFsdGUvY29yZS9kaXN0L2NodW5rL1Y0UDdHU1FCLmpzeCIsInNyYy9jb21wb25lbnRzL3VpL2NvbWJvLWJveC50c3giLCJzcmMvQXBwLnRzeCIsInNyYy9tYWluLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdGFza0lkQ291bnRlciA9IDEsXG4gIGlzQ2FsbGJhY2tTY2hlZHVsZWQgPSBmYWxzZSxcbiAgaXNQZXJmb3JtaW5nV29yayA9IGZhbHNlLFxuICB0YXNrUXVldWUgPSBbXSxcbiAgY3VycmVudFRhc2sgPSBudWxsLFxuICBzaG91bGRZaWVsZFRvSG9zdCA9IG51bGwsXG4gIHlpZWxkSW50ZXJ2YWwgPSA1LFxuICBkZWFkbGluZSA9IDAsXG4gIG1heFlpZWxkSW50ZXJ2YWwgPSAzMDAsXG4gIHNjaGVkdWxlQ2FsbGJhY2sgPSBudWxsLFxuICBzY2hlZHVsZWRDYWxsYmFjayA9IG51bGw7XG5jb25zdCBtYXhTaWduZWQzMUJpdEludCA9IDEwNzM3NDE4MjM7XG5mdW5jdGlvbiBzZXR1cFNjaGVkdWxlcigpIHtcbiAgY29uc3QgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpLFxuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBzY2hlZHVsZUNhbGxiYWNrID0gKCkgPT4gcG9ydC5wb3N0TWVzc2FnZShudWxsKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgaWYgKHNjaGVkdWxlZENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgZGVhZGxpbmUgPSBjdXJyZW50VGltZSArIHlpZWxkSW50ZXJ2YWw7XG4gICAgICBjb25zdCBoYXNUaW1lUmVtYWluaW5nID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGhhc01vcmVXb3JrID0gc2NoZWR1bGVkQ2FsbGJhY2soaGFzVGltZVJlbWFpbmluZywgY3VycmVudFRpbWUpO1xuICAgICAgICBpZiAoIWhhc01vcmVXb3JrKSB7XG4gICAgICAgICAgc2NoZWR1bGVkQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB9IGVsc2UgcG9ydC5wb3N0TWVzc2FnZShudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHBvcnQucG9zdE1lc3NhZ2UobnVsbCk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3Iuc2NoZWR1bGluZyAmJiBuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZykge1xuICAgIGNvbnN0IHNjaGVkdWxpbmcgPSBuYXZpZ2F0b3Iuc2NoZWR1bGluZztcbiAgICBzaG91bGRZaWVsZFRvSG9zdCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBpZiAoY3VycmVudFRpbWUgPj0gZGVhZGxpbmUpIHtcbiAgICAgICAgaWYgKHNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcoKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50VGltZSA+PSBtYXhZaWVsZEludGVydmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgc2hvdWxkWWllbGRUb0hvc3QgPSAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSA+PSBkZWFkbGluZTtcbiAgfVxufVxuZnVuY3Rpb24gZW5xdWV1ZSh0YXNrUXVldWUsIHRhc2spIHtcbiAgZnVuY3Rpb24gZmluZEluZGV4KCkge1xuICAgIGxldCBtID0gMDtcbiAgICBsZXQgbiA9IHRhc2tRdWV1ZS5sZW5ndGggLSAxO1xuICAgIHdoaWxlIChtIDw9IG4pIHtcbiAgICAgIGNvbnN0IGsgPSAobiArIG0pID4+IDE7XG4gICAgICBjb25zdCBjbXAgPSB0YXNrLmV4cGlyYXRpb25UaW1lIC0gdGFza1F1ZXVlW2tdLmV4cGlyYXRpb25UaW1lO1xuICAgICAgaWYgKGNtcCA+IDApIG0gPSBrICsgMTtcbiAgICAgIGVsc2UgaWYgKGNtcCA8IDApIG4gPSBrIC0gMTtcbiAgICAgIGVsc2UgcmV0dXJuIGs7XG4gICAgfVxuICAgIHJldHVybiBtO1xuICB9XG4gIHRhc2tRdWV1ZS5zcGxpY2UoZmluZEluZGV4KCksIDAsIHRhc2spO1xufVxuZnVuY3Rpb24gcmVxdWVzdENhbGxiYWNrKGZuLCBvcHRpb25zKSB7XG4gIGlmICghc2NoZWR1bGVDYWxsYmFjaykgc2V0dXBTY2hlZHVsZXIoKTtcbiAgbGV0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpLFxuICAgIHRpbWVvdXQgPSBtYXhTaWduZWQzMUJpdEludDtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50aW1lb3V0KSB0aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0O1xuICBjb25zdCBuZXdUYXNrID0ge1xuICAgIGlkOiB0YXNrSWRDb3VudGVyKyssXG4gICAgZm4sXG4gICAgc3RhcnRUaW1lLFxuICAgIGV4cGlyYXRpb25UaW1lOiBzdGFydFRpbWUgKyB0aW1lb3V0XG4gIH07XG4gIGVucXVldWUodGFza1F1ZXVlLCBuZXdUYXNrKTtcbiAgaWYgKCFpc0NhbGxiYWNrU2NoZWR1bGVkICYmICFpc1BlcmZvcm1pbmdXb3JrKSB7XG4gICAgaXNDYWxsYmFja1NjaGVkdWxlZCA9IHRydWU7XG4gICAgc2NoZWR1bGVkQ2FsbGJhY2sgPSBmbHVzaFdvcms7XG4gICAgc2NoZWR1bGVDYWxsYmFjaygpO1xuICB9XG4gIHJldHVybiBuZXdUYXNrO1xufVxuZnVuY3Rpb24gY2FuY2VsQ2FsbGJhY2sodGFzaykge1xuICB0YXNrLmZuID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGZsdXNoV29yayhoYXNUaW1lUmVtYWluaW5nLCBpbml0aWFsVGltZSkge1xuICBpc0NhbGxiYWNrU2NoZWR1bGVkID0gZmFsc2U7XG4gIGlzUGVyZm9ybWluZ1dvcmsgPSB0cnVlO1xuICB0cnkge1xuICAgIHJldHVybiB3b3JrTG9vcChoYXNUaW1lUmVtYWluaW5nLCBpbml0aWFsVGltZSk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFRhc2sgPSBudWxsO1xuICAgIGlzUGVyZm9ybWluZ1dvcmsgPSBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gd29ya0xvb3AoaGFzVGltZVJlbWFpbmluZywgaW5pdGlhbFRpbWUpIHtcbiAgbGV0IGN1cnJlbnRUaW1lID0gaW5pdGlhbFRpbWU7XG4gIGN1cnJlbnRUYXNrID0gdGFza1F1ZXVlWzBdIHx8IG51bGw7XG4gIHdoaWxlIChjdXJyZW50VGFzayAhPT0gbnVsbCkge1xuICAgIGlmIChjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA+IGN1cnJlbnRUaW1lICYmICghaGFzVGltZVJlbWFpbmluZyB8fCBzaG91bGRZaWVsZFRvSG9zdCgpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGNhbGxiYWNrID0gY3VycmVudFRhc2suZm47XG4gICAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICBjdXJyZW50VGFzay5mbiA9IG51bGw7XG4gICAgICBjb25zdCBkaWRVc2VyQ2FsbGJhY2tUaW1lb3V0ID0gY3VycmVudFRhc2suZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWU7XG4gICAgICBjYWxsYmFjayhkaWRVc2VyQ2FsbGJhY2tUaW1lb3V0KTtcbiAgICAgIGN1cnJlbnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBpZiAoY3VycmVudFRhc2sgPT09IHRhc2tRdWV1ZVswXSkge1xuICAgICAgICB0YXNrUXVldWUuc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgdGFza1F1ZXVlLnNoaWZ0KCk7XG4gICAgY3VycmVudFRhc2sgPSB0YXNrUXVldWVbMF0gfHwgbnVsbDtcbiAgfVxuICByZXR1cm4gY3VycmVudFRhc2sgIT09IG51bGw7XG59XG5cbmNvbnN0IHNoYXJlZENvbmZpZyA9IHtcbiAgY29udGV4dDogdW5kZWZpbmVkLFxuICByZWdpc3RyeTogdW5kZWZpbmVkXG59O1xuZnVuY3Rpb24gc2V0SHlkcmF0ZUNvbnRleHQoY29udGV4dCkge1xuICBzaGFyZWRDb25maWcuY29udGV4dCA9IGNvbnRleHQ7XG59XG5mdW5jdGlvbiBuZXh0SHlkcmF0ZUNvbnRleHQoKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc2hhcmVkQ29uZmlnLmNvbnRleHQsXG4gICAgaWQ6IGAke3NoYXJlZENvbmZpZy5jb250ZXh0LmlkfSR7c2hhcmVkQ29uZmlnLmNvbnRleHQuY291bnQrK30tYCxcbiAgICBjb3VudDogMFxuICB9O1xufVxuXG5jb25zdCBlcXVhbEZuID0gKGEsIGIpID0+IGEgPT09IGI7XG5jb25zdCAkUFJPWFkgPSBTeW1ib2woXCJzb2xpZC1wcm94eVwiKTtcbmNvbnN0ICRUUkFDSyA9IFN5bWJvbChcInNvbGlkLXRyYWNrXCIpO1xuY29uc3QgJERFVkNPTVAgPSBTeW1ib2woXCJzb2xpZC1kZXYtY29tcG9uZW50XCIpO1xuY29uc3Qgc2lnbmFsT3B0aW9ucyA9IHtcbiAgZXF1YWxzOiBlcXVhbEZuXG59O1xubGV0IEVSUk9SID0gbnVsbDtcbmxldCBydW5FZmZlY3RzID0gcnVuUXVldWU7XG5jb25zdCBTVEFMRSA9IDE7XG5jb25zdCBQRU5ESU5HID0gMjtcbmNvbnN0IFVOT1dORUQgPSB7XG4gIG93bmVkOiBudWxsLFxuICBjbGVhbnVwczogbnVsbCxcbiAgY29udGV4dDogbnVsbCxcbiAgb3duZXI6IG51bGxcbn07XG5jb25zdCBOT19JTklUID0ge307XG52YXIgT3duZXIgPSBudWxsO1xubGV0IFRyYW5zaXRpb24gPSBudWxsO1xubGV0IFNjaGVkdWxlciA9IG51bGw7XG5sZXQgRXh0ZXJuYWxTb3VyY2VDb25maWcgPSBudWxsO1xubGV0IExpc3RlbmVyID0gbnVsbDtcbmxldCBVcGRhdGVzID0gbnVsbDtcbmxldCBFZmZlY3RzID0gbnVsbDtcbmxldCBFeGVjQ291bnQgPSAwO1xuZnVuY3Rpb24gY3JlYXRlUm9vdChmbiwgZGV0YWNoZWRPd25lcikge1xuICBjb25zdCBsaXN0ZW5lciA9IExpc3RlbmVyLFxuICAgIG93bmVyID0gT3duZXIsXG4gICAgdW5vd25lZCA9IGZuLmxlbmd0aCA9PT0gMCxcbiAgICBjdXJyZW50ID0gZGV0YWNoZWRPd25lciA9PT0gdW5kZWZpbmVkID8gb3duZXIgOiBkZXRhY2hlZE93bmVyLFxuICAgIHJvb3QgPSB1bm93bmVkXG4gICAgICA/IFVOT1dORURcbiAgICAgIDoge1xuICAgICAgICAgIG93bmVkOiBudWxsLFxuICAgICAgICAgIGNsZWFudXBzOiBudWxsLFxuICAgICAgICAgIGNvbnRleHQ6IGN1cnJlbnQgPyBjdXJyZW50LmNvbnRleHQgOiBudWxsLFxuICAgICAgICAgIG93bmVyOiBjdXJyZW50XG4gICAgICAgIH0sXG4gICAgdXBkYXRlRm4gPSB1bm93bmVkID8gZm4gOiAoKSA9PiBmbigoKSA9PiB1bnRyYWNrKCgpID0+IGNsZWFuTm9kZShyb290KSkpO1xuICBPd25lciA9IHJvb3Q7XG4gIExpc3RlbmVyID0gbnVsbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcnVuVXBkYXRlcyh1cGRhdGVGbiwgdHJ1ZSk7XG4gIH0gZmluYWxseSB7XG4gICAgTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICBPd25lciA9IG93bmVyO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVTaWduYWwodmFsdWUsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKHt9LCBzaWduYWxPcHRpb25zLCBvcHRpb25zKSA6IHNpZ25hbE9wdGlvbnM7XG4gIGNvbnN0IHMgPSB7XG4gICAgdmFsdWUsXG4gICAgb2JzZXJ2ZXJzOiBudWxsLFxuICAgIG9ic2VydmVyU2xvdHM6IG51bGwsXG4gICAgY29tcGFyYXRvcjogb3B0aW9ucy5lcXVhbHMgfHwgdW5kZWZpbmVkXG4gIH07XG4gIGNvbnN0IHNldHRlciA9IHZhbHVlID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKHMpKSB2YWx1ZSA9IHZhbHVlKHMudFZhbHVlKTtcbiAgICAgIGVsc2UgdmFsdWUgPSB2YWx1ZShzLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlU2lnbmFsKHMsIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIFtyZWFkU2lnbmFsLmJpbmQocyksIHNldHRlcl07XG59XG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZChmbiwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgYyA9IGNyZWF0ZUNvbXB1dGF0aW9uKGZuLCB2YWx1ZSwgdHJ1ZSwgU1RBTEUpO1xuICBpZiAoU2NoZWR1bGVyICYmIFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSBVcGRhdGVzLnB1c2goYyk7XG4gIGVsc2UgdXBkYXRlQ29tcHV0YXRpb24oYyk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJFZmZlY3QoZm4sIHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGMgPSBjcmVhdGVDb21wdXRhdGlvbihmbiwgdmFsdWUsIGZhbHNlLCBTVEFMRSk7XG4gIGlmIChTY2hlZHVsZXIgJiYgVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcpIFVwZGF0ZXMucHVzaChjKTtcbiAgZWxzZSB1cGRhdGVDb21wdXRhdGlvbihjKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVmZmVjdChmbiwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgcnVuRWZmZWN0cyA9IHJ1blVzZXJFZmZlY3RzO1xuICBjb25zdCBjID0gY3JlYXRlQ29tcHV0YXRpb24oZm4sIHZhbHVlLCBmYWxzZSwgU1RBTEUpLFxuICAgIHMgPSBTdXNwZW5zZUNvbnRleHQgJiYgdXNlQ29udGV4dChTdXNwZW5zZUNvbnRleHQpO1xuICBpZiAocykgYy5zdXNwZW5zZSA9IHM7XG4gIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yZW5kZXIpIGMudXNlciA9IHRydWU7XG4gIEVmZmVjdHMgPyBFZmZlY3RzLnB1c2goYykgOiB1cGRhdGVDb21wdXRhdGlvbihjKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aW9uKG9uSW52YWxpZGF0ZSwgb3B0aW9ucykge1xuICBsZXQgZm47XG4gIGNvbnN0IGMgPSBjcmVhdGVDb21wdXRhdGlvbihcbiAgICAgICgpID0+IHtcbiAgICAgICAgZm4gPyBmbigpIDogdW50cmFjayhvbkludmFsaWRhdGUpO1xuICAgICAgICBmbiA9IHVuZGVmaW5lZDtcbiAgICAgIH0sXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBmYWxzZSxcbiAgICAgIDBcbiAgICApLFxuICAgIHMgPSBTdXNwZW5zZUNvbnRleHQgJiYgdXNlQ29udGV4dChTdXNwZW5zZUNvbnRleHQpO1xuICBpZiAocykgYy5zdXNwZW5zZSA9IHM7XG4gIGMudXNlciA9IHRydWU7XG4gIHJldHVybiB0cmFja2luZyA9PiB7XG4gICAgZm4gPSB0cmFja2luZztcbiAgICB1cGRhdGVDb21wdXRhdGlvbihjKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW8oZm4sIHZhbHVlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zID8gT2JqZWN0LmFzc2lnbih7fSwgc2lnbmFsT3B0aW9ucywgb3B0aW9ucykgOiBzaWduYWxPcHRpb25zO1xuICBjb25zdCBjID0gY3JlYXRlQ29tcHV0YXRpb24oZm4sIHZhbHVlLCB0cnVlLCAwKTtcbiAgYy5vYnNlcnZlcnMgPSBudWxsO1xuICBjLm9ic2VydmVyU2xvdHMgPSBudWxsO1xuICBjLmNvbXBhcmF0b3IgPSBvcHRpb25zLmVxdWFscyB8fCB1bmRlZmluZWQ7XG4gIGlmIChTY2hlZHVsZXIgJiYgVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcpIHtcbiAgICBjLnRTdGF0ZSA9IFNUQUxFO1xuICAgIFVwZGF0ZXMucHVzaChjKTtcbiAgfSBlbHNlIHVwZGF0ZUNvbXB1dGF0aW9uKGMpO1xuICByZXR1cm4gcmVhZFNpZ25hbC5iaW5kKGMpO1xufVxuZnVuY3Rpb24gaXNQcm9taXNlKHYpIHtcbiAgcmV0dXJuIHYgJiYgdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgXCJ0aGVuXCIgaW4gdjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlKHBTb3VyY2UsIHBGZXRjaGVyLCBwT3B0aW9ucykge1xuICBsZXQgc291cmNlO1xuICBsZXQgZmV0Y2hlcjtcbiAgbGV0IG9wdGlvbnM7XG4gIGlmICgoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcEZldGNoZXIgPT09IFwib2JqZWN0XCIpIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBzb3VyY2UgPSB0cnVlO1xuICAgIGZldGNoZXIgPSBwU291cmNlO1xuICAgIG9wdGlvbnMgPSBwRmV0Y2hlciB8fCB7fTtcbiAgfSBlbHNlIHtcbiAgICBzb3VyY2UgPSBwU291cmNlO1xuICAgIGZldGNoZXIgPSBwRmV0Y2hlcjtcbiAgICBvcHRpb25zID0gcE9wdGlvbnMgfHwge307XG4gIH1cbiAgbGV0IHByID0gbnVsbCxcbiAgICBpbml0UCA9IE5PX0lOSVQsXG4gICAgaWQgPSBudWxsLFxuICAgIGxvYWRlZFVuZGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgIHNjaGVkdWxlZCA9IGZhbHNlLFxuICAgIHJlc29sdmVkID0gXCJpbml0aWFsVmFsdWVcIiBpbiBvcHRpb25zLFxuICAgIGR5bmFtaWMgPSB0eXBlb2Ygc291cmNlID09PSBcImZ1bmN0aW9uXCIgJiYgY3JlYXRlTWVtbyhzb3VyY2UpO1xuICBjb25zdCBjb250ZXh0cyA9IG5ldyBTZXQoKSxcbiAgICBbdmFsdWUsIHNldFZhbHVlXSA9IChvcHRpb25zLnN0b3JhZ2UgfHwgY3JlYXRlU2lnbmFsKShvcHRpb25zLmluaXRpYWxWYWx1ZSksXG4gICAgW2Vycm9yLCBzZXRFcnJvcl0gPSBjcmVhdGVTaWduYWwodW5kZWZpbmVkKSxcbiAgICBbdHJhY2ssIHRyaWdnZXJdID0gY3JlYXRlU2lnbmFsKHVuZGVmaW5lZCwge1xuICAgICAgZXF1YWxzOiBmYWxzZVxuICAgIH0pLFxuICAgIFtzdGF0ZSwgc2V0U3RhdGVdID0gY3JlYXRlU2lnbmFsKHJlc29sdmVkID8gXCJyZWFkeVwiIDogXCJ1bnJlc29sdmVkXCIpO1xuICBpZiAoc2hhcmVkQ29uZmlnLmNvbnRleHQpIHtcbiAgICBpZCA9IGAke3NoYXJlZENvbmZpZy5jb250ZXh0LmlkfSR7c2hhcmVkQ29uZmlnLmNvbnRleHQuY291bnQrK31gO1xuICAgIGxldCB2O1xuICAgIGlmIChvcHRpb25zLnNzckxvYWRGcm9tID09PSBcImluaXRpYWxcIikgaW5pdFAgPSBvcHRpb25zLmluaXRpYWxWYWx1ZTtcbiAgICBlbHNlIGlmIChzaGFyZWRDb25maWcubG9hZCAmJiAodiA9IHNoYXJlZENvbmZpZy5sb2FkKGlkKSkpIGluaXRQID0gdjtcbiAgfVxuICBmdW5jdGlvbiBsb2FkRW5kKHAsIHYsIGVycm9yLCBrZXkpIHtcbiAgICBpZiAocHIgPT09IHApIHtcbiAgICAgIHByID0gbnVsbDtcbiAgICAgIGtleSAhPT0gdW5kZWZpbmVkICYmIChyZXNvbHZlZCA9IHRydWUpO1xuICAgICAgaWYgKChwID09PSBpbml0UCB8fCB2ID09PSBpbml0UCkgJiYgb3B0aW9ucy5vbkh5ZHJhdGVkKVxuICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PlxuICAgICAgICAgIG9wdGlvbnMub25IeWRyYXRlZChrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIGluaXRQID0gTk9fSU5JVDtcbiAgICAgIGlmIChUcmFuc2l0aW9uICYmIHAgJiYgbG9hZGVkVW5kZXJUcmFuc2l0aW9uKSB7XG4gICAgICAgIFRyYW5zaXRpb24ucHJvbWlzZXMuZGVsZXRlKHApO1xuICAgICAgICBsb2FkZWRVbmRlclRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICAgICAgVHJhbnNpdGlvbi5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICBjb21wbGV0ZUxvYWQodiwgZXJyb3IpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9IGVsc2UgY29tcGxldGVMb2FkKHYsIGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgZnVuY3Rpb24gY29tcGxldGVMb2FkKHYsIGVycikge1xuICAgIHJ1blVwZGF0ZXMoKCkgPT4ge1xuICAgICAgaWYgKGVyciA9PT0gdW5kZWZpbmVkKSBzZXRWYWx1ZSgoKSA9PiB2KTtcbiAgICAgIHNldFN0YXRlKGVyciAhPT0gdW5kZWZpbmVkID8gXCJlcnJvcmVkXCIgOiByZXNvbHZlZCA/IFwicmVhZHlcIiA6IFwidW5yZXNvbHZlZFwiKTtcbiAgICAgIHNldEVycm9yKGVycik7XG4gICAgICBmb3IgKGNvbnN0IGMgb2YgY29udGV4dHMua2V5cygpKSBjLmRlY3JlbWVudCgpO1xuICAgICAgY29udGV4dHMuY2xlYXIoKTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICBjb25zdCBjID0gU3VzcGVuc2VDb250ZXh0ICYmIHVzZUNvbnRleHQoU3VzcGVuc2VDb250ZXh0KSxcbiAgICAgIHYgPSB2YWx1ZSgpLFxuICAgICAgZXJyID0gZXJyb3IoKTtcbiAgICBpZiAoZXJyICE9PSB1bmRlZmluZWQgJiYgIXByKSB0aHJvdyBlcnI7XG4gICAgaWYgKExpc3RlbmVyICYmICFMaXN0ZW5lci51c2VyICYmIGMpIHtcbiAgICAgIGNyZWF0ZUNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgdHJhY2soKTtcbiAgICAgICAgaWYgKHByKSB7XG4gICAgICAgICAgaWYgKGMucmVzb2x2ZWQgJiYgVHJhbnNpdGlvbiAmJiBsb2FkZWRVbmRlclRyYW5zaXRpb24pIFRyYW5zaXRpb24ucHJvbWlzZXMuYWRkKHByKTtcbiAgICAgICAgICBlbHNlIGlmICghY29udGV4dHMuaGFzKGMpKSB7XG4gICAgICAgICAgICBjLmluY3JlbWVudCgpO1xuICAgICAgICAgICAgY29udGV4dHMuYWRkKGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG4gIGZ1bmN0aW9uIGxvYWQocmVmZXRjaGluZyA9IHRydWUpIHtcbiAgICBpZiAocmVmZXRjaGluZyAhPT0gZmFsc2UgJiYgc2NoZWR1bGVkKSByZXR1cm47XG4gICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgY29uc3QgbG9va3VwID0gZHluYW1pYyA/IGR5bmFtaWMoKSA6IHNvdXJjZTtcbiAgICBsb2FkZWRVbmRlclRyYW5zaXRpb24gPSBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZztcbiAgICBpZiAobG9va3VwID09IG51bGwgfHwgbG9va3VwID09PSBmYWxzZSkge1xuICAgICAgbG9hZEVuZChwciwgdW50cmFjayh2YWx1ZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoVHJhbnNpdGlvbiAmJiBwcikgVHJhbnNpdGlvbi5wcm9taXNlcy5kZWxldGUocHIpO1xuICAgIGNvbnN0IHAgPVxuICAgICAgaW5pdFAgIT09IE5PX0lOSVRcbiAgICAgICAgPyBpbml0UFxuICAgICAgICA6IHVudHJhY2soKCkgPT5cbiAgICAgICAgICAgIGZldGNoZXIobG9va3VwLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSgpLFxuICAgICAgICAgICAgICByZWZldGNoaW5nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgaWYgKCFpc1Byb21pc2UocCkpIHtcbiAgICAgIGxvYWRFbmQocHIsIHAsIHVuZGVmaW5lZCwgbG9va3VwKTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBwciA9IHA7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBwKSB7XG4gICAgICBpZiAocC5zdGF0dXMgPT09IFwic3VjY2Vzc1wiKSBsb2FkRW5kKHByLCBwLnZhbHVlLCB1bmRlZmluZWQsIGxvb2t1cCk7XG4gICAgICBlbHNlIGxvYWRFbmQocHIsIHVuZGVmaW5lZCwgY2FzdEVycm9yKHAudmFsdWUpLCBsb29rdXApO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gKHNjaGVkdWxlZCA9IGZhbHNlKSk7XG4gICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICBzZXRTdGF0ZShyZXNvbHZlZCA/IFwicmVmcmVzaGluZ1wiIDogXCJwZW5kaW5nXCIpO1xuICAgICAgdHJpZ2dlcigpO1xuICAgIH0sIGZhbHNlKTtcbiAgICByZXR1cm4gcC50aGVuKFxuICAgICAgdiA9PiBsb2FkRW5kKHAsIHYsIHVuZGVmaW5lZCwgbG9va3VwKSxcbiAgICAgIGUgPT4gbG9hZEVuZChwLCB1bmRlZmluZWQsIGNhc3RFcnJvcihlKSwgbG9va3VwKVxuICAgICk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmVhZCwge1xuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6ICgpID0+IHN0YXRlKClcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICBnZXQ6ICgpID0+IGVycm9yKClcbiAgICB9LFxuICAgIGxvYWRpbmc6IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgY29uc3QgcyA9IHN0YXRlKCk7XG4gICAgICAgIHJldHVybiBzID09PSBcInBlbmRpbmdcIiB8fCBzID09PSBcInJlZnJlc2hpbmdcIjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxhdGVzdDoge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAoIXJlc29sdmVkKSByZXR1cm4gcmVhZCgpO1xuICAgICAgICBjb25zdCBlcnIgPSBlcnJvcigpO1xuICAgICAgICBpZiAoZXJyICYmICFwcikgdGhyb3cgZXJyO1xuICAgICAgICByZXR1cm4gdmFsdWUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBpZiAoZHluYW1pYykgY3JlYXRlQ29tcHV0ZWQoKCkgPT4gbG9hZChmYWxzZSkpO1xuICBlbHNlIGxvYWQoZmFsc2UpO1xuICByZXR1cm4gW1xuICAgIHJlYWQsXG4gICAge1xuICAgICAgcmVmZXRjaDogbG9hZCxcbiAgICAgIG11dGF0ZTogc2V0VmFsdWVcbiAgICB9XG4gIF07XG59XG5mdW5jdGlvbiBjcmVhdGVEZWZlcnJlZChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgbGV0IHQsXG4gICAgdGltZW91dCA9IG9wdGlvbnMgPyBvcHRpb25zLnRpbWVvdXRNcyA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgbm9kZSA9IGNyZWF0ZUNvbXB1dGF0aW9uKFxuICAgICgpID0+IHtcbiAgICAgIGlmICghdCB8fCAhdC5mbilcbiAgICAgICAgdCA9IHJlcXVlc3RDYWxsYmFjayhcbiAgICAgICAgICAoKSA9PiBzZXREZWZlcnJlZCgoKSA9PiBub2RlLnZhbHVlKSxcbiAgICAgICAgICB0aW1lb3V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHRpbWVvdXRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgKTtcbiAgICAgIHJldHVybiBzb3VyY2UoKTtcbiAgICB9LFxuICAgIHVuZGVmaW5lZCxcbiAgICB0cnVlXG4gICk7XG4gIGNvbnN0IFtkZWZlcnJlZCwgc2V0RGVmZXJyZWRdID0gY3JlYXRlU2lnbmFsKFxuICAgIFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nICYmIFRyYW5zaXRpb24uc291cmNlcy5oYXMobm9kZSkgPyBub2RlLnRWYWx1ZSA6IG5vZGUudmFsdWUsXG4gICAgb3B0aW9uc1xuICApO1xuICB1cGRhdGVDb21wdXRhdGlvbihub2RlKTtcbiAgc2V0RGVmZXJyZWQoKCkgPT5cbiAgICBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpID8gbm9kZS50VmFsdWUgOiBub2RlLnZhbHVlXG4gICk7XG4gIHJldHVybiBkZWZlcnJlZDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yKHNvdXJjZSwgZm4gPSBlcXVhbEZuLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN1YnMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IG5vZGUgPSBjcmVhdGVDb21wdXRhdGlvbihcbiAgICBwID0+IHtcbiAgICAgIGNvbnN0IHYgPSBzb3VyY2UoKTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBzdWJzLmVudHJpZXMoKSlcbiAgICAgICAgaWYgKGZuKGtleSwgdikgIT09IGZuKGtleSwgcCkpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGMgb2YgdmFsLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBjLnN0YXRlID0gU1RBTEU7XG4gICAgICAgICAgICBpZiAoYy5wdXJlKSBVcGRhdGVzLnB1c2goYyk7XG4gICAgICAgICAgICBlbHNlIEVmZmVjdHMucHVzaChjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIHJldHVybiB2O1xuICAgIH0sXG4gICAgdW5kZWZpbmVkLFxuICAgIHRydWUsXG4gICAgU1RBTEVcbiAgKTtcbiAgdXBkYXRlQ29tcHV0YXRpb24obm9kZSk7XG4gIHJldHVybiBrZXkgPT4ge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gTGlzdGVuZXI7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsZXQgbDtcbiAgICAgIGlmICgobCA9IHN1YnMuZ2V0KGtleSkpKSBsLmFkZChsaXN0ZW5lcik7XG4gICAgICBlbHNlIHN1YnMuc2V0KGtleSwgKGwgPSBuZXcgU2V0KFtsaXN0ZW5lcl0pKSk7XG4gICAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICBsLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgICFsLnNpemUgJiYgc3Vicy5kZWxldGUoa2V5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZm4oXG4gICAgICBrZXksXG4gICAgICBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpID8gbm9kZS50VmFsdWUgOiBub2RlLnZhbHVlXG4gICAgKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJhdGNoKGZuKSB7XG4gIHJldHVybiBydW5VcGRhdGVzKGZuLCBmYWxzZSk7XG59XG5mdW5jdGlvbiB1bnRyYWNrKGZuKSB7XG4gIGlmICghRXh0ZXJuYWxTb3VyY2VDb25maWcgJiYgTGlzdGVuZXIgPT09IG51bGwpIHJldHVybiBmbigpO1xuICBjb25zdCBsaXN0ZW5lciA9IExpc3RlbmVyO1xuICBMaXN0ZW5lciA9IG51bGw7XG4gIHRyeSB7XG4gICAgaWYgKEV4dGVybmFsU291cmNlQ29uZmlnKSByZXR1cm4gRXh0ZXJuYWxTb3VyY2VDb25maWcudW50cmFjayhmbik7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH0gZmluYWxseSB7XG4gICAgTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgfVxufVxuZnVuY3Rpb24gb24oZGVwcywgZm4sIG9wdGlvbnMpIHtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZGVwcyk7XG4gIGxldCBwcmV2SW5wdXQ7XG4gIGxldCBkZWZlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZlcjtcbiAgcmV0dXJuIHByZXZWYWx1ZSA9PiB7XG4gICAgbGV0IGlucHV0O1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICBpbnB1dCA9IEFycmF5KGRlcHMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykgaW5wdXRbaV0gPSBkZXBzW2ldKCk7XG4gICAgfSBlbHNlIGlucHV0ID0gZGVwcygpO1xuICAgIGlmIChkZWZlcikge1xuICAgICAgZGVmZXIgPSBmYWxzZTtcbiAgICAgIHJldHVybiBwcmV2VmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHVudHJhY2soKCkgPT4gZm4oaW5wdXQsIHByZXZJbnB1dCwgcHJldlZhbHVlKSk7XG4gICAgcHJldklucHV0ID0gaW5wdXQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHVudHJhY2soZm4pKTtcbn1cbmZ1bmN0aW9uIG9uQ2xlYW51cChmbikge1xuICBpZiAoT3duZXIgPT09IG51bGwpO1xuICBlbHNlIGlmIChPd25lci5jbGVhbnVwcyA9PT0gbnVsbCkgT3duZXIuY2xlYW51cHMgPSBbZm5dO1xuICBlbHNlIE93bmVyLmNsZWFudXBzLnB1c2goZm4pO1xuICByZXR1cm4gZm47XG59XG5mdW5jdGlvbiBjYXRjaEVycm9yKGZuLCBoYW5kbGVyKSB7XG4gIEVSUk9SIHx8IChFUlJPUiA9IFN5bWJvbChcImVycm9yXCIpKTtcbiAgT3duZXIgPSBjcmVhdGVDb21wdXRhdGlvbih1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIE93bmVyLmNvbnRleHQgPSB7XG4gICAgLi4uT3duZXIuY29udGV4dCxcbiAgICBbRVJST1JdOiBbaGFuZGxlcl1cbiAgfTtcbiAgaWYgKFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSBUcmFuc2l0aW9uLnNvdXJjZXMuYWRkKE93bmVyKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBPd25lciA9IE93bmVyLm93bmVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRMaXN0ZW5lcigpIHtcbiAgcmV0dXJuIExpc3RlbmVyO1xufVxuZnVuY3Rpb24gZ2V0T3duZXIoKSB7XG4gIHJldHVybiBPd25lcjtcbn1cbmZ1bmN0aW9uIHJ1bldpdGhPd25lcihvLCBmbikge1xuICBjb25zdCBwcmV2ID0gT3duZXI7XG4gIGNvbnN0IHByZXZMaXN0ZW5lciA9IExpc3RlbmVyO1xuICBPd25lciA9IG87XG4gIExpc3RlbmVyID0gbnVsbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcnVuVXBkYXRlcyhmbiwgdHJ1ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGhhbmRsZUVycm9yKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgT3duZXIgPSBwcmV2O1xuICAgIExpc3RlbmVyID0gcHJldkxpc3RlbmVyO1xuICB9XG59XG5mdW5jdGlvbiBlbmFibGVTY2hlZHVsaW5nKHNjaGVkdWxlciA9IHJlcXVlc3RDYWxsYmFjaykge1xuICBTY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG59XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb24oZm4pIHtcbiAgaWYgKFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSB7XG4gICAgZm4oKTtcbiAgICByZXR1cm4gVHJhbnNpdGlvbi5kb25lO1xuICB9XG4gIGNvbnN0IGwgPSBMaXN0ZW5lcjtcbiAgY29uc3QgbyA9IE93bmVyO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgTGlzdGVuZXIgPSBsO1xuICAgIE93bmVyID0gbztcbiAgICBsZXQgdDtcbiAgICBpZiAoU2NoZWR1bGVyIHx8IFN1c3BlbnNlQ29udGV4dCkge1xuICAgICAgdCA9XG4gICAgICAgIFRyYW5zaXRpb24gfHxcbiAgICAgICAgKFRyYW5zaXRpb24gPSB7XG4gICAgICAgICAgc291cmNlczogbmV3IFNldCgpLFxuICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgIHByb21pc2VzOiBuZXcgU2V0KCksXG4gICAgICAgICAgZGlzcG9zZWQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICBxdWV1ZTogbmV3IFNldCgpLFxuICAgICAgICAgIHJ1bm5pbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB0LmRvbmUgfHwgKHQuZG9uZSA9IG5ldyBQcm9taXNlKHJlcyA9PiAodC5yZXNvbHZlID0gcmVzKSkpO1xuICAgICAgdC5ydW5uaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgcnVuVXBkYXRlcyhmbiwgZmFsc2UpO1xuICAgIExpc3RlbmVyID0gT3duZXIgPSBudWxsO1xuICAgIHJldHVybiB0ID8gdC5kb25lIDogdW5kZWZpbmVkO1xuICB9KTtcbn1cbmNvbnN0IFt0cmFuc1BlbmRpbmcsIHNldFRyYW5zUGVuZGluZ10gPSAvKkBfX1BVUkVfXyovIGNyZWF0ZVNpZ25hbChmYWxzZSk7XG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uKCkge1xuICByZXR1cm4gW3RyYW5zUGVuZGluZywgc3RhcnRUcmFuc2l0aW9uXTtcbn1cbmZ1bmN0aW9uIHJlc3VtZUVmZmVjdHMoZSkge1xuICBFZmZlY3RzLnB1c2guYXBwbHkoRWZmZWN0cywgZSk7XG4gIGUubGVuZ3RoID0gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGlkID0gU3ltYm9sKFwiY29udGV4dFwiKTtcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBQcm92aWRlcjogY3JlYXRlUHJvdmlkZXIoaWQpLFxuICAgIGRlZmF1bHRWYWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gdXNlQ29udGV4dChjb250ZXh0KSB7XG4gIHJldHVybiBPd25lciAmJiBPd25lci5jb250ZXh0ICYmIE93bmVyLmNvbnRleHRbY29udGV4dC5pZF0gIT09IHVuZGVmaW5lZFxuICAgID8gT3duZXIuY29udGV4dFtjb250ZXh0LmlkXVxuICAgIDogY29udGV4dC5kZWZhdWx0VmFsdWU7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihmbikge1xuICBjb25zdCBjaGlsZHJlbiA9IGNyZWF0ZU1lbW8oZm4pO1xuICBjb25zdCBtZW1vID0gY3JlYXRlTWVtbygoKSA9PiByZXNvbHZlQ2hpbGRyZW4oY2hpbGRyZW4oKSkpO1xuICBtZW1vLnRvQXJyYXkgPSAoKSA9PiB7XG4gICAgY29uc3QgYyA9IG1lbW8oKTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjKSA/IGMgOiBjICE9IG51bGwgPyBbY10gOiBbXTtcbiAgfTtcbiAgcmV0dXJuIG1lbW87XG59XG5sZXQgU3VzcGVuc2VDb250ZXh0O1xuZnVuY3Rpb24gZ2V0U3VzcGVuc2VDb250ZXh0KCkge1xuICByZXR1cm4gU3VzcGVuc2VDb250ZXh0IHx8IChTdXNwZW5zZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCkpO1xufVxuZnVuY3Rpb24gZW5hYmxlRXh0ZXJuYWxTb3VyY2UoZmFjdG9yeSwgdW50cmFjayA9IGZuID0+IGZuKCkpIHtcbiAgaWYgKEV4dGVybmFsU291cmNlQ29uZmlnKSB7XG4gICAgY29uc3QgeyBmYWN0b3J5OiBvbGRGYWN0b3J5LCB1bnRyYWNrOiBvbGRVbnRyYWNrIH0gPSBFeHRlcm5hbFNvdXJjZUNvbmZpZztcbiAgICBFeHRlcm5hbFNvdXJjZUNvbmZpZyA9IHtcbiAgICAgIGZhY3Rvcnk6IChmbiwgdHJpZ2dlcikgPT4ge1xuICAgICAgICBjb25zdCBvbGRTb3VyY2UgPSBvbGRGYWN0b3J5KGZuLCB0cmlnZ2VyKTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gZmFjdG9yeSh4ID0+IG9sZFNvdXJjZS50cmFjayh4KSwgdHJpZ2dlcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHJhY2s6IHggPT4gc291cmNlLnRyYWNrKHgpLFxuICAgICAgICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICBzb3VyY2UuZGlzcG9zZSgpO1xuICAgICAgICAgICAgb2xkU291cmNlLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgdW50cmFjazogZm4gPT4gb2xkVW50cmFjaygoKSA9PiB1bnRyYWNrKGZuKSlcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEV4dGVybmFsU291cmNlQ29uZmlnID0ge1xuICAgICAgZmFjdG9yeSxcbiAgICAgIHVudHJhY2tcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiByZWFkU2lnbmFsKCkge1xuICBjb25zdCBydW5uaW5nVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nO1xuICBpZiAodGhpcy5zb3VyY2VzICYmIChydW5uaW5nVHJhbnNpdGlvbiA/IHRoaXMudFN0YXRlIDogdGhpcy5zdGF0ZSkpIHtcbiAgICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gdGhpcy50U3RhdGUgOiB0aGlzLnN0YXRlKSA9PT0gU1RBTEUpIHVwZGF0ZUNvbXB1dGF0aW9uKHRoaXMpO1xuICAgIGVsc2Uge1xuICAgICAgY29uc3QgdXBkYXRlcyA9IFVwZGF0ZXM7XG4gICAgICBVcGRhdGVzID0gbnVsbDtcbiAgICAgIHJ1blVwZGF0ZXMoKCkgPT4gbG9va1Vwc3RyZWFtKHRoaXMpLCBmYWxzZSk7XG4gICAgICBVcGRhdGVzID0gdXBkYXRlcztcbiAgICB9XG4gIH1cbiAgaWYgKExpc3RlbmVyKSB7XG4gICAgY29uc3Qgc1Nsb3QgPSB0aGlzLm9ic2VydmVycyA/IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA6IDA7XG4gICAgaWYgKCFMaXN0ZW5lci5zb3VyY2VzKSB7XG4gICAgICBMaXN0ZW5lci5zb3VyY2VzID0gW3RoaXNdO1xuICAgICAgTGlzdGVuZXIuc291cmNlU2xvdHMgPSBbc1Nsb3RdO1xuICAgIH0gZWxzZSB7XG4gICAgICBMaXN0ZW5lci5zb3VyY2VzLnB1c2godGhpcyk7XG4gICAgICBMaXN0ZW5lci5zb3VyY2VTbG90cy5wdXNoKHNTbG90KTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm9ic2VydmVycykge1xuICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbTGlzdGVuZXJdO1xuICAgICAgdGhpcy5vYnNlcnZlclNsb3RzID0gW0xpc3RlbmVyLnNvdXJjZXMubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goTGlzdGVuZXIpO1xuICAgICAgdGhpcy5vYnNlcnZlclNsb3RzLnB1c2goTGlzdGVuZXIuc291cmNlcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cbiAgaWYgKHJ1bm5pbmdUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24uc291cmNlcy5oYXModGhpcykpIHJldHVybiB0aGlzLnRWYWx1ZTtcbiAgcmV0dXJuIHRoaXMudmFsdWU7XG59XG5mdW5jdGlvbiB3cml0ZVNpZ25hbChub2RlLCB2YWx1ZSwgaXNDb21wKSB7XG4gIGxldCBjdXJyZW50ID1cbiAgICBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpID8gbm9kZS50VmFsdWUgOiBub2RlLnZhbHVlO1xuICBpZiAoIW5vZGUuY29tcGFyYXRvciB8fCAhbm9kZS5jb21wYXJhdG9yKGN1cnJlbnQsIHZhbHVlKSkge1xuICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICBjb25zdCBUcmFuc2l0aW9uUnVubmluZyA9IFRyYW5zaXRpb24ucnVubmluZztcbiAgICAgIGlmIChUcmFuc2l0aW9uUnVubmluZyB8fCAoIWlzQ29tcCAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpKSkge1xuICAgICAgICBUcmFuc2l0aW9uLnNvdXJjZXMuYWRkKG5vZGUpO1xuICAgICAgICBub2RlLnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKCFUcmFuc2l0aW9uUnVubmluZykgbm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgaWYgKG5vZGUub2JzZXJ2ZXJzICYmIG5vZGUub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5vYnNlcnZlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBvID0gbm9kZS5vYnNlcnZlcnNbaV07XG4gICAgICAgICAgY29uc3QgVHJhbnNpdGlvblJ1bm5pbmcgPSBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZztcbiAgICAgICAgICBpZiAoVHJhbnNpdGlvblJ1bm5pbmcgJiYgVHJhbnNpdGlvbi5kaXNwb3NlZC5oYXMobykpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChUcmFuc2l0aW9uUnVubmluZyA/ICFvLnRTdGF0ZSA6ICFvLnN0YXRlKSB7XG4gICAgICAgICAgICBpZiAoby5wdXJlKSBVcGRhdGVzLnB1c2gobyk7XG4gICAgICAgICAgICBlbHNlIEVmZmVjdHMucHVzaChvKTtcbiAgICAgICAgICAgIGlmIChvLm9ic2VydmVycykgbWFya0Rvd25zdHJlYW0obyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghVHJhbnNpdGlvblJ1bm5pbmcpIG8uc3RhdGUgPSBTVEFMRTtcbiAgICAgICAgICBlbHNlIG8udFN0YXRlID0gU1RBTEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFVwZGF0ZXMubGVuZ3RoID4gMTBlNSkge1xuICAgICAgICAgIFVwZGF0ZXMgPSBbXTtcbiAgICAgICAgICBpZiAoZmFsc2UpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXB1dGF0aW9uKG5vZGUpIHtcbiAgaWYgKCFub2RlLmZuKSByZXR1cm47XG4gIGNsZWFuTm9kZShub2RlKTtcbiAgY29uc3QgdGltZSA9IEV4ZWNDb3VudDtcbiAgcnVuQ29tcHV0YXRpb24oXG4gICAgbm9kZSxcbiAgICBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpID8gbm9kZS50VmFsdWUgOiBub2RlLnZhbHVlLFxuICAgIHRpbWVcbiAgKTtcbiAgaWYgKFRyYW5zaXRpb24gJiYgIVRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpKSB7XG4gICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICAgIFRyYW5zaXRpb24gJiYgKFRyYW5zaXRpb24ucnVubmluZyA9IHRydWUpO1xuICAgICAgICBMaXN0ZW5lciA9IE93bmVyID0gbm9kZTtcbiAgICAgICAgcnVuQ29tcHV0YXRpb24obm9kZSwgbm9kZS50VmFsdWUsIHRpbWUpO1xuICAgICAgICBMaXN0ZW5lciA9IE93bmVyID0gbnVsbDtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gcnVuQ29tcHV0YXRpb24obm9kZSwgdmFsdWUsIHRpbWUpIHtcbiAgbGV0IG5leHRWYWx1ZTtcbiAgY29uc3Qgb3duZXIgPSBPd25lcixcbiAgICBsaXN0ZW5lciA9IExpc3RlbmVyO1xuICBMaXN0ZW5lciA9IE93bmVyID0gbm9kZTtcbiAgdHJ5IHtcbiAgICBuZXh0VmFsdWUgPSBub2RlLmZuKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKG5vZGUucHVyZSkge1xuICAgICAgaWYgKFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSB7XG4gICAgICAgIG5vZGUudFN0YXRlID0gU1RBTEU7XG4gICAgICAgIG5vZGUudE93bmVkICYmIG5vZGUudE93bmVkLmZvckVhY2goY2xlYW5Ob2RlKTtcbiAgICAgICAgbm9kZS50T3duZWQgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnN0YXRlID0gU1RBTEU7XG4gICAgICAgIG5vZGUub3duZWQgJiYgbm9kZS5vd25lZC5mb3JFYWNoKGNsZWFuTm9kZSk7XG4gICAgICAgIG5vZGUub3duZWQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlLnVwZGF0ZWRBdCA9IHRpbWUgKyAxO1xuICAgIHJldHVybiBoYW5kbGVFcnJvcihlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIExpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgT3duZXIgPSBvd25lcjtcbiAgfVxuICBpZiAoIW5vZGUudXBkYXRlZEF0IHx8IG5vZGUudXBkYXRlZEF0IDw9IHRpbWUpIHtcbiAgICBpZiAobm9kZS51cGRhdGVkQXQgIT0gbnVsbCAmJiBcIm9ic2VydmVyc1wiIGluIG5vZGUpIHtcbiAgICAgIHdyaXRlU2lnbmFsKG5vZGUsIG5leHRWYWx1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBub2RlLnB1cmUpIHtcbiAgICAgIFRyYW5zaXRpb24uc291cmNlcy5hZGQobm9kZSk7XG4gICAgICBub2RlLnRWYWx1ZSA9IG5leHRWYWx1ZTtcbiAgICB9IGVsc2Ugbm9kZS52YWx1ZSA9IG5leHRWYWx1ZTtcbiAgICBub2RlLnVwZGF0ZWRBdCA9IHRpbWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGF0aW9uKGZuLCBpbml0LCBwdXJlLCBzdGF0ZSA9IFNUQUxFLCBvcHRpb25zKSB7XG4gIGNvbnN0IGMgPSB7XG4gICAgZm4sXG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIHVwZGF0ZWRBdDogbnVsbCxcbiAgICBvd25lZDogbnVsbCxcbiAgICBzb3VyY2VzOiBudWxsLFxuICAgIHNvdXJjZVNsb3RzOiBudWxsLFxuICAgIGNsZWFudXBzOiBudWxsLFxuICAgIHZhbHVlOiBpbml0LFxuICAgIG93bmVyOiBPd25lcixcbiAgICBjb250ZXh0OiBPd25lciA/IE93bmVyLmNvbnRleHQgOiBudWxsLFxuICAgIHB1cmVcbiAgfTtcbiAgaWYgKFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSB7XG4gICAgYy5zdGF0ZSA9IDA7XG4gICAgYy50U3RhdGUgPSBzdGF0ZTtcbiAgfVxuICBpZiAoT3duZXIgPT09IG51bGwpO1xuICBlbHNlIGlmIChPd25lciAhPT0gVU5PV05FRCkge1xuICAgIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBPd25lci5wdXJlKSB7XG4gICAgICBpZiAoIU93bmVyLnRPd25lZCkgT3duZXIudE93bmVkID0gW2NdO1xuICAgICAgZWxzZSBPd25lci50T3duZWQucHVzaChjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFPd25lci5vd25lZCkgT3duZXIub3duZWQgPSBbY107XG4gICAgICBlbHNlIE93bmVyLm93bmVkLnB1c2goYyk7XG4gICAgfVxuICB9XG4gIGlmIChFeHRlcm5hbFNvdXJjZUNvbmZpZyAmJiBjLmZuKSB7XG4gICAgY29uc3QgW3RyYWNrLCB0cmlnZ2VyXSA9IGNyZWF0ZVNpZ25hbCh1bmRlZmluZWQsIHtcbiAgICAgIGVxdWFsczogZmFsc2VcbiAgICB9KTtcbiAgICBjb25zdCBvcmRpbmFyeSA9IEV4dGVybmFsU291cmNlQ29uZmlnLmZhY3RvcnkoYy5mbiwgdHJpZ2dlcik7XG4gICAgb25DbGVhbnVwKCgpID0+IG9yZGluYXJ5LmRpc3Bvc2UoKSk7XG4gICAgY29uc3QgdHJpZ2dlckluVHJhbnNpdGlvbiA9ICgpID0+IHN0YXJ0VHJhbnNpdGlvbih0cmlnZ2VyKS50aGVuKCgpID0+IGluVHJhbnNpdGlvbi5kaXNwb3NlKCkpO1xuICAgIGNvbnN0IGluVHJhbnNpdGlvbiA9IEV4dGVybmFsU291cmNlQ29uZmlnLmZhY3RvcnkoYy5mbiwgdHJpZ2dlckluVHJhbnNpdGlvbik7XG4gICAgYy5mbiA9IHggPT4ge1xuICAgICAgdHJhY2soKTtcbiAgICAgIHJldHVybiBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyA/IGluVHJhbnNpdGlvbi50cmFjayh4KSA6IG9yZGluYXJ5LnRyYWNrKHgpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBydW5Ub3Aobm9kZSkge1xuICBjb25zdCBydW5uaW5nVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nO1xuICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gMCkgcmV0dXJuO1xuICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gUEVORElORykgcmV0dXJuIGxvb2tVcHN0cmVhbShub2RlKTtcbiAgaWYgKG5vZGUuc3VzcGVuc2UgJiYgdW50cmFjayhub2RlLnN1c3BlbnNlLmluRmFsbGJhY2spKSByZXR1cm4gbm9kZS5zdXNwZW5zZS5lZmZlY3RzLnB1c2gobm9kZSk7XG4gIGNvbnN0IGFuY2VzdG9ycyA9IFtub2RlXTtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5vd25lcikgJiYgKCFub2RlLnVwZGF0ZWRBdCB8fCBub2RlLnVwZGF0ZWRBdCA8IEV4ZWNDb3VudCkpIHtcbiAgICBpZiAocnVubmluZ1RyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5kaXNwb3NlZC5oYXMobm9kZSkpIHJldHVybjtcbiAgICBpZiAocnVubmluZ1RyYW5zaXRpb24gPyBub2RlLnRTdGF0ZSA6IG5vZGUuc3RhdGUpIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICB9XG4gIGZvciAobGV0IGkgPSBhbmNlc3RvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBub2RlID0gYW5jZXN0b3JzW2ldO1xuICAgIGlmIChydW5uaW5nVHJhbnNpdGlvbikge1xuICAgICAgbGV0IHRvcCA9IG5vZGUsXG4gICAgICAgIHByZXYgPSBhbmNlc3RvcnNbaSArIDFdO1xuICAgICAgd2hpbGUgKCh0b3AgPSB0b3Aub3duZXIpICYmIHRvcCAhPT0gcHJldikge1xuICAgICAgICBpZiAoVHJhbnNpdGlvbi5kaXNwb3NlZC5oYXModG9wKSkgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gU1RBTEUpIHtcbiAgICAgIHVwZGF0ZUNvbXB1dGF0aW9uKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gUEVORElORykge1xuICAgICAgY29uc3QgdXBkYXRlcyA9IFVwZGF0ZXM7XG4gICAgICBVcGRhdGVzID0gbnVsbDtcbiAgICAgIHJ1blVwZGF0ZXMoKCkgPT4gbG9va1Vwc3RyZWFtKG5vZGUsIGFuY2VzdG9yc1swXSksIGZhbHNlKTtcbiAgICAgIFVwZGF0ZXMgPSB1cGRhdGVzO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcnVuVXBkYXRlcyhmbiwgaW5pdCkge1xuICBpZiAoVXBkYXRlcykgcmV0dXJuIGZuKCk7XG4gIGxldCB3YWl0ID0gZmFsc2U7XG4gIGlmICghaW5pdCkgVXBkYXRlcyA9IFtdO1xuICBpZiAoRWZmZWN0cykgd2FpdCA9IHRydWU7XG4gIGVsc2UgRWZmZWN0cyA9IFtdO1xuICBFeGVjQ291bnQrKztcbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBmbigpO1xuICAgIGNvbXBsZXRlVXBkYXRlcyh3YWl0KTtcbiAgICByZXR1cm4gcmVzO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoIXdhaXQpIEVmZmVjdHMgPSBudWxsO1xuICAgIFVwZGF0ZXMgPSBudWxsO1xuICAgIGhhbmRsZUVycm9yKGVycik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbXBsZXRlVXBkYXRlcyh3YWl0KSB7XG4gIGlmIChVcGRhdGVzKSB7XG4gICAgaWYgKFNjaGVkdWxlciAmJiBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZykgc2NoZWR1bGVRdWV1ZShVcGRhdGVzKTtcbiAgICBlbHNlIHJ1blF1ZXVlKFVwZGF0ZXMpO1xuICAgIFVwZGF0ZXMgPSBudWxsO1xuICB9XG4gIGlmICh3YWl0KSByZXR1cm47XG4gIGxldCByZXM7XG4gIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgaWYgKCFUcmFuc2l0aW9uLnByb21pc2VzLnNpemUgJiYgIVRyYW5zaXRpb24ucXVldWUuc2l6ZSkge1xuICAgICAgY29uc3Qgc291cmNlcyA9IFRyYW5zaXRpb24uc291cmNlcztcbiAgICAgIGNvbnN0IGRpc3Bvc2VkID0gVHJhbnNpdGlvbi5kaXNwb3NlZDtcbiAgICAgIEVmZmVjdHMucHVzaC5hcHBseShFZmZlY3RzLCBUcmFuc2l0aW9uLmVmZmVjdHMpO1xuICAgICAgcmVzID0gVHJhbnNpdGlvbi5yZXNvbHZlO1xuICAgICAgZm9yIChjb25zdCBlIG9mIEVmZmVjdHMpIHtcbiAgICAgICAgXCJ0U3RhdGVcIiBpbiBlICYmIChlLnN0YXRlID0gZS50U3RhdGUpO1xuICAgICAgICBkZWxldGUgZS50U3RhdGU7XG4gICAgICB9XG4gICAgICBUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIHJ1blVwZGF0ZXMoKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgZGlzcG9zZWQpIGNsZWFuTm9kZShkKTtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHNvdXJjZXMpIHtcbiAgICAgICAgICB2LnZhbHVlID0gdi50VmFsdWU7XG4gICAgICAgICAgaWYgKHYub3duZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2Lm93bmVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSBjbGVhbk5vZGUodi5vd25lZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2LnRPd25lZCkgdi5vd25lZCA9IHYudE93bmVkO1xuICAgICAgICAgIGRlbGV0ZSB2LnRWYWx1ZTtcbiAgICAgICAgICBkZWxldGUgdi50T3duZWQ7XG4gICAgICAgICAgdi50U3RhdGUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHNldFRyYW5zUGVuZGluZyhmYWxzZSk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChUcmFuc2l0aW9uLnJ1bm5pbmcpIHtcbiAgICAgIFRyYW5zaXRpb24ucnVubmluZyA9IGZhbHNlO1xuICAgICAgVHJhbnNpdGlvbi5lZmZlY3RzLnB1c2guYXBwbHkoVHJhbnNpdGlvbi5lZmZlY3RzLCBFZmZlY3RzKTtcbiAgICAgIEVmZmVjdHMgPSBudWxsO1xuICAgICAgc2V0VHJhbnNQZW5kaW5nKHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBjb25zdCBlID0gRWZmZWN0cztcbiAgRWZmZWN0cyA9IG51bGw7XG4gIGlmIChlLmxlbmd0aCkgcnVuVXBkYXRlcygoKSA9PiBydW5FZmZlY3RzKGUpLCBmYWxzZSk7XG4gIGlmIChyZXMpIHJlcygpO1xufVxuZnVuY3Rpb24gcnVuUXVldWUocXVldWUpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykgcnVuVG9wKHF1ZXVlW2ldKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlUXVldWUocXVldWUpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICBjb25zdCB0YXNrcyA9IFRyYW5zaXRpb24ucXVldWU7XG4gICAgaWYgKCF0YXNrcy5oYXMoaXRlbSkpIHtcbiAgICAgIHRhc2tzLmFkZChpdGVtKTtcbiAgICAgIFNjaGVkdWxlcigoKSA9PiB7XG4gICAgICAgIHRhc2tzLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICAgICAgVHJhbnNpdGlvbi5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICBydW5Ub3AoaXRlbSk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgVHJhbnNpdGlvbiAmJiAoVHJhbnNpdGlvbi5ydW5uaW5nID0gZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBydW5Vc2VyRWZmZWN0cyhxdWV1ZSkge1xuICBsZXQgaSxcbiAgICB1c2VyTGVuZ3RoID0gMDtcbiAgZm9yIChpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZSA9IHF1ZXVlW2ldO1xuICAgIGlmICghZS51c2VyKSBydW5Ub3AoZSk7XG4gICAgZWxzZSBxdWV1ZVt1c2VyTGVuZ3RoKytdID0gZTtcbiAgfVxuICBpZiAoc2hhcmVkQ29uZmlnLmNvbnRleHQpIHtcbiAgICBpZiAoc2hhcmVkQ29uZmlnLmNvdW50KSB7XG4gICAgICBzaGFyZWRDb25maWcuZWZmZWN0cyB8fCAoc2hhcmVkQ29uZmlnLmVmZmVjdHMgPSBbXSk7XG4gICAgICBzaGFyZWRDb25maWcuZWZmZWN0cy5wdXNoKC4uLnF1ZXVlLnNsaWNlKDAsIHVzZXJMZW5ndGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHNoYXJlZENvbmZpZy5lZmZlY3RzKSB7XG4gICAgICBxdWV1ZSA9IFsuLi5zaGFyZWRDb25maWcuZWZmZWN0cywgLi4ucXVldWVdO1xuICAgICAgdXNlckxlbmd0aCArPSBzaGFyZWRDb25maWcuZWZmZWN0cy5sZW5ndGg7XG4gICAgICBkZWxldGUgc2hhcmVkQ29uZmlnLmVmZmVjdHM7XG4gICAgfVxuICAgIHNldEh5ZHJhdGVDb250ZXh0KCk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHVzZXJMZW5ndGg7IGkrKykgcnVuVG9wKHF1ZXVlW2ldKTtcbn1cbmZ1bmN0aW9uIGxvb2tVcHN0cmVhbShub2RlLCBpZ25vcmUpIHtcbiAgY29uc3QgcnVubmluZ1RyYW5zaXRpb24gPSBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZztcbiAgaWYgKHJ1bm5pbmdUcmFuc2l0aW9uKSBub2RlLnRTdGF0ZSA9IDA7XG4gIGVsc2Ugbm9kZS5zdGF0ZSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5zb3VyY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgc291cmNlID0gbm9kZS5zb3VyY2VzW2ldO1xuICAgIGlmIChzb3VyY2Uuc291cmNlcykge1xuICAgICAgY29uc3Qgc3RhdGUgPSBydW5uaW5nVHJhbnNpdGlvbiA/IHNvdXJjZS50U3RhdGUgOiBzb3VyY2Uuc3RhdGU7XG4gICAgICBpZiAoc3RhdGUgPT09IFNUQUxFKSB7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IGlnbm9yZSAmJiAoIXNvdXJjZS51cGRhdGVkQXQgfHwgc291cmNlLnVwZGF0ZWRBdCA8IEV4ZWNDb3VudCkpXG4gICAgICAgICAgcnVuVG9wKHNvdXJjZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBQRU5ESU5HKSBsb29rVXBzdHJlYW0oc291cmNlLCBpZ25vcmUpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0Rvd25zdHJlYW0obm9kZSkge1xuICBjb25zdCBydW5uaW5nVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUub2JzZXJ2ZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbyA9IG5vZGUub2JzZXJ2ZXJzW2ldO1xuICAgIGlmIChydW5uaW5nVHJhbnNpdGlvbiA/ICFvLnRTdGF0ZSA6ICFvLnN0YXRlKSB7XG4gICAgICBpZiAocnVubmluZ1RyYW5zaXRpb24pIG8udFN0YXRlID0gUEVORElORztcbiAgICAgIGVsc2Ugby5zdGF0ZSA9IFBFTkRJTkc7XG4gICAgICBpZiAoby5wdXJlKSBVcGRhdGVzLnB1c2gobyk7XG4gICAgICBlbHNlIEVmZmVjdHMucHVzaChvKTtcbiAgICAgIG8ub2JzZXJ2ZXJzICYmIG1hcmtEb3duc3RyZWFtKG8pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2xlYW5Ob2RlKG5vZGUpIHtcbiAgbGV0IGk7XG4gIGlmIChub2RlLnNvdXJjZXMpIHtcbiAgICB3aGlsZSAobm9kZS5zb3VyY2VzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc291cmNlID0gbm9kZS5zb3VyY2VzLnBvcCgpLFxuICAgICAgICBpbmRleCA9IG5vZGUuc291cmNlU2xvdHMucG9wKCksXG4gICAgICAgIG9icyA9IHNvdXJjZS5vYnNlcnZlcnM7XG4gICAgICBpZiAob2JzICYmIG9icy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbiA9IG9icy5wb3AoKSxcbiAgICAgICAgICBzID0gc291cmNlLm9ic2VydmVyU2xvdHMucG9wKCk7XG4gICAgICAgIGlmIChpbmRleCA8IG9icy5sZW5ndGgpIHtcbiAgICAgICAgICBuLnNvdXJjZVNsb3RzW3NdID0gaW5kZXg7XG4gICAgICAgICAgb2JzW2luZGV4XSA9IG47XG4gICAgICAgICAgc291cmNlLm9ic2VydmVyU2xvdHNbaW5kZXhdID0gcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcgJiYgbm9kZS5wdXJlKSB7XG4gICAgaWYgKG5vZGUudE93bmVkKSB7XG4gICAgICBmb3IgKGkgPSBub2RlLnRPd25lZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgY2xlYW5Ob2RlKG5vZGUudE93bmVkW2ldKTtcbiAgICAgIGRlbGV0ZSBub2RlLnRPd25lZDtcbiAgICB9XG4gICAgcmVzZXQobm9kZSwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAobm9kZS5vd25lZCkge1xuICAgIGZvciAoaSA9IG5vZGUub3duZWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGNsZWFuTm9kZShub2RlLm93bmVkW2ldKTtcbiAgICBub2RlLm93bmVkID0gbnVsbDtcbiAgfVxuICBpZiAobm9kZS5jbGVhbnVwcykge1xuICAgIGZvciAoaSA9IG5vZGUuY2xlYW51cHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIG5vZGUuY2xlYW51cHNbaV0oKTtcbiAgICBub2RlLmNsZWFudXBzID0gbnVsbDtcbiAgfVxuICBpZiAoVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcpIG5vZGUudFN0YXRlID0gMDtcbiAgZWxzZSBub2RlLnN0YXRlID0gMDtcbn1cbmZ1bmN0aW9uIHJlc2V0KG5vZGUsIHRvcCkge1xuICBpZiAoIXRvcCkge1xuICAgIG5vZGUudFN0YXRlID0gMDtcbiAgICBUcmFuc2l0aW9uLmRpc3Bvc2VkLmFkZChub2RlKTtcbiAgfVxuICBpZiAobm9kZS5vd25lZCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5vd25lZC5sZW5ndGg7IGkrKykgcmVzZXQobm9kZS5vd25lZFtpXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhc3RFcnJvcihlcnIpIHtcbiAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gZXJyO1xuICByZXR1cm4gbmV3IEVycm9yKHR5cGVvZiBlcnIgPT09IFwic3RyaW5nXCIgPyBlcnIgOiBcIlVua25vd24gZXJyb3JcIiwge1xuICAgIGNhdXNlOiBlcnJcbiAgfSk7XG59XG5mdW5jdGlvbiBydW5FcnJvcnMoZXJyLCBmbnMsIG93bmVyKSB7XG4gIHRyeSB7XG4gICAgZm9yIChjb25zdCBmIG9mIGZucykgZihlcnIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgKG93bmVyICYmIG93bmVyLm93bmVyKSB8fCBudWxsKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCBvd25lciA9IE93bmVyKSB7XG4gIGNvbnN0IGZucyA9IEVSUk9SICYmIG93bmVyICYmIG93bmVyLmNvbnRleHQgJiYgb3duZXIuY29udGV4dFtFUlJPUl07XG4gIGNvbnN0IGVycm9yID0gY2FzdEVycm9yKGVycik7XG4gIGlmICghZm5zKSB0aHJvdyBlcnJvcjtcbiAgaWYgKEVmZmVjdHMpXG4gICAgRWZmZWN0cy5wdXNoKHtcbiAgICAgIGZuKCkge1xuICAgICAgICBydW5FcnJvcnMoZXJyb3IsIGZucywgb3duZXIpO1xuICAgICAgfSxcbiAgICAgIHN0YXRlOiBTVEFMRVxuICAgIH0pO1xuICBlbHNlIHJ1bkVycm9ycyhlcnJvciwgZm5zLCBvd25lcik7XG59XG5mdW5jdGlvbiByZXNvbHZlQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiICYmICFjaGlsZHJlbi5sZW5ndGgpIHJldHVybiByZXNvbHZlQ2hpbGRyZW4oY2hpbGRyZW4oKSk7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSByZXNvbHZlQ2hpbGRyZW4oY2hpbGRyZW5baV0pO1xuICAgICAgQXJyYXkuaXNBcnJheShyZXN1bHQpID8gcmVzdWx0cy5wdXNoLmFwcGx5KHJlc3VsdHMsIHJlc3VsdCkgOiByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoaWQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByb3ZpZGVyKHByb3BzKSB7XG4gICAgbGV0IHJlcztcbiAgICBjcmVhdGVSZW5kZXJFZmZlY3QoXG4gICAgICAoKSA9PlxuICAgICAgICAocmVzID0gdW50cmFjaygoKSA9PiB7XG4gICAgICAgICAgT3duZXIuY29udGV4dCA9IHtcbiAgICAgICAgICAgIC4uLk93bmVyLmNvbnRleHQsXG4gICAgICAgICAgICBbaWRdOiBwcm9wcy52YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKCgpID0+IHByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgfSkpLFxuICAgICAgdW5kZWZpbmVkXG4gICAgKTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xufVxuZnVuY3Rpb24gb25FcnJvcihmbikge1xuICBFUlJPUiB8fCAoRVJST1IgPSBTeW1ib2woXCJlcnJvclwiKSk7XG4gIGlmIChPd25lciA9PT0gbnVsbCk7XG4gIGVsc2UgaWYgKE93bmVyLmNvbnRleHQgPT09IG51bGwgfHwgIU93bmVyLmNvbnRleHRbRVJST1JdKSB7XG4gICAgT3duZXIuY29udGV4dCA9IHtcbiAgICAgIC4uLk93bmVyLmNvbnRleHQsXG4gICAgICBbRVJST1JdOiBbZm5dXG4gICAgfTtcbiAgICBtdXRhdGVDb250ZXh0KE93bmVyLCBFUlJPUiwgW2ZuXSk7XG4gIH0gZWxzZSBPd25lci5jb250ZXh0W0VSUk9SXS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG11dGF0ZUNvbnRleHQobywga2V5LCB2YWx1ZSkge1xuICBpZiAoby5vd25lZCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgby5vd25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG8ub3duZWRbaV0uY29udGV4dCA9PT0gby5jb250ZXh0KSBtdXRhdGVDb250ZXh0KG8ub3duZWRbaV0sIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFvLm93bmVkW2ldLmNvbnRleHQpIHtcbiAgICAgICAgby5vd25lZFtpXS5jb250ZXh0ID0gby5jb250ZXh0O1xuICAgICAgICBtdXRhdGVDb250ZXh0KG8ub3duZWRbaV0sIGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICghby5vd25lZFtpXS5jb250ZXh0W2tleV0pIHtcbiAgICAgICAgby5vd25lZFtpXS5jb250ZXh0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgbXV0YXRlQ29udGV4dChvLm93bmVkW2ldLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb2JzZXJ2YWJsZShpbnB1dCkge1xuICByZXR1cm4ge1xuICAgIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgaWYgKCEob2JzZXJ2ZXIgaW5zdGFuY2VvZiBPYmplY3QpIHx8IG9ic2VydmVyID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgaGFuZGxlciA9XG4gICAgICAgIHR5cGVvZiBvYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiID8gb2JzZXJ2ZXIgOiBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlcik7XG4gICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZSgpIHt9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCBkaXNwb3NlID0gY3JlYXRlUm9vdChkaXNwb3NlciA9PiB7XG4gICAgICAgIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgdiA9IGlucHV0KCk7XG4gICAgICAgICAgdW50cmFjaygoKSA9PiBoYW5kbGVyKHYpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaXNwb3NlcjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGdldE93bmVyKCkpIG9uQ2xlYW51cChkaXNwb3NlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgIGRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIFtTeW1ib2wub2JzZXJ2YWJsZSB8fCBcIkBAb2JzZXJ2YWJsZVwiXSgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGZyb20ocHJvZHVjZXIpIHtcbiAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwodW5kZWZpbmVkLCB7XG4gICAgZXF1YWxzOiBmYWxzZVxuICB9KTtcbiAgaWYgKFwic3Vic2NyaWJlXCIgaW4gcHJvZHVjZXIpIHtcbiAgICBjb25zdCB1bnN1YiA9IHByb2R1Y2VyLnN1YnNjcmliZSh2ID0+IHNldCgoKSA9PiB2KSk7XG4gICAgb25DbGVhbnVwKCgpID0+IChcInVuc3Vic2NyaWJlXCIgaW4gdW5zdWIgPyB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWIoKSkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNsZWFuID0gcHJvZHVjZXIoc2V0KTtcbiAgICBvbkNsZWFudXAoY2xlYW4pO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG5jb25zdCBGQUxMQkFDSyA9IFN5bWJvbChcImZhbGxiYWNrXCIpO1xuZnVuY3Rpb24gZGlzcG9zZShkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZC5sZW5ndGg7IGkrKykgZFtpXSgpO1xufVxuZnVuY3Rpb24gbWFwQXJyYXkobGlzdCwgbWFwRm4sIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgaXRlbXMgPSBbXSxcbiAgICBtYXBwZWQgPSBbXSxcbiAgICBkaXNwb3NlcnMgPSBbXSxcbiAgICBsZW4gPSAwLFxuICAgIGluZGV4ZXMgPSBtYXBGbi5sZW5ndGggPiAxID8gW10gOiBudWxsO1xuICBvbkNsZWFudXAoKCkgPT4gZGlzcG9zZShkaXNwb3NlcnMpKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgbmV3SXRlbXMgPSBsaXN0KCkgfHwgW10sXG4gICAgICBpLFxuICAgICAgajtcbiAgICBuZXdJdGVtc1skVFJBQ0tdO1xuICAgIHJldHVybiB1bnRyYWNrKCgpID0+IHtcbiAgICAgIGxldCBuZXdMZW4gPSBuZXdJdGVtcy5sZW5ndGgsXG4gICAgICAgIG5ld0luZGljZXMsXG4gICAgICAgIG5ld0luZGljZXNOZXh0LFxuICAgICAgICB0ZW1wLFxuICAgICAgICB0ZW1wZGlzcG9zZXJzLFxuICAgICAgICB0ZW1wSW5kZXhlcyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgbmV3RW5kLFxuICAgICAgICBpdGVtO1xuICAgICAgaWYgKG5ld0xlbiA9PT0gMCkge1xuICAgICAgICBpZiAobGVuICE9PSAwKSB7XG4gICAgICAgICAgZGlzcG9zZShkaXNwb3NlcnMpO1xuICAgICAgICAgIGRpc3Bvc2VycyA9IFtdO1xuICAgICAgICAgIGl0ZW1zID0gW107XG4gICAgICAgICAgbWFwcGVkID0gW107XG4gICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICBpbmRleGVzICYmIChpbmRleGVzID0gW10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmZhbGxiYWNrKSB7XG4gICAgICAgICAgaXRlbXMgPSBbRkFMTEJBQ0tdO1xuICAgICAgICAgIG1hcHBlZFswXSA9IGNyZWF0ZVJvb3QoZGlzcG9zZXIgPT4ge1xuICAgICAgICAgICAgZGlzcG9zZXJzWzBdID0gZGlzcG9zZXI7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mYWxsYmFjaygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxlbiA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIG1hcHBlZCA9IG5ldyBBcnJheShuZXdMZW4pO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbmV3TGVuOyBqKyspIHtcbiAgICAgICAgICBpdGVtc1tqXSA9IG5ld0l0ZW1zW2pdO1xuICAgICAgICAgIG1hcHBlZFtqXSA9IGNyZWF0ZVJvb3QobWFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBuZXdMZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wID0gbmV3IEFycmF5KG5ld0xlbik7XG4gICAgICAgIHRlbXBkaXNwb3NlcnMgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICAgICAgaW5kZXhlcyAmJiAodGVtcEluZGV4ZXMgPSBuZXcgQXJyYXkobmV3TGVuKSk7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgc3RhcnQgPSAwLCBlbmQgPSBNYXRoLm1pbihsZW4sIG5ld0xlbik7XG4gICAgICAgICAgc3RhcnQgPCBlbmQgJiYgaXRlbXNbc3RhcnRdID09PSBuZXdJdGVtc1tzdGFydF07XG4gICAgICAgICAgc3RhcnQrK1xuICAgICAgICApO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGVuZCA9IGxlbiAtIDEsIG5ld0VuZCA9IG5ld0xlbiAtIDE7XG4gICAgICAgICAgZW5kID49IHN0YXJ0ICYmIG5ld0VuZCA+PSBzdGFydCAmJiBpdGVtc1tlbmRdID09PSBuZXdJdGVtc1tuZXdFbmRdO1xuICAgICAgICAgIGVuZC0tLCBuZXdFbmQtLVxuICAgICAgICApIHtcbiAgICAgICAgICB0ZW1wW25ld0VuZF0gPSBtYXBwZWRbZW5kXTtcbiAgICAgICAgICB0ZW1wZGlzcG9zZXJzW25ld0VuZF0gPSBkaXNwb3NlcnNbZW5kXTtcbiAgICAgICAgICBpbmRleGVzICYmICh0ZW1wSW5kZXhlc1tuZXdFbmRdID0gaW5kZXhlc1tlbmRdKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgICAgICBuZXdJbmRpY2VzTmV4dCA9IG5ldyBBcnJheShuZXdFbmQgKyAxKTtcbiAgICAgICAgZm9yIChqID0gbmV3RW5kOyBqID49IHN0YXJ0OyBqLS0pIHtcbiAgICAgICAgICBpdGVtID0gbmV3SXRlbXNbal07XG4gICAgICAgICAgaSA9IG5ld0luZGljZXMuZ2V0KGl0ZW0pO1xuICAgICAgICAgIG5ld0luZGljZXNOZXh0W2pdID0gaSA9PT0gdW5kZWZpbmVkID8gLTEgOiBpO1xuICAgICAgICAgIG5ld0luZGljZXMuc2V0KGl0ZW0sIGopO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgIGogPSBuZXdJbmRpY2VzLmdldChpdGVtKTtcbiAgICAgICAgICBpZiAoaiAhPT0gdW5kZWZpbmVkICYmIGogIT09IC0xKSB7XG4gICAgICAgICAgICB0ZW1wW2pdID0gbWFwcGVkW2ldO1xuICAgICAgICAgICAgdGVtcGRpc3Bvc2Vyc1tqXSA9IGRpc3Bvc2Vyc1tpXTtcbiAgICAgICAgICAgIGluZGV4ZXMgJiYgKHRlbXBJbmRleGVzW2pdID0gaW5kZXhlc1tpXSk7XG4gICAgICAgICAgICBqID0gbmV3SW5kaWNlc05leHRbal07XG4gICAgICAgICAgICBuZXdJbmRpY2VzLnNldChpdGVtLCBqKTtcbiAgICAgICAgICB9IGVsc2UgZGlzcG9zZXJzW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChqID0gc3RhcnQ7IGogPCBuZXdMZW47IGorKykge1xuICAgICAgICAgIGlmIChqIGluIHRlbXApIHtcbiAgICAgICAgICAgIG1hcHBlZFtqXSA9IHRlbXBbal07XG4gICAgICAgICAgICBkaXNwb3NlcnNbal0gPSB0ZW1wZGlzcG9zZXJzW2pdO1xuICAgICAgICAgICAgaWYgKGluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgaW5kZXhlc1tqXSA9IHRlbXBJbmRleGVzW2pdO1xuICAgICAgICAgICAgICBpbmRleGVzW2pdKGopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBtYXBwZWRbal0gPSBjcmVhdGVSb290KG1hcHBlcik7XG4gICAgICAgIH1cbiAgICAgICAgbWFwcGVkID0gbWFwcGVkLnNsaWNlKDAsIChsZW4gPSBuZXdMZW4pKTtcbiAgICAgICAgaXRlbXMgPSBuZXdJdGVtcy5zbGljZSgwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gbWFwcGVyKGRpc3Bvc2VyKSB7XG4gICAgICBkaXNwb3NlcnNbal0gPSBkaXNwb3NlcjtcbiAgICAgIGlmIChpbmRleGVzKSB7XG4gICAgICAgIGNvbnN0IFtzLCBzZXRdID0gY3JlYXRlU2lnbmFsKGopO1xuICAgICAgICBpbmRleGVzW2pdID0gc2V0O1xuICAgICAgICByZXR1cm4gbWFwRm4obmV3SXRlbXNbal0sIHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcEZuKG5ld0l0ZW1zW2pdKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbmRleEFycmF5KGxpc3QsIG1hcEZuLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IGl0ZW1zID0gW10sXG4gICAgbWFwcGVkID0gW10sXG4gICAgZGlzcG9zZXJzID0gW10sXG4gICAgc2lnbmFscyA9IFtdLFxuICAgIGxlbiA9IDAsXG4gICAgaTtcbiAgb25DbGVhbnVwKCgpID0+IGRpc3Bvc2UoZGlzcG9zZXJzKSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgbmV3SXRlbXMgPSBsaXN0KCkgfHwgW107XG4gICAgbmV3SXRlbXNbJFRSQUNLXTtcbiAgICByZXR1cm4gdW50cmFjaygoKSA9PiB7XG4gICAgICBpZiAobmV3SXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChsZW4gIT09IDApIHtcbiAgICAgICAgICBkaXNwb3NlKGRpc3Bvc2Vycyk7XG4gICAgICAgICAgZGlzcG9zZXJzID0gW107XG4gICAgICAgICAgaXRlbXMgPSBbXTtcbiAgICAgICAgICBtYXBwZWQgPSBbXTtcbiAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgIHNpZ25hbHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5mYWxsYmFjaykge1xuICAgICAgICAgIGl0ZW1zID0gW0ZBTExCQUNLXTtcbiAgICAgICAgICBtYXBwZWRbMF0gPSBjcmVhdGVSb290KGRpc3Bvc2VyID0+IHtcbiAgICAgICAgICAgIGRpc3Bvc2Vyc1swXSA9IGRpc3Bvc2VyO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmFsbGJhY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZW4gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbXNbMF0gPT09IEZBTExCQUNLKSB7XG4gICAgICAgIGRpc3Bvc2Vyc1swXSgpO1xuICAgICAgICBkaXNwb3NlcnMgPSBbXTtcbiAgICAgICAgaXRlbXMgPSBbXTtcbiAgICAgICAgbWFwcGVkID0gW107XG4gICAgICAgIGxlbiA9IDA7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV3SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPCBpdGVtcy5sZW5ndGggJiYgaXRlbXNbaV0gIT09IG5ld0l0ZW1zW2ldKSB7XG4gICAgICAgICAgc2lnbmFsc1tpXSgoKSA9PiBuZXdJdGVtc1tpXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA+PSBpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICBtYXBwZWRbaV0gPSBjcmVhdGVSb290KG1hcHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGlzcG9zZXJzW2ldKCk7XG4gICAgICB9XG4gICAgICBsZW4gPSBzaWduYWxzLmxlbmd0aCA9IGRpc3Bvc2Vycy5sZW5ndGggPSBuZXdJdGVtcy5sZW5ndGg7XG4gICAgICBpdGVtcyA9IG5ld0l0ZW1zLnNsaWNlKDApO1xuICAgICAgcmV0dXJuIChtYXBwZWQgPSBtYXBwZWQuc2xpY2UoMCwgbGVuKSk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gbWFwcGVyKGRpc3Bvc2VyKSB7XG4gICAgICBkaXNwb3NlcnNbaV0gPSBkaXNwb3NlcjtcbiAgICAgIGNvbnN0IFtzLCBzZXRdID0gY3JlYXRlU2lnbmFsKG5ld0l0ZW1zW2ldKTtcbiAgICAgIHNpZ25hbHNbaV0gPSBzZXQ7XG4gICAgICByZXR1cm4gbWFwRm4ocywgaSk7XG4gICAgfVxuICB9O1xufVxuXG5sZXQgaHlkcmF0aW9uRW5hYmxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW5hYmxlSHlkcmF0aW9uKCkge1xuICBoeWRyYXRpb25FbmFibGVkID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudChDb21wLCBwcm9wcykge1xuICBpZiAoaHlkcmF0aW9uRW5hYmxlZCkge1xuICAgIGlmIChzaGFyZWRDb25maWcuY29udGV4dCkge1xuICAgICAgY29uc3QgYyA9IHNoYXJlZENvbmZpZy5jb250ZXh0O1xuICAgICAgc2V0SHlkcmF0ZUNvbnRleHQobmV4dEh5ZHJhdGVDb250ZXh0KCkpO1xuICAgICAgY29uc3QgciA9IHVudHJhY2soKCkgPT4gQ29tcChwcm9wcyB8fCB7fSkpO1xuICAgICAgc2V0SHlkcmF0ZUNvbnRleHQoYyk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVudHJhY2soKCkgPT4gQ29tcChwcm9wcyB8fCB7fSkpO1xufVxuZnVuY3Rpb24gdHJ1ZUZuKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmNvbnN0IHByb3BUcmFwcyA9IHtcbiAgZ2V0KF8sIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJFBST1hZKSByZXR1cm4gcmVjZWl2ZXI7XG4gICAgcmV0dXJuIF8uZ2V0KHByb3BlcnR5KTtcbiAgfSxcbiAgaGFzKF8sIHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUFJPWFkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBfLmhhcyhwcm9wZXJ0eSk7XG4gIH0sXG4gIHNldDogdHJ1ZUZuLFxuICBkZWxldGVQcm9wZXJ0eTogdHJ1ZUZuLFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXywgcHJvcGVydHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF8uZ2V0KHByb3BlcnR5KTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IHRydWVGbixcbiAgICAgIGRlbGV0ZVByb3BlcnR5OiB0cnVlRm5cbiAgICB9O1xuICB9LFxuICBvd25LZXlzKF8pIHtcbiAgICByZXR1cm4gXy5rZXlzKCk7XG4gIH1cbn07XG5mdW5jdGlvbiByZXNvbHZlU291cmNlKHMpIHtcbiAgcmV0dXJuICEocyA9IHR5cGVvZiBzID09PSBcImZ1bmN0aW9uXCIgPyBzKCkgOiBzKSA/IHt9IDogcztcbn1cbmZ1bmN0aW9uIHJlc29sdmVTb3VyY2VzKCkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gdGhpcy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHYgPSB0aGlzW2ldKCk7XG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHY7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uc291cmNlcykge1xuICBsZXQgcHJveHkgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcyA9IHNvdXJjZXNbaV07XG4gICAgcHJveHkgPSBwcm94eSB8fCAoISFzICYmICRQUk9YWSBpbiBzKTtcbiAgICBzb3VyY2VzW2ldID0gdHlwZW9mIHMgPT09IFwiZnVuY3Rpb25cIiA/ICgocHJveHkgPSB0cnVlKSwgY3JlYXRlTWVtbyhzKSkgOiBzO1xuICB9XG4gIGlmIChwcm94eSkge1xuICAgIHJldHVybiBuZXcgUHJveHkoXG4gICAgICB7XG4gICAgICAgIGdldChwcm9wZXJ0eSkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSBzb3VyY2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gcmVzb2x2ZVNvdXJjZShzb3VyY2VzW2ldKVtwcm9wZXJ0eV07XG4gICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhcyhwcm9wZXJ0eSkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSBzb3VyY2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgaW4gcmVzb2x2ZVNvdXJjZShzb3VyY2VzW2ldKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAga2V5cygpIHtcbiAgICAgICAgICBjb25zdCBrZXlzID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAga2V5cy5wdXNoKC4uLk9iamVjdC5rZXlzKHJlc29sdmVTb3VyY2Uoc291cmNlc1tpXSkpKTtcbiAgICAgICAgICByZXR1cm4gWy4uLm5ldyBTZXQoa2V5cyldO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcFRyYXBzXG4gICAgKTtcbiAgfVxuICBjb25zdCBzb3VyY2VzTWFwID0ge307XG4gIGNvbnN0IGRlZmluZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmb3IgKGxldCBpID0gc291cmNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgaWYgKCFzb3VyY2UpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHNvdXJjZUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpO1xuICAgIGZvciAobGV0IGkgPSBzb3VyY2VLZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIiB8fCBrZXkgPT09IFwiY29uc3RydWN0b3JcIikgY29udGludWU7XG4gICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSk7XG4gICAgICBpZiAoIWRlZmluZWRba2V5XSkge1xuICAgICAgICBkZWZpbmVkW2tleV0gPSBkZXNjLmdldFxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGdldDogcmVzb2x2ZVNvdXJjZXMuYmluZCgoc291cmNlc01hcFtrZXldID0gW2Rlc2MuZ2V0LmJpbmQoc291cmNlKV0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogZGVzYy52YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBkZXNjXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gc291cmNlc01hcFtrZXldO1xuICAgICAgICBpZiAoc291cmNlcykge1xuICAgICAgICAgIGlmIChkZXNjLmdldCkgc291cmNlcy5wdXNoKGRlc2MuZ2V0LmJpbmQoc291cmNlKSk7XG4gICAgICAgICAgZWxzZSBpZiAoZGVzYy52YWx1ZSAhPT0gdW5kZWZpbmVkKSBzb3VyY2VzLnB1c2goKCkgPT4gZGVzYy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0ge307XG4gIGNvbnN0IGRlZmluZWRLZXlzID0gT2JqZWN0LmtleXMoZGVmaW5lZCk7XG4gIGZvciAobGV0IGkgPSBkZWZpbmVkS2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IGtleSA9IGRlZmluZWRLZXlzW2ldLFxuICAgICAgZGVzYyA9IGRlZmluZWRba2V5XTtcbiAgICBpZiAoZGVzYyAmJiBkZXNjLmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIHRhcmdldFtrZXldID0gZGVzYyA/IGRlc2MudmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHNwbGl0UHJvcHMocHJvcHMsIC4uLmtleXMpIHtcbiAgaWYgKCRQUk9YWSBpbiBwcm9wcykge1xuICAgIGNvbnN0IGJsb2NrZWQgPSBuZXcgU2V0KGtleXMubGVuZ3RoID4gMSA/IGtleXMuZmxhdCgpIDoga2V5c1swXSk7XG4gICAgY29uc3QgcmVzID0ga2V5cy5tYXAoayA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb3h5KFxuICAgICAgICB7XG4gICAgICAgICAgZ2V0KHByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4gay5pbmNsdWRlcyhwcm9wZXJ0eSkgPyBwcm9wc1twcm9wZXJ0eV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXMocHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiBrLmluY2x1ZGVzKHByb3BlcnR5KSAmJiBwcm9wZXJ0eSBpbiBwcm9wcztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGtleXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gay5maWx0ZXIocHJvcGVydHkgPT4gcHJvcGVydHkgaW4gcHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJvcFRyYXBzXG4gICAgICApO1xuICAgIH0pO1xuICAgIHJlcy5wdXNoKFxuICAgICAgbmV3IFByb3h5KFxuICAgICAgICB7XG4gICAgICAgICAgZ2V0KHByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tlZC5oYXMocHJvcGVydHkpID8gdW5kZWZpbmVkIDogcHJvcHNbcHJvcGVydHldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFzKHByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tlZC5oYXMocHJvcGVydHkpID8gZmFsc2UgOiBwcm9wZXJ0eSBpbiBwcm9wcztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGtleXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLmZpbHRlcihrID0+ICFibG9ja2VkLmhhcyhrKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcm9wVHJhcHNcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgY29uc3Qgb3RoZXJPYmplY3QgPSB7fTtcbiAgY29uc3Qgb2JqZWN0cyA9IGtleXMubWFwKCgpID0+ICh7fSkpO1xuICBmb3IgKGNvbnN0IHByb3BOYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKSkge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3BzLCBwcm9wTmFtZSk7XG4gICAgY29uc3QgaXNEZWZhdWx0RGVzYyA9XG4gICAgICAhZGVzYy5nZXQgJiYgIWRlc2Muc2V0ICYmIGRlc2MuZW51bWVyYWJsZSAmJiBkZXNjLndyaXRhYmxlICYmIGRlc2MuY29uZmlndXJhYmxlO1xuICAgIGxldCBibG9ja2VkID0gZmFsc2U7XG4gICAgbGV0IG9iamVjdEluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xuICAgICAgaWYgKGsuaW5jbHVkZXMocHJvcE5hbWUpKSB7XG4gICAgICAgIGJsb2NrZWQgPSB0cnVlO1xuICAgICAgICBpc0RlZmF1bHREZXNjXG4gICAgICAgICAgPyAob2JqZWN0c1tvYmplY3RJbmRleF1bcHJvcE5hbWVdID0gZGVzYy52YWx1ZSlcbiAgICAgICAgICA6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3RzW29iamVjdEluZGV4XSwgcHJvcE5hbWUsIGRlc2MpO1xuICAgICAgfVxuICAgICAgKytvYmplY3RJbmRleDtcbiAgICB9XG4gICAgaWYgKCFibG9ja2VkKSB7XG4gICAgICBpc0RlZmF1bHREZXNjXG4gICAgICAgID8gKG90aGVyT2JqZWN0W3Byb3BOYW1lXSA9IGRlc2MudmFsdWUpXG4gICAgICAgIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KG90aGVyT2JqZWN0LCBwcm9wTmFtZSwgZGVzYyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbLi4ub2JqZWN0cywgb3RoZXJPYmplY3RdO1xufVxuZnVuY3Rpb24gbGF6eShmbikge1xuICBsZXQgY29tcDtcbiAgbGV0IHA7XG4gIGNvbnN0IHdyYXAgPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgY3R4ID0gc2hhcmVkQ29uZmlnLmNvbnRleHQ7XG4gICAgaWYgKGN0eCkge1xuICAgICAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgICAgIHNoYXJlZENvbmZpZy5jb3VudCB8fCAoc2hhcmVkQ29uZmlnLmNvdW50ID0gMCk7XG4gICAgICBzaGFyZWRDb25maWcuY291bnQrKztcbiAgICAgIChwIHx8IChwID0gZm4oKSkpLnRoZW4obW9kID0+IHtcbiAgICAgICAgc2V0SHlkcmF0ZUNvbnRleHQoY3R4KTtcbiAgICAgICAgc2hhcmVkQ29uZmlnLmNvdW50LS07XG4gICAgICAgIHNldCgoKSA9PiBtb2QuZGVmYXVsdCk7XG4gICAgICAgIHNldEh5ZHJhdGVDb250ZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIGNvbXAgPSBzO1xuICAgIH0gZWxzZSBpZiAoIWNvbXApIHtcbiAgICAgIGNvbnN0IFtzXSA9IGNyZWF0ZVJlc291cmNlKCgpID0+IChwIHx8IChwID0gZm4oKSkpLnRoZW4obW9kID0+IG1vZC5kZWZhdWx0KSk7XG4gICAgICBjb21wID0gcztcbiAgICB9XG4gICAgbGV0IENvbXA7XG4gICAgcmV0dXJuIGNyZWF0ZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICAoQ29tcCA9IGNvbXAoKSkgJiZcbiAgICAgICAgdW50cmFjaygoKSA9PiB7XG4gICAgICAgICAgaWYgKGZhbHNlKTtcbiAgICAgICAgICBpZiAoIWN0eCkgcmV0dXJuIENvbXAocHJvcHMpO1xuICAgICAgICAgIGNvbnN0IGMgPSBzaGFyZWRDb25maWcuY29udGV4dDtcbiAgICAgICAgICBzZXRIeWRyYXRlQ29udGV4dChjdHgpO1xuICAgICAgICAgIGNvbnN0IHIgPSBDb21wKHByb3BzKTtcbiAgICAgICAgICBzZXRIeWRyYXRlQ29udGV4dChjKTtcbiAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSlcbiAgICApO1xuICB9O1xuICB3cmFwLnByZWxvYWQgPSAoKSA9PiBwIHx8ICgocCA9IGZuKCkpLnRoZW4obW9kID0+IChjb21wID0gKCkgPT4gbW9kLmRlZmF1bHQpKSwgcCk7XG4gIHJldHVybiB3cmFwO1xufVxubGV0IGNvdW50ZXIgPSAwO1xuZnVuY3Rpb24gY3JlYXRlVW5pcXVlSWQoKSB7XG4gIGNvbnN0IGN0eCA9IHNoYXJlZENvbmZpZy5jb250ZXh0O1xuICByZXR1cm4gY3R4ID8gYCR7Y3R4LmlkfSR7Y3R4LmNvdW50Kyt9YCA6IGBjbC0ke2NvdW50ZXIrK31gO1xufVxuXG5jb25zdCBuYXJyb3dlZEVycm9yID0gbmFtZSA9PiBgU3RhbGUgcmVhZCBmcm9tIDwke25hbWV9Pi5gO1xuZnVuY3Rpb24gRm9yKHByb3BzKSB7XG4gIGNvbnN0IGZhbGxiYWNrID0gXCJmYWxsYmFja1wiIGluIHByb3BzICYmIHtcbiAgICBmYWxsYmFjazogKCkgPT4gcHJvcHMuZmFsbGJhY2tcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8obWFwQXJyYXkoKCkgPT4gcHJvcHMuZWFjaCwgcHJvcHMuY2hpbGRyZW4sIGZhbGxiYWNrIHx8IHVuZGVmaW5lZCkpO1xufVxuZnVuY3Rpb24gSW5kZXgocHJvcHMpIHtcbiAgY29uc3QgZmFsbGJhY2sgPSBcImZhbGxiYWNrXCIgaW4gcHJvcHMgJiYge1xuICAgIGZhbGxiYWNrOiAoKSA9PiBwcm9wcy5mYWxsYmFja1xuICB9O1xuICByZXR1cm4gY3JlYXRlTWVtbyhpbmRleEFycmF5KCgpID0+IHByb3BzLmVhY2gsIHByb3BzLmNoaWxkcmVuLCBmYWxsYmFjayB8fCB1bmRlZmluZWQpKTtcbn1cbmZ1bmN0aW9uIFNob3cocHJvcHMpIHtcbiAgY29uc3Qga2V5ZWQgPSBwcm9wcy5rZXllZDtcbiAgY29uc3QgY29uZGl0aW9uID0gY3JlYXRlTWVtbygoKSA9PiBwcm9wcy53aGVuLCB1bmRlZmluZWQsIHtcbiAgICBlcXVhbHM6IChhLCBiKSA9PiAoa2V5ZWQgPyBhID09PSBiIDogIWEgPT09ICFiKVxuICB9KTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8oXG4gICAgKCkgPT4ge1xuICAgICAgY29uc3QgYyA9IGNvbmRpdGlvbigpO1xuICAgICAgaWYgKGMpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgZm4gPSB0eXBlb2YgY2hpbGQgPT09IFwiZnVuY3Rpb25cIiAmJiBjaGlsZC5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gZm5cbiAgICAgICAgICA/IHVudHJhY2soKCkgPT5cbiAgICAgICAgICAgICAgY2hpbGQoXG4gICAgICAgICAgICAgICAga2V5ZWRcbiAgICAgICAgICAgICAgICAgID8gY1xuICAgICAgICAgICAgICAgICAgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCF1bnRyYWNrKGNvbmRpdGlvbikpIHRocm93IG5hcnJvd2VkRXJyb3IoXCJTaG93XCIpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy53aGVuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IGNoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzLmZhbGxiYWNrO1xuICAgIH0sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xufVxuZnVuY3Rpb24gU3dpdGNoKHByb3BzKSB7XG4gIGxldCBrZXllZCA9IGZhbHNlO1xuICBjb25zdCBlcXVhbHMgPSAoYSwgYikgPT4gKGtleWVkID8gYVsxXSA9PT0gYlsxXSA6ICFhWzFdID09PSAhYlsxXSkgJiYgYVsyXSA9PT0gYlsyXTtcbiAgY29uc3QgY29uZGl0aW9ucyA9IGNoaWxkcmVuKCgpID0+IHByb3BzLmNoaWxkcmVuKSxcbiAgICBldmFsQ29uZGl0aW9ucyA9IGNyZWF0ZU1lbW8oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGxldCBjb25kcyA9IGNvbmRpdGlvbnMoKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbmRzKSkgY29uZHMgPSBbY29uZHNdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgYyA9IGNvbmRzW2ldLndoZW47XG4gICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgIGtleWVkID0gISFjb25kc1tpXS5rZXllZDtcbiAgICAgICAgICAgIHJldHVybiBbaSwgYywgY29uZHNbaV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWy0xXTtcbiAgICAgIH0sXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB7XG4gICAgICAgIGVxdWFsc1xuICAgICAgfVxuICAgICk7XG4gIHJldHVybiBjcmVhdGVNZW1vKFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IFtpbmRleCwgd2hlbiwgY29uZF0gPSBldmFsQ29uZGl0aW9ucygpO1xuICAgICAgaWYgKGluZGV4IDwgMCkgcmV0dXJuIHByb3BzLmZhbGxiYWNrO1xuICAgICAgY29uc3QgYyA9IGNvbmQuY2hpbGRyZW47XG4gICAgICBjb25zdCBmbiA9IHR5cGVvZiBjID09PSBcImZ1bmN0aW9uXCIgJiYgYy5sZW5ndGggPiAwO1xuICAgICAgcmV0dXJuIGZuXG4gICAgICAgID8gdW50cmFjaygoKSA9PlxuICAgICAgICAgICAgYyhcbiAgICAgICAgICAgICAga2V5ZWRcbiAgICAgICAgICAgICAgICA/IHdoZW5cbiAgICAgICAgICAgICAgICA6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVudHJhY2soZXZhbENvbmRpdGlvbnMpWzBdICE9PSBpbmRleCkgdGhyb3cgbmFycm93ZWRFcnJvcihcIk1hdGNoXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZC53aGVuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgOiBjO1xuICAgIH0sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xufVxuZnVuY3Rpb24gTWF0Y2gocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzO1xufVxubGV0IEVycm9ycztcbmZ1bmN0aW9uIHJlc2V0RXJyb3JCb3VuZGFyaWVzKCkge1xuICBFcnJvcnMgJiYgWy4uLkVycm9yc10uZm9yRWFjaChmbiA9PiBmbigpKTtcbn1cbmZ1bmN0aW9uIEVycm9yQm91bmRhcnkocHJvcHMpIHtcbiAgbGV0IGVycjtcbiAgaWYgKHNoYXJlZENvbmZpZy5jb250ZXh0ICYmIHNoYXJlZENvbmZpZy5sb2FkKVxuICAgIGVyciA9IHNoYXJlZENvbmZpZy5sb2FkKHNoYXJlZENvbmZpZy5jb250ZXh0LmlkICsgc2hhcmVkQ29uZmlnLmNvbnRleHQuY291bnQpO1xuICBjb25zdCBbZXJyb3JlZCwgc2V0RXJyb3JlZF0gPSBjcmVhdGVTaWduYWwoZXJyLCB1bmRlZmluZWQpO1xuICBFcnJvcnMgfHwgKEVycm9ycyA9IG5ldyBTZXQoKSk7XG4gIEVycm9ycy5hZGQoc2V0RXJyb3JlZCk7XG4gIG9uQ2xlYW51cCgoKSA9PiBFcnJvcnMuZGVsZXRlKHNldEVycm9yZWQpKTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8oXG4gICAgKCkgPT4ge1xuICAgICAgbGV0IGU7XG4gICAgICBpZiAoKGUgPSBlcnJvcmVkKCkpKSB7XG4gICAgICAgIGNvbnN0IGYgPSBwcm9wcy5mYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBmID09PSBcImZ1bmN0aW9uXCIgJiYgZi5sZW5ndGggPyB1bnRyYWNrKCgpID0+IGYoZSwgKCkgPT4gc2V0RXJyb3JlZCgpKSkgOiBmO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoKCkgPT4gcHJvcHMuY2hpbGRyZW4sIHNldEVycm9yZWQpO1xuICAgIH0sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xufVxuXG5jb25zdCBzdXNwZW5zZUxpc3RFcXVhbHMgPSAoYSwgYikgPT5cbiAgYS5zaG93Q29udGVudCA9PT0gYi5zaG93Q29udGVudCAmJiBhLnNob3dGYWxsYmFjayA9PT0gYi5zaG93RmFsbGJhY2s7XG5jb25zdCBTdXNwZW5zZUxpc3RDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gU3VzcGVuc2VMaXN0KHByb3BzKSB7XG4gIGxldCBbd3JhcHBlciwgc2V0V3JhcHBlcl0gPSBjcmVhdGVTaWduYWwoKCkgPT4gKHtcbiAgICAgIGluRmFsbGJhY2s6IGZhbHNlXG4gICAgfSkpLFxuICAgIHNob3c7XG4gIGNvbnN0IGxpc3RDb250ZXh0ID0gdXNlQ29udGV4dChTdXNwZW5zZUxpc3RDb250ZXh0KTtcbiAgY29uc3QgW3JlZ2lzdHJ5LCBzZXRSZWdpc3RyeV0gPSBjcmVhdGVTaWduYWwoW10pO1xuICBpZiAobGlzdENvbnRleHQpIHtcbiAgICBzaG93ID0gbGlzdENvbnRleHQucmVnaXN0ZXIoY3JlYXRlTWVtbygoKSA9PiB3cmFwcGVyKCkoKS5pbkZhbGxiYWNrKSk7XG4gIH1cbiAgY29uc3QgcmVzb2x2ZWQgPSBjcmVhdGVNZW1vKFxuICAgIHByZXYgPT4ge1xuICAgICAgY29uc3QgcmV2ZWFsID0gcHJvcHMucmV2ZWFsT3JkZXIsXG4gICAgICAgIHRhaWwgPSBwcm9wcy50YWlsLFxuICAgICAgICB7IHNob3dDb250ZW50ID0gdHJ1ZSwgc2hvd0ZhbGxiYWNrID0gdHJ1ZSB9ID0gc2hvdyA/IHNob3coKSA6IHt9LFxuICAgICAgICByZWcgPSByZWdpc3RyeSgpLFxuICAgICAgICByZXZlcnNlID0gcmV2ZWFsID09PSBcImJhY2t3YXJkc1wiO1xuICAgICAgaWYgKHJldmVhbCA9PT0gXCJ0b2dldGhlclwiKSB7XG4gICAgICAgIGNvbnN0IGFsbCA9IHJlZy5ldmVyeShpbkZhbGxiYWNrID0+ICFpbkZhbGxiYWNrKCkpO1xuICAgICAgICBjb25zdCByZXMgPSByZWcubWFwKCgpID0+ICh7XG4gICAgICAgICAgc2hvd0NvbnRlbnQ6IGFsbCAmJiBzaG93Q29udGVudCxcbiAgICAgICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgfSkpO1xuICAgICAgICByZXMuaW5GYWxsYmFjayA9ICFhbGw7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgICBsZXQgc3RvcCA9IGZhbHNlO1xuICAgICAgbGV0IGluRmFsbGJhY2sgPSBwcmV2LmluRmFsbGJhY2s7XG4gICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgbiA9IHJldmVyc2UgPyBsZW4gLSBpIC0gMSA6IGksXG4gICAgICAgICAgcyA9IHJlZ1tuXSgpO1xuICAgICAgICBpZiAoIXN0b3AgJiYgIXMpIHtcbiAgICAgICAgICByZXNbbl0gPSB7XG4gICAgICAgICAgICBzaG93Q29udGVudCxcbiAgICAgICAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV4dCA9ICFzdG9wO1xuICAgICAgICAgIGlmIChuZXh0KSBpbkZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICByZXNbbl0gPSB7XG4gICAgICAgICAgICBzaG93Q29udGVudDogbmV4dCxcbiAgICAgICAgICAgIHNob3dGYWxsYmFjazogIXRhaWwgfHwgKG5leHQgJiYgdGFpbCA9PT0gXCJjb2xsYXBzZWRcIikgPyBzaG93RmFsbGJhY2sgOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghc3RvcCkgaW5GYWxsYmFjayA9IGZhbHNlO1xuICAgICAgcmVzLmluRmFsbGJhY2sgPSBpbkZhbGxiYWNrO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuICAgIHtcbiAgICAgIGluRmFsbGJhY2s6IGZhbHNlXG4gICAgfVxuICApO1xuICBzZXRXcmFwcGVyKCgpID0+IHJlc29sdmVkKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChTdXNwZW5zZUxpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHJlZ2lzdGVyOiBpbkZhbGxiYWNrID0+IHtcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICBzZXRSZWdpc3RyeShyZWdpc3RyeSA9PiB7XG4gICAgICAgICAgaW5kZXggPSByZWdpc3RyeS5sZW5ndGg7XG4gICAgICAgICAgcmV0dXJuIFsuLi5yZWdpc3RyeSwgaW5GYWxsYmFja107XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiByZXNvbHZlZCgpW2luZGV4XSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgZXF1YWxzOiBzdXNwZW5zZUxpc3RFcXVhbHNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIFN1c3BlbnNlKHByb3BzKSB7XG4gIGxldCBjb3VudGVyID0gMCxcbiAgICBzaG93LFxuICAgIGN0eCxcbiAgICBwLFxuICAgIGZsaWNrZXIsXG4gICAgZXJyb3I7XG4gIGNvbnN0IFtpbkZhbGxiYWNrLCBzZXRGYWxsYmFja10gPSBjcmVhdGVTaWduYWwoZmFsc2UpLFxuICAgIFN1c3BlbnNlQ29udGV4dCA9IGdldFN1c3BlbnNlQ29udGV4dCgpLFxuICAgIHN0b3JlID0ge1xuICAgICAgaW5jcmVtZW50OiAoKSA9PiB7XG4gICAgICAgIGlmICgrK2NvdW50ZXIgPT09IDEpIHNldEZhbGxiYWNrKHRydWUpO1xuICAgICAgfSxcbiAgICAgIGRlY3JlbWVudDogKCkgPT4ge1xuICAgICAgICBpZiAoLS1jb3VudGVyID09PSAwKSBzZXRGYWxsYmFjayhmYWxzZSk7XG4gICAgICB9LFxuICAgICAgaW5GYWxsYmFjayxcbiAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgcmVzb2x2ZWQ6IGZhbHNlXG4gICAgfSxcbiAgICBvd25lciA9IGdldE93bmVyKCk7XG4gIGlmIChzaGFyZWRDb25maWcuY29udGV4dCAmJiBzaGFyZWRDb25maWcubG9hZCkge1xuICAgIGNvbnN0IGtleSA9IHNoYXJlZENvbmZpZy5jb250ZXh0LmlkICsgc2hhcmVkQ29uZmlnLmNvbnRleHQuY291bnQ7XG4gICAgbGV0IHJlZiA9IHNoYXJlZENvbmZpZy5sb2FkKGtleSk7XG4gICAgaWYgKHJlZikge1xuICAgICAgaWYgKHR5cGVvZiByZWYgIT09IFwib2JqZWN0XCIgfHwgcmVmLnN0YXR1cyAhPT0gXCJzdWNjZXNzXCIpIHAgPSByZWY7XG4gICAgICBlbHNlIHNoYXJlZENvbmZpZy5nYXRoZXIoa2V5KTtcbiAgICB9XG4gICAgaWYgKHAgJiYgcCAhPT0gXCIkJGZcIikge1xuICAgICAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwodW5kZWZpbmVkLCB7XG4gICAgICAgIGVxdWFsczogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgZmxpY2tlciA9IHM7XG4gICAgICBwLnRoZW4oXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBpZiAoc2hhcmVkQ29uZmlnLmRvbmUpIHJldHVybiBzZXQoKTtcbiAgICAgICAgICBzaGFyZWRDb25maWcuZ2F0aGVyKGtleSk7XG4gICAgICAgICAgc2V0SHlkcmF0ZUNvbnRleHQoY3R4KTtcbiAgICAgICAgICBzZXQoKTtcbiAgICAgICAgICBzZXRIeWRyYXRlQ29udGV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgIHNldCgpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBsaXN0Q29udGV4dCA9IHVzZUNvbnRleHQoU3VzcGVuc2VMaXN0Q29udGV4dCk7XG4gIGlmIChsaXN0Q29udGV4dCkgc2hvdyA9IGxpc3RDb250ZXh0LnJlZ2lzdGVyKHN0b3JlLmluRmFsbGJhY2spO1xuICBsZXQgZGlzcG9zZTtcbiAgb25DbGVhbnVwKCgpID0+IGRpc3Bvc2UgJiYgZGlzcG9zZSgpKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChTdXNwZW5zZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RvcmUsXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgICBjdHggPSBzaGFyZWRDb25maWcuY29udGV4dDtcbiAgICAgICAgaWYgKGZsaWNrZXIpIHtcbiAgICAgICAgICBmbGlja2VyKCk7XG4gICAgICAgICAgcmV0dXJuIChmbGlja2VyID0gdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4ICYmIHAgPT09IFwiJCRmXCIpIHNldEh5ZHJhdGVDb250ZXh0KCk7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVkID0gY3JlYXRlTWVtbygoKSA9PiBwcm9wcy5jaGlsZHJlbik7XG4gICAgICAgIHJldHVybiBjcmVhdGVNZW1vKHByZXYgPT4ge1xuICAgICAgICAgIGNvbnN0IGluRmFsbGJhY2sgPSBzdG9yZS5pbkZhbGxiYWNrKCksXG4gICAgICAgICAgICB7IHNob3dDb250ZW50ID0gdHJ1ZSwgc2hvd0ZhbGxiYWNrID0gdHJ1ZSB9ID0gc2hvdyA/IHNob3coKSA6IHt9O1xuICAgICAgICAgIGlmICgoIWluRmFsbGJhY2sgfHwgKHAgJiYgcCAhPT0gXCIkJGZcIikpICYmIHNob3dDb250ZW50KSB7XG4gICAgICAgICAgICBzdG9yZS5yZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICBkaXNwb3NlICYmIGRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBjdHggPSBwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdW1lRWZmZWN0cyhzdG9yZS5lZmZlY3RzKTtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJlZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNob3dGYWxsYmFjaykgcmV0dXJuO1xuICAgICAgICAgIGlmIChkaXNwb3NlKSByZXR1cm4gcHJldjtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUm9vdChkaXNwb3NlciA9PiB7XG4gICAgICAgICAgICBkaXNwb3NlID0gZGlzcG9zZXI7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgIHNldEh5ZHJhdGVDb250ZXh0KHtcbiAgICAgICAgICAgICAgICBpZDogY3R4LmlkICsgXCJmXCIsXG4gICAgICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5mYWxsYmFjaztcbiAgICAgICAgICB9LCBvd25lcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgREVWID0gdW5kZWZpbmVkO1xuXG5leHBvcnQge1xuICAkREVWQ09NUCxcbiAgJFBST1hZLFxuICAkVFJBQ0ssXG4gIERFVixcbiAgRXJyb3JCb3VuZGFyeSxcbiAgRm9yLFxuICBJbmRleCxcbiAgTWF0Y2gsXG4gIFNob3csXG4gIFN1c3BlbnNlLFxuICBTdXNwZW5zZUxpc3QsXG4gIFN3aXRjaCxcbiAgYmF0Y2gsXG4gIGNhbmNlbENhbGxiYWNrLFxuICBjYXRjaEVycm9yLFxuICBjaGlsZHJlbixcbiAgY3JlYXRlQ29tcG9uZW50LFxuICBjcmVhdGVDb21wdXRlZCxcbiAgY3JlYXRlQ29udGV4dCxcbiAgY3JlYXRlRGVmZXJyZWQsXG4gIGNyZWF0ZUVmZmVjdCxcbiAgY3JlYXRlTWVtbyxcbiAgY3JlYXRlUmVhY3Rpb24sXG4gIGNyZWF0ZVJlbmRlckVmZmVjdCxcbiAgY3JlYXRlUmVzb3VyY2UsXG4gIGNyZWF0ZVJvb3QsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBjcmVhdGVTaWduYWwsXG4gIGNyZWF0ZVVuaXF1ZUlkLFxuICBlbmFibGVFeHRlcm5hbFNvdXJjZSxcbiAgZW5hYmxlSHlkcmF0aW9uLFxuICBlbmFibGVTY2hlZHVsaW5nLFxuICBlcXVhbEZuLFxuICBmcm9tLFxuICBnZXRMaXN0ZW5lcixcbiAgZ2V0T3duZXIsXG4gIGluZGV4QXJyYXksXG4gIGxhenksXG4gIG1hcEFycmF5LFxuICBtZXJnZVByb3BzLFxuICBvYnNlcnZhYmxlLFxuICBvbixcbiAgb25DbGVhbnVwLFxuICBvbkVycm9yLFxuICBvbk1vdW50LFxuICByZXF1ZXN0Q2FsbGJhY2ssXG4gIHJlc2V0RXJyb3JCb3VuZGFyaWVzLFxuICBydW5XaXRoT3duZXIsXG4gIHNoYXJlZENvbmZpZyxcbiAgc3BsaXRQcm9wcyxcbiAgc3RhcnRUcmFuc2l0aW9uLFxuICB1bnRyYWNrLFxuICB1c2VDb250ZXh0LFxuICB1c2VUcmFuc2l0aW9uXG59O1xuIiwiaW1wb3J0IHtcbiAgY3JlYXRlUm9vdCxcbiAgc2hhcmVkQ29uZmlnLFxuICBjcmVhdGVSZW5kZXJFZmZlY3QsXG4gIHVudHJhY2ssXG4gIGVuYWJsZUh5ZHJhdGlvbixcbiAgZ2V0T3duZXIsXG4gIGNyZWF0ZUVmZmVjdCxcbiAgcnVuV2l0aE93bmVyLFxuICBjcmVhdGVNZW1vLFxuICBjcmVhdGVTaWduYWwsXG4gIG9uQ2xlYW51cCxcbiAgc3BsaXRQcm9wc1xufSBmcm9tIFwic29saWQtanNcIjtcbmV4cG9ydCB7XG4gIEVycm9yQm91bmRhcnksXG4gIEZvcixcbiAgSW5kZXgsXG4gIE1hdGNoLFxuICBTaG93LFxuICBTdXNwZW5zZSxcbiAgU3VzcGVuc2VMaXN0LFxuICBTd2l0Y2gsXG4gIGNyZWF0ZUNvbXBvbmVudCxcbiAgY3JlYXRlUmVuZGVyRWZmZWN0IGFzIGVmZmVjdCxcbiAgZ2V0T3duZXIsXG4gIGNyZWF0ZU1lbW8gYXMgbWVtbyxcbiAgbWVyZ2VQcm9wcyxcbiAgdW50cmFja1xufSBmcm9tIFwic29saWQtanNcIjtcblxuY29uc3QgYm9vbGVhbnMgPSBbXG4gIFwiYWxsb3dmdWxsc2NyZWVuXCIsXG4gIFwiYXN5bmNcIixcbiAgXCJhdXRvZm9jdXNcIixcbiAgXCJhdXRvcGxheVwiLFxuICBcImNoZWNrZWRcIixcbiAgXCJjb250cm9sc1wiLFxuICBcImRlZmF1bHRcIixcbiAgXCJkaXNhYmxlZFwiLFxuICBcImZvcm1ub3ZhbGlkYXRlXCIsXG4gIFwiaGlkZGVuXCIsXG4gIFwiaW5kZXRlcm1pbmF0ZVwiLFxuICBcImluZXJ0XCIsXG4gIFwiaXNtYXBcIixcbiAgXCJsb29wXCIsXG4gIFwibXVsdGlwbGVcIixcbiAgXCJtdXRlZFwiLFxuICBcIm5vbW9kdWxlXCIsXG4gIFwibm92YWxpZGF0ZVwiLFxuICBcIm9wZW5cIixcbiAgXCJwbGF5c2lubGluZVwiLFxuICBcInJlYWRvbmx5XCIsXG4gIFwicmVxdWlyZWRcIixcbiAgXCJyZXZlcnNlZFwiLFxuICBcInNlYW1sZXNzXCIsXG4gIFwic2VsZWN0ZWRcIlxuXTtcbmNvbnN0IFByb3BlcnRpZXMgPSAvKiNfX1BVUkVfXyovIG5ldyBTZXQoW1xuICBcImNsYXNzTmFtZVwiLFxuICBcInZhbHVlXCIsXG4gIFwicmVhZE9ubHlcIixcbiAgXCJmb3JtTm9WYWxpZGF0ZVwiLFxuICBcImlzTWFwXCIsXG4gIFwibm9Nb2R1bGVcIixcbiAgXCJwbGF5c0lubGluZVwiLFxuICAuLi5ib29sZWFuc1xuXSk7XG5jb25zdCBDaGlsZFByb3BlcnRpZXMgPSAvKiNfX1BVUkVfXyovIG5ldyBTZXQoW1xuICBcImlubmVySFRNTFwiLFxuICBcInRleHRDb250ZW50XCIsXG4gIFwiaW5uZXJUZXh0XCIsXG4gIFwiY2hpbGRyZW5cIlxuXSk7XG5jb25zdCBBbGlhc2VzID0gLyojX19QVVJFX18qLyBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgY2xhc3NOYW1lOiBcImNsYXNzXCIsXG4gIGh0bWxGb3I6IFwiZm9yXCJcbn0pO1xuY29uc3QgUHJvcEFsaWFzZXMgPSAvKiNfX1BVUkVfXyovIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwge1xuICBjbGFzczogXCJjbGFzc05hbWVcIixcbiAgZm9ybW5vdmFsaWRhdGU6IHtcbiAgICAkOiBcImZvcm1Ob1ZhbGlkYXRlXCIsXG4gICAgQlVUVE9OOiAxLFxuICAgIElOUFVUOiAxXG4gIH0sXG4gIGlzbWFwOiB7XG4gICAgJDogXCJpc01hcFwiLFxuICAgIElNRzogMVxuICB9LFxuICBub21vZHVsZToge1xuICAgICQ6IFwibm9Nb2R1bGVcIixcbiAgICBTQ1JJUFQ6IDFcbiAgfSxcbiAgcGxheXNpbmxpbmU6IHtcbiAgICAkOiBcInBsYXlzSW5saW5lXCIsXG4gICAgVklERU86IDFcbiAgfSxcbiAgcmVhZG9ubHk6IHtcbiAgICAkOiBcInJlYWRPbmx5XCIsXG4gICAgSU5QVVQ6IDEsXG4gICAgVEVYVEFSRUE6IDFcbiAgfVxufSk7XG5mdW5jdGlvbiBnZXRQcm9wQWxpYXMocHJvcCwgdGFnTmFtZSkge1xuICBjb25zdCBhID0gUHJvcEFsaWFzZXNbcHJvcF07XG4gIHJldHVybiB0eXBlb2YgYSA9PT0gXCJvYmplY3RcIiA/IChhW3RhZ05hbWVdID8gYVtcIiRcIl0gOiB1bmRlZmluZWQpIDogYTtcbn1cbmNvbnN0IERlbGVnYXRlZEV2ZW50cyA9IC8qI19fUFVSRV9fKi8gbmV3IFNldChbXG4gIFwiYmVmb3JlaW5wdXRcIixcbiAgXCJjbGlja1wiLFxuICBcImRibGNsaWNrXCIsXG4gIFwiY29udGV4dG1lbnVcIixcbiAgXCJmb2N1c2luXCIsXG4gIFwiZm9jdXNvdXRcIixcbiAgXCJpbnB1dFwiLFxuICBcImtleWRvd25cIixcbiAgXCJrZXl1cFwiLFxuICBcIm1vdXNlZG93blwiLFxuICBcIm1vdXNlbW92ZVwiLFxuICBcIm1vdXNlb3V0XCIsXG4gIFwibW91c2VvdmVyXCIsXG4gIFwibW91c2V1cFwiLFxuICBcInBvaW50ZXJkb3duXCIsXG4gIFwicG9pbnRlcm1vdmVcIixcbiAgXCJwb2ludGVyb3V0XCIsXG4gIFwicG9pbnRlcm92ZXJcIixcbiAgXCJwb2ludGVydXBcIixcbiAgXCJ0b3VjaGVuZFwiLFxuICBcInRvdWNobW92ZVwiLFxuICBcInRvdWNoc3RhcnRcIlxuXSk7XG5jb25zdCBTVkdFbGVtZW50cyA9IC8qI19fUFVSRV9fKi8gbmV3IFNldChbXG4gIFwiYWx0R2x5cGhcIixcbiAgXCJhbHRHbHlwaERlZlwiLFxuICBcImFsdEdseXBoSXRlbVwiLFxuICBcImFuaW1hdGVcIixcbiAgXCJhbmltYXRlQ29sb3JcIixcbiAgXCJhbmltYXRlTW90aW9uXCIsXG4gIFwiYW5pbWF0ZVRyYW5zZm9ybVwiLFxuICBcImNpcmNsZVwiLFxuICBcImNsaXBQYXRoXCIsXG4gIFwiY29sb3ItcHJvZmlsZVwiLFxuICBcImN1cnNvclwiLFxuICBcImRlZnNcIixcbiAgXCJkZXNjXCIsXG4gIFwiZWxsaXBzZVwiLFxuICBcImZlQmxlbmRcIixcbiAgXCJmZUNvbG9yTWF0cml4XCIsXG4gIFwiZmVDb21wb25lbnRUcmFuc2ZlclwiLFxuICBcImZlQ29tcG9zaXRlXCIsXG4gIFwiZmVDb252b2x2ZU1hdHJpeFwiLFxuICBcImZlRGlmZnVzZUxpZ2h0aW5nXCIsXG4gIFwiZmVEaXNwbGFjZW1lbnRNYXBcIixcbiAgXCJmZURpc3RhbnRMaWdodFwiLFxuICBcImZlRHJvcFNoYWRvd1wiLFxuICBcImZlRmxvb2RcIixcbiAgXCJmZUZ1bmNBXCIsXG4gIFwiZmVGdW5jQlwiLFxuICBcImZlRnVuY0dcIixcbiAgXCJmZUZ1bmNSXCIsXG4gIFwiZmVHYXVzc2lhbkJsdXJcIixcbiAgXCJmZUltYWdlXCIsXG4gIFwiZmVNZXJnZVwiLFxuICBcImZlTWVyZ2VOb2RlXCIsXG4gIFwiZmVNb3JwaG9sb2d5XCIsXG4gIFwiZmVPZmZzZXRcIixcbiAgXCJmZVBvaW50TGlnaHRcIixcbiAgXCJmZVNwZWN1bGFyTGlnaHRpbmdcIixcbiAgXCJmZVNwb3RMaWdodFwiLFxuICBcImZlVGlsZVwiLFxuICBcImZlVHVyYnVsZW5jZVwiLFxuICBcImZpbHRlclwiLFxuICBcImZvbnRcIixcbiAgXCJmb250LWZhY2VcIixcbiAgXCJmb250LWZhY2UtZm9ybWF0XCIsXG4gIFwiZm9udC1mYWNlLW5hbWVcIixcbiAgXCJmb250LWZhY2Utc3JjXCIsXG4gIFwiZm9udC1mYWNlLXVyaVwiLFxuICBcImZvcmVpZ25PYmplY3RcIixcbiAgXCJnXCIsXG4gIFwiZ2x5cGhcIixcbiAgXCJnbHlwaFJlZlwiLFxuICBcImhrZXJuXCIsXG4gIFwiaW1hZ2VcIixcbiAgXCJsaW5lXCIsXG4gIFwibGluZWFyR3JhZGllbnRcIixcbiAgXCJtYXJrZXJcIixcbiAgXCJtYXNrXCIsXG4gIFwibWV0YWRhdGFcIixcbiAgXCJtaXNzaW5nLWdseXBoXCIsXG4gIFwibXBhdGhcIixcbiAgXCJwYXRoXCIsXG4gIFwicGF0dGVyblwiLFxuICBcInBvbHlnb25cIixcbiAgXCJwb2x5bGluZVwiLFxuICBcInJhZGlhbEdyYWRpZW50XCIsXG4gIFwicmVjdFwiLFxuICBcInNldFwiLFxuICBcInN0b3BcIixcbiAgXCJzdmdcIixcbiAgXCJzd2l0Y2hcIixcbiAgXCJzeW1ib2xcIixcbiAgXCJ0ZXh0XCIsXG4gIFwidGV4dFBhdGhcIixcbiAgXCJ0cmVmXCIsXG4gIFwidHNwYW5cIixcbiAgXCJ1c2VcIixcbiAgXCJ2aWV3XCIsXG4gIFwidmtlcm5cIlxuXSk7XG5jb25zdCBTVkdOYW1lc3BhY2UgPSB7XG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiXG59O1xuY29uc3QgRE9NRWxlbWVudHMgPSAvKiNfX1BVUkVfXyovIG5ldyBTZXQoW1xuICBcImh0bWxcIixcbiAgXCJiYXNlXCIsXG4gIFwiaGVhZFwiLFxuICBcImxpbmtcIixcbiAgXCJtZXRhXCIsXG4gIFwic3R5bGVcIixcbiAgXCJ0aXRsZVwiLFxuICBcImJvZHlcIixcbiAgXCJhZGRyZXNzXCIsXG4gIFwiYXJ0aWNsZVwiLFxuICBcImFzaWRlXCIsXG4gIFwiZm9vdGVyXCIsXG4gIFwiaGVhZGVyXCIsXG4gIFwibWFpblwiLFxuICBcIm5hdlwiLFxuICBcInNlY3Rpb25cIixcbiAgXCJib2R5XCIsXG4gIFwiYmxvY2txdW90ZVwiLFxuICBcImRkXCIsXG4gIFwiZGl2XCIsXG4gIFwiZGxcIixcbiAgXCJkdFwiLFxuICBcImZpZ2NhcHRpb25cIixcbiAgXCJmaWd1cmVcIixcbiAgXCJoclwiLFxuICBcImxpXCIsXG4gIFwib2xcIixcbiAgXCJwXCIsXG4gIFwicHJlXCIsXG4gIFwidWxcIixcbiAgXCJhXCIsXG4gIFwiYWJiclwiLFxuICBcImJcIixcbiAgXCJiZGlcIixcbiAgXCJiZG9cIixcbiAgXCJiclwiLFxuICBcImNpdGVcIixcbiAgXCJjb2RlXCIsXG4gIFwiZGF0YVwiLFxuICBcImRmblwiLFxuICBcImVtXCIsXG4gIFwiaVwiLFxuICBcImtiZFwiLFxuICBcIm1hcmtcIixcbiAgXCJxXCIsXG4gIFwicnBcIixcbiAgXCJydFwiLFxuICBcInJ1YnlcIixcbiAgXCJzXCIsXG4gIFwic2FtcFwiLFxuICBcInNtYWxsXCIsXG4gIFwic3BhblwiLFxuICBcInN0cm9uZ1wiLFxuICBcInN1YlwiLFxuICBcInN1cFwiLFxuICBcInRpbWVcIixcbiAgXCJ1XCIsXG4gIFwidmFyXCIsXG4gIFwid2JyXCIsXG4gIFwiYXJlYVwiLFxuICBcImF1ZGlvXCIsXG4gIFwiaW1nXCIsXG4gIFwibWFwXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ2aWRlb1wiLFxuICBcImVtYmVkXCIsXG4gIFwiaWZyYW1lXCIsXG4gIFwib2JqZWN0XCIsXG4gIFwicGFyYW1cIixcbiAgXCJwaWN0dXJlXCIsXG4gIFwicG9ydGFsXCIsXG4gIFwic291cmNlXCIsXG4gIFwic3ZnXCIsXG4gIFwibWF0aFwiLFxuICBcImNhbnZhc1wiLFxuICBcIm5vc2NyaXB0XCIsXG4gIFwic2NyaXB0XCIsXG4gIFwiZGVsXCIsXG4gIFwiaW5zXCIsXG4gIFwiY2FwdGlvblwiLFxuICBcImNvbFwiLFxuICBcImNvbGdyb3VwXCIsXG4gIFwidGFibGVcIixcbiAgXCJ0Ym9keVwiLFxuICBcInRkXCIsXG4gIFwidGZvb3RcIixcbiAgXCJ0aFwiLFxuICBcInRoZWFkXCIsXG4gIFwidHJcIixcbiAgXCJidXR0b25cIixcbiAgXCJkYXRhbGlzdFwiLFxuICBcImZpZWxkc2V0XCIsXG4gIFwiZm9ybVwiLFxuICBcImlucHV0XCIsXG4gIFwibGFiZWxcIixcbiAgXCJsZWdlbmRcIixcbiAgXCJtZXRlclwiLFxuICBcIm9wdGdyb3VwXCIsXG4gIFwib3B0aW9uXCIsXG4gIFwib3V0cHV0XCIsXG4gIFwicHJvZ3Jlc3NcIixcbiAgXCJzZWxlY3RcIixcbiAgXCJ0ZXh0YXJlYVwiLFxuICBcImRldGFpbHNcIixcbiAgXCJkaWFsb2dcIixcbiAgXCJtZW51XCIsXG4gIFwic3VtbWFyeVwiLFxuICBcImRldGFpbHNcIixcbiAgXCJzbG90XCIsXG4gIFwidGVtcGxhdGVcIixcbiAgXCJhY3JvbnltXCIsXG4gIFwiYXBwbGV0XCIsXG4gIFwiYmFzZWZvbnRcIixcbiAgXCJiZ3NvdW5kXCIsXG4gIFwiYmlnXCIsXG4gIFwiYmxpbmtcIixcbiAgXCJjZW50ZXJcIixcbiAgXCJjb250ZW50XCIsXG4gIFwiZGlyXCIsXG4gIFwiZm9udFwiLFxuICBcImZyYW1lXCIsXG4gIFwiZnJhbWVzZXRcIixcbiAgXCJoZ3JvdXBcIixcbiAgXCJpbWFnZVwiLFxuICBcImtleWdlblwiLFxuICBcIm1hcnF1ZWVcIixcbiAgXCJtZW51aXRlbVwiLFxuICBcIm5vYnJcIixcbiAgXCJub2VtYmVkXCIsXG4gIFwibm9mcmFtZXNcIixcbiAgXCJwbGFpbnRleHRcIixcbiAgXCJyYlwiLFxuICBcInJ0Y1wiLFxuICBcInNoYWRvd1wiLFxuICBcInNwYWNlclwiLFxuICBcInN0cmlrZVwiLFxuICBcInR0XCIsXG4gIFwieG1wXCIsXG4gIFwiYVwiLFxuICBcImFiYnJcIixcbiAgXCJhY3JvbnltXCIsXG4gIFwiYWRkcmVzc1wiLFxuICBcImFwcGxldFwiLFxuICBcImFyZWFcIixcbiAgXCJhcnRpY2xlXCIsXG4gIFwiYXNpZGVcIixcbiAgXCJhdWRpb1wiLFxuICBcImJcIixcbiAgXCJiYXNlXCIsXG4gIFwiYmFzZWZvbnRcIixcbiAgXCJiZGlcIixcbiAgXCJiZG9cIixcbiAgXCJiZ3NvdW5kXCIsXG4gIFwiYmlnXCIsXG4gIFwiYmxpbmtcIixcbiAgXCJibG9ja3F1b3RlXCIsXG4gIFwiYm9keVwiLFxuICBcImJyXCIsXG4gIFwiYnV0dG9uXCIsXG4gIFwiY2FudmFzXCIsXG4gIFwiY2FwdGlvblwiLFxuICBcImNlbnRlclwiLFxuICBcImNpdGVcIixcbiAgXCJjb2RlXCIsXG4gIFwiY29sXCIsXG4gIFwiY29sZ3JvdXBcIixcbiAgXCJjb250ZW50XCIsXG4gIFwiZGF0YVwiLFxuICBcImRhdGFsaXN0XCIsXG4gIFwiZGRcIixcbiAgXCJkZWxcIixcbiAgXCJkZXRhaWxzXCIsXG4gIFwiZGZuXCIsXG4gIFwiZGlhbG9nXCIsXG4gIFwiZGlyXCIsXG4gIFwiZGl2XCIsXG4gIFwiZGxcIixcbiAgXCJkdFwiLFxuICBcImVtXCIsXG4gIFwiZW1iZWRcIixcbiAgXCJmaWVsZHNldFwiLFxuICBcImZpZ2NhcHRpb25cIixcbiAgXCJmaWd1cmVcIixcbiAgXCJmb250XCIsXG4gIFwiZm9vdGVyXCIsXG4gIFwiZm9ybVwiLFxuICBcImZyYW1lXCIsXG4gIFwiZnJhbWVzZXRcIixcbiAgXCJoZWFkXCIsXG4gIFwiaGVhZGVyXCIsXG4gIFwiaGdyb3VwXCIsXG4gIFwiaHJcIixcbiAgXCJodG1sXCIsXG4gIFwiaVwiLFxuICBcImlmcmFtZVwiLFxuICBcImltYWdlXCIsXG4gIFwiaW1nXCIsXG4gIFwiaW5wdXRcIixcbiAgXCJpbnNcIixcbiAgXCJrYmRcIixcbiAgXCJrZXlnZW5cIixcbiAgXCJsYWJlbFwiLFxuICBcImxlZ2VuZFwiLFxuICBcImxpXCIsXG4gIFwibGlua1wiLFxuICBcIm1haW5cIixcbiAgXCJtYXBcIixcbiAgXCJtYXJrXCIsXG4gIFwibWFycXVlZVwiLFxuICBcIm1lbnVcIixcbiAgXCJtZW51aXRlbVwiLFxuICBcIm1ldGFcIixcbiAgXCJtZXRlclwiLFxuICBcIm5hdlwiLFxuICBcIm5vYnJcIixcbiAgXCJub2VtYmVkXCIsXG4gIFwibm9mcmFtZXNcIixcbiAgXCJub3NjcmlwdFwiLFxuICBcIm9iamVjdFwiLFxuICBcIm9sXCIsXG4gIFwib3B0Z3JvdXBcIixcbiAgXCJvcHRpb25cIixcbiAgXCJvdXRwdXRcIixcbiAgXCJwXCIsXG4gIFwicGFyYW1cIixcbiAgXCJwaWN0dXJlXCIsXG4gIFwicGxhaW50ZXh0XCIsXG4gIFwicG9ydGFsXCIsXG4gIFwicHJlXCIsXG4gIFwicHJvZ3Jlc3NcIixcbiAgXCJxXCIsXG4gIFwicmJcIixcbiAgXCJycFwiLFxuICBcInJ0XCIsXG4gIFwicnRjXCIsXG4gIFwicnVieVwiLFxuICBcInNcIixcbiAgXCJzYW1wXCIsXG4gIFwic2NyaXB0XCIsXG4gIFwic2VjdGlvblwiLFxuICBcInNlbGVjdFwiLFxuICBcInNoYWRvd1wiLFxuICBcInNsb3RcIixcbiAgXCJzbWFsbFwiLFxuICBcInNvdXJjZVwiLFxuICBcInNwYWNlclwiLFxuICBcInNwYW5cIixcbiAgXCJzdHJpa2VcIixcbiAgXCJzdHJvbmdcIixcbiAgXCJzdHlsZVwiLFxuICBcInN1YlwiLFxuICBcInN1bW1hcnlcIixcbiAgXCJzdXBcIixcbiAgXCJ0YWJsZVwiLFxuICBcInRib2R5XCIsXG4gIFwidGRcIixcbiAgXCJ0ZW1wbGF0ZVwiLFxuICBcInRleHRhcmVhXCIsXG4gIFwidGZvb3RcIixcbiAgXCJ0aFwiLFxuICBcInRoZWFkXCIsXG4gIFwidGltZVwiLFxuICBcInRpdGxlXCIsXG4gIFwidHJcIixcbiAgXCJ0cmFja1wiLFxuICBcInR0XCIsXG4gIFwidVwiLFxuICBcInVsXCIsXG4gIFwidmFyXCIsXG4gIFwidmlkZW9cIixcbiAgXCJ3YnJcIixcbiAgXCJ4bXBcIixcbiAgXCJpbnB1dFwiLFxuICBcImgxXCIsXG4gIFwiaDJcIixcbiAgXCJoM1wiLFxuICBcImg0XCIsXG4gIFwiaDVcIixcbiAgXCJoNlwiXG5dKTtcblxuZnVuY3Rpb24gcmVjb25jaWxlQXJyYXlzKHBhcmVudE5vZGUsIGEsIGIpIHtcbiAgbGV0IGJMZW5ndGggPSBiLmxlbmd0aCxcbiAgICBhRW5kID0gYS5sZW5ndGgsXG4gICAgYkVuZCA9IGJMZW5ndGgsXG4gICAgYVN0YXJ0ID0gMCxcbiAgICBiU3RhcnQgPSAwLFxuICAgIGFmdGVyID0gYVthRW5kIC0gMV0ubmV4dFNpYmxpbmcsXG4gICAgbWFwID0gbnVsbDtcbiAgd2hpbGUgKGFTdGFydCA8IGFFbmQgfHwgYlN0YXJ0IDwgYkVuZCkge1xuICAgIGlmIChhW2FTdGFydF0gPT09IGJbYlN0YXJ0XSkge1xuICAgICAgYVN0YXJ0Kys7XG4gICAgICBiU3RhcnQrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB3aGlsZSAoYVthRW5kIC0gMV0gPT09IGJbYkVuZCAtIDFdKSB7XG4gICAgICBhRW5kLS07XG4gICAgICBiRW5kLS07XG4gICAgfVxuICAgIGlmIChhRW5kID09PSBhU3RhcnQpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBiRW5kIDwgYkxlbmd0aCA/IChiU3RhcnQgPyBiW2JTdGFydCAtIDFdLm5leHRTaWJsaW5nIDogYltiRW5kIC0gYlN0YXJ0XSkgOiBhZnRlcjtcbiAgICAgIHdoaWxlIChiU3RhcnQgPCBiRW5kKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShiW2JTdGFydCsrXSwgbm9kZSk7XG4gICAgfSBlbHNlIGlmIChiRW5kID09PSBiU3RhcnQpIHtcbiAgICAgIHdoaWxlIChhU3RhcnQgPCBhRW5kKSB7XG4gICAgICAgIGlmICghbWFwIHx8ICFtYXAuaGFzKGFbYVN0YXJ0XSkpIGFbYVN0YXJ0XS5yZW1vdmUoKTtcbiAgICAgICAgYVN0YXJ0Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhW2FTdGFydF0gPT09IGJbYkVuZCAtIDFdICYmIGJbYlN0YXJ0XSA9PT0gYVthRW5kIC0gMV0pIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBhWy0tYUVuZF0ubmV4dFNpYmxpbmc7XG4gICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShiW2JTdGFydCsrXSwgYVthU3RhcnQrK10ubmV4dFNpYmxpbmcpO1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYlstLWJFbmRdLCBub2RlKTtcbiAgICAgIGFbYUVuZF0gPSBiW2JFbmRdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIW1hcCkge1xuICAgICAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBpID0gYlN0YXJ0O1xuICAgICAgICB3aGlsZSAoaSA8IGJFbmQpIG1hcC5zZXQoYltpXSwgaSsrKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZGV4ID0gbWFwLmdldChhW2FTdGFydF0pO1xuICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGJTdGFydCA8IGluZGV4ICYmIGluZGV4IDwgYkVuZCkge1xuICAgICAgICAgIGxldCBpID0gYVN0YXJ0LFxuICAgICAgICAgICAgc2VxdWVuY2UgPSAxLFxuICAgICAgICAgICAgdDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgYUVuZCAmJiBpIDwgYkVuZCkge1xuICAgICAgICAgICAgaWYgKCh0ID0gbWFwLmdldChhW2ldKSkgPT0gbnVsbCB8fCB0ICE9PSBpbmRleCArIHNlcXVlbmNlKSBicmVhaztcbiAgICAgICAgICAgIHNlcXVlbmNlKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZXF1ZW5jZSA+IGluZGV4IC0gYlN0YXJ0KSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gYVthU3RhcnRdO1xuICAgICAgICAgICAgd2hpbGUgKGJTdGFydCA8IGluZGV4KSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShiW2JTdGFydCsrXSwgbm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGJbYlN0YXJ0KytdLCBhW2FTdGFydCsrXSk7XG4gICAgICAgIH0gZWxzZSBhU3RhcnQrKztcbiAgICAgIH0gZWxzZSBhW2FTdGFydCsrXS5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgJCRFVkVOVFMgPSBcIl8kRFhfREVMRUdBVEVcIjtcbmZ1bmN0aW9uIHJlbmRlcihjb2RlLCBlbGVtZW50LCBpbml0LCBvcHRpb25zID0ge30pIHtcbiAgbGV0IGRpc3Bvc2VyO1xuICBjcmVhdGVSb290KGRpc3Bvc2UgPT4ge1xuICAgIGRpc3Bvc2VyID0gZGlzcG9zZTtcbiAgICBlbGVtZW50ID09PSBkb2N1bWVudFxuICAgICAgPyBjb2RlKClcbiAgICAgIDogaW5zZXJ0KGVsZW1lbnQsIGNvZGUoKSwgZWxlbWVudC5maXJzdENoaWxkID8gbnVsbCA6IHVuZGVmaW5lZCwgaW5pdCk7XG4gIH0sIG9wdGlvbnMub3duZXIpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGRpc3Bvc2VyKCk7XG4gICAgZWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH07XG59XG5mdW5jdGlvbiB0ZW1wbGF0ZShodG1sLCBpc0NFLCBpc1NWRykge1xuICBsZXQgbm9kZTtcbiAgY29uc3QgY3JlYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgdC5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBpc1NWRyA/IHQuY29udGVudC5maXJzdENoaWxkLmZpcnN0Q2hpbGQgOiB0LmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgfTtcbiAgY29uc3QgZm4gPSBpc0NFXG4gICAgPyAoKSA9PiB1bnRyYWNrKCgpID0+IGRvY3VtZW50LmltcG9ydE5vZGUobm9kZSB8fCAobm9kZSA9IGNyZWF0ZSgpKSwgdHJ1ZSkpXG4gICAgOiAoKSA9PiAobm9kZSB8fCAobm9kZSA9IGNyZWF0ZSgpKSkuY2xvbmVOb2RlKHRydWUpO1xuICBmbi5jbG9uZU5vZGUgPSBmbjtcbiAgcmV0dXJuIGZuO1xufVxuZnVuY3Rpb24gZGVsZWdhdGVFdmVudHMoZXZlbnROYW1lcywgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgY29uc3QgZSA9IGRvY3VtZW50WyQkRVZFTlRTXSB8fCAoZG9jdW1lbnRbJCRFVkVOVFNdID0gbmV3IFNldCgpKTtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBldmVudE5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IG5hbWUgPSBldmVudE5hbWVzW2ldO1xuICAgIGlmICghZS5oYXMobmFtZSkpIHtcbiAgICAgIGUuYWRkKG5hbWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudEhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2xlYXJEZWxlZ2F0ZWRFdmVudHMoZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgaWYgKGRvY3VtZW50WyQkRVZFTlRTXSkge1xuICAgIGZvciAobGV0IG5hbWUgb2YgZG9jdW1lbnRbJCRFVkVOVFNdLmtleXMoKSkgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudEhhbmRsZXIpO1xuICAgIGRlbGV0ZSBkb2N1bWVudFskJEVWRU5UU107XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmICghIXNoYXJlZENvbmZpZy5jb250ZXh0ICYmIG5vZGUuaXNDb25uZWN0ZWQpIHJldHVybjtcbiAgbm9kZVtuYW1lXSA9IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmICghIXNoYXJlZENvbmZpZy5jb250ZXh0ICYmIG5vZGUuaXNDb25uZWN0ZWQpIHJldHVybjtcbiAgaWYgKHZhbHVlID09IG51bGwpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZU5TKG5vZGUsIG5hbWVzcGFjZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKCEhc2hhcmVkQ29uZmlnLmNvbnRleHQgJiYgbm9kZS5pc0Nvbm5lY3RlZCkgcmV0dXJuO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIG5hbWUpO1xuICBlbHNlIG5vZGUuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBuYW1lLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBjbGFzc05hbWUobm9kZSwgdmFsdWUpIHtcbiAgaWYgKCEhc2hhcmVkQ29uZmlnLmNvbnRleHQgJiYgbm9kZS5pc0Nvbm5lY3RlZCkgcmV0dXJuO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgZWxzZSBub2RlLmNsYXNzTmFtZSA9IHZhbHVlO1xufVxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBuYW1lLCBoYW5kbGVyLCBkZWxlZ2F0ZSkge1xuICBpZiAoZGVsZWdhdGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgbm9kZVtgJCQke25hbWV9YF0gPSBoYW5kbGVyWzBdO1xuICAgICAgbm9kZVtgJCQke25hbWV9RGF0YWBdID0gaGFuZGxlclsxXTtcbiAgICB9IGVsc2Ugbm9kZVtgJCQke25hbWV9YF0gPSBoYW5kbGVyO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICBjb25zdCBoYW5kbGVyRm4gPSBoYW5kbGVyWzBdO1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCAoaGFuZGxlclswXSA9IGUgPT4gaGFuZGxlckZuLmNhbGwobm9kZSwgaGFuZGxlclsxXSwgZSkpKTtcbiAgfSBlbHNlIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcbn1cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlLCB2YWx1ZSwgcHJldiA9IHt9KSB7XG4gIGNvbnN0IGNsYXNzS2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlIHx8IHt9KSxcbiAgICBwcmV2S2V5cyA9IE9iamVjdC5rZXlzKHByZXYpO1xuICBsZXQgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBwcmV2S2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGtleSA9IHByZXZLZXlzW2ldO1xuICAgIGlmICgha2V5IHx8IGtleSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWx1ZVtrZXldKSBjb250aW51ZTtcbiAgICB0b2dnbGVDbGFzc0tleShub2RlLCBrZXksIGZhbHNlKTtcbiAgICBkZWxldGUgcHJldltrZXldO1xuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGNsYXNzS2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGNsYXNzS2V5c1tpXSxcbiAgICAgIGNsYXNzVmFsdWUgPSAhIXZhbHVlW2tleV07XG4gICAgaWYgKCFrZXkgfHwga2V5ID09PSBcInVuZGVmaW5lZFwiIHx8IHByZXZba2V5XSA9PT0gY2xhc3NWYWx1ZSB8fCAhY2xhc3NWYWx1ZSkgY29udGludWU7XG4gICAgdG9nZ2xlQ2xhc3NLZXkobm9kZSwga2V5LCB0cnVlKTtcbiAgICBwcmV2W2tleV0gPSBjbGFzc1ZhbHVlO1xuICB9XG4gIHJldHVybiBwcmV2O1xufVxuZnVuY3Rpb24gc3R5bGUobm9kZSwgdmFsdWUsIHByZXYpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIHByZXYgPyBzZXRBdHRyaWJ1dGUobm9kZSwgXCJzdHlsZVwiKSA6IHZhbHVlO1xuICBjb25zdCBub2RlU3R5bGUgPSBub2RlLnN0eWxlO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSByZXR1cm4gKG5vZGVTdHlsZS5jc3NUZXh0ID0gdmFsdWUpO1xuICB0eXBlb2YgcHJldiA9PT0gXCJzdHJpbmdcIiAmJiAobm9kZVN0eWxlLmNzc1RleHQgPSBwcmV2ID0gdW5kZWZpbmVkKTtcbiAgcHJldiB8fCAocHJldiA9IHt9KTtcbiAgdmFsdWUgfHwgKHZhbHVlID0ge30pO1xuICBsZXQgdiwgcztcbiAgZm9yIChzIGluIHByZXYpIHtcbiAgICB2YWx1ZVtzXSA9PSBudWxsICYmIG5vZGVTdHlsZS5yZW1vdmVQcm9wZXJ0eShzKTtcbiAgICBkZWxldGUgcHJldltzXTtcbiAgfVxuICBmb3IgKHMgaW4gdmFsdWUpIHtcbiAgICB2ID0gdmFsdWVbc107XG4gICAgaWYgKHYgIT09IHByZXZbc10pIHtcbiAgICAgIG5vZGVTdHlsZS5zZXRQcm9wZXJ0eShzLCB2KTtcbiAgICAgIHByZXZbc10gPSB2O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJldjtcbn1cbmZ1bmN0aW9uIHNwcmVhZChub2RlLCBwcm9wcyA9IHt9LCBpc1NWRywgc2tpcENoaWxkcmVuKSB7XG4gIGNvbnN0IHByZXZQcm9wcyA9IHt9O1xuICBpZiAoIXNraXBDaGlsZHJlbikge1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdChcbiAgICAgICgpID0+IChwcmV2UHJvcHMuY2hpbGRyZW4gPSBpbnNlcnRFeHByZXNzaW9uKG5vZGUsIHByb3BzLmNoaWxkcmVuLCBwcmV2UHJvcHMuY2hpbGRyZW4pKVxuICAgICk7XG4gIH1cbiAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+XG4gICAgdHlwZW9mIHByb3BzLnJlZiA9PT0gXCJmdW5jdGlvblwiID8gdXNlKHByb3BzLnJlZiwgbm9kZSkgOiAocHJvcHMucmVmID0gbm9kZSlcbiAgKTtcbiAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGFzc2lnbihub2RlLCBwcm9wcywgaXNTVkcsIHRydWUsIHByZXZQcm9wcywgdHJ1ZSkpO1xuICByZXR1cm4gcHJldlByb3BzO1xufVxuZnVuY3Rpb24gZHluYW1pY1Byb3BlcnR5KHByb3BzLCBrZXkpIHtcbiAgY29uc3Qgc3JjID0gcHJvcHNba2V5XTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCBrZXksIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gc3JjKCk7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gcHJvcHM7XG59XG5mdW5jdGlvbiB1c2UoZm4sIGVsZW1lbnQsIGFyZykge1xuICByZXR1cm4gdW50cmFjaygoKSA9PiBmbihlbGVtZW50LCBhcmcpKTtcbn1cbmZ1bmN0aW9uIGluc2VydChwYXJlbnQsIGFjY2Vzc29yLCBtYXJrZXIsIGluaXRpYWwpIHtcbiAgaWYgKG1hcmtlciAhPT0gdW5kZWZpbmVkICYmICFpbml0aWFsKSBpbml0aWFsID0gW107XG4gIGlmICh0eXBlb2YgYWNjZXNzb3IgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGluc2VydEV4cHJlc3Npb24ocGFyZW50LCBhY2Nlc3NvciwgaW5pdGlhbCwgbWFya2VyKTtcbiAgY3JlYXRlUmVuZGVyRWZmZWN0KGN1cnJlbnQgPT4gaW5zZXJ0RXhwcmVzc2lvbihwYXJlbnQsIGFjY2Vzc29yKCksIGN1cnJlbnQsIG1hcmtlciksIGluaXRpYWwpO1xufVxuZnVuY3Rpb24gYXNzaWduKG5vZGUsIHByb3BzLCBpc1NWRywgc2tpcENoaWxkcmVuLCBwcmV2UHJvcHMgPSB7fSwgc2tpcFJlZiA9IGZhbHNlKSB7XG4gIHByb3BzIHx8IChwcm9wcyA9IHt9KTtcbiAgZm9yIChjb25zdCBwcm9wIGluIHByZXZQcm9wcykge1xuICAgIGlmICghKHByb3AgaW4gcHJvcHMpKSB7XG4gICAgICBpZiAocHJvcCA9PT0gXCJjaGlsZHJlblwiKSBjb250aW51ZTtcbiAgICAgIHByZXZQcm9wc1twcm9wXSA9IGFzc2lnblByb3Aobm9kZSwgcHJvcCwgbnVsbCwgcHJldlByb3BzW3Byb3BdLCBpc1NWRywgc2tpcFJlZik7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgcHJvcCBpbiBwcm9wcykge1xuICAgIGlmIChwcm9wID09PSBcImNoaWxkcmVuXCIpIHtcbiAgICAgIGlmICghc2tpcENoaWxkcmVuKSBpbnNlcnRFeHByZXNzaW9uKG5vZGUsIHByb3BzLmNoaWxkcmVuKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHByZXZQcm9wc1twcm9wXSA9IGFzc2lnblByb3Aobm9kZSwgcHJvcCwgdmFsdWUsIHByZXZQcm9wc1twcm9wXSwgaXNTVkcsIHNraXBSZWYpO1xuICB9XG59XG5mdW5jdGlvbiBoeWRyYXRlJDEoY29kZSwgZWxlbWVudCwgb3B0aW9ucyA9IHt9KSB7XG4gIHNoYXJlZENvbmZpZy5jb21wbGV0ZWQgPSBnbG9iYWxUaGlzLl8kSFkuY29tcGxldGVkO1xuICBzaGFyZWRDb25maWcuZXZlbnRzID0gZ2xvYmFsVGhpcy5fJEhZLmV2ZW50cztcbiAgc2hhcmVkQ29uZmlnLmxvYWQgPSBpZCA9PiBnbG9iYWxUaGlzLl8kSFkucltpZF07XG4gIHNoYXJlZENvbmZpZy5oYXMgPSBpZCA9PiBpZCBpbiBnbG9iYWxUaGlzLl8kSFkucjtcbiAgc2hhcmVkQ29uZmlnLmdhdGhlciA9IHJvb3QgPT4gZ2F0aGVySHlkcmF0YWJsZShlbGVtZW50LCByb290KTtcbiAgc2hhcmVkQ29uZmlnLnJlZ2lzdHJ5ID0gbmV3IE1hcCgpO1xuICBzaGFyZWRDb25maWcuY29udGV4dCA9IHtcbiAgICBpZDogb3B0aW9ucy5yZW5kZXJJZCB8fCBcIlwiLFxuICAgIGNvdW50OiAwXG4gIH07XG4gIGdhdGhlckh5ZHJhdGFibGUoZWxlbWVudCwgb3B0aW9ucy5yZW5kZXJJZCk7XG4gIGNvbnN0IGRpc3Bvc2UgPSByZW5kZXIoY29kZSwgZWxlbWVudCwgWy4uLmVsZW1lbnQuY2hpbGROb2Rlc10sIG9wdGlvbnMpO1xuICBzaGFyZWRDb25maWcuY29udGV4dCA9IG51bGw7XG4gIHJldHVybiBkaXNwb3NlO1xufVxuZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQodGVtcGxhdGUpIHtcbiAgbGV0IG5vZGUsIGtleTtcbiAgaWYgKCFzaGFyZWRDb25maWcuY29udGV4dCB8fCAhKG5vZGUgPSBzaGFyZWRDb25maWcucmVnaXN0cnkuZ2V0KChrZXkgPSBnZXRIeWRyYXRpb25LZXkoKSkpKSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZSgpO1xuICB9XG4gIGlmIChzaGFyZWRDb25maWcuY29tcGxldGVkKSBzaGFyZWRDb25maWcuY29tcGxldGVkLmFkZChub2RlKTtcbiAgc2hhcmVkQ29uZmlnLnJlZ2lzdHJ5LmRlbGV0ZShrZXkpO1xuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldE5leHRNYXRjaChlbCwgbm9kZU5hbWUpIHtcbiAgd2hpbGUgKGVsICYmIGVsLmxvY2FsTmFtZSAhPT0gbm9kZU5hbWUpIGVsID0gZWwubmV4dFNpYmxpbmc7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGdldE5leHRNYXJrZXIoc3RhcnQpIHtcbiAgbGV0IGVuZCA9IHN0YXJ0LFxuICAgIGNvdW50ID0gMCxcbiAgICBjdXJyZW50ID0gW107XG4gIGlmIChzaGFyZWRDb25maWcuY29udGV4dCkge1xuICAgIHdoaWxlIChlbmQpIHtcbiAgICAgIGlmIChlbmQubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgICAgY29uc3QgdiA9IGVuZC5ub2RlVmFsdWU7XG4gICAgICAgIGlmICh2ID09PSBcIiRcIikgY291bnQrKztcbiAgICAgICAgZWxzZSBpZiAodiA9PT0gXCIvXCIpIHtcbiAgICAgICAgICBpZiAoY291bnQgPT09IDApIHJldHVybiBbZW5kLCBjdXJyZW50XTtcbiAgICAgICAgICBjb3VudC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXJyZW50LnB1c2goZW5kKTtcbiAgICAgIGVuZCA9IGVuZC5uZXh0U2libGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtlbmQsIGN1cnJlbnRdO1xufVxuZnVuY3Rpb24gcnVuSHlkcmF0aW9uRXZlbnRzKCkge1xuICBpZiAoc2hhcmVkQ29uZmlnLmV2ZW50cyAmJiAhc2hhcmVkQ29uZmlnLmV2ZW50cy5xdWV1ZWQpIHtcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbXBsZXRlZCwgZXZlbnRzIH0gPSBzaGFyZWRDb25maWc7XG4gICAgICBldmVudHMucXVldWVkID0gZmFsc2U7XG4gICAgICB3aGlsZSAoZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBbZWwsIGVdID0gZXZlbnRzWzBdO1xuICAgICAgICBpZiAoIWNvbXBsZXRlZC5oYXMoZWwpKSByZXR1cm47XG4gICAgICAgIGV2ZW50SGFuZGxlcihlKTtcbiAgICAgICAgZXZlbnRzLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2hhcmVkQ29uZmlnLmV2ZW50cy5xdWV1ZWQgPSB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiB0b1Byb3BlcnR5TmFtZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLShbYS16XSkvZywgKF8sIHcpID0+IHcudG9VcHBlckNhc2UoKSk7XG59XG5mdW5jdGlvbiB0b2dnbGVDbGFzc0tleShub2RlLCBrZXksIHZhbHVlKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBrZXkudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gIGZvciAobGV0IGkgPSAwLCBuYW1lTGVuID0gY2xhc3NOYW1lcy5sZW5ndGg7IGkgPCBuYW1lTGVuOyBpKyspXG4gICAgbm9kZS5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZXNbaV0sIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGFzc2lnblByb3Aobm9kZSwgcHJvcCwgdmFsdWUsIHByZXYsIGlzU1ZHLCBza2lwUmVmKSB7XG4gIGxldCBpc0NFLCBpc1Byb3AsIGlzQ2hpbGRQcm9wLCBwcm9wQWxpYXMsIGZvcmNlUHJvcDtcbiAgaWYgKHByb3AgPT09IFwic3R5bGVcIikgcmV0dXJuIHN0eWxlKG5vZGUsIHZhbHVlLCBwcmV2KTtcbiAgaWYgKHByb3AgPT09IFwiY2xhc3NMaXN0XCIpIHJldHVybiBjbGFzc0xpc3Qobm9kZSwgdmFsdWUsIHByZXYpO1xuICBpZiAodmFsdWUgPT09IHByZXYpIHJldHVybiBwcmV2O1xuICBpZiAocHJvcCA9PT0gXCJyZWZcIikge1xuICAgIGlmICghc2tpcFJlZikgdmFsdWUobm9kZSk7XG4gIH0gZWxzZSBpZiAocHJvcC5zbGljZSgwLCAzKSA9PT0gXCJvbjpcIikge1xuICAgIGNvbnN0IGUgPSBwcm9wLnNsaWNlKDMpO1xuICAgIHByZXYgJiYgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGUsIHByZXYpO1xuICAgIHZhbHVlICYmIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocHJvcC5zbGljZSgwLCAxMCkgPT09IFwib25jYXB0dXJlOlwiKSB7XG4gICAgY29uc3QgZSA9IHByb3Auc2xpY2UoMTApO1xuICAgIHByZXYgJiYgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGUsIHByZXYsIHRydWUpO1xuICAgIHZhbHVlICYmIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihlLCB2YWx1ZSwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAocHJvcC5zbGljZSgwLCAyKSA9PT0gXCJvblwiKSB7XG4gICAgY29uc3QgbmFtZSA9IHByb3Auc2xpY2UoMikudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBkZWxlZ2F0ZSA9IERlbGVnYXRlZEV2ZW50cy5oYXMobmFtZSk7XG4gICAgaWYgKCFkZWxlZ2F0ZSAmJiBwcmV2KSB7XG4gICAgICBjb25zdCBoID0gQXJyYXkuaXNBcnJheShwcmV2KSA/IHByZXZbMF0gOiBwcmV2O1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGgpO1xuICAgIH1cbiAgICBpZiAoZGVsZWdhdGUgfHwgdmFsdWUpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgbmFtZSwgdmFsdWUsIGRlbGVnYXRlKTtcbiAgICAgIGRlbGVnYXRlICYmIGRlbGVnYXRlRXZlbnRzKFtuYW1lXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb3Auc2xpY2UoMCwgNSkgPT09IFwiYXR0cjpcIikge1xuICAgIHNldEF0dHJpYnV0ZShub2RlLCBwcm9wLnNsaWNlKDUpLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoXG4gICAgKGZvcmNlUHJvcCA9IHByb3Auc2xpY2UoMCwgNSkgPT09IFwicHJvcDpcIikgfHxcbiAgICAoaXNDaGlsZFByb3AgPSBDaGlsZFByb3BlcnRpZXMuaGFzKHByb3ApKSB8fFxuICAgICghaXNTVkcgJiZcbiAgICAgICgocHJvcEFsaWFzID0gZ2V0UHJvcEFsaWFzKHByb3AsIG5vZGUudGFnTmFtZSkpIHx8IChpc1Byb3AgPSBQcm9wZXJ0aWVzLmhhcyhwcm9wKSkpKSB8fFxuICAgIChpc0NFID0gbm9kZS5ub2RlTmFtZS5pbmNsdWRlcyhcIi1cIikpXG4gICkge1xuICAgIGlmIChmb3JjZVByb3ApIHtcbiAgICAgIHByb3AgPSBwcm9wLnNsaWNlKDUpO1xuICAgICAgaXNQcm9wID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCEhc2hhcmVkQ29uZmlnLmNvbnRleHQgJiYgbm9kZS5pc0Nvbm5lY3RlZCkgcmV0dXJuIHZhbHVlO1xuICAgIGlmIChwcm9wID09PSBcImNsYXNzXCIgfHwgcHJvcCA9PT0gXCJjbGFzc05hbWVcIikgY2xhc3NOYW1lKG5vZGUsIHZhbHVlKTtcbiAgICBlbHNlIGlmIChpc0NFICYmICFpc1Byb3AgJiYgIWlzQ2hpbGRQcm9wKSBub2RlW3RvUHJvcGVydHlOYW1lKHByb3ApXSA9IHZhbHVlO1xuICAgIGVsc2Ugbm9kZVtwcm9wQWxpYXMgfHwgcHJvcF0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBucyA9IGlzU1ZHICYmIHByb3AuaW5kZXhPZihcIjpcIikgPiAtMSAmJiBTVkdOYW1lc3BhY2VbcHJvcC5zcGxpdChcIjpcIilbMF1dO1xuICAgIGlmIChucykgc2V0QXR0cmlidXRlTlMobm9kZSwgbnMsIHByb3AsIHZhbHVlKTtcbiAgICBlbHNlIHNldEF0dHJpYnV0ZShub2RlLCBBbGlhc2VzW3Byb3BdIHx8IHByb3AsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBldmVudEhhbmRsZXIoZSkge1xuICBjb25zdCBrZXkgPSBgJCQke2UudHlwZX1gO1xuICBsZXQgbm9kZSA9IChlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpWzBdKSB8fCBlLnRhcmdldDtcbiAgaWYgKGUudGFyZ2V0ICE9PSBub2RlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwidGFyZ2V0XCIsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBub2RlXG4gICAgfSk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiY3VycmVudFRhcmdldFwiLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBub2RlIHx8IGRvY3VtZW50O1xuICAgIH1cbiAgfSk7XG4gIGlmIChzaGFyZWRDb25maWcucmVnaXN0cnkgJiYgIXNoYXJlZENvbmZpZy5kb25lKSBzaGFyZWRDb25maWcuZG9uZSA9IF8kSFkuZG9uZSA9IHRydWU7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgY29uc3QgaGFuZGxlciA9IG5vZGVba2V5XTtcbiAgICBpZiAoaGFuZGxlciAmJiAhbm9kZS5kaXNhYmxlZCkge1xuICAgICAgY29uc3QgZGF0YSA9IG5vZGVbYCR7a2V5fURhdGFgXTtcbiAgICAgIGRhdGEgIT09IHVuZGVmaW5lZCA/IGhhbmRsZXIuY2FsbChub2RlLCBkYXRhLCBlKSA6IGhhbmRsZXIuY2FsbChub2RlLCBlKTtcbiAgICAgIGlmIChlLmNhbmNlbEJ1YmJsZSkgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5fJGhvc3QgfHwgbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUuaG9zdDtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0RXhwcmVzc2lvbihwYXJlbnQsIHZhbHVlLCBjdXJyZW50LCBtYXJrZXIsIHVud3JhcEFycmF5KSB7XG4gIGNvbnN0IGh5ZHJhdGluZyA9ICEhc2hhcmVkQ29uZmlnLmNvbnRleHQgJiYgcGFyZW50LmlzQ29ubmVjdGVkO1xuICBpZiAoaHlkcmF0aW5nKSB7XG4gICAgIWN1cnJlbnQgJiYgKGN1cnJlbnQgPSBbLi4ucGFyZW50LmNoaWxkTm9kZXNdKTtcbiAgICBsZXQgY2xlYW5lZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZSA9IGN1cnJlbnRbaV07XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLmRhdGEuc2xpY2UoMCwgMikgPT09IFwiISRcIikgbm9kZS5yZW1vdmUoKTtcbiAgICAgIGVsc2UgY2xlYW5lZC5wdXNoKG5vZGUpO1xuICAgIH1cbiAgICBjdXJyZW50ID0gY2xlYW5lZDtcbiAgfVxuICB3aGlsZSAodHlwZW9mIGN1cnJlbnQgPT09IFwiZnVuY3Rpb25cIikgY3VycmVudCA9IGN1cnJlbnQoKTtcbiAgaWYgKHZhbHVlID09PSBjdXJyZW50KSByZXR1cm4gY3VycmVudDtcbiAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZSxcbiAgICBtdWx0aSA9IG1hcmtlciAhPT0gdW5kZWZpbmVkO1xuICBwYXJlbnQgPSAobXVsdGkgJiYgY3VycmVudFswXSAmJiBjdXJyZW50WzBdLnBhcmVudE5vZGUpIHx8IHBhcmVudDtcbiAgaWYgKHQgPT09IFwic3RyaW5nXCIgfHwgdCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChoeWRyYXRpbmcpIHJldHVybiBjdXJyZW50O1xuICAgIGlmICh0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICBpZiAodmFsdWUgPT09IGN1cnJlbnQpIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBpZiAobXVsdGkpIHtcbiAgICAgIGxldCBub2RlID0gY3VycmVudFswXTtcbiAgICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgbm9kZS5kYXRhICE9PSB2YWx1ZSAmJiAobm9kZS5kYXRhID0gdmFsdWUpO1xuICAgICAgfSBlbHNlIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG4gICAgICBjdXJyZW50ID0gY2xlYW5DaGlsZHJlbihwYXJlbnQsIGN1cnJlbnQsIG1hcmtlciwgbm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50ICE9PSBcIlwiICYmIHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGN1cnJlbnQgPSBwYXJlbnQuZmlyc3RDaGlsZC5kYXRhID0gdmFsdWU7XG4gICAgICB9IGVsc2UgY3VycmVudCA9IHBhcmVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgaWYgKGh5ZHJhdGluZykgcmV0dXJuIGN1cnJlbnQ7XG4gICAgY3VycmVudCA9IGNsZWFuQ2hpbGRyZW4ocGFyZW50LCBjdXJyZW50LCBtYXJrZXIpO1xuICB9IGVsc2UgaWYgKHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgdiA9IHZhbHVlKCk7XG4gICAgICB3aGlsZSAodHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIikgdiA9IHYoKTtcbiAgICAgIGN1cnJlbnQgPSBpbnNlcnRFeHByZXNzaW9uKHBhcmVudCwgdiwgY3VycmVudCwgbWFya2VyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gY3VycmVudDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgY29uc3QgY3VycmVudEFycmF5ID0gY3VycmVudCAmJiBBcnJheS5pc0FycmF5KGN1cnJlbnQpO1xuICAgIGlmIChub3JtYWxpemVJbmNvbWluZ0FycmF5KGFycmF5LCB2YWx1ZSwgY3VycmVudCwgdW53cmFwQXJyYXkpKSB7XG4gICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gKGN1cnJlbnQgPSBpbnNlcnRFeHByZXNzaW9uKHBhcmVudCwgYXJyYXksIGN1cnJlbnQsIG1hcmtlciwgdHJ1ZSkpKTtcbiAgICAgIHJldHVybiAoKSA9PiBjdXJyZW50O1xuICAgIH1cbiAgICBpZiAoaHlkcmF0aW5nKSB7XG4gICAgICBpZiAoIWFycmF5Lmxlbmd0aCkgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICBpZiAobWFya2VyID09PSB1bmRlZmluZWQpIHJldHVybiBbLi4ucGFyZW50LmNoaWxkTm9kZXNdO1xuICAgICAgbGV0IG5vZGUgPSBhcnJheVswXTtcbiAgICAgIGxldCBub2RlcyA9IFtub2RlXTtcbiAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpICE9PSBtYXJrZXIpIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICByZXR1cm4gKGN1cnJlbnQgPSBub2Rlcyk7XG4gICAgfVxuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIGN1cnJlbnQgPSBjbGVhbkNoaWxkcmVuKHBhcmVudCwgY3VycmVudCwgbWFya2VyKTtcbiAgICAgIGlmIChtdWx0aSkgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50QXJyYXkpIHtcbiAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBhcHBlbmROb2RlcyhwYXJlbnQsIGFycmF5LCBtYXJrZXIpO1xuICAgICAgfSBlbHNlIHJlY29uY2lsZUFycmF5cyhwYXJlbnQsIGN1cnJlbnQsIGFycmF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCAmJiBjbGVhbkNoaWxkcmVuKHBhcmVudCk7XG4gICAgICBhcHBlbmROb2RlcyhwYXJlbnQsIGFycmF5KTtcbiAgICB9XG4gICAgY3VycmVudCA9IGFycmF5O1xuICB9IGVsc2UgaWYgKHZhbHVlLm5vZGVUeXBlKSB7XG4gICAgaWYgKGh5ZHJhdGluZyAmJiB2YWx1ZS5wYXJlbnROb2RlKSByZXR1cm4gKGN1cnJlbnQgPSBtdWx0aSA/IFt2YWx1ZV0gOiB2YWx1ZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICAgIGlmIChtdWx0aSkgcmV0dXJuIChjdXJyZW50ID0gY2xlYW5DaGlsZHJlbihwYXJlbnQsIGN1cnJlbnQsIG1hcmtlciwgdmFsdWUpKTtcbiAgICAgIGNsZWFuQ2hpbGRyZW4ocGFyZW50LCBjdXJyZW50LCBudWxsLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50ID09IG51bGwgfHwgY3VycmVudCA9PT0gXCJcIiB8fCAhcGFyZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh2YWx1ZSk7XG4gICAgfSBlbHNlIHBhcmVudC5yZXBsYWNlQ2hpbGQodmFsdWUsIHBhcmVudC5maXJzdENoaWxkKTtcbiAgICBjdXJyZW50ID0gdmFsdWU7XG4gIH0gZWxzZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemVJbmNvbWluZ0FycmF5KG5vcm1hbGl6ZWQsIGFycmF5LCBjdXJyZW50LCB1bndyYXApIHtcbiAgbGV0IGR5bmFtaWMgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSBhcnJheVtpXSxcbiAgICAgIHByZXYgPSBjdXJyZW50ICYmIGN1cnJlbnRbbm9ybWFsaXplZC5sZW5ndGhdLFxuICAgICAgdDtcbiAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGl0ZW0gPT09IHRydWUgfHwgaXRlbSA9PT0gZmFsc2UpO1xuICAgIGVsc2UgaWYgKCh0ID0gdHlwZW9mIGl0ZW0pID09PSBcIm9iamVjdFwiICYmIGl0ZW0ubm9kZVR5cGUpIHtcbiAgICAgIG5vcm1hbGl6ZWQucHVzaChpdGVtKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgIGR5bmFtaWMgPSBub3JtYWxpemVJbmNvbWluZ0FycmF5KG5vcm1hbGl6ZWQsIGl0ZW0sIHByZXYpIHx8IGR5bmFtaWM7XG4gICAgfSBlbHNlIGlmICh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh1bndyYXApIHtcbiAgICAgICAgd2hpbGUgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIGl0ZW0gPSBpdGVtKCk7XG4gICAgICAgIGR5bmFtaWMgPVxuICAgICAgICAgIG5vcm1hbGl6ZUluY29taW5nQXJyYXkoXG4gICAgICAgICAgICBub3JtYWxpemVkLFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV0sXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHByZXYpID8gcHJldiA6IFtwcmV2XVxuICAgICAgICAgICkgfHwgZHluYW1pYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1hbGl6ZWQucHVzaChpdGVtKTtcbiAgICAgICAgZHluYW1pYyA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKHByZXYgJiYgcHJldi5ub2RlVHlwZSA9PT0gMyAmJiBwcmV2LmRhdGEgPT09IHZhbHVlKSBub3JtYWxpemVkLnB1c2gocHJldik7XG4gICAgICBlbHNlIG5vcm1hbGl6ZWQucHVzaChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHluYW1pYztcbn1cbmZ1bmN0aW9uIGFwcGVuZE5vZGVzKHBhcmVudCwgYXJyYXksIG1hcmtlciA9IG51bGwpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSBwYXJlbnQuaW5zZXJ0QmVmb3JlKGFycmF5W2ldLCBtYXJrZXIpO1xufVxuZnVuY3Rpb24gY2xlYW5DaGlsZHJlbihwYXJlbnQsIGN1cnJlbnQsIG1hcmtlciwgcmVwbGFjZW1lbnQpIHtcbiAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gKHBhcmVudC50ZXh0Q29udGVudCA9IFwiXCIpO1xuICBjb25zdCBub2RlID0gcmVwbGFjZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gIGlmIChjdXJyZW50Lmxlbmd0aCkge1xuICAgIGxldCBpbnNlcnRlZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSBjdXJyZW50Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBlbCA9IGN1cnJlbnRbaV07XG4gICAgICBpZiAobm9kZSAhPT0gZWwpIHtcbiAgICAgICAgY29uc3QgaXNQYXJlbnQgPSBlbC5wYXJlbnROb2RlID09PSBwYXJlbnQ7XG4gICAgICAgIGlmICghaW5zZXJ0ZWQgJiYgIWkpXG4gICAgICAgICAgaXNQYXJlbnQgPyBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsKSA6IHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgbWFya2VyKTtcbiAgICAgICAgZWxzZSBpc1BhcmVudCAmJiBlbC5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSBpbnNlcnRlZCA9IHRydWU7XG4gICAgfVxuICB9IGVsc2UgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBtYXJrZXIpO1xuICByZXR1cm4gW25vZGVdO1xufVxuZnVuY3Rpb24gZ2F0aGVySHlkcmF0YWJsZShlbGVtZW50LCByb290KSB7XG4gIGNvbnN0IHRlbXBsYXRlcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChgKltkYXRhLWhrXWApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbXBsYXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGUgPSB0ZW1wbGF0ZXNbaV07XG4gICAgY29uc3Qga2V5ID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhrXCIpO1xuICAgIGlmICgoIXJvb3QgfHwga2V5LnN0YXJ0c1dpdGgocm9vdCkpICYmICFzaGFyZWRDb25maWcucmVnaXN0cnkuaGFzKGtleSkpXG4gICAgICBzaGFyZWRDb25maWcucmVnaXN0cnkuc2V0KGtleSwgbm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEh5ZHJhdGlvbktleSgpIHtcbiAgY29uc3QgaHlkcmF0ZSA9IHNoYXJlZENvbmZpZy5jb250ZXh0O1xuICByZXR1cm4gYCR7aHlkcmF0ZS5pZH0ke2h5ZHJhdGUuY291bnQrK31gO1xufVxuZnVuY3Rpb24gTm9IeWRyYXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIHNoYXJlZENvbmZpZy5jb250ZXh0ID8gdW5kZWZpbmVkIDogcHJvcHMuY2hpbGRyZW47XG59XG5mdW5jdGlvbiBIeWRyYXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xufVxuY29uc3Qgdm9pZEZuID0gKCkgPT4gdW5kZWZpbmVkO1xuY29uc3QgUmVxdWVzdENvbnRleHQgPSBTeW1ib2woKTtcbmZ1bmN0aW9uIGlubmVySFRNTChwYXJlbnQsIGNvbnRlbnQpIHtcbiAgIXNoYXJlZENvbmZpZy5jb250ZXh0ICYmIChwYXJlbnQuaW5uZXJIVE1MID0gY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIHRocm93SW5Ccm93c2VyKGZ1bmMpIHtcbiAgY29uc3QgZXJyID0gbmV3IEVycm9yKGAke2Z1bmMubmFtZX0gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgYnJvd3NlciwgcmV0dXJuaW5nIHVuZGVmaW5lZGApO1xuICBjb25zb2xlLmVycm9yKGVycik7XG59XG5mdW5jdGlvbiByZW5kZXJUb1N0cmluZyhmbiwgb3B0aW9ucykge1xuICB0aHJvd0luQnJvd3NlcihyZW5kZXJUb1N0cmluZyk7XG59XG5mdW5jdGlvbiByZW5kZXJUb1N0cmluZ0FzeW5jKGZuLCBvcHRpb25zKSB7XG4gIHRocm93SW5Ccm93c2VyKHJlbmRlclRvU3RyaW5nQXN5bmMpO1xufVxuZnVuY3Rpb24gcmVuZGVyVG9TdHJlYW0oZm4sIG9wdGlvbnMpIHtcbiAgdGhyb3dJbkJyb3dzZXIocmVuZGVyVG9TdHJlYW0pO1xufVxuZnVuY3Rpb24gc3NyKHRlbXBsYXRlLCAuLi5ub2Rlcykge31cbmZ1bmN0aW9uIHNzckVsZW1lbnQobmFtZSwgcHJvcHMsIGNoaWxkcmVuLCBuZWVkc0lkKSB7fVxuZnVuY3Rpb24gc3NyQ2xhc3NMaXN0KHZhbHVlKSB7fVxuZnVuY3Rpb24gc3NyU3R5bGUodmFsdWUpIHt9XG5mdW5jdGlvbiBzc3JBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge31cbmZ1bmN0aW9uIHNzckh5ZHJhdGlvbktleSgpIHt9XG5mdW5jdGlvbiByZXNvbHZlU1NSTm9kZShub2RlKSB7fVxuZnVuY3Rpb24gZXNjYXBlKGh0bWwpIHt9XG5mdW5jdGlvbiBzc3JTcHJlYWQocHJvcHMsIGlzU1ZHLCBza2lwQ2hpbGRyZW4pIHt9XG5cbmNvbnN0IGlzU2VydmVyID0gZmFsc2U7XG5jb25zdCBpc0RldiA9IGZhbHNlO1xuY29uc3QgU1ZHX05BTUVTUEFDRSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgaXNTVkcgPSBmYWxzZSkge1xuICByZXR1cm4gaXNTVkcgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgdGFnTmFtZSkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xufVxuY29uc3QgaHlkcmF0ZSA9ICguLi5hcmdzKSA9PiB7XG4gIGVuYWJsZUh5ZHJhdGlvbigpO1xuICByZXR1cm4gaHlkcmF0ZSQxKC4uLmFyZ3MpO1xufTtcbmZ1bmN0aW9uIFBvcnRhbChwcm9wcykge1xuICBjb25zdCB7IHVzZVNoYWRvdyB9ID0gcHJvcHMsXG4gICAgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIiksXG4gICAgbW91bnQgPSAoKSA9PiBwcm9wcy5tb3VudCB8fCBkb2N1bWVudC5ib2R5LFxuICAgIG93bmVyID0gZ2V0T3duZXIoKTtcbiAgbGV0IGNvbnRlbnQ7XG4gIGxldCBoeWRyYXRpbmcgPSAhIXNoYXJlZENvbmZpZy5jb250ZXh0O1xuICBjcmVhdGVFZmZlY3QoXG4gICAgKCkgPT4ge1xuICAgICAgaWYgKGh5ZHJhdGluZykgZ2V0T3duZXIoKS51c2VyID0gaHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICBjb250ZW50IHx8IChjb250ZW50ID0gcnVuV2l0aE93bmVyKG93bmVyLCAoKSA9PiBjcmVhdGVNZW1vKCgpID0+IHByb3BzLmNoaWxkcmVuKSkpO1xuICAgICAgY29uc3QgZWwgPSBtb3VudCgpO1xuICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTEhlYWRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IFtjbGVhbiwgc2V0Q2xlYW5dID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2xlYW51cCA9ICgpID0+IHNldENsZWFuKHRydWUpO1xuICAgICAgICBjcmVhdGVSb290KGRpc3Bvc2UgPT4gaW5zZXJ0KGVsLCAoKSA9PiAoIWNsZWFuKCkgPyBjb250ZW50KCkgOiBkaXNwb3NlKCkpLCBudWxsKSk7XG4gICAgICAgIG9uQ2xlYW51cChjbGVhbnVwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQocHJvcHMuaXNTVkcgPyBcImdcIiA6IFwiZGl2XCIsIHByb3BzLmlzU1ZHKSxcbiAgICAgICAgICByZW5kZXJSb290ID1cbiAgICAgICAgICAgIHVzZVNoYWRvdyAmJiBjb250YWluZXIuYXR0YWNoU2hhZG93XG4gICAgICAgICAgICAgID8gY29udGFpbmVyLmF0dGFjaFNoYWRvdyh7XG4gICAgICAgICAgICAgICAgICBtb2RlOiBcIm9wZW5cIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDogY29udGFpbmVyO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGFpbmVyLCBcIl8kaG9zdFwiLCB7XG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlci5wYXJlbnROb2RlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpbnNlcnQocmVuZGVyUm9vdCwgY29udGVudCk7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgIHByb3BzLnJlZiAmJiBwcm9wcy5yZWYoY29udGFpbmVyKTtcbiAgICAgICAgb25DbGVhbnVwKCgpID0+IGVsLnJlbW92ZUNoaWxkKGNvbnRhaW5lcikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5kZWZpbmVkLFxuICAgIHtcbiAgICAgIHJlbmRlcjogIWh5ZHJhdGluZ1xuICAgIH1cbiAgKTtcbiAgcmV0dXJuIG1hcmtlcjtcbn1cbmZ1bmN0aW9uIER5bmFtaWMocHJvcHMpIHtcbiAgY29uc3QgW3AsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJjb21wb25lbnRcIl0pO1xuICBjb25zdCBjYWNoZWQgPSBjcmVhdGVNZW1vKCgpID0+IHAuY29tcG9uZW50KTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGNhY2hlZCgpO1xuICAgIHN3aXRjaCAodHlwZW9mIGNvbXBvbmVudCkge1xuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIHJldHVybiB1bnRyYWNrKCgpID0+IGNvbXBvbmVudChvdGhlcnMpKTtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgY29uc3QgaXNTdmcgPSBTVkdFbGVtZW50cy5oYXMoY29tcG9uZW50KTtcbiAgICAgICAgY29uc3QgZWwgPSBzaGFyZWRDb25maWcuY29udGV4dCA/IGdldE5leHRFbGVtZW50KCkgOiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgaXNTdmcpO1xuICAgICAgICBzcHJlYWQoZWwsIG90aGVycywgaXNTdmcpO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHtcbiAgQWxpYXNlcyxcbiAgdm9pZEZuIGFzIEFzc2V0cyxcbiAgQ2hpbGRQcm9wZXJ0aWVzLFxuICBET01FbGVtZW50cyxcbiAgRGVsZWdhdGVkRXZlbnRzLFxuICBEeW5hbWljLFxuICBIeWRyYXRpb24sXG4gIHZvaWRGbiBhcyBIeWRyYXRpb25TY3JpcHQsXG4gIE5vSHlkcmF0aW9uLFxuICBQb3J0YWwsXG4gIFByb3BlcnRpZXMsXG4gIFJlcXVlc3RDb250ZXh0LFxuICBTVkdFbGVtZW50cyxcbiAgU1ZHTmFtZXNwYWNlLFxuICBhZGRFdmVudExpc3RlbmVyLFxuICBhc3NpZ24sXG4gIGNsYXNzTGlzdCxcbiAgY2xhc3NOYW1lLFxuICBjbGVhckRlbGVnYXRlZEV2ZW50cyxcbiAgZGVsZWdhdGVFdmVudHMsXG4gIGR5bmFtaWNQcm9wZXJ0eSxcbiAgZXNjYXBlLFxuICB2b2lkRm4gYXMgZ2VuZXJhdGVIeWRyYXRpb25TY3JpcHQsXG4gIHZvaWRGbiBhcyBnZXRBc3NldHMsXG4gIGdldEh5ZHJhdGlvbktleSxcbiAgZ2V0TmV4dEVsZW1lbnQsXG4gIGdldE5leHRNYXJrZXIsXG4gIGdldE5leHRNYXRjaCxcbiAgZ2V0UHJvcEFsaWFzLFxuICB2b2lkRm4gYXMgZ2V0UmVxdWVzdEV2ZW50LFxuICBoeWRyYXRlLFxuICBpbm5lckhUTUwsXG4gIGluc2VydCxcbiAgaXNEZXYsXG4gIGlzU2VydmVyLFxuICByZW5kZXIsXG4gIHJlbmRlclRvU3RyZWFtLFxuICByZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdHJpbmdBc3luYyxcbiAgcmVzb2x2ZVNTUk5vZGUsXG4gIHJ1bkh5ZHJhdGlvbkV2ZW50cyxcbiAgc2V0QXR0cmlidXRlLFxuICBzZXRBdHRyaWJ1dGVOUyxcbiAgc2V0UHJvcGVydHksXG4gIHNwcmVhZCxcbiAgc3NyLFxuICBzc3JBdHRyaWJ1dGUsXG4gIHNzckNsYXNzTGlzdCxcbiAgc3NyRWxlbWVudCxcbiAgc3NySHlkcmF0aW9uS2V5LFxuICBzc3JTcHJlYWQsXG4gIHNzclN0eWxlLFxuICBzdHlsZSxcbiAgdGVtcGxhdGUsXG4gIHVzZSxcbiAgdm9pZEZuIGFzIHVzZUFzc2V0c1xufTtcbiIsImltcG9ydCB7ICRQUk9YWSwgJFRSQUNLLCBnZXRMaXN0ZW5lciwgYmF0Y2gsIGNyZWF0ZVNpZ25hbCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuXG5jb25zdCAkUkFXID0gU3ltYm9sKFwic3RvcmUtcmF3XCIpLFxuICAkTk9ERSA9IFN5bWJvbChcInN0b3JlLW5vZGVcIiksXG4gICRIQVMgPSBTeW1ib2woXCJzdG9yZS1oYXNcIiksXG4gICRTRUxGID0gU3ltYm9sKFwic3RvcmUtc2VsZlwiKTtcbmZ1bmN0aW9uIHdyYXAkMSh2YWx1ZSkge1xuICBsZXQgcCA9IHZhbHVlWyRQUk9YWV07XG4gIGlmICghcCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJFBST1hZLCB7XG4gICAgICB2YWx1ZTogKHAgPSBuZXcgUHJveHkodmFsdWUsIHByb3h5VHJhcHMkMSkpXG4gICAgfSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKSxcbiAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHZhbHVlKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IGtleXNbaV07XG4gICAgICAgIGlmIChkZXNjW3Byb3BdLmdldCkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgcHJvcCwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZGVzY1twcm9wXS5lbnVtZXJhYmxlLFxuICAgICAgICAgICAgZ2V0OiBkZXNjW3Byb3BdLmdldC5iaW5kKHApXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHA7XG59XG5mdW5jdGlvbiBpc1dyYXBwYWJsZShvYmopIHtcbiAgbGV0IHByb3RvO1xuICByZXR1cm4gKFxuICAgIG9iaiAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgIChvYmpbJFBST1hZXSB8fFxuICAgICAgIShwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSB8fFxuICAgICAgcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHxcbiAgICAgIEFycmF5LmlzQXJyYXkob2JqKSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHVud3JhcChpdGVtLCBzZXQgPSBuZXcgU2V0KCkpIHtcbiAgbGV0IHJlc3VsdCwgdW53cmFwcGVkLCB2LCBwcm9wO1xuICBpZiAoKHJlc3VsdCA9IGl0ZW0gIT0gbnVsbCAmJiBpdGVtWyRSQVddKSkgcmV0dXJuIHJlc3VsdDtcbiAgaWYgKCFpc1dyYXBwYWJsZShpdGVtKSB8fCBzZXQuaGFzKGl0ZW0pKSByZXR1cm4gaXRlbTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGl0ZW0pKSBpdGVtID0gaXRlbS5zbGljZSgwKTtcbiAgICBlbHNlIHNldC5hZGQoaXRlbSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBpdGVtLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdiA9IGl0ZW1baV07XG4gICAgICBpZiAoKHVud3JhcHBlZCA9IHVud3JhcCh2LCBzZXQpKSAhPT0gdikgaXRlbVtpXSA9IHVud3JhcHBlZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbihpdGVtKSkgaXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgIGVsc2Ugc2V0LmFkZChpdGVtKTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaXRlbSksXG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoaXRlbSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcHJvcCA9IGtleXNbaV07XG4gICAgICBpZiAoZGVzY1twcm9wXS5nZXQpIGNvbnRpbnVlO1xuICAgICAgdiA9IGl0ZW1bcHJvcF07XG4gICAgICBpZiAoKHVud3JhcHBlZCA9IHVud3JhcCh2LCBzZXQpKSAhPT0gdikgaXRlbVtwcm9wXSA9IHVud3JhcHBlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5mdW5jdGlvbiBnZXROb2Rlcyh0YXJnZXQsIHN5bWJvbCkge1xuICBsZXQgbm9kZXMgPSB0YXJnZXRbc3ltYm9sXTtcbiAgaWYgKCFub2RlcylcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBzeW1ib2wsIHtcbiAgICAgIHZhbHVlOiAobm9kZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpKVxuICAgIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG5mdW5jdGlvbiBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKG5vZGVzW3Byb3BlcnR5XSkgcmV0dXJuIG5vZGVzW3Byb3BlcnR5XTtcbiAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwodmFsdWUsIHtcbiAgICBlcXVhbHM6IGZhbHNlLFxuICAgIGludGVybmFsOiB0cnVlXG4gIH0pO1xuICBzLiQgPSBzZXQ7XG4gIHJldHVybiAobm9kZXNbcHJvcGVydHldID0gcyk7XG59XG5mdW5jdGlvbiBwcm94eURlc2NyaXB0b3IkMSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IGRlc2MgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgaWYgKCFkZXNjIHx8IGRlc2MuZ2V0IHx8ICFkZXNjLmNvbmZpZ3VyYWJsZSB8fCBwcm9wZXJ0eSA9PT0gJFBST1hZIHx8IHByb3BlcnR5ID09PSAkTk9ERSlcbiAgICByZXR1cm4gZGVzYztcbiAgZGVsZXRlIGRlc2MudmFsdWU7XG4gIGRlbGV0ZSBkZXNjLndyaXRhYmxlO1xuICBkZXNjLmdldCA9ICgpID0+IHRhcmdldFskUFJPWFldW3Byb3BlcnR5XTtcbiAgcmV0dXJuIGRlc2M7XG59XG5mdW5jdGlvbiB0cmFja1NlbGYodGFyZ2V0KSB7XG4gIGdldExpc3RlbmVyKCkgJiYgZ2V0Tm9kZShnZXROb2Rlcyh0YXJnZXQsICROT0RFKSwgJFNFTEYpKCk7XG59XG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xuICB0cmFja1NlbGYodGFyZ2V0KTtcbiAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xufVxuY29uc3QgcHJveHlUcmFwcyQxID0ge1xuICBnZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICRSQVcpIHJldHVybiB0YXJnZXQ7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUFJPWFkpIHJldHVybiByZWNlaXZlcjtcbiAgICBpZiAocHJvcGVydHkgPT09ICRUUkFDSykge1xuICAgICAgdHJhY2tTZWxmKHRhcmdldCk7XG4gICAgICByZXR1cm4gcmVjZWl2ZXI7XG4gICAgfVxuICAgIGNvbnN0IG5vZGVzID0gZ2V0Tm9kZXModGFyZ2V0LCAkTk9ERSk7XG4gICAgY29uc3QgdHJhY2tlZCA9IG5vZGVzW3Byb3BlcnR5XTtcbiAgICBsZXQgdmFsdWUgPSB0cmFja2VkID8gdHJhY2tlZCgpIDogdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHkgPT09ICROT0RFIHx8IHByb3BlcnR5ID09PSAkSEFTIHx8IHByb3BlcnR5ID09PSBcIl9fcHJvdG9fX1wiKSByZXR1cm4gdmFsdWU7XG4gICAgaWYgKCF0cmFja2VkKSB7XG4gICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgICAgIGlmIChcbiAgICAgICAgZ2V0TGlzdGVuZXIoKSAmJlxuICAgICAgICAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIgfHwgdGFyZ2V0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgJiZcbiAgICAgICAgIShkZXNjICYmIGRlc2MuZ2V0KVxuICAgICAgKVxuICAgICAgICB2YWx1ZSA9IGdldE5vZGUobm9kZXMsIHByb3BlcnR5LCB2YWx1ZSkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzV3JhcHBhYmxlKHZhbHVlKSA/IHdyYXAkMSh2YWx1ZSkgOiB2YWx1ZTtcbiAgfSxcbiAgaGFzKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBpZiAoXG4gICAgICBwcm9wZXJ0eSA9PT0gJFJBVyB8fFxuICAgICAgcHJvcGVydHkgPT09ICRQUk9YWSB8fFxuICAgICAgcHJvcGVydHkgPT09ICRUUkFDSyB8fFxuICAgICAgcHJvcGVydHkgPT09ICROT0RFIHx8XG4gICAgICBwcm9wZXJ0eSA9PT0gJEhBUyB8fFxuICAgICAgcHJvcGVydHkgPT09IFwiX19wcm90b19fXCJcbiAgICApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBnZXRMaXN0ZW5lcigpICYmIGdldE5vZGUoZ2V0Tm9kZXModGFyZ2V0LCAkSEFTKSwgcHJvcGVydHkpKCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRhcmdldDtcbiAgfSxcbiAgc2V0KCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb3duS2V5czogb3duS2V5cyxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBwcm94eURlc2NyaXB0b3IkMVxufTtcbmZ1bmN0aW9uIHNldFByb3BlcnR5KHN0YXRlLCBwcm9wZXJ0eSwgdmFsdWUsIGRlbGV0aW5nID0gZmFsc2UpIHtcbiAgaWYgKCFkZWxldGluZyAmJiBzdGF0ZVtwcm9wZXJ0eV0gPT09IHZhbHVlKSByZXR1cm47XG4gIGNvbnN0IHByZXYgPSBzdGF0ZVtwcm9wZXJ0eV0sXG4gICAgbGVuID0gc3RhdGUubGVuZ3RoO1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBzdGF0ZVtwcm9wZXJ0eV07XG4gICAgaWYgKHN0YXRlWyRIQVNdICYmIHN0YXRlWyRIQVNdW3Byb3BlcnR5XSAmJiBwcmV2ICE9PSB1bmRlZmluZWQpIHN0YXRlWyRIQVNdW3Byb3BlcnR5XS4kKCk7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgaWYgKHN0YXRlWyRIQVNdICYmIHN0YXRlWyRIQVNdW3Byb3BlcnR5XSAmJiBwcmV2ID09PSB1bmRlZmluZWQpIHN0YXRlWyRIQVNdW3Byb3BlcnR5XS4kKCk7XG4gIH1cbiAgbGV0IG5vZGVzID0gZ2V0Tm9kZXMoc3RhdGUsICROT0RFKSxcbiAgICBub2RlO1xuICBpZiAoKG5vZGUgPSBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgcHJldikpKSBub2RlLiQoKCkgPT4gdmFsdWUpO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdGF0ZSkgJiYgc3RhdGUubGVuZ3RoICE9PSBsZW4pIHtcbiAgICBmb3IgKGxldCBpID0gc3RhdGUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIChub2RlID0gbm9kZXNbaV0pICYmIG5vZGUuJCgpO1xuICAgIChub2RlID0gZ2V0Tm9kZShub2RlcywgXCJsZW5ndGhcIiwgbGVuKSkgJiYgbm9kZS4kKHN0YXRlLmxlbmd0aCk7XG4gIH1cbiAgKG5vZGUgPSBub2Rlc1skU0VMRl0pICYmIG5vZGUuJCgpO1xufVxuZnVuY3Rpb24gbWVyZ2VTdG9yZU5vZGUoc3RhdGUsIHZhbHVlKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgc2V0UHJvcGVydHkoc3RhdGUsIGtleSwgdmFsdWVba2V5XSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUFycmF5KGN1cnJlbnQsIG5leHQpIHtcbiAgaWYgKHR5cGVvZiBuZXh0ID09PSBcImZ1bmN0aW9uXCIpIG5leHQgPSBuZXh0KGN1cnJlbnQpO1xuICBuZXh0ID0gdW53cmFwKG5leHQpO1xuICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIGlmIChjdXJyZW50ID09PSBuZXh0KSByZXR1cm47XG4gICAgbGV0IGkgPSAwLFxuICAgICAgbGVuID0gbmV4dC5sZW5ndGg7XG4gICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBuZXh0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRbaV0gIT09IHZhbHVlKSBzZXRQcm9wZXJ0eShjdXJyZW50LCBpLCB2YWx1ZSk7XG4gICAgfVxuICAgIHNldFByb3BlcnR5KGN1cnJlbnQsIFwibGVuZ3RoXCIsIGxlbik7XG4gIH0gZWxzZSBtZXJnZVN0b3JlTm9kZShjdXJyZW50LCBuZXh0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVBhdGgoY3VycmVudCwgcGF0aCwgdHJhdmVyc2VkID0gW10pIHtcbiAgbGV0IHBhcnQsXG4gICAgcHJldiA9IGN1cnJlbnQ7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDEpIHtcbiAgICBwYXJ0ID0gcGF0aC5zaGlmdCgpO1xuICAgIGNvbnN0IHBhcnRUeXBlID0gdHlwZW9mIHBhcnQsXG4gICAgICBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShjdXJyZW50KTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJ0KSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVwZGF0ZVBhdGgoY3VycmVudCwgW3BhcnRbaV1dLmNvbmNhdChwYXRoKSwgdHJhdmVyc2VkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkgJiYgcGFydFR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJ0KGN1cnJlbnRbaV0sIGkpKSB1cGRhdGVQYXRoKGN1cnJlbnQsIFtpXS5jb25jYXQocGF0aCksIHRyYXZlcnNlZCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChpc0FycmF5ICYmIHBhcnRUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCB7IGZyb20gPSAwLCB0byA9IGN1cnJlbnQubGVuZ3RoIC0gMSwgYnkgPSAxIH0gPSBwYXJ0O1xuICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gYnkpIHtcbiAgICAgICAgdXBkYXRlUGF0aChjdXJyZW50LCBbaV0uY29uY2F0KHBhdGgpLCB0cmF2ZXJzZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICB1cGRhdGVQYXRoKGN1cnJlbnRbcGFydF0sIHBhdGgsIFtwYXJ0XS5jb25jYXQodHJhdmVyc2VkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByZXYgPSBjdXJyZW50W3BhcnRdO1xuICAgIHRyYXZlcnNlZCA9IFtwYXJ0XS5jb25jYXQodHJhdmVyc2VkKTtcbiAgfVxuICBsZXQgdmFsdWUgPSBwYXRoWzBdO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YWx1ZSA9IHZhbHVlKHByZXYsIHRyYXZlcnNlZCk7XG4gICAgaWYgKHZhbHVlID09PSBwcmV2KSByZXR1cm47XG4gIH1cbiAgaWYgKHBhcnQgPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybjtcbiAgdmFsdWUgPSB1bndyYXAodmFsdWUpO1xuICBpZiAocGFydCA9PT0gdW5kZWZpbmVkIHx8IChpc1dyYXBwYWJsZShwcmV2KSAmJiBpc1dyYXBwYWJsZSh2YWx1ZSkgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSkge1xuICAgIG1lcmdlU3RvcmVOb2RlKHByZXYsIHZhbHVlKTtcbiAgfSBlbHNlIHNldFByb3BlcnR5KGN1cnJlbnQsIHBhcnQsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKC4uLltzdG9yZSwgb3B0aW9uc10pIHtcbiAgY29uc3QgdW53cmFwcGVkU3RvcmUgPSB1bndyYXAoc3RvcmUgfHwge30pO1xuICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSh1bndyYXBwZWRTdG9yZSk7XG4gIGNvbnN0IHdyYXBwZWRTdG9yZSA9IHdyYXAkMSh1bndyYXBwZWRTdG9yZSk7XG4gIGZ1bmN0aW9uIHNldFN0b3JlKC4uLmFyZ3MpIHtcbiAgICBiYXRjaCgoKSA9PiB7XG4gICAgICBpc0FycmF5ICYmIGFyZ3MubGVuZ3RoID09PSAxXG4gICAgICAgID8gdXBkYXRlQXJyYXkodW53cmFwcGVkU3RvcmUsIGFyZ3NbMF0pXG4gICAgICAgIDogdXBkYXRlUGF0aCh1bndyYXBwZWRTdG9yZSwgYXJncyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFt3cmFwcGVkU3RvcmUsIHNldFN0b3JlXTtcbn1cblxuZnVuY3Rpb24gcHJveHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgY29uc3QgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpO1xuICBpZiAoXG4gICAgIWRlc2MgfHxcbiAgICBkZXNjLmdldCB8fFxuICAgIGRlc2Muc2V0IHx8XG4gICAgIWRlc2MuY29uZmlndXJhYmxlIHx8XG4gICAgcHJvcGVydHkgPT09ICRQUk9YWSB8fFxuICAgIHByb3BlcnR5ID09PSAkTk9ERVxuICApXG4gICAgcmV0dXJuIGRlc2M7XG4gIGRlbGV0ZSBkZXNjLnZhbHVlO1xuICBkZWxldGUgZGVzYy53cml0YWJsZTtcbiAgZGVzYy5nZXQgPSAoKSA9PiB0YXJnZXRbJFBST1hZXVtwcm9wZXJ0eV07XG4gIGRlc2Muc2V0ID0gdiA9PiAodGFyZ2V0WyRQUk9YWV1bcHJvcGVydHldID0gdik7XG4gIHJldHVybiBkZXNjO1xufVxuY29uc3QgcHJveHlUcmFwcyA9IHtcbiAgZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUkFXKSByZXR1cm4gdGFyZ2V0O1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJFBST1hZKSByZXR1cm4gcmVjZWl2ZXI7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkVFJBQ0spIHtcbiAgICAgIHRyYWNrU2VsZih0YXJnZXQpO1xuICAgICAgcmV0dXJuIHJlY2VpdmVyO1xuICAgIH1cbiAgICBjb25zdCBub2RlcyA9IGdldE5vZGVzKHRhcmdldCwgJE5PREUpO1xuICAgIGNvbnN0IHRyYWNrZWQgPSBub2Rlc1twcm9wZXJ0eV07XG4gICAgbGV0IHZhbHVlID0gdHJhY2tlZCA/IHRyYWNrZWQoKSA6IHRhcmdldFtwcm9wZXJ0eV07XG4gICAgaWYgKHByb3BlcnR5ID09PSAkTk9ERSB8fCBwcm9wZXJ0eSA9PT0gJEhBUyB8fCBwcm9wZXJ0eSA9PT0gXCJfX3Byb3RvX19cIikgcmV0dXJuIHZhbHVlO1xuICAgIGlmICghdHJhY2tlZCkge1xuICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBjb25zdCBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICBpZiAoZ2V0TGlzdGVuZXIoKSAmJiAoIWlzRnVuY3Rpb24gfHwgdGFyZ2V0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgJiYgIShkZXNjICYmIGRlc2MuZ2V0KSlcbiAgICAgICAgdmFsdWUgPSBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgdmFsdWUpKCk7XG4gICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsICYmIGlzRnVuY3Rpb24gJiYgdmFsdWUgPT09IEFycmF5LnByb3RvdHlwZVtwcm9wZXJ0eV0pIHtcbiAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiBiYXRjaCgoKSA9PiBBcnJheS5wcm90b3R5cGVbcHJvcGVydHldLmFwcGx5KHJlY2VpdmVyLCBhcmdzKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc1dyYXBwYWJsZSh2YWx1ZSkgPyB3cmFwKHZhbHVlKSA6IHZhbHVlO1xuICB9LFxuICBoYXModGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGlmIChcbiAgICAgIHByb3BlcnR5ID09PSAkUkFXIHx8XG4gICAgICBwcm9wZXJ0eSA9PT0gJFBST1hZIHx8XG4gICAgICBwcm9wZXJ0eSA9PT0gJFRSQUNLIHx8XG4gICAgICBwcm9wZXJ0eSA9PT0gJE5PREUgfHxcbiAgICAgIHByb3BlcnR5ID09PSAkSEFTIHx8XG4gICAgICBwcm9wZXJ0eSA9PT0gXCJfX3Byb3RvX19cIlxuICAgIClcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGdldExpc3RlbmVyKCkgJiYgZ2V0Tm9kZShnZXROb2Rlcyh0YXJnZXQsICRIQVMpLCBwcm9wZXJ0eSkoKTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGFyZ2V0O1xuICB9LFxuICBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBiYXRjaCgoKSA9PiBzZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bndyYXAodmFsdWUpKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBiYXRjaCgoKSA9PiBzZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bmRlZmluZWQsIHRydWUpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb3duS2V5czogb3duS2V5cyxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBwcm94eURlc2NyaXB0b3Jcbn07XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gIGxldCBwID0gdmFsdWVbJFBST1hZXTtcbiAgaWYgKCFwKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAkUFJPWFksIHtcbiAgICAgIHZhbHVlOiAocCA9IG5ldyBQcm94eSh2YWx1ZSwgcHJveHlUcmFwcykpXG4gICAgfSk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKSxcbiAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh2YWx1ZSk7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgIGNvbnN0IGlzQ2xhc3MgPVxuICAgICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmXG4gICAgICBwcm90byAhPT0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICBpZiAoaXNDbGFzcykge1xuICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhwcm90byk7XG4gICAgICBrZXlzLnB1c2goLi4uT2JqZWN0LmtleXMoZGVzY3JpcHRvcnMpKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oZGVzYywgZGVzY3JpcHRvcnMpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBwcm9wID0ga2V5c1tpXTtcbiAgICAgIGlmIChpc0NsYXNzICYmIHByb3AgPT09IFwiY29uc3RydWN0b3JcIikgY29udGludWU7XG4gICAgICBpZiAoZGVzY1twcm9wXS5nZXQpIHtcbiAgICAgICAgY29uc3QgZ2V0ID0gZGVzY1twcm9wXS5nZXQuYmluZChwKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCBwcm9wLCB7XG4gICAgICAgICAgZ2V0LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXNjW3Byb3BdLnNldCkge1xuICAgICAgICBjb25zdCBvZyA9IGRlc2NbcHJvcF0uc2V0LFxuICAgICAgICAgIHNldCA9IHYgPT4gYmF0Y2goKCkgPT4gb2cuY2FsbChwLCB2KSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgcHJvcCwge1xuICAgICAgICAgIHNldCxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwO1xufVxuZnVuY3Rpb24gY3JlYXRlTXV0YWJsZShzdGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCB1bndyYXBwZWRTdG9yZSA9IHVud3JhcChzdGF0ZSB8fCB7fSk7XG4gIGNvbnN0IHdyYXBwZWRTdG9yZSA9IHdyYXAodW53cmFwcGVkU3RvcmUpO1xuICByZXR1cm4gd3JhcHBlZFN0b3JlO1xufVxuZnVuY3Rpb24gbW9kaWZ5TXV0YWJsZShzdGF0ZSwgbW9kaWZpZXIpIHtcbiAgYmF0Y2goKCkgPT4gbW9kaWZpZXIodW53cmFwKHN0YXRlKSkpO1xufVxuXG5jb25zdCAkUk9PVCA9IFN5bWJvbChcInN0b3JlLXJvb3RcIik7XG5mdW5jdGlvbiBhcHBseVN0YXRlKHRhcmdldCwgcGFyZW50LCBwcm9wZXJ0eSwgbWVyZ2UsIGtleSkge1xuICBjb25zdCBwcmV2aW91cyA9IHBhcmVudFtwcm9wZXJ0eV07XG4gIGlmICh0YXJnZXQgPT09IHByZXZpb3VzKSByZXR1cm47XG4gIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG4gIGlmIChcbiAgICBwcm9wZXJ0eSAhPT0gJFJPT1QgJiZcbiAgICAoIWlzV3JhcHBhYmxlKHRhcmdldCkgfHxcbiAgICAgICFpc1dyYXBwYWJsZShwcmV2aW91cykgfHxcbiAgICAgIGlzQXJyYXkgIT09IEFycmF5LmlzQXJyYXkocHJldmlvdXMpIHx8XG4gICAgICAoa2V5ICYmIHRhcmdldFtrZXldICE9PSBwcmV2aW91c1trZXldKSlcbiAgKSB7XG4gICAgc2V0UHJvcGVydHkocGFyZW50LCBwcm9wZXJ0eSwgdGFyZ2V0KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzQXJyYXkpIHtcbiAgICBpZiAoXG4gICAgICB0YXJnZXQubGVuZ3RoICYmXG4gICAgICBwcmV2aW91cy5sZW5ndGggJiZcbiAgICAgICghbWVyZ2UgfHwgKGtleSAmJiB0YXJnZXRbMF0gJiYgdGFyZ2V0WzBdW2tleV0gIT0gbnVsbCkpXG4gICAgKSB7XG4gICAgICBsZXQgaSwgaiwgc3RhcnQsIGVuZCwgbmV3RW5kLCBpdGVtLCBuZXdJbmRpY2VzTmV4dCwga2V5VmFsO1xuICAgICAgZm9yIChcbiAgICAgICAgc3RhcnQgPSAwLCBlbmQgPSBNYXRoLm1pbihwcmV2aW91cy5sZW5ndGgsIHRhcmdldC5sZW5ndGgpO1xuICAgICAgICBzdGFydCA8IGVuZCAmJlxuICAgICAgICAocHJldmlvdXNbc3RhcnRdID09PSB0YXJnZXRbc3RhcnRdIHx8XG4gICAgICAgICAgKGtleSAmJiBwcmV2aW91c1tzdGFydF0gJiYgdGFyZ2V0W3N0YXJ0XSAmJiBwcmV2aW91c1tzdGFydF1ba2V5XSA9PT0gdGFyZ2V0W3N0YXJ0XVtrZXldKSk7XG4gICAgICAgIHN0YXJ0KytcbiAgICAgICkge1xuICAgICAgICBhcHBseVN0YXRlKHRhcmdldFtzdGFydF0sIHByZXZpb3VzLCBzdGFydCwgbWVyZ2UsIGtleSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0ZW1wID0gbmV3IEFycmF5KHRhcmdldC5sZW5ndGgpLFxuICAgICAgICBuZXdJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgICAgZm9yIChcbiAgICAgICAgZW5kID0gcHJldmlvdXMubGVuZ3RoIC0gMSwgbmV3RW5kID0gdGFyZ2V0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGVuZCA+PSBzdGFydCAmJlxuICAgICAgICBuZXdFbmQgPj0gc3RhcnQgJiZcbiAgICAgICAgKHByZXZpb3VzW2VuZF0gPT09IHRhcmdldFtuZXdFbmRdIHx8XG4gICAgICAgICAgKGtleSAmJiBwcmV2aW91c1tzdGFydF0gJiYgdGFyZ2V0W3N0YXJ0XSAmJiBwcmV2aW91c1tlbmRdW2tleV0gPT09IHRhcmdldFtuZXdFbmRdW2tleV0pKTtcbiAgICAgICAgZW5kLS0sIG5ld0VuZC0tXG4gICAgICApIHtcbiAgICAgICAgdGVtcFtuZXdFbmRdID0gcHJldmlvdXNbZW5kXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA+IG5ld0VuZCB8fCBzdGFydCA+IGVuZCkge1xuICAgICAgICBmb3IgKGogPSBzdGFydDsgaiA8PSBuZXdFbmQ7IGorKykgc2V0UHJvcGVydHkocHJldmlvdXMsIGosIHRhcmdldFtqXSk7XG4gICAgICAgIGZvciAoOyBqIDwgdGFyZ2V0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2V0UHJvcGVydHkocHJldmlvdXMsIGosIHRlbXBbal0pO1xuICAgICAgICAgIGFwcGx5U3RhdGUodGFyZ2V0W2pdLCBwcmV2aW91cywgaiwgbWVyZ2UsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZpb3VzLmxlbmd0aCA+IHRhcmdldC5sZW5ndGgpIHNldFByb3BlcnR5KHByZXZpb3VzLCBcImxlbmd0aFwiLCB0YXJnZXQubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbmV3SW5kaWNlc05leHQgPSBuZXcgQXJyYXkobmV3RW5kICsgMSk7XG4gICAgICBmb3IgKGogPSBuZXdFbmQ7IGogPj0gc3RhcnQ7IGotLSkge1xuICAgICAgICBpdGVtID0gdGFyZ2V0W2pdO1xuICAgICAgICBrZXlWYWwgPSBrZXkgJiYgaXRlbSA/IGl0ZW1ba2V5XSA6IGl0ZW07XG4gICAgICAgIGkgPSBuZXdJbmRpY2VzLmdldChrZXlWYWwpO1xuICAgICAgICBuZXdJbmRpY2VzTmV4dFtqXSA9IGkgPT09IHVuZGVmaW5lZCA/IC0xIDogaTtcbiAgICAgICAgbmV3SW5kaWNlcy5zZXQoa2V5VmFsLCBqKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBwcmV2aW91c1tpXTtcbiAgICAgICAga2V5VmFsID0ga2V5ICYmIGl0ZW0gPyBpdGVtW2tleV0gOiBpdGVtO1xuICAgICAgICBqID0gbmV3SW5kaWNlcy5nZXQoa2V5VmFsKTtcbiAgICAgICAgaWYgKGogIT09IHVuZGVmaW5lZCAmJiBqICE9PSAtMSkge1xuICAgICAgICAgIHRlbXBbal0gPSBwcmV2aW91c1tpXTtcbiAgICAgICAgICBqID0gbmV3SW5kaWNlc05leHRbal07XG4gICAgICAgICAgbmV3SW5kaWNlcy5zZXQoa2V5VmFsLCBqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChqID0gc3RhcnQ7IGogPCB0YXJnZXQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKGogaW4gdGVtcCkge1xuICAgICAgICAgIHNldFByb3BlcnR5KHByZXZpb3VzLCBqLCB0ZW1wW2pdKTtcbiAgICAgICAgICBhcHBseVN0YXRlKHRhcmdldFtqXSwgcHJldmlvdXMsIGosIG1lcmdlLCBrZXkpO1xuICAgICAgICB9IGVsc2Ugc2V0UHJvcGVydHkocHJldmlvdXMsIGosIHRhcmdldFtqXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0YXJnZXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgYXBwbHlTdGF0ZSh0YXJnZXRbaV0sIHByZXZpb3VzLCBpLCBtZXJnZSwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXZpb3VzLmxlbmd0aCA+IHRhcmdldC5sZW5ndGgpIHNldFByb3BlcnR5KHByZXZpb3VzLCBcImxlbmd0aFwiLCB0YXJnZXQubGVuZ3RoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdGFyZ2V0S2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0YXJnZXRLZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXBwbHlTdGF0ZSh0YXJnZXRbdGFyZ2V0S2V5c1tpXV0sIHByZXZpb3VzLCB0YXJnZXRLZXlzW2ldLCBtZXJnZSwga2V5KTtcbiAgfVxuICBjb25zdCBwcmV2aW91c0tleXMgPSBPYmplY3Qua2V5cyhwcmV2aW91cyk7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcmV2aW91c0tleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAodGFyZ2V0W3ByZXZpb3VzS2V5c1tpXV0gPT09IHVuZGVmaW5lZCkgc2V0UHJvcGVydHkocHJldmlvdXMsIHByZXZpb3VzS2V5c1tpXSwgdW5kZWZpbmVkKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVjb25jaWxlKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBtZXJnZSwga2V5ID0gXCJpZFwiIH0gPSBvcHRpb25zLFxuICAgIHYgPSB1bndyYXAodmFsdWUpO1xuICByZXR1cm4gc3RhdGUgPT4ge1xuICAgIGlmICghaXNXcmFwcGFibGUoc3RhdGUpIHx8ICFpc1dyYXBwYWJsZSh2KSkgcmV0dXJuIHY7XG4gICAgY29uc3QgcmVzID0gYXBwbHlTdGF0ZShcbiAgICAgIHYsXG4gICAgICB7XG4gICAgICAgIFskUk9PVF06IHN0YXRlXG4gICAgICB9LFxuICAgICAgJFJPT1QsXG4gICAgICBtZXJnZSxcbiAgICAgIGtleVxuICAgICk7XG4gICAgcmV0dXJuIHJlcyA9PT0gdW5kZWZpbmVkID8gc3RhdGUgOiByZXM7XG4gIH07XG59XG5jb25zdCBwcm9kdWNlcnMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2V0dGVyVHJhcHMgPSB7XG4gIGdldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUkFXKSByZXR1cm4gdGFyZ2V0O1xuICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICBsZXQgcHJveHk7XG4gICAgcmV0dXJuIGlzV3JhcHBhYmxlKHZhbHVlKVxuICAgICAgPyBwcm9kdWNlcnMuZ2V0KHZhbHVlKSB8fFxuICAgICAgICAgIChwcm9kdWNlcnMuc2V0KHZhbHVlLCAocHJveHkgPSBuZXcgUHJveHkodmFsdWUsIHNldHRlclRyYXBzKSkpLCBwcm94eSlcbiAgICAgIDogdmFsdWU7XG4gIH0sXG4gIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHNldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVud3JhcCh2YWx1ZSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgc2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbmZ1bmN0aW9uIHByb2R1Y2UoZm4pIHtcbiAgcmV0dXJuIHN0YXRlID0+IHtcbiAgICBpZiAoaXNXcmFwcGFibGUoc3RhdGUpKSB7XG4gICAgICBsZXQgcHJveHk7XG4gICAgICBpZiAoIShwcm94eSA9IHByb2R1Y2Vycy5nZXQoc3RhdGUpKSkge1xuICAgICAgICBwcm9kdWNlcnMuc2V0KHN0YXRlLCAocHJveHkgPSBuZXcgUHJveHkoc3RhdGUsIHNldHRlclRyYXBzKSkpO1xuICAgICAgfVxuICAgICAgZm4ocHJveHkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG4gIH07XG59XG5cbmNvbnN0IERFViA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IHsgJFJBVywgREVWLCBjcmVhdGVNdXRhYmxlLCBjcmVhdGVTdG9yZSwgbW9kaWZ5TXV0YWJsZSwgcHJvZHVjZSwgcmVjb25jaWxlLCB1bndyYXAgfTtcbiIsImltcG9ydCB7IE1vZGlmaWVkRGF0YXZpZXdRdWVyeVJlc3VsdCB9IGZyb20gXCJAL2xpYi90eXBlc1wiO1xyXG5cclxuLyoqXHJcbiAqIFBsYWNlaG9sZGVyIGZvciBjb21wbGV4IHByb3BlcnRpZXMgZnJvbSBhIERhdGF2aWV3IHF1ZXJ5XHJcbiAqIGBgYFxyXG4gKiBUQUJMRSBEYXRlKGNvbXBsZXgxKSwgc3VtKGNvbXBsZXgyKSAtIDNcclxuICogRlJPTSAjc29tZVRhZ1xyXG4gKiBXSEVSRSB0cnVlXHJcbiAqIGBgYFxyXG4gKiAtLS1cclxuICogYFwiZmlsZS5jb21wbGV4LXByb3BlcnR5XCJgXHJcbiAqXHJcbiAqIHRoaXMgd291bGQgYmUgaW52YWxpZCB0byB1c2UgYXMgYSBwcm9wZXJ0eSBuYW1lIGluXHJcbiAqIERhdGF2aWV3LCBzbyB0aGlzIGlzIHNhZmUgdG8gdXNlIGFzIGFuIGlkZW50aWZpZXJcclxuICogYmV0d2VlbiBmdW5jdGlvbnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBDT01QTEVYX1BST1BFUlRZX1BMQUNFSE9MREVSID0gXCJmaWxlLmNvbXBsZXgtcHJvcGVydHlcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWZhdWx0UXVlcnlSZXN1bHQ6IE1vZGlmaWVkRGF0YXZpZXdRdWVyeVJlc3VsdCA9IHtcclxuICBzdWNjZXNzZnVsOiB0cnVlLFxyXG4gIHZhbHVlOiB7XHJcbiAgICBoZWFkZXJzOiBbXCJcIl0sXHJcbiAgICB2YWx1ZXM6IFtbbnVsbF1dLFxyXG4gICAgdHlwZTogXCJ0YWJsZVwiLFxyXG4gIH0sXHJcbiAgdHJ1ZVByb3BlcnR5TmFtZXM6IFtdLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IE5PX01BVENIX0ZPVU5EID0gXCJObyBtYXRjaCBmb3VuZFwiO1xyXG4iLCJpbXBvcnQge1xyXG4gIEFwcCxcclxuICBNYXJrZG93blZpZXcsXHJcbiAgTWV0YWRhdGFDYWNoZSxcclxuICBOb3RpY2UsXHJcbiAgcGFyc2VZYW1sLFxyXG4gIFBsdWdpbixcclxuICBzdHJpbmdpZnlZYW1sLFxyXG4gIFRGaWxlLFxyXG4gIFZhdWx0LFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG4gIERhdGFBcnJheSxcclxuICBEYXRhdmlld0FQSSxcclxuICBEYXRhdmlld0xpbmssXHJcbiAgRGF0YXZpZXdQcm9wZXJ0eVZhbHVlTm90TGluayxcclxuICBQcm9wZXJ0eUluZm8sXHJcbiAgUHJvcGVydHlUeXBlLFxyXG59IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcImx1eG9uXCI7XHJcbmltcG9ydCB7IENPTVBMRVhfUFJPUEVSVFlfUExBQ0VIT0xERVIgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgQ29kZUJsb2NrSW5mbyB9IGZyb20gXCJAL2hvb2tzL3VzZURhdGFFZGl0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgY2xhbXBOdW1iZXIgPSAobjogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpID0+IHtcclxuICBpZiAobiA8IG1pbikgcmV0dXJuIG1pbjtcclxuICBpZiAobiA+IG1heCkgcmV0dXJuIG1heDtcclxuICByZXR1cm4gbjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB0b051bWJlciA9IChcclxuICB2OiB1bmtub3duLFxyXG4gIGRlZmF1bHROdW1iZXI/OiBudW1iZXIsXHJcbiAgbWluPzogbnVtYmVyLFxyXG4gIG1heD86IG51bWJlcixcclxuICB2YWxpZGF0b3I/OiAodmFsOiB1bmtub3duLCBudW06IG51bWJlcikgPT4gYm9vbGVhbixcclxuKSA9PiB7XHJcbiAgY29uc3QgbnVtID0gTnVtYmVyKHYpO1xyXG4gIGlmIChOdW1iZXIuaXNOYU4obnVtKSkgcmV0dXJuIGRlZmF1bHROdW1iZXIgPz8gMDtcclxuICBpZiAodmFsaWRhdG9yKSB7XHJcbiAgICBpZiAoIXZhbGlkYXRvcih2LCBudW0pKSByZXR1cm4gZGVmYXVsdE51bWJlciA/PyAwO1xyXG4gIH1cclxuICBpZiAobWluICE9PSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChudW0gPCBtaW4pIHJldHVybiBtaW47XHJcbiAgfVxyXG4gIGlmIChtYXggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKG51bSA+IG1heCkgcmV0dXJuIG1heDtcclxuICB9XHJcbiAgcmV0dXJuIG51bTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBsdXhvbiBEYXRlVGltZSBoYXMgYSBub24temVybyB0aW1lIHZhbHVlXHJcbiAqIEBwYXJhbSBkdCBsdXhvbiBEYXRlVGltZVxyXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGltZSBpcyBub3QgYWxsIHplcm9lcywgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2hlY2tJZkRhdGVIYXNUaW1lID0gKGR0OiBEYXRlVGltZSkgPT4ge1xyXG4gIGNvbnN0IGlzVGltZSA9IGR0LmhvdXIgIT09IDAgfHwgZHQubWludXRlICE9PSAwIHx8IGR0LnNlY29uZCAhPT0gMDtcclxuICByZXR1cm4gaXNUaW1lO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFZhbHVlVHlwZTogKFxyXG4gIHZhbHVlOiB1bmtub3duLFxyXG4gIHByb3BlcnR5OiBzdHJpbmcsXHJcbiAgbHV4b246IERhdGF2aWV3QVBJW1wibHV4b25cIl0sXHJcbikgPT4gUHJvcGVydHlUeXBlID0gKHZhbHVlLCBwcm9wZXJ0eSwgbHV4b24pID0+IHtcclxuICBjb25zdCB0ID0gdHlwZW9mIHZhbHVlO1xyXG4gIGlmICh0ID09PSBcInN0cmluZ1wiKSByZXR1cm4gXCJ0ZXh0XCI7XHJcbiAgaWYgKHQgPT09IFwibnVtYmVyXCIpIHJldHVybiBcIm51bWJlclwiO1xyXG4gIGlmICh0ID09PSBcImJvb2xlYW5cIikgcmV0dXJuIFwiY2hlY2tib3hcIjtcclxuICBpZiAodCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJvYmplY3QgdmFsdWU6IFwiLCB2YWx1ZSk7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIHByb3BlcnR5ID09PSBcInRhZ3NcIiA/IFwidGFnc1wiIDogXCJtdWx0aXRleHRcIjtcclxuICAgIH1cclxuICAgIGlmIChsdXhvbi5EYXRlVGltZS5pc0RhdGVUaW1lKHZhbHVlKSkge1xyXG4gICAgICBjb25zdCBkdCA9IHZhbHVlIGFzIHVua25vd24gYXMgRGF0ZVRpbWU7XHJcbiAgICAgIGNvbnN0IGlzVGltZSA9IGNoZWNrSWZEYXRlSGFzVGltZShkdCk7XHJcbiAgICAgIHJldHVybiBpc1RpbWUgPyBcImRhdGV0aW1lXCIgOiBcImRhdGVcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBcInRleHRcIjtcclxuICB9XHJcbiAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBwcm9wZXJ0eSB2YWx1ZSB0eXBlXCIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb3BlcnR5VHlwZXM6IChcclxuICBwcm9wZXJ0aWVzOiBzdHJpbmdbXSxcclxuICBtZXRhZGF0YUNhY2hlOiBNZXRhZGF0YUNhY2hlLFxyXG4pID0+IFByb3BlcnR5VHlwZVtdID0gKHByb3BlcnRpZXMsIG1ldGFkYXRhQ2FjaGUpID0+IHtcclxuICAvLyBAdHMtZXhwZWN0LWVycm9yIFByaXZhdGUgQVBJXHJcbiAgY29uc3QgaW5mb3MgPSBtZXRhZGF0YUNhY2hlLmdldEFsbFByb3BlcnR5SW5mb3MoKSBhcyBSZWNvcmQ8XHJcbiAgICBzdHJpbmcsXHJcbiAgICBQcm9wZXJ0eUluZm9cclxuICA+O1xyXG4gIHJldHVybiBwcm9wZXJ0aWVzLm1hcCgocCkgPT4ge1xyXG4gICAgaWYgKCFpbmZvc1twXSkgcmV0dXJuIFwidW5rbm93blwiO1xyXG4gICAgcmV0dXJuIGluZm9zW3BdLnR5cGUgYXMgUHJvcGVydHlUeXBlO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyRGF0YXZpZXdFdmVudHMgPSAoXHJcbiAgcGx1Z2luOiBQbHVnaW4sXHJcbiAgY2FsbGJhY2s6ICgpID0+IHVua25vd24sXHJcbikgPT4ge1xyXG4gIHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5vbihcImRhdGF2aWV3OmluZGV4LXJlYWR5XCIgYXMgXCJjaGFuZ2VkXCIsIGNhbGxiYWNrKTtcclxuXHJcbiAgcGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLm9uKFxyXG4gICAgXCJkYXRhdmlldzptZXRhZGF0YS1jaGFuZ2VcIiBhcyBcImNoYW5nZWRcIixcclxuICAgIGNhbGxiYWNrLFxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdW5yZWdpc3RlckRhdGF2aWV3RXZlbnRzID0gKFxyXG4gIHBsdWdpbjogUGx1Z2luLFxyXG4gIGNhbGxiYWNrOiAoKSA9PiB1bmtub3duLFxyXG4pID0+IHtcclxuICBwbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUub2ZmKFwiZGF0YXZpZXc6aW5kZXgtcmVhZHlcIiBhcyBcImNoYW5nZWRcIiwgY2FsbGJhY2spO1xyXG5cclxuICBwbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUub2ZmKFxyXG4gICAgXCJkYXRhdmlldzptZXRhZGF0YS1jaGFuZ2VcIiBhcyBcImNoYW5nZWRcIixcclxuICAgIGNhbGxiYWNrLFxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0SWRDb2x1bW5JbmRleCA9IChcclxuICBoZWFkZXJzOiBzdHJpbmdbXSxcclxuICB0YWJsZUlkQ29sdW1uTmFtZTogc3RyaW5nLFxyXG4pID0+IHtcclxuICBjb25zdCBpID0gaGVhZGVycy5maW5kSW5kZXgoXHJcbiAgICAoaCkgPT5cclxuICAgICAgaC50b0xvd2VyQ2FzZSgpID09PSB0YWJsZUlkQ29sdW1uTmFtZS50b0xvd2VyQ2FzZSgpIHx8IGggPT09IFwiZmlsZS5saW5rXCIsXHJcbiAgKTtcclxuICBpZiAoaSA9PT0gLTEpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmUgSUQgY29sdW1uIGluZGV4XCIpO1xyXG4gIH1cclxuICByZXR1cm4gaTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0lmRGF0YXZpZXdMaW5rID0gKHZhbDogdW5rbm93bikgPT4ge1xyXG4gIGlmICghdmFsKSByZXR1cm4gZmFsc2U7XHJcbiAgaWYgKHR5cGVvZiB2YWwgIT09IFwib2JqZWN0XCIpIHJldHVybiBmYWxzZTtcclxuICBpZiAoIXZhbC5oYXNPd25Qcm9wZXJ0eShcInR5cGVcIikpIHJldHVybiBmYWxzZTtcclxuICBpZiAoKHZhbCBhcyB7IHR5cGU6IHVua25vd24gfSkudHlwZSAhPT0gXCJmaWxlXCIpIHJldHVybiBmYWxzZTtcclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB0cnlEYXRhdmlld0xpbmtUb01hcmtkb3duID0gKHZhbDogdW5rbm93bikgPT4ge1xyXG4gIGlmICghY2hlY2tJZkRhdGF2aWV3TGluayh2YWwpKSByZXR1cm4gdmFsIGFzIERhdGF2aWV3UHJvcGVydHlWYWx1ZU5vdExpbms7XHJcbiAgcmV0dXJuICh2YWwgYXMgRGF0YXZpZXdMaW5rKS5tYXJrZG93bigpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHRyeURhdGF2aWV3QXJyYXlUb0FycmF5ID0gPFQ+KHZhbDogVCkgPT4ge1xyXG4gIGlmICh0eXBlb2YgdmFsICE9PSBcIm9iamVjdFwiKSByZXR1cm4gdmFsO1xyXG4gIGlmICghdmFsPy5oYXNPd25Qcm9wZXJ0eShcImFycmF5XCIpKSByZXR1cm4gdmFsO1xyXG4gIHJldHVybiAoeyAuLi52YWwgfSBhcyB1bmtub3duIGFzIERhdGFBcnJheTxUPikuYXJyYXkoKSBhcyBUO1xyXG59O1xyXG5cclxuLypcclxuICBUQUJMRSBjb2wxIGFzIEFsaWFzMSwgZnVuYyhjb2wyKSAgLGNvbDMuc3ViLCBjb2w0IGFzIFwiQWxpYXMgMlwiXHJcbiAgRlJPTSBcIi9cIlxyXG4gIFdIRVJFIHRydWUgXHJcbiovXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q29sdW1uUHJvcGVydHlOYW1lcyA9IChzb3VyY2U6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3BsaXQoXCJcXG5cIilbMF07XHJcbiAgY29uc3QgaXNXaXRob3V0SWQgPSBsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJ3aXRob3V0IGlkXCIpO1xyXG4gIGNvbnN0IGNvbHMgPSBzb3VyY2VcclxuICAgIC5zcGxpdChcIlxcblwiKVswXVxyXG4gICAgLnN1YnN0cmluZyhpc1dpdGhvdXRJZCA/IDE3IDogNilcclxuICAgIC5zcGxpdChcIixcIilcclxuICAgIC5tYXAoKGMpID0+IHtcclxuICAgICAgY29uc3Qgc3RyID0gYy50cmltKCk7XHJcbiAgICAgIGNvbnN0IHBvdGVudGlhbCA9IHN0ci5zcGxpdCgvXFxzQVNcXHMvZ2ltKVswXS50cmltKCk7XHJcbiAgICAgIGNvbnN0IGludmFsaWRDaGFycyA9IFtcclxuICAgICAgICBcIihcIixcclxuICAgICAgICBcIilcIixcclxuICAgICAgICBcIltcIixcclxuICAgICAgICBcIl1cIixcclxuICAgICAgICBcIntcIixcclxuICAgICAgICBcIn1cIixcclxuICAgICAgICBcIitcIixcclxuICAgICAgICAvLyBcIi1cIiwgZGFzaGVzIGFyZSBwcmV0dHkgY29tbW9uIGluIHByb3BlcnR5IG5hbWVzXHJcbiAgICAgICAgXCIqXCIsXHJcbiAgICAgICAgXCIvXCIsXHJcbiAgICAgICAgXCIlXCIsXHJcbiAgICAgICAgXCI8XCIsXHJcbiAgICAgICAgXCI+XCIsXHJcbiAgICAgICAgXCIhXCIsXHJcbiAgICAgICAgXCI9XCIsXHJcbiAgICAgICAgJ1wiJyxcclxuICAgICAgXTtcclxuICAgICAgY29uc3QgaXNDb21wbGV4ID1cclxuICAgICAgICAhTnVtYmVyLmlzTmFOKE51bWJlcihwb3RlbnRpYWwpKSB8fFxyXG4gICAgICAgIC8vcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgcG90ZW50aWFsXHJcbiAgICAgICAgICAuc3BsaXQoXCJcIilcclxuICAgICAgICAgIC5zb21lKChjaGFyKSA9PiBpbnZhbGlkQ2hhcnMuaW5jbHVkZXMoY2hhcikpO1xyXG4gICAgICBpZiAoaXNDb21wbGV4KSB7XHJcbiAgICAgICAgLy8gcHJvcGVydHkgaXMgbWFuaXB1bGF0ZWQgaW4gdGhlIHF1ZXJ5XHJcbiAgICAgICAgLy8gc28gaXQgY2FuJ3QgYmUgZWRpdGVkIHNpbmNlIGl0J3MgYSBjYWxjdWxhdGVkIHZhbHVlXHJcbiAgICAgICAgcmV0dXJuIENPTVBMRVhfUFJPUEVSVFlfUExBQ0VIT0xERVI7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBvdGVudGlhbDtcclxuICAgIH0pO1xyXG4gIGlmIChpc1dpdGhvdXRJZCkgcmV0dXJuIGNvbHM7XHJcbiAgLy8gc28gaXQgbWF0Y2hlcyB3aXRoIHdoYXQgaXMgcmV0dXJuZWQgZnJvbSBkYXRhdmlld1xyXG4gIHJldHVybiBbXCJGaWxlXCIsIC4uLmNvbHNdO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZU1ldGFkYXRhUHJvcGVydHkgPSBhc3luYyAoXHJcbiAgcHJvcGVydHk6IHN0cmluZyxcclxuICB2YWx1ZTogdW5rbm93bixcclxuICBmaWxlUGF0aDogc3RyaW5nLFxyXG4gIHBsdWdpbjogUGx1Z2luLFxyXG4gIHByZXZpb3VzVmFsdWU6IHVua25vd24sXHJcbiAgaXRlbUluZGV4PzogbnVtYmVyLFxyXG4pID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBhcHA6IHsgZmlsZU1hbmFnZXIsIHZhdWx0IH0sXHJcbiAgfSA9IHBsdWdpbjtcclxuICBjb25zdCBmaWxlID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XHJcbiAgaWYgKCFmaWxlKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIFwiVHJpZWQgdXBkYXRpbmcgZnJvbnRtYXR0ZXIgcHJvcGVydHkgYnV0IGNvdWxkbid0IGZpbmQgZmlsZVwiLFxyXG4gICAgKTtcclxuICB9XHJcbiAgbGV0IGZtVXBkYXRlZCA9IGZhbHNlO1xyXG4gIGF3YWl0IGZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZm06IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHtcclxuICAgIGlmICghZm0uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgIC8vIG5lc3RlZCAob2JqZWN0KVxyXG4gICAgICBpZiAocHJvcGVydHkuaW5jbHVkZXMoXCIuXCIpKSB7XHJcbiAgICAgICAgYXNzaWduRG90UHJvcGVydHlWYWx1ZShmbSwgcHJvcGVydHksIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gKGZtVXBkYXRlZCA9IHRydWUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIG1pZ2h0IGJlIGlubGluZVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmbVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIHJldHVybiAoZm1VcGRhdGVkID0gdHJ1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGlmIChmbVVwZGF0ZWQpIHJldHVybjtcclxuXHJcbiAgY29uc3QgaW5saW5lVXBkYXRlZCA9IGF3YWl0IHRyeVVwZGF0ZUlubGluZVByb3BlcnR5KFxyXG4gICAgcHJvcGVydHksXHJcbiAgICB2YWx1ZSxcclxuICAgIHByZXZpb3VzVmFsdWUsXHJcbiAgICBmaWxlLFxyXG4gICAgdmF1bHQsXHJcbiAgICBpdGVtSW5kZXgsXHJcbiAgKTtcclxuICBpZiAoaW5saW5lVXBkYXRlZCkgcmV0dXJuO1xyXG5cclxuICAvLyBwcm9wZXJ0eSBpcyBub3QgaW4gZnJvbnRtYXR0ZXIgbm9yIGlubGluZVxyXG4gIGF3YWl0IGZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZm0pID0+IHtcclxuICAgIGZtW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE11dGF0ZXMgYW4gb2JqZWN0IGJ5IGFzc2lnbmluZyBhIHZhbHVlIHRvIGEgcHJvcGVydHkgZ2l2ZW4gaW4gZG90IG5vdGF0aW9uXHJcbiAqIEBwYXJhbSBvYmogVGhlIG9iamVjdCB0byBtdXRhdGVcclxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5IG5hbWUgaW4gZG90IG5vdGF0aW9uXHJcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduXHJcbiAqIC0tLVxyXG4gKiBgYGB0c1xyXG4gKlxyXG4gKiBjb25zdCBvYmogPSB7J2ZpenonOiAnYnV6eid9O1xyXG4gKiBhc3NpZ25Eb3RQcm9wZXJ0eVZhbHVlKG9iaiwgJ25lc3RlZC5wcm9wLmZvbycsICdiYXInKTtcclxuICogY29uc29sZS5sb2cob2JqKTtcclxuICogLy8geydmaXp6JzogJ2J1enonLCBuZXN0ZWQ6IHtwcm9wOiB7Zm9vOiAnYmFyJ319fVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBhc3NpZ25Eb3RQcm9wZXJ0eVZhbHVlID0gKFxyXG4gIG9iajogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXHJcbiAgcHJvcGVydHk6IHN0cmluZyxcclxuICB2YWx1ZTogdW5rbm93bixcclxuKSA9PiB7XHJcbiAgY29uc3Qga2V5cyA9IHByb3BlcnR5LnNwbGl0KFwiLlwiKTtcclxuICBsZXQgY3VycmVudCA9IG9iajtcclxuXHJcbiAga2V5cy5mb3JFYWNoKChrZXksIGluZGV4KSA9PiB7XHJcbiAgICBpZiAoaW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICBjdXJyZW50W2tleV0gPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghY3VycmVudFtrZXldIHx8IHR5cGVvZiBjdXJyZW50W2tleV0gIT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBjdXJyZW50W2tleV0gPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBjdXJyZW50ID0gY3VycmVudFtrZXldIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxudHlwZSBJbmxpbmVQcm9wZXJ0eVZhbHVlID1cclxuICB8IHN0cmluZ1xyXG4gIHwgbnVtYmVyXHJcbiAgfCBib29sZWFuXHJcbiAgfCBudWxsXHJcbiAgfCAoc3RyaW5nIHwgbnVtYmVyKVtdXHJcbiAgfCB1bmRlZmluZWQ7XHJcblxyXG5jb25zdCBwYXJzZUxpbmVzRm9ySW5saW5lRmllbGRzID0gKGxpbmVzOiAoc3RyaW5nIHwgbnVsbClbXSkgPT4ge1xyXG4gIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoL1tcXFtcXChdPyhbXlxcblxcclxcKFxcW10qKTo6WyBdKihbXlxcKVxcXVxcblxccl0qKVtcXF1cXCldPy9nbSk7XHJcbiAgcmV0dXJuIGxpbmVzLnJlZHVjZTxcclxuICAgIHtcclxuICAgICAga2V5OiBzdHJpbmc7XHJcbiAgICAgIHZhbHVlOiBJbmxpbmVQcm9wZXJ0eVZhbHVlO1xyXG4gICAgICBsaW5lOiBudW1iZXI7XHJcbiAgICAgIG1hdGNoOiBzdHJpbmc7XHJcbiAgICB9W11cclxuICA+KChwcmV2LCBjdXJyLCBpbmRleCkgPT4ge1xyXG4gICAgbGV0IG1hdGNoZXMgPSByZWcuZXhlYyhjdXJyID8/IFwiXCIpO1xyXG4gICAgaWYgKCFtYXRjaGVzKSB7XHJcbiAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgfVxyXG4gICAgY29uc3Qga2V5ID0gbWF0Y2hlc1sxXS50cmltKCk7XHJcbiAgICBjb25zdCBvbGRWYWwgPSBtYXRjaGVzWzJdLnRyaW0oKTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIC4uLnByZXYsXHJcbiAgICAgIHtcclxuICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICB2YWx1ZTogb2xkVmFsLFxyXG4gICAgICAgIGxpbmU6IGluZGV4LFxyXG4gICAgICAgIG1hdGNoOiBtYXRjaGVzWzBdLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9LCBbXSk7XHJcbn07XHJcblxyXG5jb25zdCB0cnlVcGRhdGVJbmxpbmVQcm9wZXJ0eSA9IGFzeW5jIChcclxuICBwcm9wZXJ0eTogc3RyaW5nLFxyXG4gIHZhbHVlOiB1bmtub3duLFxyXG4gIHByZXZpb3VzVmFsdWU6IHVua25vd24sXHJcbiAgZmlsZTogVEZpbGUsXHJcbiAgdmF1bHQ6IFZhdWx0LFxyXG4gIGl0ZW1JbmRleD86IG51bWJlcixcclxuKSA9PiB7XHJcbiAgY29uc3QgY29udGVudCA9IGF3YWl0IHZhdWx0LnJlYWQoZmlsZSk7XHJcbiAgY29uc3QgbGluZXM6IChzdHJpbmcgfCBudWxsKVtdID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcclxuICBjb25zdCB5YW1sID0gW107XHJcbiAgaWYgKGxpbmVzWzBdID09PSBcIi0tLVwiKSB7XHJcbiAgICBjb25zdCBsYXN0WWFtbERhc2hlc0luZGV4ID0gbGluZXMuZmluZEluZGV4KFxyXG4gICAgICAobCwgaSkgPT4gbCA9PT0gXCItLS1cIiAmJiBpICE9PSAwLFxyXG4gICAgKTtcclxuICAgIGlmIChcclxuICAgICAgbGFzdFlhbWxEYXNoZXNJbmRleCAhPT0gLTEgJiZcclxuICAgICAgbGluZXNbbGFzdFlhbWxEYXNoZXNJbmRleCArIDFdICE9PSB1bmRlZmluZWRcclxuICAgICkge1xyXG4gICAgICAvLyB0aGlzIGVuZHMgdXAgYmVpbmcgY2hlYXBlciB0aGFuIGFycmF5LnNsaWNlKCkgd2hlblxyXG4gICAgICAvLyBsaW5lcyBjYW4gYmUgYSB2ZXJ5IGxhcmdlIGFycmF5IG9mIHZlcnkgbGFyZ2Ugc3RyaW5nc1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxhc3RZYW1sRGFzaGVzSW5kZXggKyAxOyBqKyspIHtcclxuICAgICAgICB5YW1sLnB1c2gobGluZXNbal0pO1xyXG4gICAgICAgIGxpbmVzW2pdID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBwYXJzZWRGaWVsZHMgPSBwYXJzZUxpbmVzRm9ySW5saW5lRmllbGRzKGxpbmVzKTtcclxuICBjb25zdCBmb3VuZElubGluZSA9IHBhcnNlZEZpZWxkcy5maW5kKFxyXG4gICAgKGYpID0+IGYudmFsdWUgPT09IHByZXZpb3VzVmFsdWU/LnRvU3RyaW5nKCksXHJcbiAgKTtcclxuICBpZiAoIWZvdW5kSW5saW5lKSB7XHJcbiAgICBjb25zdCBpc05hbWVNYXRjaGVkSW5saW5lID0gcGFyc2VkRmllbGRzLnNvbWUoKGYpID0+IGYua2V5ID09PSBwcm9wZXJ0eSk7XHJcbiAgICBpZiAoaXNOYW1lTWF0Y2hlZElubGluZSkge1xyXG4gICAgICAvLyBwbHVzIGJ1dHRvbiB3YXMgY2xpY2tlZCBmb3IgbGlzdCB2YWx1ZVxyXG4gICAgICAvLyB5b3UgY2FuJ3QgcmVhbGx5IGFkZCBhIGlubGluZSBwcm9ncmFtbWF0aWNhbGx5XHJcbiAgICAgIC8vIGJlY2F1c2UgdGhleSBhcmUgZGVmaW5lZCBhcmJpdHJhcmlseSBpbiB0aGUgbm90ZVxyXG4gICAgICBuZXcgTm90aWNlKFxyXG4gICAgICAgIFwiSW5saW5lIGZpZWxkcyBmb3VuZCBmb3IgcHJvcGVydHksIHNvIHlvdSBjYW4ndCB1c2UgdGhlIHBsdXMgYnV0dG9uXCIsXHJcbiAgICAgICk7XHJcbiAgICAgIC8vIHNvIGZyb250bWF0dGVyIGlzbid0IHVwZGF0ZWRcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIGNvbnN0IG5ld1ZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVtpdGVtSW5kZXggPz8gMF0gOiB2YWx1ZTtcclxuICBsaW5lc1tmb3VuZElubGluZS5saW5lXSA9XHJcbiAgICBsaW5lc1tmb3VuZElubGluZS5saW5lXT8ucmVwbGFjZShcclxuICAgICAgLy8gVE9ETyBJIGRvbid0IHRoaW5rIHNwYWNlIGFmdGVyIGNvbG9ucyBpcyByZXF1aXJlZFxyXG4gICAgICAocHJvcGVydHkgKyBcIjo6IFwiICsgZm91bmRJbmxpbmUudmFsdWUpIGFzIHN0cmluZyxcclxuICAgICAgcHJvcGVydHkgKyBcIjo6IFwiICsgKG5ld1ZhbHVlID8/IFwiXCIpLnRvU3RyaW5nKCksXHJcbiAgICApID8/IG51bGw7XHJcbiAgbGV0IGZpbmFsQ29udGVudCA9IFwiXCI7XHJcbiAgZm9yIChsZXQgbSA9IDA7IG0gPCBsaW5lcy5sZW5ndGg7IG0rKykge1xyXG4gICAgY29uc3QgdiA9IGxpbmVzW21dO1xyXG4gICAgaWYgKHYgPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgZmluYWxDb250ZW50ICs9IFwiXFxuXCIgKyB2O1xyXG4gIH1cclxuICBhd2FpdCB2YXVsdC5tb2RpZnkoZmlsZSwgeWFtbC5qb2luKFwiXFxuXCIpICsgZmluYWxDb250ZW50KTtcclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRFeGlzdGluZ1Byb3BlcnRpZXMgPSAoYXBwOiBBcHApID0+IHtcclxuICBjb25zdCB7IG1ldGFkYXRhQ2FjaGUgfSA9IGFwcDtcclxuICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgcmV0dXJuIG1ldGFkYXRhQ2FjaGUuZ2V0QWxsUHJvcGVydHlJbmZvcygpIGFzIFJlY29yZDxzdHJpbmcsIFByb3BlcnR5SW5mbz47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VGFibGVMaW5lID0gKGNvZGVCbG9ja1RleHQ6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IGxpbmVzID0gY29kZUJsb2NrVGV4dC5zcGxpdChcIlxcblwiKTtcclxuICBsZXQgaW5kZXggPSAwO1xyXG4gIGZvciAoaW5kZXg7IGluZGV4IDwgbGluZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICBjb25zdCBsaW5lID0gbGluZXNbaW5kZXhdO1xyXG4gICAgaWYgKCFsaW5lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcInRhYmxlXCIpKSBjb250aW51ZTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxpbmUsXHJcbiAgICAgIGluZGV4LFxyXG4gICAgfTtcclxuICB9XHJcbiAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgXCJVbmFibGUgdG8gZmluZCB0YWJsZSBsaW5lIGZyb20gY29kZUJsb2NrVGV4dC4gVGhpcyBzaG91bGQgYmUgaW1wb3NzaWJsZS5cIixcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRGF0YUVkaXRCbG9ja0NvbmZpZyA9IHtcclxuICBsb2NrRWRpdGluZzogYm9vbGVhbjtcclxuICBoZWFkZXJJY29uczogYm9vbGVhbjtcclxuICBuZXdOb3RlVGVtcGxhdGVQYXRoOiBzdHJpbmc7XHJcbiAgdGFibGVDbGFzc05hbWU6IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIERhdGFFZGl0QmxvY2tDb25maWdLZXkgPSBrZXlvZiBEYXRhRWRpdEJsb2NrQ29uZmlnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHREYXRhRWRpdEJsb2NrQ29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnID0ge1xyXG4gIGxvY2tFZGl0aW5nOiBmYWxzZSxcclxuICBoZWFkZXJJY29uczogdHJ1ZSxcclxuICBuZXdOb3RlVGVtcGxhdGVQYXRoOiBcIlwiLFxyXG4gIHRhYmxlQ2xhc3NOYW1lOiBcIlwiLFxyXG59O1xyXG5cclxuLy8gVE9ETyBhZGRzIG9uZSBleHRyYSBsaW5lIG9mIHNwYWNlIChub3QgaW5jcmVtZW50YWxseSkgd2hpY2ggZG9lc24ndCBicmVhayBhbnl0aGluZyBidXQgbG9va3Mgd2VpcmRcclxuZXhwb3J0IGNvbnN0IHNwbGl0UXVlcnlPbkNvbmZpZzogKGNvZGVCbG9ja1RleHQ6IHN0cmluZykgPT4ge1xyXG4gIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgY29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnO1xyXG59ID0gKGNvZGVCbG9ja1RleHQ6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IFtxdWVyeSwgY29uZmlnU3RyXSA9IGNvZGVCbG9ja1RleHQuc3BsaXQoL1xcbl4tLS0kXFxuL2dpbSk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGNvbmZpZyA9IHBhcnNlWWFtbChjb25maWdTdHIpO1xyXG4gICAgaWYgKHR5cGVvZiBjb25maWcgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcXVlcnksXHJcbiAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgIC4uLmRlZmF1bHREYXRhRWRpdEJsb2NrQ29uZmlnLFxyXG4gICAgICAgIC4uLihjb25maWcgYXMgRGF0YUVkaXRCbG9ja0NvbmZpZyksXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vIGNvbnN0IG1zZyA9IFwiaW52YWxpZCBZQU1MIGRldGVjdGVkIGluIGNvbmZpZ1wiO1xyXG4gICAgLy8gY29uc29sZS5lcnJvcihtc2cpO1xyXG4gICAgcmV0dXJuIHsgcXVlcnksIGNvbmZpZzogZGVmYXVsdERhdGFFZGl0QmxvY2tDb25maWcgfTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogUmVjb3JkcyB0aGUgY3VycmVudCBzY3JvbGwgb24gaW5zdGFudGlhdGlvbiwgYW5kIHByb3ZpZGVzIHRoZSBgZml4KClgIG1ldGhvZCB0byByZXZlcnQgYmFjayB0byB0aGF0IHNjcm9sbCBwb3NpdGlvbi5cclxuICpcclxuICogRWRpdGluZyBhIG5vdGUgd2l0aCB0aGUgYEVkaXRvcmAgQVBJIHdpbGwgdXN1YWxseSByZXN1bHQgaW4gYSB3ZWlyZCBzY3JvbGwgZG93bi4gTm90IHN1cmUgd2h5LCBidXQgdGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBmaXggdGhhdC5cclxuICpcclxuICogSGF2aW5nIHRvIGRvIHRoaXMgZmVlbHMgbGlrZSBJIGFtIGRvaW5nIHNvbWV0aGluZyB3cm9uZyBidXQgZm9yIG5vdyBpdCB3b3Jrcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxGaXhlciB7XHJcbiAgcHJpdmF0ZSBzY3JvbGxlcjogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBwcmV2U2Nyb2xsOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3Qgc2Nyb2xsZXIgPSBlbC5jbG9zZXN0KFwiLmNtLXNjcm9sbGVyXCIpIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcclxuICAgIGlmICghc2Nyb2xsZXIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgc2Nyb2xsZXJcIik7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNjcm9sbGVyID0gc2Nyb2xsZXI7XHJcbiAgICB0aGlzLnByZXZTY3JvbGwgPSBzY3JvbGxlci5zY3JvbGxUb3A7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0b3JlcyBzY3JvbGwgcG9zaXRpb24gYmFjayB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCBwb3NpdGlvbi5cclxuICAgKi9cclxuICBmaXgoKTogdm9pZCB7XHJcbiAgICAvLyB0aGlzIHdpbGwgYmUgdXNlZCBhZnRlciBhIGltbWVkaWF0ZWx5IGFmdGVyIGEgRE9NIG11dGF0aW9uIHNvIHdlIHJ1biB0aGlzIG5leHQgaW4gdGhlIGV2ZW50IHF1ZXVlIHRvIGdpdmUgaXQgdGltZSB0byB1cGRhdGVcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLnNjcm9sbGVyLnNjcm9sbFRvKHsgdG9wOiB0aGlzLnByZXZTY3JvbGwsIGJlaGF2aW9yOiBcImluc3RhbnRcIiB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLy8gVE9ETyBmaXggc2Nyb2xsIGlzc3VlXHJcbmV4cG9ydCBjb25zdCB1cGRhdGVCbG9ja0NvbmZpZyA9IChcclxuICBrZXk6IERhdGFFZGl0QmxvY2tDb25maWdLZXksXHJcbiAgdmFsdWU6IERhdGFFZGl0QmxvY2tDb25maWdbdHlwZW9mIGtleV0sXHJcbiAgY29kZUJsb2NrSW5mbzogQ29kZUJsb2NrSW5mbyxcclxuKSA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgY29uZmlnLFxyXG4gICAgY3R4LFxyXG4gICAgZWwsXHJcbiAgICBwbHVnaW46IHtcclxuICAgICAgYXBwOiB7IHdvcmtzcGFjZSB9LFxyXG4gICAgfSxcclxuICAgIHF1ZXJ5OiBwcmVRdWVyeSxcclxuICAgIGhpZGVGaWxlQ29sLFxyXG4gIH0gPSBjb2RlQmxvY2tJbmZvO1xyXG4gIC8vIHVwZGF0ZSB0aGUgb2xkIGNvbmZpZ1xyXG4gIGNvbnN0IG5ld0NvbmZpZyA9IHsgLi4uY29uZmlnLCBba2V5XTogdmFsdWUgfTtcclxuICAvLyB0dXJuIGludG8geWFtbCB0ZXh0LiBBbHdheXMgaW5jbHVkZXMgYSBuZXdsaW5lIGNoYXJhY3RlciBhdCB0aGUgZW5kXHJcbiAgY29uc3QgbmV3Q29uZmlnU3RyID0gc3RyaW5naWZ5WWFtbChuZXdDb25maWcpO1xyXG4gIC8vIHRleHQgaXMgdGhlIGVudGlyZSBub3RlcyB0ZXh0IGFuZCBpcyBlc3NlbnRpYWxseSBhIHN5bmNocm9ub3VzIHJlYWRcclxuICBjb25zdCB7IGxpbmVTdGFydCwgbGluZUVuZCB9ID0gY3R4LmdldFNlY3Rpb25JbmZvKGVsKSE7XHJcbiAgLy8gcmVtb3ZlIHRoZSAnLCBmaWxlLmxpbmsnIHdlIGFkZGVkIGlmIHNvXHJcbiAgY29uc3QgcXVlcnkgPSBoaWRlRmlsZUNvbCA/IHByZVF1ZXJ5LnNsaWNlKDAsIC0xMSkgOiBwcmVRdWVyeTtcclxuXHJcbiAgY29uc3QgbmV3Q29kZUJsb2NrVGV4dCA9XHJcbiAgICBcImBgYGRhdGFlZGl0XFxuXCIgKyBxdWVyeSArIFwiXFxuLS0tXFxuXCIgKyBuZXdDb25maWdTdHIgKyBcImBgYFwiO1xyXG4gIGNvbnN0IGVkaXRvciA9IHdvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmVkaXRvcjtcclxuICBpZiAoIWVkaXRvcikge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjb25zdCBzY3JvbGxGaXhlciA9IG5ldyBTY3JvbGxGaXhlcihlbCk7XHJcbiAgZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgIG5ld0NvZGVCbG9ja1RleHQsXHJcbiAgICB7IGxpbmU6IGxpbmVTdGFydCwgY2g6IDAgfSxcclxuICAgIHsgbGluZTogbGluZUVuZCwgY2g6IE5hTiB9LFxyXG4gICk7XHJcbiAgc2Nyb2xsRml4ZXIuZml4KCk7XHJcbn07XHJcblxyXG4vLyBUT0RPIGNvdWxkIHByb2JhYmx5IGNvbWJpbmUgdGhpcyB3aXRoIHRoZSB1cGRhdGVyIGZ1bmMgc2luY2UgaXQncyBsaXRlcmFsbHkganVzdCBvbmUgbGluZSBkaWZmZXJlbmNlXHJcbi8vIGJ1dCB0eXBpbmcgdGhlIG92ZXJsb2FkcyBpcyBzZWVtaW5nIG1vcmUgZGlmZmljdWx0IHRoYW4gSSB0aG91Z2h0XHJcbi8vIFRPRE8gZml4IHNjcm9sbCBpc3N1ZVxyXG5leHBvcnQgY29uc3Qgc2V0QmxvY2tDb25maWcgPSAoXHJcbiAgY29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnLFxyXG4gIGNvZGVCbG9ja0luZm86IENvZGVCbG9ja0luZm8sXHJcbikgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIGN0eCxcclxuICAgIGVsLFxyXG4gICAgcGx1Z2luOiB7XHJcbiAgICAgIGFwcDogeyB3b3Jrc3BhY2UgfSxcclxuICAgIH0sXHJcbiAgICBxdWVyeTogcHJlUXVlcnksXHJcbiAgICBoaWRlRmlsZUNvbCxcclxuICB9ID0gY29kZUJsb2NrSW5mbztcclxuICAvLyB0dXJuIGludG8geWFtbCB0ZXh0LiBBbHdheXMgaW5jbHVkZXMgYSBuZXdsaW5lIGNoYXJhY3RlciBhdCB0aGUgZW5kXHJcbiAgY29uc3QgbmV3Q29uZmlnU3RyID0gc3RyaW5naWZ5WWFtbChjb25maWcpO1xyXG4gIC8vIHRleHQgaXMgdGhlIGVudGlyZSBub3RlcyB0ZXh0IGFuZCBpcyBlc3NlbnRpYWxseSBhIHN5bmNocm9ub3VzIHJlYWRcclxuICBjb25zdCB7IGxpbmVTdGFydCwgbGluZUVuZCB9ID0gY3R4LmdldFNlY3Rpb25JbmZvKGVsKSE7XHJcbiAgLy8gcmVtb3ZlIHRoZSAnLCBmaWxlLmxpbmsnIHdlIGFkZGVkIGlmIHNvXHJcbiAgY29uc3QgcXVlcnkgPSBoaWRlRmlsZUNvbCA/IHByZVF1ZXJ5LnNsaWNlKDAsIC0xMSkgOiBwcmVRdWVyeTtcclxuICBjb25zdCBuZXdDb2RlQmxvY2tUZXh0ID1cclxuICAgIFwiYGBgZGF0YWVkaXRcXG5cIiArIHF1ZXJ5ICsgXCJcXG4tLS1cXG5cIiArIG5ld0NvbmZpZ1N0ciArIFwiYGBgXCI7XHJcbiAgY29uc3QgZWRpdG9yID0gd29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yO1xyXG4gIGlmICghZWRpdG9yKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCBzY3JvbGxGaXhlciA9IG5ldyBTY3JvbGxGaXhlcihlbCk7XHJcbiAgZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgIG5ld0NvZGVCbG9ja1RleHQsXHJcbiAgICB7IGxpbmU6IGxpbmVTdGFydCwgY2g6IDAgfSxcclxuICAgIHsgbGluZTogbGluZUVuZCwgY2g6IE5hTiB9LFxyXG4gICk7XHJcbiAgc2Nyb2xsRml4ZXIuZml4KCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VGVtcGxhdGVGaWxlcyA9IChhcHA6IEFwcCkgPT4ge1xyXG4gIGNvbnN0IGZvbGRlclBhdGggPVxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgYXBwLmludGVybmFsUGx1Z2lucy5wbHVnaW5zLnRlbXBsYXRlcy5pbnN0YW5jZS5vcHRpb25zLmZvbGRlcjtcclxuICBpZiAoIWZvbGRlclBhdGgpIHJldHVybjtcclxuICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0Rm9sZGVyQnlQYXRoKGZvbGRlclBhdGgpO1xyXG4gIGlmICghZm9sZGVyKSByZXR1cm47XHJcbiAgaWYgKCFmb2xkZXIuY2hpbGRyZW4ubGVuZ3RoKSByZXR1cm47XHJcbiAgcmV0dXJuIGZvbGRlci5jaGlsZHJlbi5maWx0ZXIoKHQpID0+IHQgaW5zdGFuY2VvZiBURmlsZSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZW5zdXJlRmlsZUxpbmtDb2x1bW4gPSAoc291cmNlOiBzdHJpbmcpID0+IHtcclxuICBpZiAoIXNvdXJjZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJ0YWJsZSB3aXRob3V0IGlkXCIpKVxyXG4gICAgcmV0dXJuIHsgc291cmNlLCBoaWRlOiBmYWxzZSB9O1xyXG4gIGNvbnN0IGxpbmVzID0gc291cmNlLnNwbGl0KFwiXFxuXCIpO1xyXG4gIGlmIChsaW5lc1swXS5pbmNsdWRlcyhcImZpbGUubGlua1wiKSkgcmV0dXJuIHsgc291cmNlLCBoaWRlOiBmYWxzZSB9O1xyXG4gIGxpbmVzWzBdICs9IFwiLCBmaWxlLmxpbmtcIjtcclxuICByZXR1cm4geyBzb3VyY2U6IGxpbmVzLmpvaW4oXCJcXG5cIiksIGhpZGU6IHRydWUgfTtcclxufTtcclxuIiwiLyoqXG4qIEBsaWNlbnNlIGx1Y2lkZS1zb2xpZCB2MC40MTIuMCAtIElTQ1xuKlxuKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4qL1xuXG4vLyBzcmMvZGVmYXVsdEF0dHJpYnV0ZXMudHNcbnZhciBkZWZhdWx0QXR0cmlidXRlcyA9IHtcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgd2lkdGg6IDI0LFxuICBoZWlnaHQ6IDI0LFxuICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICBmaWxsOiBcIm5vbmVcIixcbiAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICBcInN0cm9rZS13aWR0aFwiOiAyLFxuICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiXG59O1xudmFyIGRlZmF1bHRBdHRyaWJ1dGVzX2RlZmF1bHQgPSBkZWZhdWx0QXR0cmlidXRlcztcbmV4cG9ydCB7XG4gIGRlZmF1bHRBdHRyaWJ1dGVzX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRBdHRyaWJ1dGVzLmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL0ljb24udHN4XG5pbXBvcnQgeyBGb3IsIHNwbGl0UHJvcHMgfSBmcm9tIFwic29saWQtanNcIjtcbmltcG9ydCB7IER5bmFtaWMgfSBmcm9tIFwic29saWQtanMvd2ViXCI7XG5pbXBvcnQgZGVmYXVsdEF0dHJpYnV0ZXMgZnJvbSBcIi4vZGVmYXVsdEF0dHJpYnV0ZXNcIjtcblxuLy8gLi4vc2hhcmVkL3NyYy91dGlscy50c1xudmFyIHRvS2ViYWJDYXNlID0gKHN0cmluZykgPT4gc3RyaW5nLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csIFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKTtcbnZhciBtZXJnZUNsYXNzZXMgPSAoLi4uY2xhc3NlcykgPT4gY2xhc3Nlcy5maWx0ZXIoKGNsYXNzTmFtZSwgaW5kZXgsIGFycmF5KSA9PiB7XG4gIHJldHVybiBCb29sZWFuKGNsYXNzTmFtZSkgJiYgYXJyYXkuaW5kZXhPZihjbGFzc05hbWUpID09PSBpbmRleDtcbn0pLmpvaW4oXCIgXCIpO1xuXG4vLyBzcmMvSWNvbi50c3hcbnZhciBJY29uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IFtsb2NhbFByb3BzLCByZXN0XSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcbiAgICBcImNvbG9yXCIsXG4gICAgXCJzaXplXCIsXG4gICAgXCJzdHJva2VXaWR0aFwiLFxuICAgIFwiY2hpbGRyZW5cIixcbiAgICBcImNsYXNzXCIsXG4gICAgXCJuYW1lXCIsXG4gICAgXCJpY29uTm9kZVwiLFxuICAgIFwiYWJzb2x1dGVTdHJva2VXaWR0aFwiXG4gIF0pO1xuICByZXR1cm4gPHN2Z1xuICAgIHsuLi5kZWZhdWx0QXR0cmlidXRlc31cbiAgICB3aWR0aD17bG9jYWxQcm9wcy5zaXplID8/IGRlZmF1bHRBdHRyaWJ1dGVzLndpZHRofVxuICAgIGhlaWdodD17bG9jYWxQcm9wcy5zaXplID8/IGRlZmF1bHRBdHRyaWJ1dGVzLmhlaWdodH1cbiAgICBzdHJva2U9e2xvY2FsUHJvcHMuY29sb3IgPz8gZGVmYXVsdEF0dHJpYnV0ZXMuc3Ryb2tlfVxuICAgIHN0cm9rZS13aWR0aD17bG9jYWxQcm9wcy5hYnNvbHV0ZVN0cm9rZVdpZHRoID8gTnVtYmVyKGxvY2FsUHJvcHMuc3Ryb2tlV2lkdGggPz8gZGVmYXVsdEF0dHJpYnV0ZXNbXCJzdHJva2Utd2lkdGhcIl0pICogMjQgLyBOdW1iZXIobG9jYWxQcm9wcy5zaXplKSA6IE51bWJlcihsb2NhbFByb3BzLnN0cm9rZVdpZHRoID8/IGRlZmF1bHRBdHRyaWJ1dGVzW1wic3Ryb2tlLXdpZHRoXCJdKX1cbiAgICBjbGFzcz17bWVyZ2VDbGFzc2VzKFxuICAgICAgXCJsdWNpZGVcIixcbiAgICAgIFwibHVjaWRlLWljb25cIixcbiAgICAgIGxvY2FsUHJvcHMubmFtZSAhPSBudWxsID8gYGx1Y2lkZS0ke3RvS2ViYWJDYXNlKGxvY2FsUHJvcHM/Lm5hbWUpfWAgOiB2b2lkIDAsXG4gICAgICBsb2NhbFByb3BzLmNsYXNzICE9IG51bGwgPyBsb2NhbFByb3BzLmNsYXNzIDogXCJcIlxuICAgICl9XG4gICAgey4uLnJlc3R9XG4gID48Rm9yIGVhY2g9e2xvY2FsUHJvcHMuaWNvbk5vZGV9PnsoW2VsZW1lbnROYW1lLCBhdHRyc10pID0+IHtcbiAgICByZXR1cm4gPER5bmFtaWNcbiAgICAgIGNvbXBvbmVudD17ZWxlbWVudE5hbWV9XG4gICAgICB7Li4uYXR0cnN9XG4gICAgLz47XG4gIH19PC9Gb3I+PC9zdmc+O1xufTtcbnZhciBJY29uX2RlZmF1bHQgPSBJY29uO1xuZXhwb3J0IHtcbiAgSWNvbl9kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL2xvY2sudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJyZWN0XCIsIHsgd2lkdGg6IFwiMThcIiwgaGVpZ2h0OiBcIjExXCIsIHg6IFwiM1wiLCB5OiBcIjExXCIsIHJ4OiBcIjJcIiwgcnk6IFwiMlwiLCBrZXk6IFwiMXc0ZXcxXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk03IDExVjdhNSA1IDAgMCAxIDEwIDB2NFwiLCBrZXk6IFwiZnd2bXptXCIgfV1cbl07XG52YXIgTG9jayA9IChwcm9wcykgPT4gPEljb24gey4uLnByb3BzfSBuYW1lPVwiTG9ja1wiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgbG9ja19kZWZhdWx0ID0gTG9jaztcbmV4cG9ydCB7XG4gIGxvY2tfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jay5qc3gubWFwXG4iLCIvKipcbiogQGxpY2Vuc2UgbHVjaWRlLXNvbGlkIHYwLjQxMi4wIC0gSVNDXG4qXG4qIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiovXG5cbi8vIHNyYy9pY29ucy9sb2NrLW9wZW4udHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJyZWN0XCIsIHsgd2lkdGg6IFwiMThcIiwgaGVpZ2h0OiBcIjExXCIsIHg6IFwiM1wiLCB5OiBcIjExXCIsIHJ4OiBcIjJcIiwgcnk6IFwiMlwiLCBrZXk6IFwiMXc0ZXcxXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk03IDExVjdhNSA1IDAgMCAxIDkuOS0xXCIsIGtleTogXCIxbW04dzhcIiB9XVxuXTtcbnZhciBMb2NrT3BlbiA9IChwcm9wcykgPT4gPEljb24gey4uLnByb3BzfSBuYW1lPVwiTG9ja09wZW5cIiBpY29uTm9kZT17aWNvbk5vZGV9IC8+O1xudmFyIGxvY2tfb3Blbl9kZWZhdWx0ID0gTG9ja09wZW47XG5leHBvcnQge1xuICBsb2NrX29wZW5fZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jay1vcGVuLmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL3NldHRpbmdzLnRzeFxuaW1wb3J0IEljb24gZnJvbSBcIi4uL0ljb25cIjtcbnZhciBpY29uTm9kZSA9IFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwiTTEyLjIyIDJoLS40NGEyIDIgMCAwIDAtMiAydi4xOGEyIDIgMCAwIDEtMSAxLjczbC0uNDMuMjVhMiAyIDAgMCAxLTIgMGwtLjE1LS4wOGEyIDIgMCAwIDAtMi43My43M2wtLjIyLjM4YTIgMiAwIDAgMCAuNzMgMi43M2wuMTUuMWEyIDIgMCAwIDEgMSAxLjcydi41MWEyIDIgMCAwIDEtMSAxLjc0bC0uMTUuMDlhMiAyIDAgMCAwLS43MyAyLjczbC4yMi4zOGEyIDIgMCAwIDAgMi43My43M2wuMTUtLjA4YTIgMiAwIDAgMSAyIDBsLjQzLjI1YTIgMiAwIDAgMSAxIDEuNzNWMjBhMiAyIDAgMCAwIDIgMmguNDRhMiAyIDAgMCAwIDItMnYtLjE4YTIgMiAwIDAgMSAxLTEuNzNsLjQzLS4yNWEyIDIgMCAwIDEgMiAwbC4xNS4wOGEyIDIgMCAwIDAgMi43My0uNzNsLjIyLS4zOWEyIDIgMCAwIDAtLjczLTIuNzNsLS4xNS0uMDhhMiAyIDAgMCAxLTEtMS43NHYtLjVhMiAyIDAgMCAxIDEtMS43NGwuMTUtLjA5YTIgMiAwIDAgMCAuNzMtMi43M2wtLjIyLS4zOGEyIDIgMCAwIDAtMi43My0uNzNsLS4xNS4wOGEyIDIgMCAwIDEtMiAwbC0uNDMtLjI1YTIgMiAwIDAgMS0xLTEuNzNWNGEyIDIgMCAwIDAtMi0yelwiLFxuICAgICAga2V5OiBcIjFxbWUyZlwiXG4gICAgfVxuICBdLFxuICBbXCJjaXJjbGVcIiwgeyBjeDogXCIxMlwiLCBjeTogXCIxMlwiLCByOiBcIjNcIiwga2V5OiBcIjF2N3pyZFwiIH1dXG5dO1xudmFyIFNldHRpbmdzID0gKHByb3BzKSA9PiA8SWNvbiB7Li4ucHJvcHN9IG5hbWU9XCJTZXR0aW5nc1wiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgc2V0dGluZ3NfZGVmYXVsdCA9IFNldHRpbmdzO1xuZXhwb3J0IHtcbiAgc2V0dGluZ3NfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0dGluZ3MuanN4Lm1hcFxuIiwiY29uc3QgQ0xBU1NfUEFSVF9TRVBBUkFUT1IgPSAnLSc7XG5mdW5jdGlvbiBjcmVhdGVDbGFzc0dyb3VwVXRpbHMoY29uZmlnKSB7XG4gIGNvbnN0IGNsYXNzTWFwID0gY3JlYXRlQ2xhc3NNYXAoY29uZmlnKTtcbiAgY29uc3Qge1xuICAgIGNvbmZsaWN0aW5nQ2xhc3NHcm91cHMsXG4gICAgY29uZmxpY3RpbmdDbGFzc0dyb3VwTW9kaWZpZXJzXG4gIH0gPSBjb25maWc7XG4gIGZ1bmN0aW9uIGdldENsYXNzR3JvdXBJZChjbGFzc05hbWUpIHtcbiAgICBjb25zdCBjbGFzc1BhcnRzID0gY2xhc3NOYW1lLnNwbGl0KENMQVNTX1BBUlRfU0VQQVJBVE9SKTtcbiAgICAvLyBDbGFzc2VzIGxpa2UgYC1pbnNldC0xYCBwcm9kdWNlIGFuIGVtcHR5IHN0cmluZyBhcyBmaXJzdCBjbGFzc1BhcnQuIFdlIGFzc3VtZSB0aGF0IGNsYXNzZXMgZm9yIG5lZ2F0aXZlIHZhbHVlcyBhcmUgdXNlZCBjb3JyZWN0bHkgYW5kIHJlbW92ZSBpdCBmcm9tIGNsYXNzUGFydHMuXG4gICAgaWYgKGNsYXNzUGFydHNbMF0gPT09ICcnICYmIGNsYXNzUGFydHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICBjbGFzc1BhcnRzLnNoaWZ0KCk7XG4gICAgfVxuICAgIHJldHVybiBnZXRHcm91cFJlY3Vyc2l2ZShjbGFzc1BhcnRzLCBjbGFzc01hcCkgfHwgZ2V0R3JvdXBJZEZvckFyYml0cmFyeVByb3BlcnR5KGNsYXNzTmFtZSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q29uZmxpY3RpbmdDbGFzc0dyb3VwSWRzKGNsYXNzR3JvdXBJZCwgaGFzUG9zdGZpeE1vZGlmaWVyKSB7XG4gICAgY29uc3QgY29uZmxpY3RzID0gY29uZmxpY3RpbmdDbGFzc0dyb3Vwc1tjbGFzc0dyb3VwSWRdIHx8IFtdO1xuICAgIGlmIChoYXNQb3N0Zml4TW9kaWZpZXIgJiYgY29uZmxpY3RpbmdDbGFzc0dyb3VwTW9kaWZpZXJzW2NsYXNzR3JvdXBJZF0pIHtcbiAgICAgIHJldHVybiBbLi4uY29uZmxpY3RzLCAuLi5jb25mbGljdGluZ0NsYXNzR3JvdXBNb2RpZmllcnNbY2xhc3NHcm91cElkXV07XG4gICAgfVxuICAgIHJldHVybiBjb25mbGljdHM7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBnZXRDbGFzc0dyb3VwSWQsXG4gICAgZ2V0Q29uZmxpY3RpbmdDbGFzc0dyb3VwSWRzXG4gIH07XG59XG5mdW5jdGlvbiBnZXRHcm91cFJlY3Vyc2l2ZShjbGFzc1BhcnRzLCBjbGFzc1BhcnRPYmplY3QpIHtcbiAgaWYgKGNsYXNzUGFydHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGNsYXNzUGFydE9iamVjdC5jbGFzc0dyb3VwSWQ7XG4gIH1cbiAgY29uc3QgY3VycmVudENsYXNzUGFydCA9IGNsYXNzUGFydHNbMF07XG4gIGNvbnN0IG5leHRDbGFzc1BhcnRPYmplY3QgPSBjbGFzc1BhcnRPYmplY3QubmV4dFBhcnQuZ2V0KGN1cnJlbnRDbGFzc1BhcnQpO1xuICBjb25zdCBjbGFzc0dyb3VwRnJvbU5leHRDbGFzc1BhcnQgPSBuZXh0Q2xhc3NQYXJ0T2JqZWN0ID8gZ2V0R3JvdXBSZWN1cnNpdmUoY2xhc3NQYXJ0cy5zbGljZSgxKSwgbmV4dENsYXNzUGFydE9iamVjdCkgOiB1bmRlZmluZWQ7XG4gIGlmIChjbGFzc0dyb3VwRnJvbU5leHRDbGFzc1BhcnQpIHtcbiAgICByZXR1cm4gY2xhc3NHcm91cEZyb21OZXh0Q2xhc3NQYXJ0O1xuICB9XG4gIGlmIChjbGFzc1BhcnRPYmplY3QudmFsaWRhdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IGNsYXNzUmVzdCA9IGNsYXNzUGFydHMuam9pbihDTEFTU19QQVJUX1NFUEFSQVRPUik7XG4gIHJldHVybiBjbGFzc1BhcnRPYmplY3QudmFsaWRhdG9ycy5maW5kKCh7XG4gICAgdmFsaWRhdG9yXG4gIH0pID0+IHZhbGlkYXRvcihjbGFzc1Jlc3QpKT8uY2xhc3NHcm91cElkO1xufVxuY29uc3QgYXJiaXRyYXJ5UHJvcGVydHlSZWdleCA9IC9eXFxbKC4rKVxcXSQvO1xuZnVuY3Rpb24gZ2V0R3JvdXBJZEZvckFyYml0cmFyeVByb3BlcnR5KGNsYXNzTmFtZSkge1xuICBpZiAoYXJiaXRyYXJ5UHJvcGVydHlSZWdleC50ZXN0KGNsYXNzTmFtZSkpIHtcbiAgICBjb25zdCBhcmJpdHJhcnlQcm9wZXJ0eUNsYXNzTmFtZSA9IGFyYml0cmFyeVByb3BlcnR5UmVnZXguZXhlYyhjbGFzc05hbWUpWzFdO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gYXJiaXRyYXJ5UHJvcGVydHlDbGFzc05hbWU/LnN1YnN0cmluZygwLCBhcmJpdHJhcnlQcm9wZXJ0eUNsYXNzTmFtZS5pbmRleE9mKCc6JykpO1xuICAgIGlmIChwcm9wZXJ0eSkge1xuICAgICAgLy8gSSB1c2UgdHdvIGRvdHMgaGVyZSBiZWNhdXNlIG9uZSBkb3QgaXMgdXNlZCBhcyBwcmVmaXggZm9yIGNsYXNzIGdyb3VwcyBpbiBwbHVnaW5zXG4gICAgICByZXR1cm4gJ2FyYml0cmFyeS4uJyArIHByb3BlcnR5O1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBFeHBvcnRlZCBmb3IgdGVzdGluZyBvbmx5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzTWFwKGNvbmZpZykge1xuICBjb25zdCB7XG4gICAgdGhlbWUsXG4gICAgcHJlZml4XG4gIH0gPSBjb25maWc7XG4gIGNvbnN0IGNsYXNzTWFwID0ge1xuICAgIG5leHRQYXJ0OiBuZXcgTWFwKCksXG4gICAgdmFsaWRhdG9yczogW11cbiAgfTtcbiAgY29uc3QgcHJlZml4ZWRDbGFzc0dyb3VwRW50cmllcyA9IGdldFByZWZpeGVkQ2xhc3NHcm91cEVudHJpZXMoT2JqZWN0LmVudHJpZXMoY29uZmlnLmNsYXNzR3JvdXBzKSwgcHJlZml4KTtcbiAgcHJlZml4ZWRDbGFzc0dyb3VwRW50cmllcy5mb3JFYWNoKChbY2xhc3NHcm91cElkLCBjbGFzc0dyb3VwXSkgPT4ge1xuICAgIHByb2Nlc3NDbGFzc2VzUmVjdXJzaXZlbHkoY2xhc3NHcm91cCwgY2xhc3NNYXAsIGNsYXNzR3JvdXBJZCwgdGhlbWUpO1xuICB9KTtcbiAgcmV0dXJuIGNsYXNzTWFwO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0NsYXNzZXNSZWN1cnNpdmVseShjbGFzc0dyb3VwLCBjbGFzc1BhcnRPYmplY3QsIGNsYXNzR3JvdXBJZCwgdGhlbWUpIHtcbiAgY2xhc3NHcm91cC5mb3JFYWNoKGNsYXNzRGVmaW5pdGlvbiA9PiB7XG4gICAgaWYgKHR5cGVvZiBjbGFzc0RlZmluaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBjbGFzc1BhcnRPYmplY3RUb0VkaXQgPSBjbGFzc0RlZmluaXRpb24gPT09ICcnID8gY2xhc3NQYXJ0T2JqZWN0IDogZ2V0UGFydChjbGFzc1BhcnRPYmplY3QsIGNsYXNzRGVmaW5pdGlvbik7XG4gICAgICBjbGFzc1BhcnRPYmplY3RUb0VkaXQuY2xhc3NHcm91cElkID0gY2xhc3NHcm91cElkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNsYXNzRGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGlzVGhlbWVHZXR0ZXIoY2xhc3NEZWZpbml0aW9uKSkge1xuICAgICAgICBwcm9jZXNzQ2xhc3Nlc1JlY3Vyc2l2ZWx5KGNsYXNzRGVmaW5pdGlvbih0aGVtZSksIGNsYXNzUGFydE9iamVjdCwgY2xhc3NHcm91cElkLCB0aGVtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNsYXNzUGFydE9iamVjdC52YWxpZGF0b3JzLnB1c2goe1xuICAgICAgICB2YWxpZGF0b3I6IGNsYXNzRGVmaW5pdGlvbixcbiAgICAgICAgY2xhc3NHcm91cElkXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT2JqZWN0LmVudHJpZXMoY2xhc3NEZWZpbml0aW9uKS5mb3JFYWNoKChba2V5LCBjbGFzc0dyb3VwXSkgPT4ge1xuICAgICAgcHJvY2Vzc0NsYXNzZXNSZWN1cnNpdmVseShjbGFzc0dyb3VwLCBnZXRQYXJ0KGNsYXNzUGFydE9iamVjdCwga2V5KSwgY2xhc3NHcm91cElkLCB0aGVtZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0UGFydChjbGFzc1BhcnRPYmplY3QsIHBhdGgpIHtcbiAgbGV0IGN1cnJlbnRDbGFzc1BhcnRPYmplY3QgPSBjbGFzc1BhcnRPYmplY3Q7XG4gIHBhdGguc3BsaXQoQ0xBU1NfUEFSVF9TRVBBUkFUT1IpLmZvckVhY2gocGF0aFBhcnQgPT4ge1xuICAgIGlmICghY3VycmVudENsYXNzUGFydE9iamVjdC5uZXh0UGFydC5oYXMocGF0aFBhcnQpKSB7XG4gICAgICBjdXJyZW50Q2xhc3NQYXJ0T2JqZWN0Lm5leHRQYXJ0LnNldChwYXRoUGFydCwge1xuICAgICAgICBuZXh0UGFydDogbmV3IE1hcCgpLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXVxuICAgICAgfSk7XG4gICAgfVxuICAgIGN1cnJlbnRDbGFzc1BhcnRPYmplY3QgPSBjdXJyZW50Q2xhc3NQYXJ0T2JqZWN0Lm5leHRQYXJ0LmdldChwYXRoUGFydCk7XG4gIH0pO1xuICByZXR1cm4gY3VycmVudENsYXNzUGFydE9iamVjdDtcbn1cbmZ1bmN0aW9uIGlzVGhlbWVHZXR0ZXIoZnVuYykge1xuICByZXR1cm4gZnVuYy5pc1RoZW1lR2V0dGVyO1xufVxuZnVuY3Rpb24gZ2V0UHJlZml4ZWRDbGFzc0dyb3VwRW50cmllcyhjbGFzc0dyb3VwRW50cmllcywgcHJlZml4KSB7XG4gIGlmICghcHJlZml4KSB7XG4gICAgcmV0dXJuIGNsYXNzR3JvdXBFbnRyaWVzO1xuICB9XG4gIHJldHVybiBjbGFzc0dyb3VwRW50cmllcy5tYXAoKFtjbGFzc0dyb3VwSWQsIGNsYXNzR3JvdXBdKSA9PiB7XG4gICAgY29uc3QgcHJlZml4ZWRDbGFzc0dyb3VwID0gY2xhc3NHcm91cC5tYXAoY2xhc3NEZWZpbml0aW9uID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2xhc3NEZWZpbml0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgY2xhc3NEZWZpbml0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjbGFzc0RlZmluaXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoY2xhc3NEZWZpbml0aW9uKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gW3ByZWZpeCArIGtleSwgdmFsdWVdKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xhc3NEZWZpbml0aW9uO1xuICAgIH0pO1xuICAgIHJldHVybiBbY2xhc3NHcm91cElkLCBwcmVmaXhlZENsYXNzR3JvdXBdO1xuICB9KTtcbn1cblxuLy8gTFJVIGNhY2hlIGluc3BpcmVkIGZyb20gaGFzaGxydSAoaHR0cHM6Ly9naXRodWIuY29tL2RvbWluaWN0YXJyL2hhc2hscnUvYmxvYi92MS4wLjQvaW5kZXguanMpIGJ1dCBvYmplY3QgcmVwbGFjZWQgd2l0aCBNYXAgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZVxuZnVuY3Rpb24gY3JlYXRlTHJ1Q2FjaGUobWF4Q2FjaGVTaXplKSB7XG4gIGlmIChtYXhDYWNoZVNpemUgPCAxKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldDogKCkgPT4gdW5kZWZpbmVkLFxuICAgICAgc2V0OiAoKSA9PiB7fVxuICAgIH07XG4gIH1cbiAgbGV0IGNhY2hlU2l6ZSA9IDA7XG4gIGxldCBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgbGV0IHByZXZpb3VzQ2FjaGUgPSBuZXcgTWFwKCk7XG4gIGZ1bmN0aW9uIHVwZGF0ZShrZXksIHZhbHVlKSB7XG4gICAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgIGNhY2hlU2l6ZSsrO1xuICAgIGlmIChjYWNoZVNpemUgPiBtYXhDYWNoZVNpemUpIHtcbiAgICAgIGNhY2hlU2l6ZSA9IDA7XG4gICAgICBwcmV2aW91c0NhY2hlID0gY2FjaGU7XG4gICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBnZXQoa2V5KSB7XG4gICAgICBsZXQgdmFsdWUgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICgodmFsdWUgPSBwcmV2aW91c0NhY2hlLmdldChrZXkpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwZGF0ZShrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICBjYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuY29uc3QgSU1QT1JUQU5UX01PRElGSUVSID0gJyEnO1xuZnVuY3Rpb24gY3JlYXRlUGFyc2VDbGFzc05hbWUoY29uZmlnKSB7XG4gIGNvbnN0IHtcbiAgICBzZXBhcmF0b3IsXG4gICAgZXhwZXJpbWVudGFsUGFyc2VDbGFzc05hbWVcbiAgfSA9IGNvbmZpZztcbiAgY29uc3QgaXNTZXBhcmF0b3JTaW5nbGVDaGFyYWN0ZXIgPSBzZXBhcmF0b3IubGVuZ3RoID09PSAxO1xuICBjb25zdCBmaXJzdFNlcGFyYXRvckNoYXJhY3RlciA9IHNlcGFyYXRvclswXTtcbiAgY29uc3Qgc2VwYXJhdG9yTGVuZ3RoID0gc2VwYXJhdG9yLmxlbmd0aDtcbiAgLy8gcGFyc2VDbGFzc05hbWUgaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL3RhaWx3aW5kbGFicy90YWlsd2luZGNzcy9ibG9iL3YzLjIuMi9zcmMvdXRpbC9zcGxpdEF0VG9wTGV2ZWxPbmx5LmpzXG4gIGZ1bmN0aW9uIHBhcnNlQ2xhc3NOYW1lKGNsYXNzTmFtZSkge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IFtdO1xuICAgIGxldCBicmFja2V0RGVwdGggPSAwO1xuICAgIGxldCBtb2RpZmllclN0YXJ0ID0gMDtcbiAgICBsZXQgcG9zdGZpeE1vZGlmaWVyUG9zaXRpb247XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNsYXNzTmFtZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGxldCBjdXJyZW50Q2hhcmFjdGVyID0gY2xhc3NOYW1lW2luZGV4XTtcbiAgICAgIGlmIChicmFja2V0RGVwdGggPT09IDApIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDaGFyYWN0ZXIgPT09IGZpcnN0U2VwYXJhdG9yQ2hhcmFjdGVyICYmIChpc1NlcGFyYXRvclNpbmdsZUNoYXJhY3RlciB8fCBjbGFzc05hbWUuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VwYXJhdG9yTGVuZ3RoKSA9PT0gc2VwYXJhdG9yKSkge1xuICAgICAgICAgIG1vZGlmaWVycy5wdXNoKGNsYXNzTmFtZS5zbGljZShtb2RpZmllclN0YXJ0LCBpbmRleCkpO1xuICAgICAgICAgIG1vZGlmaWVyU3RhcnQgPSBpbmRleCArIHNlcGFyYXRvckxlbmd0aDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudENoYXJhY3RlciA9PT0gJy8nKSB7XG4gICAgICAgICAgcG9zdGZpeE1vZGlmaWVyUG9zaXRpb24gPSBpbmRleDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRDaGFyYWN0ZXIgPT09ICdbJykge1xuICAgICAgICBicmFja2V0RGVwdGgrKztcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudENoYXJhY3RlciA9PT0gJ10nKSB7XG4gICAgICAgIGJyYWNrZXREZXB0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBiYXNlQ2xhc3NOYW1lV2l0aEltcG9ydGFudE1vZGlmaWVyID0gbW9kaWZpZXJzLmxlbmd0aCA9PT0gMCA/IGNsYXNzTmFtZSA6IGNsYXNzTmFtZS5zdWJzdHJpbmcobW9kaWZpZXJTdGFydCk7XG4gICAgY29uc3QgaGFzSW1wb3J0YW50TW9kaWZpZXIgPSBiYXNlQ2xhc3NOYW1lV2l0aEltcG9ydGFudE1vZGlmaWVyLnN0YXJ0c1dpdGgoSU1QT1JUQU5UX01PRElGSUVSKTtcbiAgICBjb25zdCBiYXNlQ2xhc3NOYW1lID0gaGFzSW1wb3J0YW50TW9kaWZpZXIgPyBiYXNlQ2xhc3NOYW1lV2l0aEltcG9ydGFudE1vZGlmaWVyLnN1YnN0cmluZygxKSA6IGJhc2VDbGFzc05hbWVXaXRoSW1wb3J0YW50TW9kaWZpZXI7XG4gICAgY29uc3QgbWF5YmVQb3N0Zml4TW9kaWZpZXJQb3NpdGlvbiA9IHBvc3RmaXhNb2RpZmllclBvc2l0aW9uICYmIHBvc3RmaXhNb2RpZmllclBvc2l0aW9uID4gbW9kaWZpZXJTdGFydCA/IHBvc3RmaXhNb2RpZmllclBvc2l0aW9uIC0gbW9kaWZpZXJTdGFydCA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kaWZpZXJzLFxuICAgICAgaGFzSW1wb3J0YW50TW9kaWZpZXIsXG4gICAgICBiYXNlQ2xhc3NOYW1lLFxuICAgICAgbWF5YmVQb3N0Zml4TW9kaWZpZXJQb3NpdGlvblxuICAgIH07XG4gIH1cbiAgaWYgKGV4cGVyaW1lbnRhbFBhcnNlQ2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhcnNlQ2xhc3NOYW1lRXhwZXJpbWVudGFsKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGV4cGVyaW1lbnRhbFBhcnNlQ2xhc3NOYW1lKHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBwYXJzZUNsYXNzTmFtZVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcGFyc2VDbGFzc05hbWU7XG59XG4vKipcbiAqIFNvcnRzIG1vZGlmaWVycyBhY2NvcmRpbmcgdG8gZm9sbG93aW5nIHNjaGVtYTpcbiAqIC0gUHJlZGVmaW5lZCBtb2RpZmllcnMgYXJlIHNvcnRlZCBhbHBoYWJldGljYWxseVxuICogLSBXaGVuIGFuIGFyYml0cmFyeSB2YXJpYW50IGFwcGVhcnMsIGl0IG11c3QgYmUgcHJlc2VydmVkIHdoaWNoIG1vZGlmaWVycyBhcmUgYmVmb3JlIGFuZCBhZnRlciBpdFxuICovXG5mdW5jdGlvbiBzb3J0TW9kaWZpZXJzKG1vZGlmaWVycykge1xuICBpZiAobW9kaWZpZXJzLmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVycztcbiAgfVxuICBjb25zdCBzb3J0ZWRNb2RpZmllcnMgPSBbXTtcbiAgbGV0IHVuc29ydGVkTW9kaWZpZXJzID0gW107XG4gIG1vZGlmaWVycy5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBjb25zdCBpc0FyYml0cmFyeVZhcmlhbnQgPSBtb2RpZmllclswXSA9PT0gJ1snO1xuICAgIGlmIChpc0FyYml0cmFyeVZhcmlhbnQpIHtcbiAgICAgIHNvcnRlZE1vZGlmaWVycy5wdXNoKC4uLnVuc29ydGVkTW9kaWZpZXJzLnNvcnQoKSwgbW9kaWZpZXIpO1xuICAgICAgdW5zb3J0ZWRNb2RpZmllcnMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5zb3J0ZWRNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgfVxuICB9KTtcbiAgc29ydGVkTW9kaWZpZXJzLnB1c2goLi4udW5zb3J0ZWRNb2RpZmllcnMuc29ydCgpKTtcbiAgcmV0dXJuIHNvcnRlZE1vZGlmaWVycztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbmZpZ1V0aWxzKGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIGNhY2hlOiBjcmVhdGVMcnVDYWNoZShjb25maWcuY2FjaGVTaXplKSxcbiAgICBwYXJzZUNsYXNzTmFtZTogY3JlYXRlUGFyc2VDbGFzc05hbWUoY29uZmlnKSxcbiAgICAuLi5jcmVhdGVDbGFzc0dyb3VwVXRpbHMoY29uZmlnKVxuICB9O1xufVxuY29uc3QgU1BMSVRfQ0xBU1NFU19SRUdFWCA9IC9cXHMrLztcbmZ1bmN0aW9uIG1lcmdlQ2xhc3NMaXN0KGNsYXNzTGlzdCwgY29uZmlnVXRpbHMpIHtcbiAgY29uc3Qge1xuICAgIHBhcnNlQ2xhc3NOYW1lLFxuICAgIGdldENsYXNzR3JvdXBJZCxcbiAgICBnZXRDb25mbGljdGluZ0NsYXNzR3JvdXBJZHNcbiAgfSA9IGNvbmZpZ1V0aWxzO1xuICAvKipcbiAgICogU2V0IG9mIGNsYXNzR3JvdXBJZHMgaW4gZm9sbG93aW5nIGZvcm1hdDpcbiAgICogYHtpbXBvcnRhbnRNb2RpZmllcn17dmFyaWFudE1vZGlmaWVyc317Y2xhc3NHcm91cElkfWBcbiAgICogQGV4YW1wbGUgJ2Zsb2F0J1xuICAgKiBAZXhhbXBsZSAnaG92ZXI6Zm9jdXM6YmctY29sb3InXG4gICAqIEBleGFtcGxlICdtZDohcHInXG4gICAqL1xuICBjb25zdCBjbGFzc0dyb3Vwc0luQ29uZmxpY3QgPSBuZXcgU2V0KCk7XG4gIHJldHVybiBjbGFzc0xpc3QudHJpbSgpLnNwbGl0KFNQTElUX0NMQVNTRVNfUkVHRVgpLm1hcChvcmlnaW5hbENsYXNzTmFtZSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgbW9kaWZpZXJzLFxuICAgICAgaGFzSW1wb3J0YW50TW9kaWZpZXIsXG4gICAgICBiYXNlQ2xhc3NOYW1lLFxuICAgICAgbWF5YmVQb3N0Zml4TW9kaWZpZXJQb3NpdGlvblxuICAgIH0gPSBwYXJzZUNsYXNzTmFtZShvcmlnaW5hbENsYXNzTmFtZSk7XG4gICAgbGV0IGhhc1Bvc3RmaXhNb2RpZmllciA9IEJvb2xlYW4obWF5YmVQb3N0Zml4TW9kaWZpZXJQb3NpdGlvbik7XG4gICAgbGV0IGNsYXNzR3JvdXBJZCA9IGdldENsYXNzR3JvdXBJZChoYXNQb3N0Zml4TW9kaWZpZXIgPyBiYXNlQ2xhc3NOYW1lLnN1YnN0cmluZygwLCBtYXliZVBvc3RmaXhNb2RpZmllclBvc2l0aW9uKSA6IGJhc2VDbGFzc05hbWUpO1xuICAgIGlmICghY2xhc3NHcm91cElkKSB7XG4gICAgICBpZiAoIWhhc1Bvc3RmaXhNb2RpZmllcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzVGFpbHdpbmRDbGFzczogZmFsc2UsXG4gICAgICAgICAgb3JpZ2luYWxDbGFzc05hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNsYXNzR3JvdXBJZCA9IGdldENsYXNzR3JvdXBJZChiYXNlQ2xhc3NOYW1lKTtcbiAgICAgIGlmICghY2xhc3NHcm91cElkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNUYWlsd2luZENsYXNzOiBmYWxzZSxcbiAgICAgICAgICBvcmlnaW5hbENsYXNzTmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaGFzUG9zdGZpeE1vZGlmaWVyID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHZhcmlhbnRNb2RpZmllciA9IHNvcnRNb2RpZmllcnMobW9kaWZpZXJzKS5qb2luKCc6Jyk7XG4gICAgY29uc3QgbW9kaWZpZXJJZCA9IGhhc0ltcG9ydGFudE1vZGlmaWVyID8gdmFyaWFudE1vZGlmaWVyICsgSU1QT1JUQU5UX01PRElGSUVSIDogdmFyaWFudE1vZGlmaWVyO1xuICAgIHJldHVybiB7XG4gICAgICBpc1RhaWx3aW5kQ2xhc3M6IHRydWUsXG4gICAgICBtb2RpZmllcklkLFxuICAgICAgY2xhc3NHcm91cElkLFxuICAgICAgb3JpZ2luYWxDbGFzc05hbWUsXG4gICAgICBoYXNQb3N0Zml4TW9kaWZpZXJcbiAgICB9O1xuICB9KS5yZXZlcnNlKClcbiAgLy8gTGFzdCBjbGFzcyBpbiBjb25mbGljdCB3aW5zLCBzbyB3ZSBuZWVkIHRvIGZpbHRlciBjb25mbGljdGluZyBjbGFzc2VzIGluIHJldmVyc2Ugb3JkZXIuXG4gIC5maWx0ZXIocGFyc2VkID0+IHtcbiAgICBpZiAoIXBhcnNlZC5pc1RhaWx3aW5kQ2xhc3MpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBtb2RpZmllcklkLFxuICAgICAgY2xhc3NHcm91cElkLFxuICAgICAgaGFzUG9zdGZpeE1vZGlmaWVyXG4gICAgfSA9IHBhcnNlZDtcbiAgICBjb25zdCBjbGFzc0lkID0gbW9kaWZpZXJJZCArIGNsYXNzR3JvdXBJZDtcbiAgICBpZiAoY2xhc3NHcm91cHNJbkNvbmZsaWN0LmhhcyhjbGFzc0lkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjbGFzc0dyb3Vwc0luQ29uZmxpY3QuYWRkKGNsYXNzSWQpO1xuICAgIGdldENvbmZsaWN0aW5nQ2xhc3NHcm91cElkcyhjbGFzc0dyb3VwSWQsIGhhc1Bvc3RmaXhNb2RpZmllcikuZm9yRWFjaChncm91cCA9PiBjbGFzc0dyb3Vwc0luQ29uZmxpY3QuYWRkKG1vZGlmaWVySWQgKyBncm91cCkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9KS5yZXZlcnNlKCkubWFwKHBhcnNlZCA9PiBwYXJzZWQub3JpZ2luYWxDbGFzc05hbWUpLmpvaW4oJyAnKTtcbn1cblxuLyoqXG4gKiBUaGUgY29kZSBpbiB0aGlzIGZpbGUgaXMgY29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2x1a2VlZC9jbHN4IGFuZCBtb2RpZmllZCB0byBzdWl0IHRoZSBuZWVkcyBvZiB0YWlsd2luZC1tZXJnZSBiZXR0ZXIuXG4gKlxuICogU3BlY2lmaWNhbGx5OlxuICogLSBSdW50aW1lIGNvZGUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbHVrZWVkL2Nsc3gvYmxvYi92MS4yLjEvc3JjL2luZGV4LmpzXG4gKiAtIFR5cGVTY3JpcHQgdHlwZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbHVrZWVkL2Nsc3gvYmxvYi92MS4yLjEvY2xzeC5kLnRzXG4gKlxuICogT3JpZ2luYWwgY29kZSBoYXMgTUlUIGxpY2Vuc2U6IENvcHlyaWdodCAoYykgTHVrZSBFZHdhcmRzIDxsdWtlLmVkd2FyZHMwNUBnbWFpbC5jb20+IChsdWtlZWQuY29tKVxuICovXG5mdW5jdGlvbiB0d0pvaW4oKSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCBhcmd1bWVudDtcbiAgbGV0IHJlc29sdmVkVmFsdWU7XG4gIGxldCBzdHJpbmcgPSAnJztcbiAgd2hpbGUgKGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGlmIChhcmd1bWVudCA9IGFyZ3VtZW50c1tpbmRleCsrXSkge1xuICAgICAgaWYgKHJlc29sdmVkVmFsdWUgPSB0b1ZhbHVlKGFyZ3VtZW50KSkge1xuICAgICAgICBzdHJpbmcgJiYgKHN0cmluZyArPSAnICcpO1xuICAgICAgICBzdHJpbmcgKz0gcmVzb2x2ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn1cbmZ1bmN0aW9uIHRvVmFsdWUobWl4KSB7XG4gIGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBtaXg7XG4gIH1cbiAgbGV0IHJlc29sdmVkVmFsdWU7XG4gIGxldCBzdHJpbmcgPSAnJztcbiAgZm9yIChsZXQgayA9IDA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcbiAgICBpZiAobWl4W2tdKSB7XG4gICAgICBpZiAocmVzb2x2ZWRWYWx1ZSA9IHRvVmFsdWUobWl4W2tdKSkge1xuICAgICAgICBzdHJpbmcgJiYgKHN0cmluZyArPSAnICcpO1xuICAgICAgICBzdHJpbmcgKz0gcmVzb2x2ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRhaWx3aW5kTWVyZ2UoY3JlYXRlQ29uZmlnRmlyc3QsIC4uLmNyZWF0ZUNvbmZpZ1Jlc3QpIHtcbiAgbGV0IGNvbmZpZ1V0aWxzO1xuICBsZXQgY2FjaGVHZXQ7XG4gIGxldCBjYWNoZVNldDtcbiAgbGV0IGZ1bmN0aW9uVG9DYWxsID0gaW5pdFRhaWx3aW5kTWVyZ2U7XG4gIGZ1bmN0aW9uIGluaXRUYWlsd2luZE1lcmdlKGNsYXNzTGlzdCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGNyZWF0ZUNvbmZpZ1Jlc3QucmVkdWNlKChwcmV2aW91c0NvbmZpZywgY3JlYXRlQ29uZmlnQ3VycmVudCkgPT4gY3JlYXRlQ29uZmlnQ3VycmVudChwcmV2aW91c0NvbmZpZyksIGNyZWF0ZUNvbmZpZ0ZpcnN0KCkpO1xuICAgIGNvbmZpZ1V0aWxzID0gY3JlYXRlQ29uZmlnVXRpbHMoY29uZmlnKTtcbiAgICBjYWNoZUdldCA9IGNvbmZpZ1V0aWxzLmNhY2hlLmdldDtcbiAgICBjYWNoZVNldCA9IGNvbmZpZ1V0aWxzLmNhY2hlLnNldDtcbiAgICBmdW5jdGlvblRvQ2FsbCA9IHRhaWx3aW5kTWVyZ2U7XG4gICAgcmV0dXJuIHRhaWx3aW5kTWVyZ2UoY2xhc3NMaXN0KTtcbiAgfVxuICBmdW5jdGlvbiB0YWlsd2luZE1lcmdlKGNsYXNzTGlzdCkge1xuICAgIGNvbnN0IGNhY2hlZFJlc3VsdCA9IGNhY2hlR2V0KGNsYXNzTGlzdCk7XG4gICAgaWYgKGNhY2hlZFJlc3VsdCkge1xuICAgICAgcmV0dXJuIGNhY2hlZFJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gbWVyZ2VDbGFzc0xpc3QoY2xhc3NMaXN0LCBjb25maWdVdGlscyk7XG4gICAgY2FjaGVTZXQoY2xhc3NMaXN0LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIGNhbGxUYWlsd2luZE1lcmdlKCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvQ2FsbCh0d0pvaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gIH07XG59XG5mdW5jdGlvbiBmcm9tVGhlbWUoa2V5KSB7XG4gIGNvbnN0IHRoZW1lR2V0dGVyID0gdGhlbWUgPT4gdGhlbWVba2V5XSB8fCBbXTtcbiAgdGhlbWVHZXR0ZXIuaXNUaGVtZUdldHRlciA9IHRydWU7XG4gIHJldHVybiB0aGVtZUdldHRlcjtcbn1cbmNvbnN0IGFyYml0cmFyeVZhbHVlUmVnZXggPSAvXlxcWyg/OihbYS16LV0rKTopPyguKylcXF0kL2k7XG5jb25zdCBmcmFjdGlvblJlZ2V4ID0gL15cXGQrXFwvXFxkKyQvO1xuY29uc3Qgc3RyaW5nTGVuZ3RocyA9IC8qI19fUFVSRV9fKi9uZXcgU2V0KFsncHgnLCAnZnVsbCcsICdzY3JlZW4nXSk7XG5jb25zdCB0c2hpcnRVbml0UmVnZXggPSAvXihcXGQrKFxcLlxcZCspPyk/KHhzfHNtfG1kfGxnfHhsKSQvO1xuY29uc3QgbGVuZ3RoVW5pdFJlZ2V4ID0gL1xcZCsoJXxweHxyP2VtfFtzZGxdP3YoW2h3aWJdfG1pbnxtYXgpfHB0fHBjfGlufGNtfG1tfGNhcHxjaHxleHxyP2xofGNxKHd8aHxpfGJ8bWlufG1heCkpfFxcYihjYWxjfG1pbnxtYXh8Y2xhbXApXFwoLitcXCl8XjAkLztcbmNvbnN0IGNvbG9yRnVuY3Rpb25SZWdleCA9IC9eKHJnYmE/fGhzbGE/fGh3Ynwob2spPyhsYWJ8bGNoKSlcXCguK1xcKSQvO1xuLy8gU2hhZG93IGFsd2F5cyBiZWdpbnMgd2l0aCB4IGFuZCB5IG9mZnNldCBzZXBhcmF0ZWQgYnkgdW5kZXJzY29yZSBvcHRpb25hbGx5IHByZXBlbmRlZCBieSBpbnNldFxuY29uc3Qgc2hhZG93UmVnZXggPSAvXihpbnNldF8pPy0/KChcXGQrKT9cXC4/KFxcZCspW2Etel0rfDApXy0/KChcXGQrKT9cXC4/KFxcZCspW2Etel0rfDApLztcbmNvbnN0IGltYWdlUmVnZXggPSAvXih1cmx8aW1hZ2V8aW1hZ2Utc2V0fGNyb3NzLWZhZGV8ZWxlbWVudHwocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWx8Y29uaWMpLWdyYWRpZW50KVxcKC4rXFwpJC87XG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gaXNOdW1iZXIodmFsdWUpIHx8IHN0cmluZ0xlbmd0aHMuaGFzKHZhbHVlKSB8fCBmcmFjdGlvblJlZ2V4LnRlc3QodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNBcmJpdHJhcnlMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIGdldElzQXJiaXRyYXJ5VmFsdWUodmFsdWUsICdsZW5ndGgnLCBpc0xlbmd0aE9ubHkpO1xufVxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIEJvb2xlYW4odmFsdWUpICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSk7XG59XG5mdW5jdGlvbiBpc0FyYml0cmFyeU51bWJlcih2YWx1ZSkge1xuICByZXR1cm4gZ2V0SXNBcmJpdHJhcnlWYWx1ZSh2YWx1ZSwgJ251bWJlcicsIGlzTnVtYmVyKTtcbn1cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbih2YWx1ZSkgJiYgTnVtYmVyLmlzSW50ZWdlcihOdW1iZXIodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGlzUGVyY2VudCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuZW5kc1dpdGgoJyUnKSAmJiBpc051bWJlcih2YWx1ZS5zbGljZSgwLCAtMSkpO1xufVxuZnVuY3Rpb24gaXNBcmJpdHJhcnlWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gYXJiaXRyYXJ5VmFsdWVSZWdleC50ZXN0KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzVHNoaXJ0U2l6ZSh2YWx1ZSkge1xuICByZXR1cm4gdHNoaXJ0VW5pdFJlZ2V4LnRlc3QodmFsdWUpO1xufVxuY29uc3Qgc2l6ZUxhYmVscyA9IC8qI19fUFVSRV9fKi9uZXcgU2V0KFsnbGVuZ3RoJywgJ3NpemUnLCAncGVyY2VudGFnZSddKTtcbmZ1bmN0aW9uIGlzQXJiaXRyYXJ5U2l6ZSh2YWx1ZSkge1xuICByZXR1cm4gZ2V0SXNBcmJpdHJhcnlWYWx1ZSh2YWx1ZSwgc2l6ZUxhYmVscywgaXNOZXZlcik7XG59XG5mdW5jdGlvbiBpc0FyYml0cmFyeVBvc2l0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBnZXRJc0FyYml0cmFyeVZhbHVlKHZhbHVlLCAncG9zaXRpb24nLCBpc05ldmVyKTtcbn1cbmNvbnN0IGltYWdlTGFiZWxzID0gLyojX19QVVJFX18qL25ldyBTZXQoWydpbWFnZScsICd1cmwnXSk7XG5mdW5jdGlvbiBpc0FyYml0cmFyeUltYWdlKHZhbHVlKSB7XG4gIHJldHVybiBnZXRJc0FyYml0cmFyeVZhbHVlKHZhbHVlLCBpbWFnZUxhYmVscywgaXNJbWFnZSk7XG59XG5mdW5jdGlvbiBpc0FyYml0cmFyeVNoYWRvdyh2YWx1ZSkge1xuICByZXR1cm4gZ2V0SXNBcmJpdHJhcnlWYWx1ZSh2YWx1ZSwgJycsIGlzU2hhZG93KTtcbn1cbmZ1bmN0aW9uIGlzQW55KCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGdldElzQXJiaXRyYXJ5VmFsdWUodmFsdWUsIGxhYmVsLCB0ZXN0VmFsdWUpIHtcbiAgY29uc3QgcmVzdWx0ID0gYXJiaXRyYXJ5VmFsdWVSZWdleC5leGVjKHZhbHVlKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHRbMV0pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnID8gcmVzdWx0WzFdID09PSBsYWJlbCA6IGxhYmVsLmhhcyhyZXN1bHRbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGVzdFZhbHVlKHJlc3VsdFsyXSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNMZW5ndGhPbmx5KHZhbHVlKSB7XG4gIC8vIGBjb2xvckZ1bmN0aW9uUmVnZXhgIGNoZWNrIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGNvbG9yIGZ1bmN0aW9ucyBjYW4gaGF2ZSBwZXJjZW50YWdlcyBpbiB0aGVtIHdoaWNoIHdoaWNoIHdvdWxkIGJlIGluY29ycmVjdGx5IGNsYXNzaWZpZWQgYXMgbGVuZ3Rocy5cbiAgLy8gRm9yIGV4YW1wbGUsIGBoc2woMCAwJSAwJSlgIHdvdWxkIGJlIGNsYXNzaWZpZWQgYXMgYSBsZW5ndGggd2l0aG91dCB0aGlzIGNoZWNrLlxuICAvLyBJIGNvdWxkIGFsc28gdXNlIGxvb2tiZWhpbmQgYXNzZXJ0aW9uIGluIGBsZW5ndGhVbml0UmVnZXhgIGJ1dCB0aGF0IGlzbid0IHN1cHBvcnRlZCB3aWRlbHkgZW5vdWdoLlxuICByZXR1cm4gbGVuZ3RoVW5pdFJlZ2V4LnRlc3QodmFsdWUpICYmICFjb2xvckZ1bmN0aW9uUmVnZXgudGVzdCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc05ldmVyKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc1NoYWRvdyh2YWx1ZSkge1xuICByZXR1cm4gc2hhZG93UmVnZXgudGVzdCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc0ltYWdlKHZhbHVlKSB7XG4gIHJldHVybiBpbWFnZVJlZ2V4LnRlc3QodmFsdWUpO1xufVxuY29uc3QgdmFsaWRhdG9ycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZGVmaW5lUHJvcGVydHkoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGlzQW55LFxuICBpc0FyYml0cmFyeUltYWdlLFxuICBpc0FyYml0cmFyeUxlbmd0aCxcbiAgaXNBcmJpdHJhcnlOdW1iZXIsXG4gIGlzQXJiaXRyYXJ5UG9zaXRpb24sXG4gIGlzQXJiaXRyYXJ5U2hhZG93LFxuICBpc0FyYml0cmFyeVNpemUsXG4gIGlzQXJiaXRyYXJ5VmFsdWUsXG4gIGlzSW50ZWdlcixcbiAgaXNMZW5ndGgsXG4gIGlzTnVtYmVyLFxuICBpc1BlcmNlbnQsXG4gIGlzVHNoaXJ0U2l6ZVxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gIHZhbHVlOiAnTW9kdWxlJ1xufSk7XG5mdW5jdGlvbiBnZXREZWZhdWx0Q29uZmlnKCkge1xuICBjb25zdCBjb2xvcnMgPSBmcm9tVGhlbWUoJ2NvbG9ycycpO1xuICBjb25zdCBzcGFjaW5nID0gZnJvbVRoZW1lKCdzcGFjaW5nJyk7XG4gIGNvbnN0IGJsdXIgPSBmcm9tVGhlbWUoJ2JsdXInKTtcbiAgY29uc3QgYnJpZ2h0bmVzcyA9IGZyb21UaGVtZSgnYnJpZ2h0bmVzcycpO1xuICBjb25zdCBib3JkZXJDb2xvciA9IGZyb21UaGVtZSgnYm9yZGVyQ29sb3InKTtcbiAgY29uc3QgYm9yZGVyUmFkaXVzID0gZnJvbVRoZW1lKCdib3JkZXJSYWRpdXMnKTtcbiAgY29uc3QgYm9yZGVyU3BhY2luZyA9IGZyb21UaGVtZSgnYm9yZGVyU3BhY2luZycpO1xuICBjb25zdCBib3JkZXJXaWR0aCA9IGZyb21UaGVtZSgnYm9yZGVyV2lkdGgnKTtcbiAgY29uc3QgY29udHJhc3QgPSBmcm9tVGhlbWUoJ2NvbnRyYXN0Jyk7XG4gIGNvbnN0IGdyYXlzY2FsZSA9IGZyb21UaGVtZSgnZ3JheXNjYWxlJyk7XG4gIGNvbnN0IGh1ZVJvdGF0ZSA9IGZyb21UaGVtZSgnaHVlUm90YXRlJyk7XG4gIGNvbnN0IGludmVydCA9IGZyb21UaGVtZSgnaW52ZXJ0Jyk7XG4gIGNvbnN0IGdhcCA9IGZyb21UaGVtZSgnZ2FwJyk7XG4gIGNvbnN0IGdyYWRpZW50Q29sb3JTdG9wcyA9IGZyb21UaGVtZSgnZ3JhZGllbnRDb2xvclN0b3BzJyk7XG4gIGNvbnN0IGdyYWRpZW50Q29sb3JTdG9wUG9zaXRpb25zID0gZnJvbVRoZW1lKCdncmFkaWVudENvbG9yU3RvcFBvc2l0aW9ucycpO1xuICBjb25zdCBpbnNldCA9IGZyb21UaGVtZSgnaW5zZXQnKTtcbiAgY29uc3QgbWFyZ2luID0gZnJvbVRoZW1lKCdtYXJnaW4nKTtcbiAgY29uc3Qgb3BhY2l0eSA9IGZyb21UaGVtZSgnb3BhY2l0eScpO1xuICBjb25zdCBwYWRkaW5nID0gZnJvbVRoZW1lKCdwYWRkaW5nJyk7XG4gIGNvbnN0IHNhdHVyYXRlID0gZnJvbVRoZW1lKCdzYXR1cmF0ZScpO1xuICBjb25zdCBzY2FsZSA9IGZyb21UaGVtZSgnc2NhbGUnKTtcbiAgY29uc3Qgc2VwaWEgPSBmcm9tVGhlbWUoJ3NlcGlhJyk7XG4gIGNvbnN0IHNrZXcgPSBmcm9tVGhlbWUoJ3NrZXcnKTtcbiAgY29uc3Qgc3BhY2UgPSBmcm9tVGhlbWUoJ3NwYWNlJyk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IGZyb21UaGVtZSgndHJhbnNsYXRlJyk7XG4gIGNvbnN0IGdldE92ZXJzY3JvbGwgPSAoKSA9PiBbJ2F1dG8nLCAnY29udGFpbicsICdub25lJ107XG4gIGNvbnN0IGdldE92ZXJmbG93ID0gKCkgPT4gWydhdXRvJywgJ2hpZGRlbicsICdjbGlwJywgJ3Zpc2libGUnLCAnc2Nyb2xsJ107XG4gIGNvbnN0IGdldFNwYWNpbmdXaXRoQXV0b0FuZEFyYml0cmFyeSA9ICgpID0+IFsnYXV0bycsIGlzQXJiaXRyYXJ5VmFsdWUsIHNwYWNpbmddO1xuICBjb25zdCBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSA9ICgpID0+IFtpc0FyYml0cmFyeVZhbHVlLCBzcGFjaW5nXTtcbiAgY29uc3QgZ2V0TGVuZ3RoV2l0aEVtcHR5QW5kQXJiaXRyYXJ5ID0gKCkgPT4gWycnLCBpc0xlbmd0aCwgaXNBcmJpdHJhcnlMZW5ndGhdO1xuICBjb25zdCBnZXROdW1iZXJXaXRoQXV0b0FuZEFyYml0cmFyeSA9ICgpID0+IFsnYXV0bycsIGlzTnVtYmVyLCBpc0FyYml0cmFyeVZhbHVlXTtcbiAgY29uc3QgZ2V0UG9zaXRpb25zID0gKCkgPT4gWydib3R0b20nLCAnY2VudGVyJywgJ2xlZnQnLCAnbGVmdC1ib3R0b20nLCAnbGVmdC10b3AnLCAncmlnaHQnLCAncmlnaHQtYm90dG9tJywgJ3JpZ2h0LXRvcCcsICd0b3AnXTtcbiAgY29uc3QgZ2V0TGluZVN0eWxlcyA9ICgpID0+IFsnc29saWQnLCAnZGFzaGVkJywgJ2RvdHRlZCcsICdkb3VibGUnLCAnbm9uZSddO1xuICBjb25zdCBnZXRCbGVuZE1vZGVzID0gKCkgPT4gWydub3JtYWwnLCAnbXVsdGlwbHknLCAnc2NyZWVuJywgJ292ZXJsYXknLCAnZGFya2VuJywgJ2xpZ2h0ZW4nLCAnY29sb3ItZG9kZ2UnLCAnY29sb3ItYnVybicsICdoYXJkLWxpZ2h0JywgJ3NvZnQtbGlnaHQnLCAnZGlmZmVyZW5jZScsICdleGNsdXNpb24nLCAnaHVlJywgJ3NhdHVyYXRpb24nLCAnY29sb3InLCAnbHVtaW5vc2l0eSddO1xuICBjb25zdCBnZXRBbGlnbiA9ICgpID0+IFsnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdiZXR3ZWVuJywgJ2Fyb3VuZCcsICdldmVubHknLCAnc3RyZXRjaCddO1xuICBjb25zdCBnZXRaZXJvQW5kRW1wdHkgPSAoKSA9PiBbJycsICcwJywgaXNBcmJpdHJhcnlWYWx1ZV07XG4gIGNvbnN0IGdldEJyZWFrcyA9ICgpID0+IFsnYXV0bycsICdhdm9pZCcsICdhbGwnLCAnYXZvaWQtcGFnZScsICdwYWdlJywgJ2xlZnQnLCAncmlnaHQnLCAnY29sdW1uJ107XG4gIGNvbnN0IGdldE51bWJlciA9ICgpID0+IFtpc051bWJlciwgaXNBcmJpdHJhcnlOdW1iZXJdO1xuICBjb25zdCBnZXROdW1iZXJBbmRBcmJpdHJhcnkgPSAoKSA9PiBbaXNOdW1iZXIsIGlzQXJiaXRyYXJ5VmFsdWVdO1xuICByZXR1cm4ge1xuICAgIGNhY2hlU2l6ZTogNTAwLFxuICAgIHNlcGFyYXRvcjogJzonLFxuICAgIHRoZW1lOiB7XG4gICAgICBjb2xvcnM6IFtpc0FueV0sXG4gICAgICBzcGFjaW5nOiBbaXNMZW5ndGgsIGlzQXJiaXRyYXJ5TGVuZ3RoXSxcbiAgICAgIGJsdXI6IFsnbm9uZScsICcnLCBpc1RzaGlydFNpemUsIGlzQXJiaXRyYXJ5VmFsdWVdLFxuICAgICAgYnJpZ2h0bmVzczogZ2V0TnVtYmVyKCksXG4gICAgICBib3JkZXJDb2xvcjogW2NvbG9yc10sXG4gICAgICBib3JkZXJSYWRpdXM6IFsnbm9uZScsICcnLCAnZnVsbCcsIGlzVHNoaXJ0U2l6ZSwgaXNBcmJpdHJhcnlWYWx1ZV0sXG4gICAgICBib3JkZXJTcGFjaW5nOiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpLFxuICAgICAgYm9yZGVyV2lkdGg6IGdldExlbmd0aFdpdGhFbXB0eUFuZEFyYml0cmFyeSgpLFxuICAgICAgY29udHJhc3Q6IGdldE51bWJlcigpLFxuICAgICAgZ3JheXNjYWxlOiBnZXRaZXJvQW5kRW1wdHkoKSxcbiAgICAgIGh1ZVJvdGF0ZTogZ2V0TnVtYmVyQW5kQXJiaXRyYXJ5KCksXG4gICAgICBpbnZlcnQ6IGdldFplcm9BbmRFbXB0eSgpLFxuICAgICAgZ2FwOiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpLFxuICAgICAgZ3JhZGllbnRDb2xvclN0b3BzOiBbY29sb3JzXSxcbiAgICAgIGdyYWRpZW50Q29sb3JTdG9wUG9zaXRpb25zOiBbaXNQZXJjZW50LCBpc0FyYml0cmFyeUxlbmd0aF0sXG4gICAgICBpbnNldDogZ2V0U3BhY2luZ1dpdGhBdXRvQW5kQXJiaXRyYXJ5KCksXG4gICAgICBtYXJnaW46IGdldFNwYWNpbmdXaXRoQXV0b0FuZEFyYml0cmFyeSgpLFxuICAgICAgb3BhY2l0eTogZ2V0TnVtYmVyKCksXG4gICAgICBwYWRkaW5nOiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpLFxuICAgICAgc2F0dXJhdGU6IGdldE51bWJlcigpLFxuICAgICAgc2NhbGU6IGdldE51bWJlcigpLFxuICAgICAgc2VwaWE6IGdldFplcm9BbmRFbXB0eSgpLFxuICAgICAgc2tldzogZ2V0TnVtYmVyQW5kQXJiaXRyYXJ5KCksXG4gICAgICBzcGFjZTogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKSxcbiAgICAgIHRyYW5zbGF0ZTogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgIH0sXG4gICAgY2xhc3NHcm91cHM6IHtcbiAgICAgIC8vIExheW91dFxuICAgICAgLyoqXG4gICAgICAgKiBBc3BlY3QgUmF0aW9cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9hc3BlY3QtcmF0aW9cbiAgICAgICAqL1xuICAgICAgYXNwZWN0OiBbe1xuICAgICAgICBhc3BlY3Q6IFsnYXV0bycsICdzcXVhcmUnLCAndmlkZW8nLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIENvbnRhaW5lclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2NvbnRhaW5lclxuICAgICAgICovXG4gICAgICBjb250YWluZXI6IFsnY29udGFpbmVyJ10sXG4gICAgICAvKipcbiAgICAgICAqIENvbHVtbnNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9jb2x1bW5zXG4gICAgICAgKi9cbiAgICAgIGNvbHVtbnM6IFt7XG4gICAgICAgIGNvbHVtbnM6IFtpc1RzaGlydFNpemVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQnJlYWsgQWZ0ZXJcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9icmVhay1hZnRlclxuICAgICAgICovXG4gICAgICAnYnJlYWstYWZ0ZXInOiBbe1xuICAgICAgICAnYnJlYWstYWZ0ZXInOiBnZXRCcmVha3MoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJyZWFrIEJlZm9yZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JyZWFrLWJlZm9yZVxuICAgICAgICovXG4gICAgICAnYnJlYWstYmVmb3JlJzogW3tcbiAgICAgICAgJ2JyZWFrLWJlZm9yZSc6IGdldEJyZWFrcygpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQnJlYWsgSW5zaWRlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYnJlYWstaW5zaWRlXG4gICAgICAgKi9cbiAgICAgICdicmVhay1pbnNpZGUnOiBbe1xuICAgICAgICAnYnJlYWstaW5zaWRlJzogWydhdXRvJywgJ2F2b2lkJywgJ2F2b2lkLXBhZ2UnLCAnYXZvaWQtY29sdW1uJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3ggRGVjb3JhdGlvbiBCcmVha1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JveC1kZWNvcmF0aW9uLWJyZWFrXG4gICAgICAgKi9cbiAgICAgICdib3gtZGVjb3JhdGlvbic6IFt7XG4gICAgICAgICdib3gtZGVjb3JhdGlvbic6IFsnc2xpY2UnLCAnY2xvbmUnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJveCBTaXppbmdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3gtc2l6aW5nXG4gICAgICAgKi9cbiAgICAgIGJveDogW3tcbiAgICAgICAgYm94OiBbJ2JvcmRlcicsICdjb250ZW50J11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBEaXNwbGF5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGlzcGxheVxuICAgICAgICovXG4gICAgICBkaXNwbGF5OiBbJ2Jsb2NrJywgJ2lubGluZS1ibG9jaycsICdpbmxpbmUnLCAnZmxleCcsICdpbmxpbmUtZmxleCcsICd0YWJsZScsICdpbmxpbmUtdGFibGUnLCAndGFibGUtY2FwdGlvbicsICd0YWJsZS1jZWxsJywgJ3RhYmxlLWNvbHVtbicsICd0YWJsZS1jb2x1bW4tZ3JvdXAnLCAndGFibGUtZm9vdGVyLWdyb3VwJywgJ3RhYmxlLWhlYWRlci1ncm91cCcsICd0YWJsZS1yb3ctZ3JvdXAnLCAndGFibGUtcm93JywgJ2Zsb3ctcm9vdCcsICdncmlkJywgJ2lubGluZS1ncmlkJywgJ2NvbnRlbnRzJywgJ2xpc3QtaXRlbScsICdoaWRkZW4nXSxcbiAgICAgIC8qKlxuICAgICAgICogRmxvYXRzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZmxvYXRcbiAgICAgICAqL1xuICAgICAgZmxvYXQ6IFt7XG4gICAgICAgIGZsb2F0OiBbJ3JpZ2h0JywgJ2xlZnQnLCAnbm9uZScsICdzdGFydCcsICdlbmQnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIENsZWFyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvY2xlYXJcbiAgICAgICAqL1xuICAgICAgY2xlYXI6IFt7XG4gICAgICAgIGNsZWFyOiBbJ2xlZnQnLCAncmlnaHQnLCAnYm90aCcsICdub25lJywgJ3N0YXJ0JywgJ2VuZCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSXNvbGF0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvaXNvbGF0aW9uXG4gICAgICAgKi9cbiAgICAgIGlzb2xhdGlvbjogWydpc29sYXRlJywgJ2lzb2xhdGlvbi1hdXRvJ10sXG4gICAgICAvKipcbiAgICAgICAqIE9iamVjdCBGaXRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vYmplY3QtZml0XG4gICAgICAgKi9cbiAgICAgICdvYmplY3QtZml0JzogW3tcbiAgICAgICAgb2JqZWN0OiBbJ2NvbnRhaW4nLCAnY292ZXInLCAnZmlsbCcsICdub25lJywgJ3NjYWxlLWRvd24nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIE9iamVjdCBQb3NpdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL29iamVjdC1wb3NpdGlvblxuICAgICAgICovXG4gICAgICAnb2JqZWN0LXBvc2l0aW9uJzogW3tcbiAgICAgICAgb2JqZWN0OiBbLi4uZ2V0UG9zaXRpb25zKCksIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcmZsb3dcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vdmVyZmxvd1xuICAgICAgICovXG4gICAgICBvdmVyZmxvdzogW3tcbiAgICAgICAgb3ZlcmZsb3c6IGdldE92ZXJmbG93KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBPdmVyZmxvdyBYXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvb3ZlcmZsb3dcbiAgICAgICAqL1xuICAgICAgJ292ZXJmbG93LXgnOiBbe1xuICAgICAgICAnb3ZlcmZsb3cteCc6IGdldE92ZXJmbG93KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBPdmVyZmxvdyBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvb3ZlcmZsb3dcbiAgICAgICAqL1xuICAgICAgJ292ZXJmbG93LXknOiBbe1xuICAgICAgICAnb3ZlcmZsb3cteSc6IGdldE92ZXJmbG93KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBPdmVyc2Nyb2xsIEJlaGF2aW9yXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvb3ZlcnNjcm9sbC1iZWhhdmlvclxuICAgICAgICovXG4gICAgICBvdmVyc2Nyb2xsOiBbe1xuICAgICAgICBvdmVyc2Nyb2xsOiBnZXRPdmVyc2Nyb2xsKClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBPdmVyc2Nyb2xsIEJlaGF2aW9yIFhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vdmVyc2Nyb2xsLWJlaGF2aW9yXG4gICAgICAgKi9cbiAgICAgICdvdmVyc2Nyb2xsLXgnOiBbe1xuICAgICAgICAnb3ZlcnNjcm9sbC14JzogZ2V0T3ZlcnNjcm9sbCgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnNjcm9sbCBCZWhhdmlvciBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvb3ZlcnNjcm9sbC1iZWhhdmlvclxuICAgICAgICovXG4gICAgICAnb3ZlcnNjcm9sbC15JzogW3tcbiAgICAgICAgJ292ZXJzY3JvbGwteSc6IGdldE92ZXJzY3JvbGwoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFBvc2l0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvcG9zaXRpb25cbiAgICAgICAqL1xuICAgICAgcG9zaXRpb246IFsnc3RhdGljJywgJ2ZpeGVkJywgJ2Fic29sdXRlJywgJ3JlbGF0aXZlJywgJ3N0aWNreSddLFxuICAgICAgLyoqXG4gICAgICAgKiBUb3AgLyBSaWdodCAvIEJvdHRvbSAvIExlZnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90b3AtcmlnaHQtYm90dG9tLWxlZnRcbiAgICAgICAqL1xuICAgICAgaW5zZXQ6IFt7XG4gICAgICAgIGluc2V0OiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogUmlnaHQgLyBMZWZ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG9wLXJpZ2h0LWJvdHRvbS1sZWZ0XG4gICAgICAgKi9cbiAgICAgICdpbnNldC14JzogW3tcbiAgICAgICAgJ2luc2V0LXgnOiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVG9wIC8gQm90dG9tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG9wLXJpZ2h0LWJvdHRvbS1sZWZ0XG4gICAgICAgKi9cbiAgICAgICdpbnNldC15JzogW3tcbiAgICAgICAgJ2luc2V0LXknOiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU3RhcnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90b3AtcmlnaHQtYm90dG9tLWxlZnRcbiAgICAgICAqL1xuICAgICAgc3RhcnQ6IFt7XG4gICAgICAgIHN0YXJ0OiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogRW5kXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG9wLXJpZ2h0LWJvdHRvbS1sZWZ0XG4gICAgICAgKi9cbiAgICAgIGVuZDogW3tcbiAgICAgICAgZW5kOiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVG9wXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG9wLXJpZ2h0LWJvdHRvbS1sZWZ0XG4gICAgICAgKi9cbiAgICAgIHRvcDogW3tcbiAgICAgICAgdG9wOiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogUmlnaHRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90b3AtcmlnaHQtYm90dG9tLWxlZnRcbiAgICAgICAqL1xuICAgICAgcmlnaHQ6IFt7XG4gICAgICAgIHJpZ2h0OiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm90dG9tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG9wLXJpZ2h0LWJvdHRvbS1sZWZ0XG4gICAgICAgKi9cbiAgICAgIGJvdHRvbTogW3tcbiAgICAgICAgYm90dG9tOiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTGVmdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RvcC1yaWdodC1ib3R0b20tbGVmdFxuICAgICAgICovXG4gICAgICBsZWZ0OiBbe1xuICAgICAgICBsZWZ0OiBbaW5zZXRdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVmlzaWJpbGl0eVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Zpc2liaWxpdHlcbiAgICAgICAqL1xuICAgICAgdmlzaWJpbGl0eTogWyd2aXNpYmxlJywgJ2ludmlzaWJsZScsICdjb2xsYXBzZSddLFxuICAgICAgLyoqXG4gICAgICAgKiBaLUluZGV4XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvei1pbmRleFxuICAgICAgICovXG4gICAgICB6OiBbe1xuICAgICAgICB6OiBbJ2F1dG8nLCBpc0ludGVnZXIsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8vIEZsZXhib3ggYW5kIEdyaWRcbiAgICAgIC8qKlxuICAgICAgICogRmxleCBCYXNpc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZsZXgtYmFzaXNcbiAgICAgICAqL1xuICAgICAgYmFzaXM6IFt7XG4gICAgICAgIGJhc2lzOiBnZXRTcGFjaW5nV2l0aEF1dG9BbmRBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEZsZXggRGlyZWN0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZmxleC1kaXJlY3Rpb25cbiAgICAgICAqL1xuICAgICAgJ2ZsZXgtZGlyZWN0aW9uJzogW3tcbiAgICAgICAgZmxleDogWydyb3cnLCAncm93LXJldmVyc2UnLCAnY29sJywgJ2NvbC1yZXZlcnNlJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBGbGV4IFdyYXBcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9mbGV4LXdyYXBcbiAgICAgICAqL1xuICAgICAgJ2ZsZXgtd3JhcCc6IFt7XG4gICAgICAgIGZsZXg6IFsnd3JhcCcsICd3cmFwLXJldmVyc2UnLCAnbm93cmFwJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBGbGV4XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZmxleFxuICAgICAgICovXG4gICAgICBmbGV4OiBbe1xuICAgICAgICBmbGV4OiBbJzEnLCAnYXV0bycsICdpbml0aWFsJywgJ25vbmUnLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEZsZXggR3Jvd1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZsZXgtZ3Jvd1xuICAgICAgICovXG4gICAgICBncm93OiBbe1xuICAgICAgICBncm93OiBnZXRaZXJvQW5kRW1wdHkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEZsZXggU2hyaW5rXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZmxleC1zaHJpbmtcbiAgICAgICAqL1xuICAgICAgc2hyaW5rOiBbe1xuICAgICAgICBzaHJpbms6IGdldFplcm9BbmRFbXB0eSgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogT3JkZXJcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vcmRlclxuICAgICAgICovXG4gICAgICBvcmRlcjogW3tcbiAgICAgICAgb3JkZXI6IFsnZmlyc3QnLCAnbGFzdCcsICdub25lJywgaXNJbnRlZ2VyLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdyaWQgVGVtcGxhdGUgQ29sdW1uc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dyaWQtdGVtcGxhdGUtY29sdW1uc1xuICAgICAgICovXG4gICAgICAnZ3JpZC1jb2xzJzogW3tcbiAgICAgICAgJ2dyaWQtY29scyc6IFtpc0FueV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmlkIENvbHVtbiBTdGFydCAvIEVuZFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dyaWQtY29sdW1uXG4gICAgICAgKi9cbiAgICAgICdjb2wtc3RhcnQtZW5kJzogW3tcbiAgICAgICAgY29sOiBbJ2F1dG8nLCB7XG4gICAgICAgICAgc3BhbjogWydmdWxsJywgaXNJbnRlZ2VyLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgICB9LCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdyaWQgQ29sdW1uIFN0YXJ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZ3JpZC1jb2x1bW5cbiAgICAgICAqL1xuICAgICAgJ2NvbC1zdGFydCc6IFt7XG4gICAgICAgICdjb2wtc3RhcnQnOiBnZXROdW1iZXJXaXRoQXV0b0FuZEFyYml0cmFyeSgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogR3JpZCBDb2x1bW4gRW5kXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZ3JpZC1jb2x1bW5cbiAgICAgICAqL1xuICAgICAgJ2NvbC1lbmQnOiBbe1xuICAgICAgICAnY29sLWVuZCc6IGdldE51bWJlcldpdGhBdXRvQW5kQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmlkIFRlbXBsYXRlIFJvd3NcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmlkLXRlbXBsYXRlLXJvd3NcbiAgICAgICAqL1xuICAgICAgJ2dyaWQtcm93cyc6IFt7XG4gICAgICAgICdncmlkLXJvd3MnOiBbaXNBbnldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogR3JpZCBSb3cgU3RhcnQgLyBFbmRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmlkLXJvd1xuICAgICAgICovXG4gICAgICAncm93LXN0YXJ0LWVuZCc6IFt7XG4gICAgICAgIHJvdzogWydhdXRvJywge1xuICAgICAgICAgIHNwYW46IFtpc0ludGVnZXIsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICAgIH0sIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogR3JpZCBSb3cgU3RhcnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmlkLXJvd1xuICAgICAgICovXG4gICAgICAncm93LXN0YXJ0JzogW3tcbiAgICAgICAgJ3Jvdy1zdGFydCc6IGdldE51bWJlcldpdGhBdXRvQW5kQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmlkIFJvdyBFbmRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmlkLXJvd1xuICAgICAgICovXG4gICAgICAncm93LWVuZCc6IFt7XG4gICAgICAgICdyb3ctZW5kJzogZ2V0TnVtYmVyV2l0aEF1dG9BbmRBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdyaWQgQXV0byBGbG93XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZ3JpZC1hdXRvLWZsb3dcbiAgICAgICAqL1xuICAgICAgJ2dyaWQtZmxvdyc6IFt7XG4gICAgICAgICdncmlkLWZsb3cnOiBbJ3JvdycsICdjb2wnLCAnZGVuc2UnLCAncm93LWRlbnNlJywgJ2NvbC1kZW5zZSddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogR3JpZCBBdXRvIENvbHVtbnNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmlkLWF1dG8tY29sdW1uc1xuICAgICAgICovXG4gICAgICAnYXV0by1jb2xzJzogW3tcbiAgICAgICAgJ2F1dG8tY29scyc6IFsnYXV0bycsICdtaW4nLCAnbWF4JywgJ2ZyJywgaXNBcmJpdHJhcnlWYWx1ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmlkIEF1dG8gUm93c1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dyaWQtYXV0by1yb3dzXG4gICAgICAgKi9cbiAgICAgICdhdXRvLXJvd3MnOiBbe1xuICAgICAgICAnYXV0by1yb3dzJzogWydhdXRvJywgJ21pbicsICdtYXgnLCAnZnInLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdhcFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dhcFxuICAgICAgICovXG4gICAgICBnYXA6IFt7XG4gICAgICAgIGdhcDogW2dhcF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHYXAgWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dhcFxuICAgICAgICovXG4gICAgICAnZ2FwLXgnOiBbe1xuICAgICAgICAnZ2FwLXgnOiBbZ2FwXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdhcCBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZ2FwXG4gICAgICAgKi9cbiAgICAgICdnYXAteSc6IFt7XG4gICAgICAgICdnYXAteSc6IFtnYXBdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSnVzdGlmeSBDb250ZW50XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvanVzdGlmeS1jb250ZW50XG4gICAgICAgKi9cbiAgICAgICdqdXN0aWZ5LWNvbnRlbnQnOiBbe1xuICAgICAgICBqdXN0aWZ5OiBbJ25vcm1hbCcsIC4uLmdldEFsaWduKCldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSnVzdGlmeSBJdGVtc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2p1c3RpZnktaXRlbXNcbiAgICAgICAqL1xuICAgICAgJ2p1c3RpZnktaXRlbXMnOiBbe1xuICAgICAgICAnanVzdGlmeS1pdGVtcyc6IFsnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdzdHJldGNoJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBKdXN0aWZ5IFNlbGZcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9qdXN0aWZ5LXNlbGZcbiAgICAgICAqL1xuICAgICAgJ2p1c3RpZnktc2VsZic6IFt7XG4gICAgICAgICdqdXN0aWZ5LXNlbGYnOiBbJ2F1dG8nLCAnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdzdHJldGNoJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBBbGlnbiBDb250ZW50XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYWxpZ24tY29udGVudFxuICAgICAgICovXG4gICAgICAnYWxpZ24tY29udGVudCc6IFt7XG4gICAgICAgIGNvbnRlbnQ6IFsnbm9ybWFsJywgLi4uZ2V0QWxpZ24oKSwgJ2Jhc2VsaW5lJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBBbGlnbiBJdGVtc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2FsaWduLWl0ZW1zXG4gICAgICAgKi9cbiAgICAgICdhbGlnbi1pdGVtcyc6IFt7XG4gICAgICAgIGl0ZW1zOiBbJ3N0YXJ0JywgJ2VuZCcsICdjZW50ZXInLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQWxpZ24gU2VsZlxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2FsaWduLXNlbGZcbiAgICAgICAqL1xuICAgICAgJ2FsaWduLXNlbGYnOiBbe1xuICAgICAgICBzZWxmOiBbJ2F1dG8nLCAnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdzdHJldGNoJywgJ2Jhc2VsaW5lJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQbGFjZSBDb250ZW50XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvcGxhY2UtY29udGVudFxuICAgICAgICovXG4gICAgICAncGxhY2UtY29udGVudCc6IFt7XG4gICAgICAgICdwbGFjZS1jb250ZW50JzogWy4uLmdldEFsaWduKCksICdiYXNlbGluZSddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogUGxhY2UgSXRlbXNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9wbGFjZS1pdGVtc1xuICAgICAgICovXG4gICAgICAncGxhY2UtaXRlbXMnOiBbe1xuICAgICAgICAncGxhY2UtaXRlbXMnOiBbJ3N0YXJ0JywgJ2VuZCcsICdjZW50ZXInLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogUGxhY2UgU2VsZlxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BsYWNlLXNlbGZcbiAgICAgICAqL1xuICAgICAgJ3BsYWNlLXNlbGYnOiBbe1xuICAgICAgICAncGxhY2Utc2VsZic6IFsnYXV0bycsICdzdGFydCcsICdlbmQnLCAnY2VudGVyJywgJ3N0cmV0Y2gnXVxuICAgICAgfV0sXG4gICAgICAvLyBTcGFjaW5nXG4gICAgICAvKipcbiAgICAgICAqIFBhZGRpbmdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9wYWRkaW5nXG4gICAgICAgKi9cbiAgICAgIHA6IFt7XG4gICAgICAgIHA6IFtwYWRkaW5nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFBhZGRpbmcgWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BhZGRpbmdcbiAgICAgICAqL1xuICAgICAgcHg6IFt7XG4gICAgICAgIHB4OiBbcGFkZGluZ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQYWRkaW5nIFlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9wYWRkaW5nXG4gICAgICAgKi9cbiAgICAgIHB5OiBbe1xuICAgICAgICBweTogW3BhZGRpbmddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogUGFkZGluZyBTdGFydFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BhZGRpbmdcbiAgICAgICAqL1xuICAgICAgcHM6IFt7XG4gICAgICAgIHBzOiBbcGFkZGluZ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQYWRkaW5nIEVuZFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BhZGRpbmdcbiAgICAgICAqL1xuICAgICAgcGU6IFt7XG4gICAgICAgIHBlOiBbcGFkZGluZ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQYWRkaW5nIFRvcFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BhZGRpbmdcbiAgICAgICAqL1xuICAgICAgcHQ6IFt7XG4gICAgICAgIHB0OiBbcGFkZGluZ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQYWRkaW5nIFJpZ2h0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvcGFkZGluZ1xuICAgICAgICovXG4gICAgICBwcjogW3tcbiAgICAgICAgcHI6IFtwYWRkaW5nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFBhZGRpbmcgQm90dG9tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvcGFkZGluZ1xuICAgICAgICovXG4gICAgICBwYjogW3tcbiAgICAgICAgcGI6IFtwYWRkaW5nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFBhZGRpbmcgTGVmdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BhZGRpbmdcbiAgICAgICAqL1xuICAgICAgcGw6IFt7XG4gICAgICAgIHBsOiBbcGFkZGluZ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBNYXJnaW5cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9tYXJnaW5cbiAgICAgICAqL1xuICAgICAgbTogW3tcbiAgICAgICAgbTogW21hcmdpbl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBNYXJnaW4gWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21hcmdpblxuICAgICAgICovXG4gICAgICBteDogW3tcbiAgICAgICAgbXg6IFttYXJnaW5dXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTWFyZ2luIFlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9tYXJnaW5cbiAgICAgICAqL1xuICAgICAgbXk6IFt7XG4gICAgICAgIG15OiBbbWFyZ2luXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIE1hcmdpbiBTdGFydFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21hcmdpblxuICAgICAgICovXG4gICAgICBtczogW3tcbiAgICAgICAgbXM6IFttYXJnaW5dXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTWFyZ2luIEVuZFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21hcmdpblxuICAgICAgICovXG4gICAgICBtZTogW3tcbiAgICAgICAgbWU6IFttYXJnaW5dXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTWFyZ2luIFRvcFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21hcmdpblxuICAgICAgICovXG4gICAgICBtdDogW3tcbiAgICAgICAgbXQ6IFttYXJnaW5dXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTWFyZ2luIFJpZ2h0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvbWFyZ2luXG4gICAgICAgKi9cbiAgICAgIG1yOiBbe1xuICAgICAgICBtcjogW21hcmdpbl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBNYXJnaW4gQm90dG9tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvbWFyZ2luXG4gICAgICAgKi9cbiAgICAgIG1iOiBbe1xuICAgICAgICBtYjogW21hcmdpbl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBNYXJnaW4gTGVmdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21hcmdpblxuICAgICAgICovXG4gICAgICBtbDogW3tcbiAgICAgICAgbWw6IFttYXJnaW5dXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU3BhY2UgQmV0d2VlbiBYXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc3BhY2VcbiAgICAgICAqL1xuICAgICAgJ3NwYWNlLXgnOiBbe1xuICAgICAgICAnc3BhY2UteCc6IFtzcGFjZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTcGFjZSBCZXR3ZWVuIFggUmV2ZXJzZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3NwYWNlXG4gICAgICAgKi9cbiAgICAgICdzcGFjZS14LXJldmVyc2UnOiBbJ3NwYWNlLXgtcmV2ZXJzZSddLFxuICAgICAgLyoqXG4gICAgICAgKiBTcGFjZSBCZXR3ZWVuIFlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zcGFjZVxuICAgICAgICovXG4gICAgICAnc3BhY2UteSc6IFt7XG4gICAgICAgICdzcGFjZS15JzogW3NwYWNlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNwYWNlIEJldHdlZW4gWSBSZXZlcnNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc3BhY2VcbiAgICAgICAqL1xuICAgICAgJ3NwYWNlLXktcmV2ZXJzZSc6IFsnc3BhY2UteS1yZXZlcnNlJ10sXG4gICAgICAvLyBTaXppbmdcbiAgICAgIC8qKlxuICAgICAgICogV2lkdGhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy93aWR0aFxuICAgICAgICovXG4gICAgICB3OiBbe1xuICAgICAgICB3OiBbJ2F1dG8nLCAnbWluJywgJ21heCcsICdmaXQnLCAnc3Z3JywgJ2x2dycsICdkdncnLCBpc0FyYml0cmFyeVZhbHVlLCBzcGFjaW5nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIE1pbi1XaWR0aFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21pbi13aWR0aFxuICAgICAgICovXG4gICAgICAnbWluLXcnOiBbe1xuICAgICAgICAnbWluLXcnOiBbaXNBcmJpdHJhcnlWYWx1ZSwgc3BhY2luZywgJ21pbicsICdtYXgnLCAnZml0J11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBNYXgtV2lkdGhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9tYXgtd2lkdGhcbiAgICAgICAqL1xuICAgICAgJ21heC13JzogW3tcbiAgICAgICAgJ21heC13JzogW2lzQXJiaXRyYXJ5VmFsdWUsIHNwYWNpbmcsICdub25lJywgJ2Z1bGwnLCAnbWluJywgJ21heCcsICdmaXQnLCAncHJvc2UnLCB7XG4gICAgICAgICAgc2NyZWVuOiBbaXNUc2hpcnRTaXplXVxuICAgICAgICB9LCBpc1RzaGlydFNpemVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSGVpZ2h0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvaGVpZ2h0XG4gICAgICAgKi9cbiAgICAgIGg6IFt7XG4gICAgICAgIGg6IFtpc0FyYml0cmFyeVZhbHVlLCBzcGFjaW5nLCAnYXV0bycsICdtaW4nLCAnbWF4JywgJ2ZpdCcsICdzdmgnLCAnbHZoJywgJ2R2aCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTWluLUhlaWdodFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21pbi1oZWlnaHRcbiAgICAgICAqL1xuICAgICAgJ21pbi1oJzogW3tcbiAgICAgICAgJ21pbi1oJzogW2lzQXJiaXRyYXJ5VmFsdWUsIHNwYWNpbmcsICdtaW4nLCAnbWF4JywgJ2ZpdCcsICdzdmgnLCAnbHZoJywgJ2R2aCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTWF4LUhlaWdodFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL21heC1oZWlnaHRcbiAgICAgICAqL1xuICAgICAgJ21heC1oJzogW3tcbiAgICAgICAgJ21heC1oJzogW2lzQXJiaXRyYXJ5VmFsdWUsIHNwYWNpbmcsICdtaW4nLCAnbWF4JywgJ2ZpdCcsICdzdmgnLCAnbHZoJywgJ2R2aCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2l6ZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3NpemVcbiAgICAgICAqL1xuICAgICAgc2l6ZTogW3tcbiAgICAgICAgc2l6ZTogW2lzQXJiaXRyYXJ5VmFsdWUsIHNwYWNpbmcsICdhdXRvJywgJ21pbicsICdtYXgnLCAnZml0J11cbiAgICAgIH1dLFxuICAgICAgLy8gVHlwb2dyYXBoeVxuICAgICAgLyoqXG4gICAgICAgKiBGb250IFNpemVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9mb250LXNpemVcbiAgICAgICAqL1xuICAgICAgJ2ZvbnQtc2l6ZSc6IFt7XG4gICAgICAgIHRleHQ6IFsnYmFzZScsIGlzVHNoaXJ0U2l6ZSwgaXNBcmJpdHJhcnlMZW5ndGhdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogRm9udCBTbW9vdGhpbmdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9mb250LXNtb290aGluZ1xuICAgICAgICovXG4gICAgICAnZm9udC1zbW9vdGhpbmcnOiBbJ2FudGlhbGlhc2VkJywgJ3N1YnBpeGVsLWFudGlhbGlhc2VkJ10sXG4gICAgICAvKipcbiAgICAgICAqIEZvbnQgU3R5bGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9mb250LXN0eWxlXG4gICAgICAgKi9cbiAgICAgICdmb250LXN0eWxlJzogWydpdGFsaWMnLCAnbm90LWl0YWxpYyddLFxuICAgICAgLyoqXG4gICAgICAgKiBGb250IFdlaWdodFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZvbnQtd2VpZ2h0XG4gICAgICAgKi9cbiAgICAgICdmb250LXdlaWdodCc6IFt7XG4gICAgICAgIGZvbnQ6IFsndGhpbicsICdleHRyYWxpZ2h0JywgJ2xpZ2h0JywgJ25vcm1hbCcsICdtZWRpdW0nLCAnc2VtaWJvbGQnLCAnYm9sZCcsICdleHRyYWJvbGQnLCAnYmxhY2snLCBpc0FyYml0cmFyeU51bWJlcl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBGb250IEZhbWlseVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZvbnQtZmFtaWx5XG4gICAgICAgKi9cbiAgICAgICdmb250LWZhbWlseSc6IFt7XG4gICAgICAgIGZvbnQ6IFtpc0FueV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBGb250IFZhcmlhbnQgTnVtZXJpY1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZvbnQtdmFyaWFudC1udW1lcmljXG4gICAgICAgKi9cbiAgICAgICdmdm4tbm9ybWFsJzogWydub3JtYWwtbnVtcyddLFxuICAgICAgLyoqXG4gICAgICAgKiBGb250IFZhcmlhbnQgTnVtZXJpY1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZvbnQtdmFyaWFudC1udW1lcmljXG4gICAgICAgKi9cbiAgICAgICdmdm4tb3JkaW5hbCc6IFsnb3JkaW5hbCddLFxuICAgICAgLyoqXG4gICAgICAgKiBGb250IFZhcmlhbnQgTnVtZXJpY1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZvbnQtdmFyaWFudC1udW1lcmljXG4gICAgICAgKi9cbiAgICAgICdmdm4tc2xhc2hlZC16ZXJvJzogWydzbGFzaGVkLXplcm8nXSxcbiAgICAgIC8qKlxuICAgICAgICogRm9udCBWYXJpYW50IE51bWVyaWNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9mb250LXZhcmlhbnQtbnVtZXJpY1xuICAgICAgICovXG4gICAgICAnZnZuLWZpZ3VyZSc6IFsnbGluaW5nLW51bXMnLCAnb2xkc3R5bGUtbnVtcyddLFxuICAgICAgLyoqXG4gICAgICAgKiBGb250IFZhcmlhbnQgTnVtZXJpY1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2ZvbnQtdmFyaWFudC1udW1lcmljXG4gICAgICAgKi9cbiAgICAgICdmdm4tc3BhY2luZyc6IFsncHJvcG9ydGlvbmFsLW51bXMnLCAndGFidWxhci1udW1zJ10sXG4gICAgICAvKipcbiAgICAgICAqIEZvbnQgVmFyaWFudCBOdW1lcmljXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZm9udC12YXJpYW50LW51bWVyaWNcbiAgICAgICAqL1xuICAgICAgJ2Z2bi1mcmFjdGlvbic6IFsnZGlhZ29uYWwtZnJhY3Rpb25zJywgJ3N0YWNrZWQtZnJhY3RvbnMnXSxcbiAgICAgIC8qKlxuICAgICAgICogTGV0dGVyIFNwYWNpbmdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9sZXR0ZXItc3BhY2luZ1xuICAgICAgICovXG4gICAgICB0cmFja2luZzogW3tcbiAgICAgICAgdHJhY2tpbmc6IFsndGlnaHRlcicsICd0aWdodCcsICdub3JtYWwnLCAnd2lkZScsICd3aWRlcicsICd3aWRlc3QnLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIExpbmUgQ2xhbXBcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9saW5lLWNsYW1wXG4gICAgICAgKi9cbiAgICAgICdsaW5lLWNsYW1wJzogW3tcbiAgICAgICAgJ2xpbmUtY2xhbXAnOiBbJ25vbmUnLCBpc051bWJlciwgaXNBcmJpdHJhcnlOdW1iZXJdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTGluZSBIZWlnaHRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9saW5lLWhlaWdodFxuICAgICAgICovXG4gICAgICBsZWFkaW5nOiBbe1xuICAgICAgICBsZWFkaW5nOiBbJ25vbmUnLCAndGlnaHQnLCAnc251ZycsICdub3JtYWwnLCAncmVsYXhlZCcsICdsb29zZScsIGlzTGVuZ3RoLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgU3R5bGUgSW1hZ2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9saXN0LXN0eWxlLWltYWdlXG4gICAgICAgKi9cbiAgICAgICdsaXN0LWltYWdlJzogW3tcbiAgICAgICAgJ2xpc3QtaW1hZ2UnOiBbJ25vbmUnLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgU3R5bGUgVHlwZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2xpc3Qtc3R5bGUtdHlwZVxuICAgICAgICovXG4gICAgICAnbGlzdC1zdHlsZS10eXBlJzogW3tcbiAgICAgICAgbGlzdDogWydub25lJywgJ2Rpc2MnLCAnZGVjaW1hbCcsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogTGlzdCBTdHlsZSBQb3NpdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2xpc3Qtc3R5bGUtcG9zaXRpb25cbiAgICAgICAqL1xuICAgICAgJ2xpc3Qtc3R5bGUtcG9zaXRpb24nOiBbe1xuICAgICAgICBsaXN0OiBbJ2luc2lkZScsICdvdXRzaWRlJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQbGFjZWhvbGRlciBDb2xvclxuICAgICAgICogQGRlcHJlY2F0ZWQgc2luY2UgVGFpbHdpbmQgQ1NTIHYzLjAuMFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BsYWNlaG9sZGVyLWNvbG9yXG4gICAgICAgKi9cbiAgICAgICdwbGFjZWhvbGRlci1jb2xvcic6IFt7XG4gICAgICAgIHBsYWNlaG9sZGVyOiBbY29sb3JzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFBsYWNlaG9sZGVyIE9wYWNpdHlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9wbGFjZWhvbGRlci1vcGFjaXR5XG4gICAgICAgKi9cbiAgICAgICdwbGFjZWhvbGRlci1vcGFjaXR5JzogW3tcbiAgICAgICAgJ3BsYWNlaG9sZGVyLW9wYWNpdHknOiBbb3BhY2l0eV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IEFsaWdubWVudFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RleHQtYWxpZ25cbiAgICAgICAqL1xuICAgICAgJ3RleHQtYWxpZ25tZW50JzogW3tcbiAgICAgICAgdGV4dDogWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5JywgJ3N0YXJ0JywgJ2VuZCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVGV4dCBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RleHQtY29sb3JcbiAgICAgICAqL1xuICAgICAgJ3RleHQtY29sb3InOiBbe1xuICAgICAgICB0ZXh0OiBbY29sb3JzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFRleHQgT3BhY2l0eVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RleHQtb3BhY2l0eVxuICAgICAgICovXG4gICAgICAndGV4dC1vcGFjaXR5JzogW3tcbiAgICAgICAgJ3RleHQtb3BhY2l0eSc6IFtvcGFjaXR5XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFRleHQgRGVjb3JhdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RleHQtZGVjb3JhdGlvblxuICAgICAgICovXG4gICAgICAndGV4dC1kZWNvcmF0aW9uJzogWyd1bmRlcmxpbmUnLCAnb3ZlcmxpbmUnLCAnbGluZS10aHJvdWdoJywgJ25vLXVuZGVybGluZSddLFxuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IERlY29yYXRpb24gU3R5bGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90ZXh0LWRlY29yYXRpb24tc3R5bGVcbiAgICAgICAqL1xuICAgICAgJ3RleHQtZGVjb3JhdGlvbi1zdHlsZSc6IFt7XG4gICAgICAgIGRlY29yYXRpb246IFsuLi5nZXRMaW5lU3R5bGVzKCksICd3YXZ5J11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IERlY29yYXRpb24gVGhpY2tuZXNzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzc1xuICAgICAgICovXG4gICAgICAndGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzcyc6IFt7XG4gICAgICAgIGRlY29yYXRpb246IFsnYXV0bycsICdmcm9tLWZvbnQnLCBpc0xlbmd0aCwgaXNBcmJpdHJhcnlMZW5ndGhdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVGV4dCBVbmRlcmxpbmUgT2Zmc2V0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdGV4dC11bmRlcmxpbmUtb2Zmc2V0XG4gICAgICAgKi9cbiAgICAgICd1bmRlcmxpbmUtb2Zmc2V0JzogW3tcbiAgICAgICAgJ3VuZGVybGluZS1vZmZzZXQnOiBbJ2F1dG8nLCBpc0xlbmd0aCwgaXNBcmJpdHJhcnlWYWx1ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IERlY29yYXRpb24gQ29sb3JcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90ZXh0LWRlY29yYXRpb24tY29sb3JcbiAgICAgICAqL1xuICAgICAgJ3RleHQtZGVjb3JhdGlvbi1jb2xvcic6IFt7XG4gICAgICAgIGRlY29yYXRpb246IFtjb2xvcnNdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVGV4dCBUcmFuc2Zvcm1cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90ZXh0LXRyYW5zZm9ybVxuICAgICAgICovXG4gICAgICAndGV4dC10cmFuc2Zvcm0nOiBbJ3VwcGVyY2FzZScsICdsb3dlcmNhc2UnLCAnY2FwaXRhbGl6ZScsICdub3JtYWwtY2FzZSddLFxuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IE92ZXJmbG93XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdGV4dC1vdmVyZmxvd1xuICAgICAgICovXG4gICAgICAndGV4dC1vdmVyZmxvdyc6IFsndHJ1bmNhdGUnLCAndGV4dC1lbGxpcHNpcycsICd0ZXh0LWNsaXAnXSxcbiAgICAgIC8qKlxuICAgICAgICogVGV4dCBXcmFwXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdGV4dC13cmFwXG4gICAgICAgKi9cbiAgICAgICd0ZXh0LXdyYXAnOiBbe1xuICAgICAgICB0ZXh0OiBbJ3dyYXAnLCAnbm93cmFwJywgJ2JhbGFuY2UnLCAncHJldHR5J11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IEluZGVudFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RleHQtaW5kZW50XG4gICAgICAgKi9cbiAgICAgIGluZGVudDogW3tcbiAgICAgICAgaW5kZW50OiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVmVydGljYWwgQWxpZ25tZW50XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdmVydGljYWwtYWxpZ25cbiAgICAgICAqL1xuICAgICAgJ3ZlcnRpY2FsLWFsaWduJzogW3tcbiAgICAgICAgYWxpZ246IFsnYmFzZWxpbmUnLCAndG9wJywgJ21pZGRsZScsICdib3R0b20nLCAndGV4dC10b3AnLCAndGV4dC1ib3R0b20nLCAnc3ViJywgJ3N1cGVyJywgaXNBcmJpdHJhcnlWYWx1ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBXaGl0ZXNwYWNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvd2hpdGVzcGFjZVxuICAgICAgICovXG4gICAgICB3aGl0ZXNwYWNlOiBbe1xuICAgICAgICB3aGl0ZXNwYWNlOiBbJ25vcm1hbCcsICdub3dyYXAnLCAncHJlJywgJ3ByZS1saW5lJywgJ3ByZS13cmFwJywgJ2JyZWFrLXNwYWNlcyddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogV29yZCBCcmVha1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3dvcmQtYnJlYWtcbiAgICAgICAqL1xuICAgICAgYnJlYWs6IFt7XG4gICAgICAgIGJyZWFrOiBbJ25vcm1hbCcsICd3b3JkcycsICdhbGwnLCAna2VlcCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSHlwaGVuc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2h5cGhlbnNcbiAgICAgICAqL1xuICAgICAgaHlwaGVuczogW3tcbiAgICAgICAgaHlwaGVuczogWydub25lJywgJ21hbnVhbCcsICdhdXRvJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBDb250ZW50XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvY29udGVudFxuICAgICAgICovXG4gICAgICBjb250ZW50OiBbe1xuICAgICAgICBjb250ZW50OiBbJ25vbmUnLCBpc0FyYml0cmFyeVZhbHVlXVxuICAgICAgfV0sXG4gICAgICAvLyBCYWNrZ3JvdW5kc1xuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZ3JvdW5kIEF0dGFjaG1lbnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9iYWNrZ3JvdW5kLWF0dGFjaG1lbnRcbiAgICAgICAqL1xuICAgICAgJ2JnLWF0dGFjaG1lbnQnOiBbe1xuICAgICAgICBiZzogWydmaXhlZCcsICdsb2NhbCcsICdzY3JvbGwnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJhY2tncm91bmQgQ2xpcFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tncm91bmQtY2xpcFxuICAgICAgICovXG4gICAgICAnYmctY2xpcCc6IFt7XG4gICAgICAgICdiZy1jbGlwJzogWydib3JkZXInLCAncGFkZGluZycsICdjb250ZW50JywgJ3RleHQnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJhY2tncm91bmQgT3BhY2l0eVxuICAgICAgICogQGRlcHJlY2F0ZWQgc2luY2UgVGFpbHdpbmQgQ1NTIHYzLjAuMFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tncm91bmQtb3BhY2l0eVxuICAgICAgICovXG4gICAgICAnYmctb3BhY2l0eSc6IFt7XG4gICAgICAgICdiZy1vcGFjaXR5JzogW29wYWNpdHldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2dyb3VuZCBPcmlnaW5cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9iYWNrZ3JvdW5kLW9yaWdpblxuICAgICAgICovXG4gICAgICAnYmctb3JpZ2luJzogW3tcbiAgICAgICAgJ2JnLW9yaWdpbic6IFsnYm9yZGVyJywgJ3BhZGRpbmcnLCAnY29udGVudCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2dyb3VuZCBQb3NpdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tncm91bmQtcG9zaXRpb25cbiAgICAgICAqL1xuICAgICAgJ2JnLXBvc2l0aW9uJzogW3tcbiAgICAgICAgYmc6IFsuLi5nZXRQb3NpdGlvbnMoKSwgaXNBcmJpdHJhcnlQb3NpdGlvbl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZ3JvdW5kIFJlcGVhdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tncm91bmQtcmVwZWF0XG4gICAgICAgKi9cbiAgICAgICdiZy1yZXBlYXQnOiBbe1xuICAgICAgICBiZzogWyduby1yZXBlYXQnLCB7XG4gICAgICAgICAgcmVwZWF0OiBbJycsICd4JywgJ3knLCAncm91bmQnLCAnc3BhY2UnXVxuICAgICAgICB9XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJhY2tncm91bmQgU2l6ZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tncm91bmQtc2l6ZVxuICAgICAgICovXG4gICAgICAnYmctc2l6ZSc6IFt7XG4gICAgICAgIGJnOiBbJ2F1dG8nLCAnY292ZXInLCAnY29udGFpbicsIGlzQXJiaXRyYXJ5U2l6ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZ3JvdW5kIEltYWdlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYmFja2dyb3VuZC1pbWFnZVxuICAgICAgICovXG4gICAgICAnYmctaW1hZ2UnOiBbe1xuICAgICAgICBiZzogWydub25lJywge1xuICAgICAgICAgICdncmFkaWVudC10byc6IFsndCcsICd0cicsICdyJywgJ2JyJywgJ2InLCAnYmwnLCAnbCcsICd0bCddXG4gICAgICAgIH0sIGlzQXJiaXRyYXJ5SW1hZ2VdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2dyb3VuZCBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tncm91bmQtY29sb3JcbiAgICAgICAqL1xuICAgICAgJ2JnLWNvbG9yJzogW3tcbiAgICAgICAgYmc6IFtjb2xvcnNdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogR3JhZGllbnQgQ29sb3IgU3RvcHMgRnJvbSBQb3NpdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dyYWRpZW50LWNvbG9yLXN0b3BzXG4gICAgICAgKi9cbiAgICAgICdncmFkaWVudC1mcm9tLXBvcyc6IFt7XG4gICAgICAgIGZyb206IFtncmFkaWVudENvbG9yU3RvcFBvc2l0aW9uc11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmFkaWVudCBDb2xvciBTdG9wcyBWaWEgUG9zaXRpb25cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmFkaWVudC1jb2xvci1zdG9wc1xuICAgICAgICovXG4gICAgICAnZ3JhZGllbnQtdmlhLXBvcyc6IFt7XG4gICAgICAgIHZpYTogW2dyYWRpZW50Q29sb3JTdG9wUG9zaXRpb25zXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdyYWRpZW50IENvbG9yIFN0b3BzIFRvIFBvc2l0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZ3JhZGllbnQtY29sb3Itc3RvcHNcbiAgICAgICAqL1xuICAgICAgJ2dyYWRpZW50LXRvLXBvcyc6IFt7XG4gICAgICAgIHRvOiBbZ3JhZGllbnRDb2xvclN0b3BQb3NpdGlvbnNdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogR3JhZGllbnQgQ29sb3IgU3RvcHMgRnJvbVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2dyYWRpZW50LWNvbG9yLXN0b3BzXG4gICAgICAgKi9cbiAgICAgICdncmFkaWVudC1mcm9tJzogW3tcbiAgICAgICAgZnJvbTogW2dyYWRpZW50Q29sb3JTdG9wc11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmFkaWVudCBDb2xvciBTdG9wcyBWaWFcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmFkaWVudC1jb2xvci1zdG9wc1xuICAgICAgICovXG4gICAgICAnZ3JhZGllbnQtdmlhJzogW3tcbiAgICAgICAgdmlhOiBbZ3JhZGllbnRDb2xvclN0b3BzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEdyYWRpZW50IENvbG9yIFN0b3BzIFRvXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZ3JhZGllbnQtY29sb3Itc3RvcHNcbiAgICAgICAqL1xuICAgICAgJ2dyYWRpZW50LXRvJzogW3tcbiAgICAgICAgdG86IFtncmFkaWVudENvbG9yU3RvcHNdXG4gICAgICB9XSxcbiAgICAgIC8vIEJvcmRlcnNcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIFJhZGl1c1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci1yYWRpdXNcbiAgICAgICAqL1xuICAgICAgcm91bmRlZDogW3tcbiAgICAgICAgcm91bmRlZDogW2JvcmRlclJhZGl1c11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgUmFkaXVzIFN0YXJ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXJhZGl1c1xuICAgICAgICovXG4gICAgICAncm91bmRlZC1zJzogW3tcbiAgICAgICAgJ3JvdW5kZWQtcyc6IFtib3JkZXJSYWRpdXNdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIFJhZGl1cyBFbmRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItcmFkaXVzXG4gICAgICAgKi9cbiAgICAgICdyb3VuZGVkLWUnOiBbe1xuICAgICAgICAncm91bmRlZC1lJzogW2JvcmRlclJhZGl1c11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgUmFkaXVzIFRvcFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci1yYWRpdXNcbiAgICAgICAqL1xuICAgICAgJ3JvdW5kZWQtdCc6IFt7XG4gICAgICAgICdyb3VuZGVkLXQnOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBSYWRpdXMgUmlnaHRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItcmFkaXVzXG4gICAgICAgKi9cbiAgICAgICdyb3VuZGVkLXInOiBbe1xuICAgICAgICAncm91bmRlZC1yJzogW2JvcmRlclJhZGl1c11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgUmFkaXVzIEJvdHRvbVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci1yYWRpdXNcbiAgICAgICAqL1xuICAgICAgJ3JvdW5kZWQtYic6IFt7XG4gICAgICAgICdyb3VuZGVkLWInOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBSYWRpdXMgTGVmdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci1yYWRpdXNcbiAgICAgICAqL1xuICAgICAgJ3JvdW5kZWQtbCc6IFt7XG4gICAgICAgICdyb3VuZGVkLWwnOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBSYWRpdXMgU3RhcnQgU3RhcnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItcmFkaXVzXG4gICAgICAgKi9cbiAgICAgICdyb3VuZGVkLXNzJzogW3tcbiAgICAgICAgJ3JvdW5kZWQtc3MnOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBSYWRpdXMgU3RhcnQgRW5kXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXJhZGl1c1xuICAgICAgICovXG4gICAgICAncm91bmRlZC1zZSc6IFt7XG4gICAgICAgICdyb3VuZGVkLXNlJzogW2JvcmRlclJhZGl1c11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgUmFkaXVzIEVuZCBFbmRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItcmFkaXVzXG4gICAgICAgKi9cbiAgICAgICdyb3VuZGVkLWVlJzogW3tcbiAgICAgICAgJ3JvdW5kZWQtZWUnOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBSYWRpdXMgRW5kIFN0YXJ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXJhZGl1c1xuICAgICAgICovXG4gICAgICAncm91bmRlZC1lcyc6IFt7XG4gICAgICAgICdyb3VuZGVkLWVzJzogW2JvcmRlclJhZGl1c11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgUmFkaXVzIFRvcCBMZWZ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXJhZGl1c1xuICAgICAgICovXG4gICAgICAncm91bmRlZC10bCc6IFt7XG4gICAgICAgICdyb3VuZGVkLXRsJzogW2JvcmRlclJhZGl1c11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgUmFkaXVzIFRvcCBSaWdodFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci1yYWRpdXNcbiAgICAgICAqL1xuICAgICAgJ3JvdW5kZWQtdHInOiBbe1xuICAgICAgICAncm91bmRlZC10cic6IFtib3JkZXJSYWRpdXNdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIFJhZGl1cyBCb3R0b20gUmlnaHRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItcmFkaXVzXG4gICAgICAgKi9cbiAgICAgICdyb3VuZGVkLWJyJzogW3tcbiAgICAgICAgJ3JvdW5kZWQtYnInOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBSYWRpdXMgQm90dG9tIExlZnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItcmFkaXVzXG4gICAgICAgKi9cbiAgICAgICdyb3VuZGVkLWJsJzogW3tcbiAgICAgICAgJ3JvdW5kZWQtYmwnOiBbYm9yZGVyUmFkaXVzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBXaWR0aFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci13aWR0aFxuICAgICAgICovXG4gICAgICAnYm9yZGVyLXcnOiBbe1xuICAgICAgICBib3JkZXI6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgV2lkdGggWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci13aWR0aFxuICAgICAgICovXG4gICAgICAnYm9yZGVyLXcteCc6IFt7XG4gICAgICAgICdib3JkZXIteCc6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgV2lkdGggWVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci13aWR0aFxuICAgICAgICovXG4gICAgICAnYm9yZGVyLXcteSc6IFt7XG4gICAgICAgICdib3JkZXIteSc6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgV2lkdGggU3RhcnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItd2lkdGhcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci13LXMnOiBbe1xuICAgICAgICAnYm9yZGVyLXMnOiBbYm9yZGVyV2lkdGhdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIFdpZHRoIEVuZFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci13aWR0aFxuICAgICAgICovXG4gICAgICAnYm9yZGVyLXctZSc6IFt7XG4gICAgICAgICdib3JkZXItZSc6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgV2lkdGggVG9wXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItdy10JzogW3tcbiAgICAgICAgJ2JvcmRlci10JzogW2JvcmRlcldpZHRoXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBXaWR0aCBSaWdodFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci13aWR0aFxuICAgICAgICovXG4gICAgICAnYm9yZGVyLXctcic6IFt7XG4gICAgICAgICdib3JkZXItcic6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgV2lkdGggQm90dG9tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItdy1iJzogW3tcbiAgICAgICAgJ2JvcmRlci1iJzogW2JvcmRlcldpZHRoXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBXaWR0aCBMZWZ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItdy1sJzogW3tcbiAgICAgICAgJ2JvcmRlci1sJzogW2JvcmRlcldpZHRoXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBPcGFjaXR5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLW9wYWNpdHlcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci1vcGFjaXR5JzogW3tcbiAgICAgICAgJ2JvcmRlci1vcGFjaXR5JzogW29wYWNpdHldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIFN0eWxlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXN0eWxlXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItc3R5bGUnOiBbe1xuICAgICAgICBib3JkZXI6IFsuLi5nZXRMaW5lU3R5bGVzKCksICdoaWRkZW4nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIERpdmlkZSBXaWR0aCBYXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGl2aWRlLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdkaXZpZGUteCc6IFt7XG4gICAgICAgICdkaXZpZGUteCc6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBEaXZpZGUgV2lkdGggWCBSZXZlcnNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGl2aWRlLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdkaXZpZGUteC1yZXZlcnNlJzogWydkaXZpZGUteC1yZXZlcnNlJ10sXG4gICAgICAvKipcbiAgICAgICAqIERpdmlkZSBXaWR0aCBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGl2aWRlLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdkaXZpZGUteSc6IFt7XG4gICAgICAgICdkaXZpZGUteSc6IFtib3JkZXJXaWR0aF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBEaXZpZGUgV2lkdGggWSBSZXZlcnNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGl2aWRlLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdkaXZpZGUteS1yZXZlcnNlJzogWydkaXZpZGUteS1yZXZlcnNlJ10sXG4gICAgICAvKipcbiAgICAgICAqIERpdmlkZSBPcGFjaXR5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGl2aWRlLW9wYWNpdHlcbiAgICAgICAqL1xuICAgICAgJ2RpdmlkZS1vcGFjaXR5JzogW3tcbiAgICAgICAgJ2RpdmlkZS1vcGFjaXR5JzogW29wYWNpdHldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogRGl2aWRlIFN0eWxlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZGl2aWRlLXN0eWxlXG4gICAgICAgKi9cbiAgICAgICdkaXZpZGUtc3R5bGUnOiBbe1xuICAgICAgICBkaXZpZGU6IGdldExpbmVTdHlsZXMoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JvcmRlci1jb2xvclxuICAgICAgICovXG4gICAgICAnYm9yZGVyLWNvbG9yJzogW3tcbiAgICAgICAgYm9yZGVyOiBbYm9yZGVyQ29sb3JdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIENvbG9yIFhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItY29sb3JcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci1jb2xvci14JzogW3tcbiAgICAgICAgJ2JvcmRlci14JzogW2JvcmRlckNvbG9yXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBDb2xvciBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLWNvbG9yXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItY29sb3IteSc6IFt7XG4gICAgICAgICdib3JkZXIteSc6IFtib3JkZXJDb2xvcl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgQ29sb3IgVG9wXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLWNvbG9yXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItY29sb3ItdCc6IFt7XG4gICAgICAgICdib3JkZXItdCc6IFtib3JkZXJDb2xvcl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgQ29sb3IgUmlnaHRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItY29sb3JcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci1jb2xvci1yJzogW3tcbiAgICAgICAgJ2JvcmRlci1yJzogW2JvcmRlckNvbG9yXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBDb2xvciBCb3R0b21cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItY29sb3JcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci1jb2xvci1iJzogW3tcbiAgICAgICAgJ2JvcmRlci1iJzogW2JvcmRlckNvbG9yXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBDb2xvciBMZWZ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLWNvbG9yXG4gICAgICAgKi9cbiAgICAgICdib3JkZXItY29sb3ItbCc6IFt7XG4gICAgICAgICdib3JkZXItbCc6IFtib3JkZXJDb2xvcl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBEaXZpZGUgQ29sb3JcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9kaXZpZGUtY29sb3JcbiAgICAgICAqL1xuICAgICAgJ2RpdmlkZS1jb2xvcic6IFt7XG4gICAgICAgIGRpdmlkZTogW2JvcmRlckNvbG9yXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIE91dGxpbmUgU3R5bGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vdXRsaW5lLXN0eWxlXG4gICAgICAgKi9cbiAgICAgICdvdXRsaW5lLXN0eWxlJzogW3tcbiAgICAgICAgb3V0bGluZTogWycnLCAuLi5nZXRMaW5lU3R5bGVzKCldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogT3V0bGluZSBPZmZzZXRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vdXRsaW5lLW9mZnNldFxuICAgICAgICovXG4gICAgICAnb3V0bGluZS1vZmZzZXQnOiBbe1xuICAgICAgICAnb3V0bGluZS1vZmZzZXQnOiBbaXNMZW5ndGgsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogT3V0bGluZSBXaWR0aFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL291dGxpbmUtd2lkdGhcbiAgICAgICAqL1xuICAgICAgJ291dGxpbmUtdyc6IFt7XG4gICAgICAgIG91dGxpbmU6IFtpc0xlbmd0aCwgaXNBcmJpdHJhcnlMZW5ndGhdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogT3V0bGluZSBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL291dGxpbmUtY29sb3JcbiAgICAgICAqL1xuICAgICAgJ291dGxpbmUtY29sb3InOiBbe1xuICAgICAgICBvdXRsaW5lOiBbY29sb3JzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFJpbmcgV2lkdGhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9yaW5nLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdyaW5nLXcnOiBbe1xuICAgICAgICByaW5nOiBnZXRMZW5ndGhXaXRoRW1wdHlBbmRBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFJpbmcgV2lkdGggSW5zZXRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9yaW5nLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdyaW5nLXctaW5zZXQnOiBbJ3JpbmctaW5zZXQnXSxcbiAgICAgIC8qKlxuICAgICAgICogUmluZyBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3JpbmctY29sb3JcbiAgICAgICAqL1xuICAgICAgJ3JpbmctY29sb3InOiBbe1xuICAgICAgICByaW5nOiBbY29sb3JzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFJpbmcgT3BhY2l0eVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Jpbmctb3BhY2l0eVxuICAgICAgICovXG4gICAgICAncmluZy1vcGFjaXR5JzogW3tcbiAgICAgICAgJ3Jpbmctb3BhY2l0eSc6IFtvcGFjaXR5XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFJpbmcgT2Zmc2V0IFdpZHRoXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvcmluZy1vZmZzZXQtd2lkdGhcbiAgICAgICAqL1xuICAgICAgJ3Jpbmctb2Zmc2V0LXcnOiBbe1xuICAgICAgICAncmluZy1vZmZzZXQnOiBbaXNMZW5ndGgsIGlzQXJiaXRyYXJ5TGVuZ3RoXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFJpbmcgT2Zmc2V0IENvbG9yXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvcmluZy1vZmZzZXQtY29sb3JcbiAgICAgICAqL1xuICAgICAgJ3Jpbmctb2Zmc2V0LWNvbG9yJzogW3tcbiAgICAgICAgJ3Jpbmctb2Zmc2V0JzogW2NvbG9yc11cbiAgICAgIH1dLFxuICAgICAgLy8gRWZmZWN0c1xuICAgICAgLyoqXG4gICAgICAgKiBCb3ggU2hhZG93XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm94LXNoYWRvd1xuICAgICAgICovXG4gICAgICBzaGFkb3c6IFt7XG4gICAgICAgIHNoYWRvdzogWycnLCAnaW5uZXInLCAnbm9uZScsIGlzVHNoaXJ0U2l6ZSwgaXNBcmJpdHJhcnlTaGFkb3ddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm94IFNoYWRvdyBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JveC1zaGFkb3ctY29sb3JcbiAgICAgICAqL1xuICAgICAgJ3NoYWRvdy1jb2xvcic6IFt7XG4gICAgICAgIHNoYWRvdzogW2lzQW55XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIE9wYWNpdHlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9vcGFjaXR5XG4gICAgICAgKi9cbiAgICAgIG9wYWNpdHk6IFt7XG4gICAgICAgIG9wYWNpdHk6IFtvcGFjaXR5XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIE1peCBCbGVuZCBNb2RlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvbWl4LWJsZW5kLW1vZGVcbiAgICAgICAqL1xuICAgICAgJ21peC1ibGVuZCc6IFt7XG4gICAgICAgICdtaXgtYmxlbmQnOiBbLi4uZ2V0QmxlbmRNb2RlcygpLCAncGx1cy1saWdodGVyJywgJ3BsdXMtZGFya2VyJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZ3JvdW5kIEJsZW5kIE1vZGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9iYWNrZ3JvdW5kLWJsZW5kLW1vZGVcbiAgICAgICAqL1xuICAgICAgJ2JnLWJsZW5kJzogW3tcbiAgICAgICAgJ2JnLWJsZW5kJzogZ2V0QmxlbmRNb2RlcygpXG4gICAgICB9XSxcbiAgICAgIC8vIEZpbHRlcnNcbiAgICAgIC8qKlxuICAgICAgICogRmlsdGVyXG4gICAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSBUYWlsd2luZCBDU1MgdjMuMC4wXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZmlsdGVyXG4gICAgICAgKi9cbiAgICAgIGZpbHRlcjogW3tcbiAgICAgICAgZmlsdGVyOiBbJycsICdub25lJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCbHVyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYmx1clxuICAgICAgICovXG4gICAgICBibHVyOiBbe1xuICAgICAgICBibHVyOiBbYmx1cl1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCcmlnaHRuZXNzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYnJpZ2h0bmVzc1xuICAgICAgICovXG4gICAgICBicmlnaHRuZXNzOiBbe1xuICAgICAgICBicmlnaHRuZXNzOiBbYnJpZ2h0bmVzc11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBDb250cmFzdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2NvbnRyYXN0XG4gICAgICAgKi9cbiAgICAgIGNvbnRyYXN0OiBbe1xuICAgICAgICBjb250cmFzdDogW2NvbnRyYXN0XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIERyb3AgU2hhZG93XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZHJvcC1zaGFkb3dcbiAgICAgICAqL1xuICAgICAgJ2Ryb3Atc2hhZG93JzogW3tcbiAgICAgICAgJ2Ryb3Atc2hhZG93JzogWycnLCAnbm9uZScsIGlzVHNoaXJ0U2l6ZSwgaXNBcmJpdHJhcnlWYWx1ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBHcmF5c2NhbGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ncmF5c2NhbGVcbiAgICAgICAqL1xuICAgICAgZ3JheXNjYWxlOiBbe1xuICAgICAgICBncmF5c2NhbGU6IFtncmF5c2NhbGVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSHVlIFJvdGF0ZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2h1ZS1yb3RhdGVcbiAgICAgICAqL1xuICAgICAgJ2h1ZS1yb3RhdGUnOiBbe1xuICAgICAgICAnaHVlLXJvdGF0ZSc6IFtodWVSb3RhdGVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogSW52ZXJ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvaW52ZXJ0XG4gICAgICAgKi9cbiAgICAgIGludmVydDogW3tcbiAgICAgICAgaW52ZXJ0OiBbaW52ZXJ0XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNhdHVyYXRlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2F0dXJhdGVcbiAgICAgICAqL1xuICAgICAgc2F0dXJhdGU6IFt7XG4gICAgICAgIHNhdHVyYXRlOiBbc2F0dXJhdGVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2VwaWFcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zZXBpYVxuICAgICAgICovXG4gICAgICBzZXBpYTogW3tcbiAgICAgICAgc2VwaWE6IFtzZXBpYV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZHJvcCBGaWx0ZXJcbiAgICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIFRhaWx3aW5kIENTUyB2My4wLjBcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9iYWNrZHJvcC1maWx0ZXJcbiAgICAgICAqL1xuICAgICAgJ2JhY2tkcm9wLWZpbHRlcic6IFt7XG4gICAgICAgICdiYWNrZHJvcC1maWx0ZXInOiBbJycsICdub25lJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZHJvcCBCbHVyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYmFja2Ryb3AtYmx1clxuICAgICAgICovXG4gICAgICAnYmFja2Ryb3AtYmx1cic6IFt7XG4gICAgICAgICdiYWNrZHJvcC1ibHVyJzogW2JsdXJdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2Ryb3AgQnJpZ2h0bmVzc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tkcm9wLWJyaWdodG5lc3NcbiAgICAgICAqL1xuICAgICAgJ2JhY2tkcm9wLWJyaWdodG5lc3MnOiBbe1xuICAgICAgICAnYmFja2Ryb3AtYnJpZ2h0bmVzcyc6IFticmlnaHRuZXNzXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJhY2tkcm9wIENvbnRyYXN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYmFja2Ryb3AtY29udHJhc3RcbiAgICAgICAqL1xuICAgICAgJ2JhY2tkcm9wLWNvbnRyYXN0JzogW3tcbiAgICAgICAgJ2JhY2tkcm9wLWNvbnRyYXN0JzogW2NvbnRyYXN0XVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJhY2tkcm9wIEdyYXlzY2FsZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tkcm9wLWdyYXlzY2FsZVxuICAgICAgICovXG4gICAgICAnYmFja2Ryb3AtZ3JheXNjYWxlJzogW3tcbiAgICAgICAgJ2JhY2tkcm9wLWdyYXlzY2FsZSc6IFtncmF5c2NhbGVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2Ryb3AgSHVlIFJvdGF0ZVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2JhY2tkcm9wLWh1ZS1yb3RhdGVcbiAgICAgICAqL1xuICAgICAgJ2JhY2tkcm9wLWh1ZS1yb3RhdGUnOiBbe1xuICAgICAgICAnYmFja2Ryb3AtaHVlLXJvdGF0ZSc6IFtodWVSb3RhdGVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2Ryb3AgSW52ZXJ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYmFja2Ryb3AtaW52ZXJ0XG4gICAgICAgKi9cbiAgICAgICdiYWNrZHJvcC1pbnZlcnQnOiBbe1xuICAgICAgICAnYmFja2Ryb3AtaW52ZXJ0JzogW2ludmVydF1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCYWNrZHJvcCBPcGFjaXR5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYmFja2Ryb3Atb3BhY2l0eVxuICAgICAgICovXG4gICAgICAnYmFja2Ryb3Atb3BhY2l0eSc6IFt7XG4gICAgICAgICdiYWNrZHJvcC1vcGFjaXR5JzogW29wYWNpdHldXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2Ryb3AgU2F0dXJhdGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9iYWNrZHJvcC1zYXR1cmF0ZVxuICAgICAgICovXG4gICAgICAnYmFja2Ryb3Atc2F0dXJhdGUnOiBbe1xuICAgICAgICAnYmFja2Ryb3Atc2F0dXJhdGUnOiBbc2F0dXJhdGVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQmFja2Ryb3AgU2VwaWFcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9iYWNrZHJvcC1zZXBpYVxuICAgICAgICovXG4gICAgICAnYmFja2Ryb3Atc2VwaWEnOiBbe1xuICAgICAgICAnYmFja2Ryb3Atc2VwaWEnOiBbc2VwaWFdXG4gICAgICB9XSxcbiAgICAgIC8vIFRhYmxlc1xuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgQ29sbGFwc2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItY29sbGFwc2VcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci1jb2xsYXBzZSc6IFt7XG4gICAgICAgIGJvcmRlcjogWydjb2xsYXBzZScsICdzZXBhcmF0ZSddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQm9yZGVyIFNwYWNpbmdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItc3BhY2luZ1xuICAgICAgICovXG4gICAgICAnYm9yZGVyLXNwYWNpbmcnOiBbe1xuICAgICAgICAnYm9yZGVyLXNwYWNpbmcnOiBbYm9yZGVyU3BhY2luZ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBCb3JkZXIgU3BhY2luZyBYXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYm9yZGVyLXNwYWNpbmdcbiAgICAgICAqL1xuICAgICAgJ2JvcmRlci1zcGFjaW5nLXgnOiBbe1xuICAgICAgICAnYm9yZGVyLXNwYWNpbmcteCc6IFtib3JkZXJTcGFjaW5nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEJvcmRlciBTcGFjaW5nIFlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ib3JkZXItc3BhY2luZ1xuICAgICAgICovXG4gICAgICAnYm9yZGVyLXNwYWNpbmcteSc6IFt7XG4gICAgICAgICdib3JkZXItc3BhY2luZy15JzogW2JvcmRlclNwYWNpbmddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVGFibGUgTGF5b3V0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdGFibGUtbGF5b3V0XG4gICAgICAgKi9cbiAgICAgICd0YWJsZS1sYXlvdXQnOiBbe1xuICAgICAgICB0YWJsZTogWydhdXRvJywgJ2ZpeGVkJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBDYXB0aW9uIFNpZGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9jYXB0aW9uLXNpZGVcbiAgICAgICAqL1xuICAgICAgY2FwdGlvbjogW3tcbiAgICAgICAgY2FwdGlvbjogWyd0b3AnLCAnYm90dG9tJ11cbiAgICAgIH1dLFxuICAgICAgLy8gVHJhbnNpdGlvbnMgYW5kIEFuaW1hdGlvblxuICAgICAgLyoqXG4gICAgICAgKiBUcmFuaXNpdGlvbiBQcm9wZXJ0eVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RyYW5zaXRpb24tcHJvcGVydHlcbiAgICAgICAqL1xuICAgICAgdHJhbnNpdGlvbjogW3tcbiAgICAgICAgdHJhbnNpdGlvbjogWydub25lJywgJ2FsbCcsICcnLCAnY29sb3JzJywgJ29wYWNpdHknLCAnc2hhZG93JywgJ3RyYW5zZm9ybScsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNpdGlvbiBEdXJhdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RyYW5zaXRpb24tZHVyYXRpb25cbiAgICAgICAqL1xuICAgICAgZHVyYXRpb246IFt7XG4gICAgICAgIGR1cmF0aW9uOiBnZXROdW1iZXJBbmRBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFRyYW5zaXRpb24gVGltaW5nIEZ1bmN0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cbiAgICAgICAqL1xuICAgICAgZWFzZTogW3tcbiAgICAgICAgZWFzZTogWydsaW5lYXInLCAnaW4nLCAnb3V0JywgJ2luLW91dCcsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNpdGlvbiBEZWxheVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RyYW5zaXRpb24tZGVsYXlcbiAgICAgICAqL1xuICAgICAgZGVsYXk6IFt7XG4gICAgICAgIGRlbGF5OiBnZXROdW1iZXJBbmRBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIEFuaW1hdGlvblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2FuaW1hdGlvblxuICAgICAgICovXG4gICAgICBhbmltYXRlOiBbe1xuICAgICAgICBhbmltYXRlOiBbJ25vbmUnLCAnc3BpbicsICdwaW5nJywgJ3B1bHNlJywgJ2JvdW5jZScsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8vIFRyYW5zZm9ybXNcbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNmb3JtXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdHJhbnNmb3JtXG4gICAgICAgKi9cbiAgICAgIHRyYW5zZm9ybTogW3tcbiAgICAgICAgdHJhbnNmb3JtOiBbJycsICdncHUnLCAnbm9uZSddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2NhbGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY2FsZVxuICAgICAgICovXG4gICAgICBzY2FsZTogW3tcbiAgICAgICAgc2NhbGU6IFtzY2FsZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY2FsZSBYXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2NhbGVcbiAgICAgICAqL1xuICAgICAgJ3NjYWxlLXgnOiBbe1xuICAgICAgICAnc2NhbGUteCc6IFtzY2FsZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY2FsZSBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2NhbGVcbiAgICAgICAqL1xuICAgICAgJ3NjYWxlLXknOiBbe1xuICAgICAgICAnc2NhbGUteSc6IFtzY2FsZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBSb3RhdGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9yb3RhdGVcbiAgICAgICAqL1xuICAgICAgcm90YXRlOiBbe1xuICAgICAgICByb3RhdGU6IFtpc0ludGVnZXIsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNsYXRlIFhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90cmFuc2xhdGVcbiAgICAgICAqL1xuICAgICAgJ3RyYW5zbGF0ZS14JzogW3tcbiAgICAgICAgJ3RyYW5zbGF0ZS14JzogW3RyYW5zbGF0ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBUcmFuc2xhdGUgWVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RyYW5zbGF0ZVxuICAgICAgICovXG4gICAgICAndHJhbnNsYXRlLXknOiBbe1xuICAgICAgICAndHJhbnNsYXRlLXknOiBbdHJhbnNsYXRlXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNrZXcgWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3NrZXdcbiAgICAgICAqL1xuICAgICAgJ3NrZXcteCc6IFt7XG4gICAgICAgICdza2V3LXgnOiBbc2tld11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTa2V3IFlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9za2V3XG4gICAgICAgKi9cbiAgICAgICdza2V3LXknOiBbe1xuICAgICAgICAnc2tldy15JzogW3NrZXddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNmb3JtIE9yaWdpblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RyYW5zZm9ybS1vcmlnaW5cbiAgICAgICAqL1xuICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiBbe1xuICAgICAgICBvcmlnaW46IFsnY2VudGVyJywgJ3RvcCcsICd0b3AtcmlnaHQnLCAncmlnaHQnLCAnYm90dG9tLXJpZ2h0JywgJ2JvdHRvbScsICdib3R0b20tbGVmdCcsICdsZWZ0JywgJ3RvcC1sZWZ0JywgaXNBcmJpdHJhcnlWYWx1ZV1cbiAgICAgIH1dLFxuICAgICAgLy8gSW50ZXJhY3Rpdml0eVxuICAgICAgLyoqXG4gICAgICAgKiBBY2NlbnQgQ29sb3JcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9hY2NlbnQtY29sb3JcbiAgICAgICAqL1xuICAgICAgYWNjZW50OiBbe1xuICAgICAgICBhY2NlbnQ6IFsnYXV0bycsIGNvbG9yc11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBBcHBlYXJhbmNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvYXBwZWFyYW5jZVxuICAgICAgICovXG4gICAgICBhcHBlYXJhbmNlOiBbe1xuICAgICAgICBhcHBlYXJhbmNlOiBbJ25vbmUnLCAnYXV0byddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogQ3Vyc29yXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvY3Vyc29yXG4gICAgICAgKi9cbiAgICAgIGN1cnNvcjogW3tcbiAgICAgICAgY3Vyc29yOiBbJ2F1dG8nLCAnZGVmYXVsdCcsICdwb2ludGVyJywgJ3dhaXQnLCAndGV4dCcsICdtb3ZlJywgJ2hlbHAnLCAnbm90LWFsbG93ZWQnLCAnbm9uZScsICdjb250ZXh0LW1lbnUnLCAncHJvZ3Jlc3MnLCAnY2VsbCcsICdjcm9zc2hhaXInLCAndmVydGljYWwtdGV4dCcsICdhbGlhcycsICdjb3B5JywgJ25vLWRyb3AnLCAnZ3JhYicsICdncmFiYmluZycsICdhbGwtc2Nyb2xsJywgJ2NvbC1yZXNpemUnLCAncm93LXJlc2l6ZScsICduLXJlc2l6ZScsICdlLXJlc2l6ZScsICdzLXJlc2l6ZScsICd3LXJlc2l6ZScsICduZS1yZXNpemUnLCAnbnctcmVzaXplJywgJ3NlLXJlc2l6ZScsICdzdy1yZXNpemUnLCAnZXctcmVzaXplJywgJ25zLXJlc2l6ZScsICduZXN3LXJlc2l6ZScsICdud3NlLXJlc2l6ZScsICd6b29tLWluJywgJ3pvb20tb3V0JywgaXNBcmJpdHJhcnlWYWx1ZV1cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBDYXJldCBDb2xvclxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL2p1c3QtaW4tdGltZS1tb2RlI2NhcmV0LWNvbG9yLXV0aWxpdGllc1xuICAgICAgICovXG4gICAgICAnY2FyZXQtY29sb3InOiBbe1xuICAgICAgICBjYXJldDogW2NvbG9yc11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBQb2ludGVyIEV2ZW50c1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3BvaW50ZXItZXZlbnRzXG4gICAgICAgKi9cbiAgICAgICdwb2ludGVyLWV2ZW50cyc6IFt7XG4gICAgICAgICdwb2ludGVyLWV2ZW50cyc6IFsnbm9uZScsICdhdXRvJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBSZXNpemVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9yZXNpemVcbiAgICAgICAqL1xuICAgICAgcmVzaXplOiBbe1xuICAgICAgICByZXNpemU6IFsnbm9uZScsICd5JywgJ3gnLCAnJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgQmVoYXZpb3JcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtYmVoYXZpb3JcbiAgICAgICAqL1xuICAgICAgJ3Njcm9sbC1iZWhhdmlvcic6IFt7XG4gICAgICAgIHNjcm9sbDogWydhdXRvJywgJ3Ntb290aCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2Nyb2xsIE1hcmdpblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1tYXJnaW5cbiAgICAgICAqL1xuICAgICAgJ3Njcm9sbC1tJzogW3tcbiAgICAgICAgJ3Njcm9sbC1tJzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBNYXJnaW4gWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1tYXJnaW5cbiAgICAgICAqL1xuICAgICAgJ3Njcm9sbC1teCc6IFt7XG4gICAgICAgICdzY3JvbGwtbXgnOiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2Nyb2xsIE1hcmdpbiBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2Nyb2xsLW1hcmdpblxuICAgICAgICovXG4gICAgICAnc2Nyb2xsLW15JzogW3tcbiAgICAgICAgJ3Njcm9sbC1teSc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgTWFyZ2luIFN0YXJ0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2Nyb2xsLW1hcmdpblxuICAgICAgICovXG4gICAgICAnc2Nyb2xsLW1zJzogW3tcbiAgICAgICAgJ3Njcm9sbC1tcyc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgTWFyZ2luIEVuZFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1tYXJnaW5cbiAgICAgICAqL1xuICAgICAgJ3Njcm9sbC1tZSc6IFt7XG4gICAgICAgICdzY3JvbGwtbWUnOiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2Nyb2xsIE1hcmdpbiBUb3BcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtbWFyZ2luXG4gICAgICAgKi9cbiAgICAgICdzY3JvbGwtbXQnOiBbe1xuICAgICAgICAnc2Nyb2xsLW10JzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBNYXJnaW4gUmlnaHRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtbWFyZ2luXG4gICAgICAgKi9cbiAgICAgICdzY3JvbGwtbXInOiBbe1xuICAgICAgICAnc2Nyb2xsLW1yJzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBNYXJnaW4gQm90dG9tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2Nyb2xsLW1hcmdpblxuICAgICAgICovXG4gICAgICAnc2Nyb2xsLW1iJzogW3tcbiAgICAgICAgJ3Njcm9sbC1tYic6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgTWFyZ2luIExlZnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtbWFyZ2luXG4gICAgICAgKi9cbiAgICAgICdzY3JvbGwtbWwnOiBbe1xuICAgICAgICAnc2Nyb2xsLW1sJzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBQYWRkaW5nXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2Nyb2xsLXBhZGRpbmdcbiAgICAgICAqL1xuICAgICAgJ3Njcm9sbC1wJzogW3tcbiAgICAgICAgJ3Njcm9sbC1wJzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBQYWRkaW5nIFhcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtcGFkZGluZ1xuICAgICAgICovXG4gICAgICAnc2Nyb2xsLXB4JzogW3tcbiAgICAgICAgJ3Njcm9sbC1weCc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgUGFkZGluZyBZXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc2Nyb2xsLXBhZGRpbmdcbiAgICAgICAqL1xuICAgICAgJ3Njcm9sbC1weSc6IFt7XG4gICAgICAgICdzY3JvbGwtcHknOiBnZXRTcGFjaW5nV2l0aEFyYml0cmFyeSgpXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU2Nyb2xsIFBhZGRpbmcgU3RhcnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtcGFkZGluZ1xuICAgICAgICovXG4gICAgICAnc2Nyb2xsLXBzJzogW3tcbiAgICAgICAgJ3Njcm9sbC1wcyc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgUGFkZGluZyBFbmRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtcGFkZGluZ1xuICAgICAgICovXG4gICAgICAnc2Nyb2xsLXBlJzogW3tcbiAgICAgICAgJ3Njcm9sbC1wZSc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgUGFkZGluZyBUb3BcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtcGFkZGluZ1xuICAgICAgICovXG4gICAgICAnc2Nyb2xsLXB0JzogW3tcbiAgICAgICAgJ3Njcm9sbC1wdCc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgUGFkZGluZyBSaWdodFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1wYWRkaW5nXG4gICAgICAgKi9cbiAgICAgICdzY3JvbGwtcHInOiBbe1xuICAgICAgICAnc2Nyb2xsLXByJzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBQYWRkaW5nIEJvdHRvbVxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1wYWRkaW5nXG4gICAgICAgKi9cbiAgICAgICdzY3JvbGwtcGInOiBbe1xuICAgICAgICAnc2Nyb2xsLXBiJzogZ2V0U3BhY2luZ1dpdGhBcmJpdHJhcnkoKVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBQYWRkaW5nIExlZnRcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtcGFkZGluZ1xuICAgICAgICovXG4gICAgICAnc2Nyb2xsLXBsJzogW3tcbiAgICAgICAgJ3Njcm9sbC1wbCc6IGdldFNwYWNpbmdXaXRoQXJiaXRyYXJ5KClcbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBTY3JvbGwgU25hcCBBbGlnblxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1zbmFwLWFsaWduXG4gICAgICAgKi9cbiAgICAgICdzbmFwLWFsaWduJzogW3tcbiAgICAgICAgc25hcDogWydzdGFydCcsICdlbmQnLCAnY2VudGVyJywgJ2FsaWduLW5vbmUnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBTbmFwIFN0b3BcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtc25hcC1zdG9wXG4gICAgICAgKi9cbiAgICAgICdzbmFwLXN0b3AnOiBbe1xuICAgICAgICBzbmFwOiBbJ25vcm1hbCcsICdhbHdheXMnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBTbmFwIFR5cGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JvbGwtc25hcC10eXBlXG4gICAgICAgKi9cbiAgICAgICdzbmFwLXR5cGUnOiBbe1xuICAgICAgICBzbmFwOiBbJ25vbmUnLCAneCcsICd5JywgJ2JvdGgnXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFNjcm9sbCBTbmFwIFR5cGUgU3RyaWN0bmVzc1xuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3Njcm9sbC1zbmFwLXR5cGVcbiAgICAgICAqL1xuICAgICAgJ3NuYXAtc3RyaWN0bmVzcyc6IFt7XG4gICAgICAgIHNuYXA6IFsnbWFuZGF0b3J5JywgJ3Byb3hpbWl0eSddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVG91Y2ggQWN0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG91Y2gtYWN0aW9uXG4gICAgICAgKi9cbiAgICAgIHRvdWNoOiBbe1xuICAgICAgICB0b3VjaDogWydhdXRvJywgJ25vbmUnLCAnbWFuaXB1bGF0aW9uJ11cbiAgICAgIH1dLFxuICAgICAgLyoqXG4gICAgICAgKiBUb3VjaCBBY3Rpb24gWFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3RvdWNoLWFjdGlvblxuICAgICAgICovXG4gICAgICAndG91Y2gteCc6IFt7XG4gICAgICAgICd0b3VjaC1wYW4nOiBbJ3gnLCAnbGVmdCcsICdyaWdodCddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogVG91Y2ggQWN0aW9uIFlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy90b3VjaC1hY3Rpb25cbiAgICAgICAqL1xuICAgICAgJ3RvdWNoLXknOiBbe1xuICAgICAgICAndG91Y2gtcGFuJzogWyd5JywgJ3VwJywgJ2Rvd24nXVxuICAgICAgfV0sXG4gICAgICAvKipcbiAgICAgICAqIFRvdWNoIEFjdGlvbiBQaW5jaCBab29tXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvdG91Y2gtYWN0aW9uXG4gICAgICAgKi9cbiAgICAgICd0b3VjaC1weic6IFsndG91Y2gtcGluY2gtem9vbSddLFxuICAgICAgLyoqXG4gICAgICAgKiBVc2VyIFNlbGVjdFxuICAgICAgICogQHNlZSBodHRwczovL3RhaWx3aW5kY3NzLmNvbS9kb2NzL3VzZXItc2VsZWN0XG4gICAgICAgKi9cbiAgICAgIHNlbGVjdDogW3tcbiAgICAgICAgc2VsZWN0OiBbJ25vbmUnLCAndGV4dCcsICdhbGwnLCAnYXV0byddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogV2lsbCBDaGFuZ2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy93aWxsLWNoYW5nZVxuICAgICAgICovXG4gICAgICAnd2lsbC1jaGFuZ2UnOiBbe1xuICAgICAgICAnd2lsbC1jaGFuZ2UnOiBbJ2F1dG8nLCAnc2Nyb2xsJywgJ2NvbnRlbnRzJywgJ3RyYW5zZm9ybScsIGlzQXJiaXRyYXJ5VmFsdWVdXG4gICAgICB9XSxcbiAgICAgIC8vIFNWR1xuICAgICAgLyoqXG4gICAgICAgKiBGaWxsXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3MvZmlsbFxuICAgICAgICovXG4gICAgICBmaWxsOiBbe1xuICAgICAgICBmaWxsOiBbY29sb3JzLCAnbm9uZSddXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU3Ryb2tlIFdpZHRoXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc3Ryb2tlLXdpZHRoXG4gICAgICAgKi9cbiAgICAgICdzdHJva2Utdyc6IFt7XG4gICAgICAgIHN0cm9rZTogW2lzTGVuZ3RoLCBpc0FyYml0cmFyeUxlbmd0aCwgaXNBcmJpdHJhcnlOdW1iZXJdXG4gICAgICB9XSxcbiAgICAgIC8qKlxuICAgICAgICogU3Ryb2tlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tL2RvY3Mvc3Ryb2tlXG4gICAgICAgKi9cbiAgICAgIHN0cm9rZTogW3tcbiAgICAgICAgc3Ryb2tlOiBbY29sb3JzLCAnbm9uZSddXG4gICAgICB9XSxcbiAgICAgIC8vIEFjY2Vzc2liaWxpdHlcbiAgICAgIC8qKlxuICAgICAgICogU2NyZWVuIFJlYWRlcnNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9zY3JlZW4tcmVhZGVyc1xuICAgICAgICovXG4gICAgICBzcjogWydzci1vbmx5JywgJ25vdC1zci1vbmx5J10sXG4gICAgICAvKipcbiAgICAgICAqIEZvcmNlZCBDb2xvciBBZGp1c3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9mb3JjZWQtY29sb3ItYWRqdXN0XG4gICAgICAgKi9cbiAgICAgICdmb3JjZWQtY29sb3ItYWRqdXN0JzogW3tcbiAgICAgICAgJ2ZvcmNlZC1jb2xvci1hZGp1c3QnOiBbJ2F1dG8nLCAnbm9uZSddXG4gICAgICB9XVxuICAgIH0sXG4gICAgY29uZmxpY3RpbmdDbGFzc0dyb3Vwczoge1xuICAgICAgb3ZlcmZsb3c6IFsnb3ZlcmZsb3cteCcsICdvdmVyZmxvdy15J10sXG4gICAgICBvdmVyc2Nyb2xsOiBbJ292ZXJzY3JvbGwteCcsICdvdmVyc2Nyb2xsLXknXSxcbiAgICAgIGluc2V0OiBbJ2luc2V0LXgnLCAnaW5zZXQteScsICdzdGFydCcsICdlbmQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXG4gICAgICAnaW5zZXQteCc6IFsncmlnaHQnLCAnbGVmdCddLFxuICAgICAgJ2luc2V0LXknOiBbJ3RvcCcsICdib3R0b20nXSxcbiAgICAgIGZsZXg6IFsnYmFzaXMnLCAnZ3JvdycsICdzaHJpbmsnXSxcbiAgICAgIGdhcDogWydnYXAteCcsICdnYXAteSddLFxuICAgICAgcDogWydweCcsICdweScsICdwcycsICdwZScsICdwdCcsICdwcicsICdwYicsICdwbCddLFxuICAgICAgcHg6IFsncHInLCAncGwnXSxcbiAgICAgIHB5OiBbJ3B0JywgJ3BiJ10sXG4gICAgICBtOiBbJ214JywgJ215JywgJ21zJywgJ21lJywgJ210JywgJ21yJywgJ21iJywgJ21sJ10sXG4gICAgICBteDogWydtcicsICdtbCddLFxuICAgICAgbXk6IFsnbXQnLCAnbWInXSxcbiAgICAgIHNpemU6IFsndycsICdoJ10sXG4gICAgICAnZm9udC1zaXplJzogWydsZWFkaW5nJ10sXG4gICAgICAnZnZuLW5vcm1hbCc6IFsnZnZuLW9yZGluYWwnLCAnZnZuLXNsYXNoZWQtemVybycsICdmdm4tZmlndXJlJywgJ2Z2bi1zcGFjaW5nJywgJ2Z2bi1mcmFjdGlvbiddLFxuICAgICAgJ2Z2bi1vcmRpbmFsJzogWydmdm4tbm9ybWFsJ10sXG4gICAgICAnZnZuLXNsYXNoZWQtemVybyc6IFsnZnZuLW5vcm1hbCddLFxuICAgICAgJ2Z2bi1maWd1cmUnOiBbJ2Z2bi1ub3JtYWwnXSxcbiAgICAgICdmdm4tc3BhY2luZyc6IFsnZnZuLW5vcm1hbCddLFxuICAgICAgJ2Z2bi1mcmFjdGlvbic6IFsnZnZuLW5vcm1hbCddLFxuICAgICAgJ2xpbmUtY2xhbXAnOiBbJ2Rpc3BsYXknLCAnb3ZlcmZsb3cnXSxcbiAgICAgIHJvdW5kZWQ6IFsncm91bmRlZC1zJywgJ3JvdW5kZWQtZScsICdyb3VuZGVkLXQnLCAncm91bmRlZC1yJywgJ3JvdW5kZWQtYicsICdyb3VuZGVkLWwnLCAncm91bmRlZC1zcycsICdyb3VuZGVkLXNlJywgJ3JvdW5kZWQtZWUnLCAncm91bmRlZC1lcycsICdyb3VuZGVkLXRsJywgJ3JvdW5kZWQtdHInLCAncm91bmRlZC1icicsICdyb3VuZGVkLWJsJ10sXG4gICAgICAncm91bmRlZC1zJzogWydyb3VuZGVkLXNzJywgJ3JvdW5kZWQtZXMnXSxcbiAgICAgICdyb3VuZGVkLWUnOiBbJ3JvdW5kZWQtc2UnLCAncm91bmRlZC1lZSddLFxuICAgICAgJ3JvdW5kZWQtdCc6IFsncm91bmRlZC10bCcsICdyb3VuZGVkLXRyJ10sXG4gICAgICAncm91bmRlZC1yJzogWydyb3VuZGVkLXRyJywgJ3JvdW5kZWQtYnInXSxcbiAgICAgICdyb3VuZGVkLWInOiBbJ3JvdW5kZWQtYnInLCAncm91bmRlZC1ibCddLFxuICAgICAgJ3JvdW5kZWQtbCc6IFsncm91bmRlZC10bCcsICdyb3VuZGVkLWJsJ10sXG4gICAgICAnYm9yZGVyLXNwYWNpbmcnOiBbJ2JvcmRlci1zcGFjaW5nLXgnLCAnYm9yZGVyLXNwYWNpbmcteSddLFxuICAgICAgJ2JvcmRlci13JzogWydib3JkZXItdy1zJywgJ2JvcmRlci13LWUnLCAnYm9yZGVyLXctdCcsICdib3JkZXItdy1yJywgJ2JvcmRlci13LWInLCAnYm9yZGVyLXctbCddLFxuICAgICAgJ2JvcmRlci13LXgnOiBbJ2JvcmRlci13LXInLCAnYm9yZGVyLXctbCddLFxuICAgICAgJ2JvcmRlci13LXknOiBbJ2JvcmRlci13LXQnLCAnYm9yZGVyLXctYiddLFxuICAgICAgJ2JvcmRlci1jb2xvcic6IFsnYm9yZGVyLWNvbG9yLXQnLCAnYm9yZGVyLWNvbG9yLXInLCAnYm9yZGVyLWNvbG9yLWInLCAnYm9yZGVyLWNvbG9yLWwnXSxcbiAgICAgICdib3JkZXItY29sb3IteCc6IFsnYm9yZGVyLWNvbG9yLXInLCAnYm9yZGVyLWNvbG9yLWwnXSxcbiAgICAgICdib3JkZXItY29sb3IteSc6IFsnYm9yZGVyLWNvbG9yLXQnLCAnYm9yZGVyLWNvbG9yLWInXSxcbiAgICAgICdzY3JvbGwtbSc6IFsnc2Nyb2xsLW14JywgJ3Njcm9sbC1teScsICdzY3JvbGwtbXMnLCAnc2Nyb2xsLW1lJywgJ3Njcm9sbC1tdCcsICdzY3JvbGwtbXInLCAnc2Nyb2xsLW1iJywgJ3Njcm9sbC1tbCddLFxuICAgICAgJ3Njcm9sbC1teCc6IFsnc2Nyb2xsLW1yJywgJ3Njcm9sbC1tbCddLFxuICAgICAgJ3Njcm9sbC1teSc6IFsnc2Nyb2xsLW10JywgJ3Njcm9sbC1tYiddLFxuICAgICAgJ3Njcm9sbC1wJzogWydzY3JvbGwtcHgnLCAnc2Nyb2xsLXB5JywgJ3Njcm9sbC1wcycsICdzY3JvbGwtcGUnLCAnc2Nyb2xsLXB0JywgJ3Njcm9sbC1wcicsICdzY3JvbGwtcGInLCAnc2Nyb2xsLXBsJ10sXG4gICAgICAnc2Nyb2xsLXB4JzogWydzY3JvbGwtcHInLCAnc2Nyb2xsLXBsJ10sXG4gICAgICAnc2Nyb2xsLXB5JzogWydzY3JvbGwtcHQnLCAnc2Nyb2xsLXBiJ10sXG4gICAgICB0b3VjaDogWyd0b3VjaC14JywgJ3RvdWNoLXknLCAndG91Y2gtcHonXSxcbiAgICAgICd0b3VjaC14JzogWyd0b3VjaCddLFxuICAgICAgJ3RvdWNoLXknOiBbJ3RvdWNoJ10sXG4gICAgICAndG91Y2gtcHonOiBbJ3RvdWNoJ11cbiAgICB9LFxuICAgIGNvbmZsaWN0aW5nQ2xhc3NHcm91cE1vZGlmaWVyczoge1xuICAgICAgJ2ZvbnQtc2l6ZSc6IFsnbGVhZGluZyddXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSBiYXNlQ29uZmlnIENvbmZpZyB3aGVyZSBvdGhlciBjb25maWcgd2lsbCBiZSBtZXJnZWQgaW50by4gVGhpcyBvYmplY3Qgd2lsbCBiZSBtdXRhdGVkLlxuICogQHBhcmFtIGNvbmZpZ0V4dGVuc2lvbiBQYXJ0aWFsIGNvbmZpZyB0byBtZXJnZSBpbnRvIHRoZSBgYmFzZUNvbmZpZ2AuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZmlncyhiYXNlQ29uZmlnLCB7XG4gIGNhY2hlU2l6ZSxcbiAgcHJlZml4LFxuICBzZXBhcmF0b3IsXG4gIGV4cGVyaW1lbnRhbFBhcnNlQ2xhc3NOYW1lLFxuICBleHRlbmQgPSB7fSxcbiAgb3ZlcnJpZGUgPSB7fVxufSkge1xuICBvdmVycmlkZVByb3BlcnR5KGJhc2VDb25maWcsICdjYWNoZVNpemUnLCBjYWNoZVNpemUpO1xuICBvdmVycmlkZVByb3BlcnR5KGJhc2VDb25maWcsICdwcmVmaXgnLCBwcmVmaXgpO1xuICBvdmVycmlkZVByb3BlcnR5KGJhc2VDb25maWcsICdzZXBhcmF0b3InLCBzZXBhcmF0b3IpO1xuICBvdmVycmlkZVByb3BlcnR5KGJhc2VDb25maWcsICdleHBlcmltZW50YWxQYXJzZUNsYXNzTmFtZScsIGV4cGVyaW1lbnRhbFBhcnNlQ2xhc3NOYW1lKTtcbiAgZm9yIChjb25zdCBjb25maWdLZXkgaW4gb3ZlcnJpZGUpIHtcbiAgICBvdmVycmlkZUNvbmZpZ1Byb3BlcnRpZXMoYmFzZUNvbmZpZ1tjb25maWdLZXldLCBvdmVycmlkZVtjb25maWdLZXldKTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBleHRlbmQpIHtcbiAgICBtZXJnZUNvbmZpZ1Byb3BlcnRpZXMoYmFzZUNvbmZpZ1trZXldLCBleHRlbmRba2V5XSk7XG4gIH1cbiAgcmV0dXJuIGJhc2VDb25maWc7XG59XG5mdW5jdGlvbiBvdmVycmlkZVByb3BlcnR5KGJhc2VPYmplY3QsIG92ZXJyaWRlS2V5LCBvdmVycmlkZVZhbHVlKSB7XG4gIGlmIChvdmVycmlkZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBiYXNlT2JqZWN0W292ZXJyaWRlS2V5XSA9IG92ZXJyaWRlVmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ29uZmlnUHJvcGVydGllcyhiYXNlT2JqZWN0LCBvdmVycmlkZU9iamVjdCkge1xuICBpZiAob3ZlcnJpZGVPYmplY3QpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvdmVycmlkZU9iamVjdCkge1xuICAgICAgb3ZlcnJpZGVQcm9wZXJ0eShiYXNlT2JqZWN0LCBrZXksIG92ZXJyaWRlT2JqZWN0W2tleV0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWVyZ2VDb25maWdQcm9wZXJ0aWVzKGJhc2VPYmplY3QsIG1lcmdlT2JqZWN0KSB7XG4gIGlmIChtZXJnZU9iamVjdCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG1lcmdlT2JqZWN0KSB7XG4gICAgICBjb25zdCBtZXJnZVZhbHVlID0gbWVyZ2VPYmplY3Rba2V5XTtcbiAgICAgIGlmIChtZXJnZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYmFzZU9iamVjdFtrZXldID0gKGJhc2VPYmplY3Rba2V5XSB8fCBbXSkuY29uY2F0KG1lcmdlVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZXh0ZW5kVGFpbHdpbmRNZXJnZShjb25maWdFeHRlbnNpb24sIC4uLmNyZWF0ZUNvbmZpZykge1xuICByZXR1cm4gdHlwZW9mIGNvbmZpZ0V4dGVuc2lvbiA9PT0gJ2Z1bmN0aW9uJyA/IGNyZWF0ZVRhaWx3aW5kTWVyZ2UoZ2V0RGVmYXVsdENvbmZpZywgY29uZmlnRXh0ZW5zaW9uLCAuLi5jcmVhdGVDb25maWcpIDogY3JlYXRlVGFpbHdpbmRNZXJnZSgoKSA9PiBtZXJnZUNvbmZpZ3MoZ2V0RGVmYXVsdENvbmZpZygpLCBjb25maWdFeHRlbnNpb24pLCAuLi5jcmVhdGVDb25maWcpO1xufVxuY29uc3QgdHdNZXJnZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVUYWlsd2luZE1lcmdlKGdldERlZmF1bHRDb25maWcpO1xuZXhwb3J0IHsgY3JlYXRlVGFpbHdpbmRNZXJnZSwgZXh0ZW5kVGFpbHdpbmRNZXJnZSwgZnJvbVRoZW1lLCBnZXREZWZhdWx0Q29uZmlnLCBtZXJnZUNvbmZpZ3MsIHR3Sm9pbiwgdHdNZXJnZSwgdmFsaWRhdG9ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVuZGxlLW1qcy5tanMubWFwXG4iLCJpbXBvcnQgeyBBcHAsIENvbXBvbmVudCwgTWFya2Rvd25SZW5kZXJlciB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG4gIENvbXBvbmVudFByb3BzLFxyXG4gIGNyZWF0ZUVmZmVjdCxcclxuICBjcmVhdGVNZW1vLFxyXG4gIG9uTW91bnQsXHJcbiAgc3BsaXRQcm9wcyxcclxufSBmcm9tIFwic29saWQtanNcIjtcclxuaW1wb3J0IHsgRGF0YXZpZXdQcm9wZXJ0eVZhbHVlTm90TGluayB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xyXG5cclxudHlwZSBNYXJrZG93blByb3BzID0gQ29tcG9uZW50UHJvcHM8XCJkaXZcIj4gJiB7XHJcbiAgLy8gY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xyXG4gIGFwcDogQXBwO1xyXG4gIG1hcmtkb3duOiBEYXRhdmlld1Byb3BlcnR5VmFsdWVOb3RMaW5rO1xyXG4gIHNvdXJjZVBhdGg6IHN0cmluZztcclxuICBjbGFzcz86IHN0cmluZztcclxufTtcclxuZXhwb3J0IGNvbnN0IE1hcmtkb3duID0gKHByb3BzOiBNYXJrZG93blByb3BzKSA9PiB7XHJcbiAgbGV0IHJlZjogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0IFtsb2NhbFByb3BzLCBkaXZQcm9wc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXHJcbiAgICBcImFwcFwiLFxyXG4gICAgXCJtYXJrZG93blwiLFxyXG4gICAgXCJzb3VyY2VQYXRoXCIsXHJcbiAgICBcImNsYXNzXCIsXHJcbiAgXSk7XHJcblxyXG4gIGNvbnN0IG1kID0gY3JlYXRlTWVtbygoKSA9PiB7XHJcbiAgICBjb25zdCBzdHIgPSBsb2NhbFByb3BzLm1hcmtkb3duID8/IFwiJm5ic3A7XCI7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHIpKSByZXR1cm4gc3RyLmpvaW4oXCIsIFwiKTtcclxuICAgIGlmIChzdHIgPT09IFwiXCIgfHwgdHlwZW9mIHN0ciA9PT0gXCJvYmplY3RcIikgcmV0dXJuIFwiJm5ic3A7XCI7XHJcbiAgICByZXR1cm4gc3RyLnRvU3RyaW5nKCk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoKTtcclxuXHJcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcclxuICAgIHJlZi5lbXB0eSgpO1xyXG4gICAgTWFya2Rvd25SZW5kZXJlci5yZW5kZXIoXHJcbiAgICAgIGxvY2FsUHJvcHMuYXBwLFxyXG4gICAgICBtZCgpLFxyXG4gICAgICByZWYsXHJcbiAgICAgIGxvY2FsUHJvcHMuc291cmNlUGF0aCxcclxuICAgICAgY29tcG9uZW50LFxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgey4uLmRpdlByb3BzfVxyXG4gICAgICAvLyBBbHdheXMgcmVuZGVycyBhIHBhcmFncmFwaCB0aGF0IGRlZmF1bHQgaGFzIHdlaXJkIG1hcmdpbnNcclxuICAgICAgY2xhc3M9e3R3TWVyZ2UoXCJ3LWZpdCBbJj5wXTptLTBcIiwgbG9jYWxQcm9wcy5jbGFzcyl9XHJcbiAgICAgIHJlZj17KHIpID0+IChyZWYgPSByKX1cclxuICAgID48L2Rpdj5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBEYXRhdmlld0FQSSB9IGZyb20gXCJAL2xpYi90eXBlc1wiO1xyXG5pbXBvcnQgeyBEYXRhRWRpdEJsb2NrQ29uZmlnIH0gZnJvbSBcIkAvbGliL3V0aWxcIjtcclxuaW1wb3J0IERhdGFFZGl0IGZyb20gXCJAL21haW5cIjtcclxuaW1wb3J0IHsgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSBcInNvbGlkLWpzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBDb2RlQmxvY2tJbmZvID0ge1xyXG4gIHBsdWdpbjogRGF0YUVkaXQ7XHJcbiAgZWw6IEhUTUxFbGVtZW50O1xyXG4gIHNvdXJjZTogc3RyaW5nO1xyXG4gIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgY29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnO1xyXG4gIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dDtcclxuICBkYXRhdmlld0FQSTogRGF0YXZpZXdBUEk7XHJcbiAgaGlkZUZpbGVDb2w6IGJvb2xlYW47XHJcbn07XHJcblxyXG4vLyBUT0RPIHRoaXMgZmVlbHMgbGlrZSBiYWQgcHJhY3RpY2VcclxuLy8gYnV0IEknbSBwcmV0dHkgc3VyZSBpdCB3aWxsIG5ldmVyIGFjdHVhbGx5IGJlIHVuZGVmaW5lZFxyXG4vLyBzbyBwcm92aWRpbmcgYSBkdW1teSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSBmaW5lP1xyXG5leHBvcnQgY29uc3QgQ29kZUJsb2NrQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8Q29kZUJsb2NrSW5mbz4oe1xyXG4gIHBsdWdpbjoge30gYXMgRGF0YUVkaXQsXHJcbiAgZWw6IHt9IGFzIEhUTUxFbGVtZW50LFxyXG4gIHNvdXJjZTogXCJcIixcclxuICBxdWVyeTogXCJcIixcclxuICBjb25maWc6IHt9IGFzIERhdGFFZGl0QmxvY2tDb25maWcsXHJcbiAgY3R4OiB7fSBhcyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxyXG4gIGRhdGF2aWV3QVBJOiB7fSBhcyBEYXRhdmlld0FQSSxcclxuICBoaWRlRmlsZUNvbDogZmFsc2UsXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY29udGV4dCB3aWxsIGFsd2F5cyBiZSB1cCB0byBkYXRlIHNpbmNlIHRoZSBjb2RlIGJsb2NrIHdpbGwgYmUgcmVyZW5kZXJlZCBieSBPYnNpZGlhbiB3aGVuZXZlciBhbnkgb2YgdGhpcyBpbmZvIGNoYW5nZXMuXHJcbiAqXHJcbiAqIFRoZXJlZm9yZSwgdGhpcyBpc24ndCB0ZWNobmljYWxseSAqcmVhY3RpdmUqIGluIFNvbGlkJ3MgcGVyc3BlY3RpdmUsIHNvIGl0J3Mgb2theSB0byBkZXN0cnVjdHVyZSB0aGlzIGF0IHRvcCBsZXZlbCBvZiBjb21wb25lbnRzLlxyXG4gKiBAcmV0dXJucyBJbmZvIHNwZWNpZmljIHRvIHRoZSBjb2RlIGJsb2NrIGluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlQ29kZUJsb2NrID0gKCkgPT4gdXNlQ29udGV4dChDb2RlQmxvY2tDb250ZXh0KTtcclxuIiwiaW1wb3J0IHsgUHJvcGVydHlUeXBlIH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XHJcbmltcG9ydCB7IHVwZGF0ZU1ldGFkYXRhUHJvcGVydHkgfSBmcm9tIFwiQC9saWIvdXRpbFwiO1xyXG5pbXBvcnQgeyBUYWJsZURhdGFQcm9wcyB9IGZyb20gXCIuLi9UYWJsZS9UYWJsZURhdGFcIjtcclxuaW1wb3J0IHsgdXNlQ29kZUJsb2NrIH0gZnJvbSBcIkAvaG9va3MvdXNlRGF0YUVkaXRcIjtcclxuXHJcbnR5cGUgQ2hlY2tib3hJbnB1dFByb3BzID0gVGFibGVEYXRhUHJvcHMgJiB7XHJcbiAgdmFsdWVUeXBlOiBQcm9wZXJ0eVR5cGU7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBDaGVja2JveElucHV0ID0gKHByb3BzOiBDaGVja2JveElucHV0UHJvcHMpID0+IHtcclxuICBjb25zdCB7IHBsdWdpbiwgY29uZmlnIH0gPSB1c2VDb2RlQmxvY2soKTtcclxuICByZXR1cm4gKFxyXG4gICAgPGlucHV0XHJcbiAgICAgIGNsYXNzPVwiXCJcclxuICAgICAgZGlzYWJsZWQ9e2NvbmZpZy5sb2NrRWRpdGluZ31cclxuICAgICAgdHlwZT1cImNoZWNrYm94XCJcclxuICAgICAgY2hlY2tlZD17ISFwcm9wcy52YWx1ZX1cclxuICAgICAgb25DbGljaz17YXN5bmMgKGUpID0+IHtcclxuICAgICAgICBhd2FpdCB1cGRhdGVNZXRhZGF0YVByb3BlcnR5KFxyXG4gICAgICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2hlY2tlZCxcclxuICAgICAgICAgIHByb3BzLmZpbGVQYXRoLFxyXG4gICAgICAgICAgcGx1Z2luLFxyXG4gICAgICAgICAgcHJvcHMudmFsdWUsXHJcbiAgICAgICAgKTtcclxuICAgICAgfX1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuIiwiaW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRWZmZWN0IH0gZnJvbSAnc29saWQtanMnO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBhdXRvZm9jdXMgPSAoZWxlbWVudCwgYXV0b2ZvY3VzMikgPT4ge1xuICBpZiAoYXV0b2ZvY3VzMj8uKCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImF1dG9mb2N1c1wiKSlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gZWxlbWVudC5mb2N1cygpKTtcbiAgfSk7XG59O1xudmFyIGNyZWF0ZUF1dG9mb2N1cyA9IChyZWYpID0+IHtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbCA9IHJlZigpO1xuICAgIGVsICYmIHNldFRpbWVvdXQoKCkgPT4gZWwuZm9jdXMoKSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYXV0b2ZvY3VzLCBjcmVhdGVBdXRvZm9jdXMgfTtcbiIsImltcG9ydCB7IFByb3BlcnR5VHlwZSB9IGZyb20gXCJAL2xpYi90eXBlc1wiO1xyXG5pbXBvcnQgeyBjaGVja0lmRGF0ZUhhc1RpbWUsIHVwZGF0ZU1ldGFkYXRhUHJvcGVydHkgfSBmcm9tIFwiQC9saWIvdXRpbFwiO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gXCJsdXhvblwiO1xyXG5pbXBvcnQgeyBTZXR0ZXIsIGNyZWF0ZU1lbW8gfSBmcm9tIFwic29saWQtanNcIjtcclxuaW1wb3J0IHsgVGFibGVEYXRhUHJvcHMgfSBmcm9tIFwiLi4vVGFibGUvVGFibGVEYXRhXCI7XHJcbmltcG9ydCB7IGF1dG9mb2N1cyB9IGZyb20gXCJAc29saWQtcHJpbWl0aXZlcy9hdXRvZm9jdXNcIjtcclxuaW1wb3J0IHsgdXNlQ29kZUJsb2NrIH0gZnJvbSBcIkAvaG9va3MvdXNlRGF0YUVkaXRcIjtcclxuLy8gVG8gcHJldmVudCB0cmVlc2hha2luZ1xyXG5hdXRvZm9jdXM7XHJcblxyXG50eXBlIERhdGVEYXRldGltZUlucHV0UHJvcHMgPSBUYWJsZURhdGFQcm9wczxEYXRlVGltZT4gJiB7XHJcbiAgc2V0RWRpdGluZzogU2V0dGVyPGJvb2xlYW4+O1xyXG4gIHZhbHVlVHlwZTogUHJvcGVydHlUeXBlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IERhdGVEYXRldGltZUlucHV0ID0gKHByb3BzOiBEYXRlRGF0ZXRpbWVJbnB1dFByb3BzKSA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcGx1Z2luLFxyXG4gICAgZGF0YXZpZXdBUEk6IHtcclxuICAgICAgbHV4b246IHsgRGF0ZVRpbWUgfSxcclxuICAgIH0sXHJcbiAgfSA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIGNvbnN0IGlzVGltZSA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xyXG4gICAgcmV0dXJuIGNoZWNrSWZEYXRlSGFzVGltZShwcm9wcy52YWx1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8aW5wdXRcclxuICAgICAgdXNlOmF1dG9mb2N1c1xyXG4gICAgICBhdXRvZm9jdXNcclxuICAgICAgY2xhc3M9XCJcIlxyXG4gICAgICB0eXBlPXtpc1RpbWUoKSA/IFwiZGF0ZXRpbWUtbG9jYWxcIiA6IFwiZGF0ZVwifVxyXG4gICAgICAvLyAyMDE4LTA2LTEyVDE5OjMwXHJcbiAgICAgIHZhbHVlPXtcclxuICAgICAgICBpc1RpbWUoKVxyXG4gICAgICAgICAgPyBwcm9wcy52YWx1ZS50b0Zvcm1hdChcInl5eXktTU0tZGQnVCdoaDptbVwiKVxyXG4gICAgICAgICAgOiBwcm9wcy52YWx1ZS50b0Zvcm1hdChcInl5eXktTU0tZGRcIilcclxuICAgICAgfVxyXG4gICAgICBvbkJsdXI9e2FzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IGUudGFyZ2V0LnZhbGlkaXR5O1xyXG4gICAgICAgIGlmICghaXNWYWxpZCkgcmV0dXJuIHByb3BzLnNldEVkaXRpbmcoZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdCA9IGlzVGltZSgpID8gXCJ5eXl5LU1NLWRkJ1QnaGg6bW1cIiA6IFwieXl5eS1NTS1kZFwiO1xyXG4gICAgICAgIGNvbnN0IGR0ID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChlLnRhcmdldC52YWx1ZSwgZm9ybWF0KTtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGR0LnRvRm9ybWF0KGZvcm1hdCk7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkT2xkID0gcHJvcHMudmFsdWUudG9Gb3JtYXQoZm9ybWF0KTtcclxuICAgICAgICBhd2FpdCB1cGRhdGVNZXRhZGF0YVByb3BlcnR5KFxyXG4gICAgICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgICAgICBuZXdWYWx1ZSxcclxuICAgICAgICAgIHByb3BzLmZpbGVQYXRoLFxyXG4gICAgICAgICAgcGx1Z2luLFxyXG4gICAgICAgICAgZm9ybWF0dGVkT2xkLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcHJvcHMuc2V0RWRpdGluZyhmYWxzZSk7XHJcbiAgICAgIH19XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL3BsdXMudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJwYXRoXCIsIHsgZDogXCJNNSAxMmgxNFwiLCBrZXk6IFwiMWF5czBoXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0xMiA1djE0XCIsIGtleTogXCJzNjk5bGVcIiB9XVxuXTtcbnZhciBQbHVzID0gKHByb3BzKSA9PiA8SWNvbiB7Li4ucHJvcHN9IG5hbWU9XCJQbHVzXCIgaWNvbk5vZGU9e2ljb25Ob2RlfSAvPjtcbnZhciBwbHVzX2RlZmF1bHQgPSBQbHVzO1xuZXhwb3J0IHtcbiAgcGx1c19kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVzLmpzeC5tYXBcbiIsImltcG9ydCB7IHVwZGF0ZU1ldGFkYXRhUHJvcGVydHkgfSBmcm9tIFwiQC9saWIvdXRpbFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTaWduYWwgfSBmcm9tIFwic29saWQtanNcIjtcclxuaW1wb3J0IHsgVGFibGVEYXRhRWRpdFByb3BzIH0gZnJvbSBcIi4uL1RhYmxlL1RhYmxlRGF0YVwiO1xyXG5pbXBvcnQgeyBhdXRvZm9jdXMgfSBmcm9tIFwiQHNvbGlkLXByaW1pdGl2ZXMvYXV0b2ZvY3VzXCI7XHJcbmltcG9ydCB7IHVzZUNvZGVCbG9jayB9IGZyb20gXCJAL2hvb2tzL3VzZURhdGFFZGl0XCI7XHJcbi8vIFRvIHByZXZlbnQgdHJlZXNoYWtpbmdcclxuYXV0b2ZvY3VzO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRleHRJbnB1dCA9IChcclxuICBwcm9wczogVGFibGVEYXRhRWRpdFByb3BzICYge1xyXG4gICAgdXBkYXRlUHJvcGVydHk/OiAodmFsOiB1bmtub3duKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIH0sXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtzaXplLCBzZXRTaXplXSA9IGNyZWF0ZVNpZ25hbChwcm9wcy52YWx1ZT8udG9TdHJpbmcoKS5sZW5ndGggPz8gNSk7XHJcbiAgY29uc3QgeyBwbHVnaW4gfSA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIHJldHVybiAoXHJcbiAgICA8aW5wdXRcclxuICAgICAgdXNlOmF1dG9mb2N1c1xyXG4gICAgICBhdXRvZm9jdXNcclxuICAgICAgY2xhc3M9XCJoLWF1dG8gcm91bmRlZC1ub25lIGJvcmRlci1ub25lIGJnLXRyYW5zcGFyZW50IHAtMCAhc2hhZG93LW5vbmVcIlxyXG4gICAgICAvLyBzdHlsZT17eyBcImJveC1zaGFkb3dcIjogXCJub25lXCIgfX1cclxuICAgICAgc2l6ZT17c2l6ZSgpfVxyXG4gICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZT8udG9TdHJpbmcoKSA/PyBcIlwifVxyXG4gICAgICBvbkJsdXI9e2FzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgaWYgKHByb3BzLnVwZGF0ZVByb3BlcnR5KSB7XHJcbiAgICAgICAgICBhd2FpdCBwcm9wcy51cGRhdGVQcm9wZXJ0eShlLnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGF3YWl0IHVwZGF0ZU1ldGFkYXRhUHJvcGVydHkoXHJcbiAgICAgICAgICAgIHByb3BzLnByb3BlcnR5LFxyXG4gICAgICAgICAgICBlLnRhcmdldC52YWx1ZSxcclxuICAgICAgICAgICAgcHJvcHMuZmlsZVBhdGgsXHJcbiAgICAgICAgICAgIHBsdWdpbixcclxuICAgICAgICAgICAgcHJvcHMudmFsdWUsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm9wcy5zZXRFZGl0aW5nKGZhbHNlKTtcclxuICAgICAgfX1cclxuICAgICAgb25JbnB1dD17KGUpID0+IHtcclxuICAgICAgICBzZXRTaXplKGUudGFyZ2V0LnZhbHVlLmxlbmd0aCk7XHJcbiAgICAgIH19XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCB7IERhdGF2aWV3UHJvcGVydHlWYWx1ZUFycmF5IH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XHJcbmltcG9ydCB7XHJcbiAgdXBkYXRlTWV0YWRhdGFQcm9wZXJ0eSxcclxuICB0cnlEYXRhdmlld0xpbmtUb01hcmtkb3duLFxyXG4gIERhdGFFZGl0QmxvY2tDb25maWcsXHJcbn0gZnJvbSBcIkAvbGliL3V0aWxcIjtcclxuaW1wb3J0IERhdGFFZGl0IGZyb20gXCJAL21haW5cIjtcclxuaW1wb3J0IFBsdXMgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9QbHVzXCI7XHJcbmltcG9ydCB7IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgRm9yLCBjcmVhdGVTaWduYWwsIFNob3csIFNldHRlciB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyBNYXJrZG93biB9IGZyb20gXCIuLi9NYXJrZG93blwiO1xyXG5pbXBvcnQgeyBUYWJsZURhdGFQcm9wcyB9IGZyb20gXCIuLi9UYWJsZS9UYWJsZURhdGFcIjtcclxuaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSBcIi4vdGV4dFwiO1xyXG5pbXBvcnQgeyB1c2VDb2RlQmxvY2sgfSBmcm9tIFwiQC9ob29rcy91c2VEYXRhRWRpdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IExpc3RUYWJsZURhdGFXcmFwcGVyID0gKFxyXG4gIHByb3BzOiBUYWJsZURhdGFQcm9wczxEYXRhdmlld1Byb3BlcnR5VmFsdWVBcnJheT4sXHJcbikgPT4ge1xyXG4gIGNvbnN0IHsgcGx1Z2luLCBjdHgsIGNvbmZpZyB9ID0gdXNlQ29kZUJsb2NrKCk7XHJcbiAgcmV0dXJuIChcclxuICAgIDx1bCBjbGFzcz1cIm0tMCBmbGV4IGZsZXgtY29sIGdhcC0xIHAtMCBbJj5saV06bGlzdC1kaXNjXCI+XHJcbiAgICAgIDxGb3IgZWFjaD17cHJvcHMudmFsdWV9PlxyXG4gICAgICAgIHsodmFsLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgPExpc3RUYWJsZURhdGFJdGVtXHJcbiAgICAgICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgICAgICAgcGx1Z2luPXtwbHVnaW59XHJcbiAgICAgICAgICAgIGN0eD17Y3R4fVxyXG4gICAgICAgICAgICBpdGVtVmFsdWU9e3ZhbH1cclxuICAgICAgICAgICAgaXRlbUluZGV4PXtpbmRleCgpfVxyXG4gICAgICAgICAgICBjb25maWc9e2NvbmZpZ31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9Gb3I+XHJcbiAgICAgIDxidXR0b25cclxuICAgICAgICBjbGFzcz1cImNsaWNrYWJsZS1pY29uIHNpemUtZml0IHAtMVwiXHJcbiAgICAgICAgZGlzYWJsZWQ9e2NvbmZpZy5sb2NrRWRpdGluZ31cclxuICAgICAgICBvbkNsaWNrPXthc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgYXdhaXQgdXBkYXRlTWV0YWRhdGFQcm9wZXJ0eShcclxuICAgICAgICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgICAgICAgIFsuLi5wcm9wcy52YWx1ZSwgXCJcIl0sXHJcbiAgICAgICAgICAgIHByb3BzLmZpbGVQYXRoLFxyXG4gICAgICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgICAgIHByb3BzLnZhbHVlLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9fVxyXG4gICAgICA+XHJcbiAgICAgICAgPFBsdXMgY2xhc3M9XCJwb2ludGVyLWV2ZW50cy1ub25lIHNpemUtM1wiIC8+XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC91bD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgTGlzdFRhYmxlRGF0YUl0ZW1Qcm9wcyA9XHJcbiAgVGFibGVEYXRhUHJvcHM8RGF0YXZpZXdQcm9wZXJ0eVZhbHVlQXJyYXk+ICYge1xyXG4gICAgcGx1Z2luOiBEYXRhRWRpdDtcclxuICAgIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dDtcclxuICAgIGl0ZW1WYWx1ZTogdW5rbm93bjtcclxuICAgIGl0ZW1JbmRleDogbnVtYmVyO1xyXG4gIH07XHJcbmV4cG9ydCBjb25zdCBMaXN0VGFibGVEYXRhSXRlbSA9IChcclxuICBwcm9wczogTGlzdFRhYmxlRGF0YUl0ZW1Qcm9wcyAmIHsgY29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnIH0sXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtpc0VkaXRpbmcsIHNldEVkaXRpbmddID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcclxuICByZXR1cm4gKFxyXG4gICAgPGxpIGNsYXNzPVwibS0wIG1sLTNcIj5cclxuICAgICAgPFNob3dcclxuICAgICAgICB3aGVuPXshcHJvcHMuY29uZmlnLmxvY2tFZGl0aW5nICYmIGlzRWRpdGluZygpfVxyXG4gICAgICAgIGZhbGxiYWNrPXtcclxuICAgICAgICAgIDxNYXJrZG93blxyXG4gICAgICAgICAgICBjbGFzcz1cInNpemUtZnVsbFwiXHJcbiAgICAgICAgICAgIGFwcD17cHJvcHMucGx1Z2luLmFwcH1cclxuICAgICAgICAgICAgbWFya2Rvd249e3RyeURhdGF2aWV3TGlua1RvTWFya2Rvd24ocHJvcHMuaXRlbVZhbHVlKX1cclxuICAgICAgICAgICAgc291cmNlUGF0aD17cHJvcHMuY3R4LnNvdXJjZVBhdGh9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e1xyXG4gICAgICAgICAgICAgIHByb3BzLmNvbmZpZy5sb2NrRWRpdGluZyA/IHVuZGVmaW5lZCA6ICgpID0+IHNldEVkaXRpbmcodHJ1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICB9XHJcbiAgICAgID5cclxuICAgICAgICA8TGlzdElucHV0IHsuLi5wcm9wc30gc2V0RWRpdGluZz17c2V0RWRpdGluZ30gLz5cclxuICAgICAgPC9TaG93PlxyXG4gICAgPC9saT5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IExpc3RJbnB1dCA9IChcclxuICBwcm9wczogTGlzdFRhYmxlRGF0YUl0ZW1Qcm9wcyAmIHsgc2V0RWRpdGluZzogU2V0dGVyPGJvb2xlYW4+IH0sXHJcbikgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8VGV4dElucHV0XHJcbiAgICAgIHsuLi5wcm9wc31cclxuICAgICAgdmFsdWU9e3Byb3BzLml0ZW1WYWx1ZX1cclxuICAgICAgdmFsdWVUeXBlPVwibGlzdFwiXHJcbiAgICAgIHVwZGF0ZVByb3BlcnR5PXthc3luYyAobmV3VmFsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBbLi4ucHJvcHMudmFsdWVdIGFzIHVua25vd25bXTtcclxuICAgICAgICBpZiAoIW5ld1ZhbCAmJiBuZXdWYWwgIT09IDApIHtcclxuICAgICAgICAgIGNvbnN0IGFyciA9IHZhbHVlLmZpbHRlcigoXywgaSkgPT4gaSAhPT0gcHJvcHMuaXRlbUluZGV4KTtcclxuICAgICAgICAgIGF3YWl0IHVwZGF0ZU1ldGFkYXRhUHJvcGVydHkoXHJcbiAgICAgICAgICAgIHByb3BzLnByb3BlcnR5LFxyXG4gICAgICAgICAgICBhcnIsXHJcbiAgICAgICAgICAgIHByb3BzLmZpbGVQYXRoLFxyXG4gICAgICAgICAgICBwcm9wcy5wbHVnaW4sXHJcbiAgICAgICAgICAgIHByb3BzLml0ZW1WYWx1ZSxcclxuICAgICAgICAgICAgcHJvcHMuaXRlbUluZGV4LFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsdWVbcHJvcHMuaXRlbUluZGV4XSA9IG5ld1ZhbDtcclxuICAgICAgICBhd2FpdCB1cGRhdGVNZXRhZGF0YVByb3BlcnR5KFxyXG4gICAgICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgIHByb3BzLmZpbGVQYXRoLFxyXG4gICAgICAgICAgcHJvcHMucGx1Z2luLFxyXG4gICAgICAgICAgcHJvcHMuaXRlbVZhbHVlLFxyXG4gICAgICAgICAgcHJvcHMuaXRlbUluZGV4LFxyXG4gICAgICAgICk7XHJcbiAgICAgIH19XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcbiIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgbz1lLmxlbmd0aDtmb3IodD0wO3Q8bzt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpfWVsc2UgZm9yKGYgaW4gZSllW2ZdJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCIsbz1hcmd1bWVudHMubGVuZ3RoO2Y8bztmKyspKGU9YXJndW1lbnRzW2ZdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7IiwiaW1wb3J0IHR5cGUgeyBDbGFzc1ZhbHVlIH0gZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNuID0gKC4uLmNsYXNzTGlzdHM6IENsYXNzVmFsdWVbXSkgPT4gdHdNZXJnZShjbHN4KGNsYXNzTGlzdHMpKTtcclxuIiwiaW1wb3J0IHsgREVWLCBlcXVhbEZuLCB1bnRyYWNrLCBnZXRPd25lciwgb25DbGVhbnVwLCBjcmVhdGVTaWduYWwsIHNoYXJlZENvbmZpZywgb25Nb3VudCB9IGZyb20gJ3NvbGlkLWpzJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnc29saWQtanMvd2ViJztcbmV4cG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnc29saWQtanMvd2ViJztcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaXNDbGllbnQgPSAhaXNTZXJ2ZXI7XG52YXIgaXNEZXYgPSBpc0NsaWVudCAmJiAhIURFVjtcbnZhciBpc1Byb2QgPSAhaXNEZXY7XG52YXIgbm9vcCA9ICgpID0+IHZvaWQgMDtcbnZhciB0cnVlRm4gPSAoKSA9PiB0cnVlO1xudmFyIGZhbHNlRm4gPSAoKSA9PiBmYWxzZTtcbnZhciBkZWZhdWx0RXF1YWxzID0gZXF1YWxGbjtcbnZhciBFUVVBTFNfRkFMU0VfT1BUSU9OUyA9IHsgZXF1YWxzOiBmYWxzZSB9O1xudmFyIElOVEVSTkFMX09QVElPTlMgPSB7IGludGVybmFsOiB0cnVlIH07XG52YXIgb2ZDbGFzcyA9ICh2LCBjKSA9PiB2IGluc3RhbmNlb2YgYyB8fCB2ICYmIHYuY29uc3RydWN0b3IgPT09IGM7XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIik7XG59XG52YXIgaXNOb25OdWxsYWJsZSA9IChpKSA9PiBpICE9IG51bGw7XG52YXIgZmlsdGVyTm9uTnVsbGFibGUgPSAoYXJyKSA9PiBhcnIuZmlsdGVyKGlzTm9uTnVsbGFibGUpO1xudmFyIGNvbXBhcmUgPSAoYSwgYikgPT4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG52YXIgYXJyYXlFcXVhbHMgPSAoYSwgYikgPT4gYSA9PT0gYiB8fCBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeSgoZSwgaSkgPT4gZSA9PT0gYltpXSk7XG5mdW5jdGlvbiBjaGFpbihjYWxsYmFja3MpIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayguLi5hcmdzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHJldmVyc2VDaGFpbihjYWxsYmFja3MpIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IGNhbGxiYWNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayguLi5hcmdzKTtcbiAgICB9XG4gIH07XG59XG52YXIgY2xhbXAgPSAobiwgbWluLCBtYXgpID0+IE1hdGgubWluKE1hdGgubWF4KG4sIG1pbiksIG1heCk7XG52YXIgYWNjZXNzID0gKHYpID0+IHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgJiYgIXYubGVuZ3RoID8gdigpIDogdjtcbnZhciBhc0FycmF5ID0gKHZhbHVlKSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG52YXIgYWNjZXNzQXJyYXkgPSAobGlzdCkgPT4gbGlzdC5tYXAoKHYpID0+IGFjY2Vzcyh2KSk7XG52YXIgd2l0aEFjY2VzcyA9ICh2YWx1ZSwgZm4pID0+IHtcbiAgY29uc3QgX3ZhbHVlID0gYWNjZXNzKHZhbHVlKTtcbiAgdHlwZW9mIF92YWx1ZSAhPSBudWxsICYmIGZuKF92YWx1ZSk7XG59O1xudmFyIGFzQWNjZXNzb3IgPSAodikgPT4gdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYgOiAoKSA9PiB2O1xuZnVuY3Rpb24gYWNjZXNzV2l0aCh2YWx1ZU9yRm4sIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZU9yRm4gPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlT3JGbiguLi5hcmdzKSA6IHZhbHVlT3JGbjtcbn1cbmZ1bmN0aW9uIGRlZmVyKGRlcHMsIGZuLCBpbml0aWFsVmFsdWUpIHtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZGVwcyk7XG4gIGxldCBwcmV2SW5wdXQ7XG4gIGxldCBzaG91bGREZWZlciA9IHRydWU7XG4gIHJldHVybiAocHJldlZhbHVlKSA9PiB7XG4gICAgbGV0IGlucHV0O1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICBpbnB1dCA9IEFycmF5KGRlcHMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKylcbiAgICAgICAgaW5wdXRbaV0gPSBkZXBzW2ldKCk7XG4gICAgfSBlbHNlXG4gICAgICBpbnB1dCA9IGRlcHMoKTtcbiAgICBpZiAoc2hvdWxkRGVmZXIpIHtcbiAgICAgIHNob3VsZERlZmVyID0gZmFsc2U7XG4gICAgICBwcmV2SW5wdXQgPSBpbnB1dDtcbiAgICAgIHJldHVybiBpbml0aWFsVmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHVudHJhY2soKCkgPT4gZm4oaW5wdXQsIHByZXZJbnB1dCwgcHJldlZhbHVlKSk7XG4gICAgcHJldklucHV0ID0gaW5wdXQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbnZhciBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXM7XG52YXIga2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIHRyeU9uQ2xlYW51cCA9IGlzRGV2ID8gKGZuKSA9PiBnZXRPd25lcigpID8gb25DbGVhbnVwKGZuKSA6IGZuIDogb25DbGVhbnVwO1xudmFyIGNyZWF0ZUNhbGxiYWNrU3RhY2sgPSAoKSA9PiB7XG4gIGxldCBzdGFjayA9IFtdO1xuICBjb25zdCBjbGVhciA9ICgpID0+IHN0YWNrID0gW107XG4gIHJldHVybiB7XG4gICAgcHVzaDogKC4uLmNhbGxiYWNrcykgPT4gc3RhY2sucHVzaCguLi5jYWxsYmFja3MpLFxuICAgIGV4ZWN1dGUoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgc3RhY2suZm9yRWFjaCgoY2IpID0+IGNiKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpKTtcbiAgICAgIGNsZWFyKCk7XG4gICAgfSxcbiAgICBjbGVhclxuICB9O1xufTtcbmZ1bmN0aW9uIGNyZWF0ZU1pY3JvdGFzayhmbikge1xuICBsZXQgY2FsbHMgPSAwO1xuICBsZXQgYXJncztcbiAgb25DbGVhbnVwKCgpID0+IGNhbGxzID0gMCk7XG4gIHJldHVybiAoLi4uYSkgPT4ge1xuICAgIGFyZ3MgPSBhLCBjYWxscysrO1xuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IC0tY2FsbHMgPT09IDAgJiYgZm4oLi4uYXJncykpO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0YWJsZVNpZ25hbChzZXJ2ZXJWYWx1ZSwgdXBkYXRlLCBvcHRpb25zKSB7XG4gIGlmIChpc1NlcnZlcikge1xuICAgIHJldHVybiBjcmVhdGVTaWduYWwoc2VydmVyVmFsdWUsIG9wdGlvbnMpO1xuICB9XG4gIGlmIChzaGFyZWRDb25maWcuY29udGV4dCkge1xuICAgIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gY3JlYXRlU2lnbmFsKHNlcnZlclZhbHVlLCBvcHRpb25zKTtcbiAgICBvbk1vdW50KCgpID0+IHNldFN0YXRlKCgpID0+IHVwZGF0ZSgpKSk7XG4gICAgcmV0dXJuIFtzdGF0ZSwgc2V0U3RhdGVdO1xuICB9XG4gIHJldHVybiBjcmVhdGVTaWduYWwodXBkYXRlKCksIG9wdGlvbnMpO1xufVxudmFyIGNyZWF0ZUh5ZHJhdGVTaWduYWwgPSBjcmVhdGVIeWRyYXRhYmxlU2lnbmFsO1xuZnVuY3Rpb24gaGFuZGxlRGlmZkFycmF5KGN1cnJlbnQsIHByZXYsIGhhbmRsZUFkZGVkLCBoYW5kbGVSZW1vdmVkKSB7XG4gIGNvbnN0IGN1cnJMZW5ndGggPSBjdXJyZW50Lmxlbmd0aDtcbiAgY29uc3QgcHJldkxlbmd0aCA9IHByZXYubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG4gIGlmICghcHJldkxlbmd0aCkge1xuICAgIGZvciAoOyBpIDwgY3Vyckxlbmd0aDsgaSsrKVxuICAgICAgaGFuZGxlQWRkZWQoY3VycmVudFtpXSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghY3Vyckxlbmd0aCkge1xuICAgIGZvciAoOyBpIDwgcHJldkxlbmd0aDsgaSsrKVxuICAgICAgaGFuZGxlUmVtb3ZlZChwcmV2W2ldKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICg7IGkgPCBwcmV2TGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocHJldltpXSAhPT0gY3VycmVudFtpXSlcbiAgICAgIGJyZWFrO1xuICB9XG4gIGxldCBwcmV2RWw7XG4gIGxldCBjdXJyRWw7XG4gIHByZXYgPSBwcmV2LnNsaWNlKGkpO1xuICBjdXJyZW50ID0gY3VycmVudC5zbGljZShpKTtcbiAgZm9yIChwcmV2RWwgb2YgcHJldikge1xuICAgIGlmICghY3VycmVudC5pbmNsdWRlcyhwcmV2RWwpKVxuICAgICAgaGFuZGxlUmVtb3ZlZChwcmV2RWwpO1xuICB9XG4gIGZvciAoY3VyckVsIG9mIGN1cnJlbnQpIHtcbiAgICBpZiAoIXByZXYuaW5jbHVkZXMoY3VyckVsKSlcbiAgICAgIGhhbmRsZUFkZGVkKGN1cnJFbCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgRVFVQUxTX0ZBTFNFX09QVElPTlMsIElOVEVSTkFMX09QVElPTlMsIGFjY2VzcywgYWNjZXNzQXJyYXksIGFjY2Vzc1dpdGgsIGFycmF5RXF1YWxzLCBhc0FjY2Vzc29yLCBhc0FycmF5LCBjaGFpbiwgY2xhbXAsIGNvbXBhcmUsIGNyZWF0ZUNhbGxiYWNrU3RhY2ssIGNyZWF0ZUh5ZHJhdGFibGVTaWduYWwsIGNyZWF0ZUh5ZHJhdGVTaWduYWwsIGNyZWF0ZU1pY3JvdGFzaywgZGVmYXVsdEVxdWFscywgZGVmZXIsIGVudHJpZXMsIGZhbHNlRm4sIGZpbHRlck5vbk51bGxhYmxlLCBoYW5kbGVEaWZmQXJyYXksIGlzQ2xpZW50LCBpc0RldiwgaXNOb25OdWxsYWJsZSwgaXNPYmplY3QsIGlzUHJvZCwga2V5cywgbm9vcCwgb2ZDbGFzcywgcmV2ZXJzZUNoYWluLCB0cnVlRm4sIHRyeU9uQ2xlYW51cCwgd2l0aEFjY2VzcyB9O1xuIiwiaW1wb3J0IHsgdHJ5T25DbGVhbnVwLCBlbnRyaWVzLCBjcmVhdGVDYWxsYmFja1N0YWNrLCBhc0FycmF5LCBhY2Nlc3MsIGtleXMgfSBmcm9tICdAc29saWQtcHJpbWl0aXZlcy91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIGNyZWF0ZVJlbmRlckVmZmVjdCwgY3JlYXRlU2lnbmFsLCBvbkNsZWFudXAgfSBmcm9tICdzb2xpZC1qcyc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJ3NvbGlkLWpzL3dlYic7XG5cbi8vIHNyYy9ldmVudExpc3RlbmVyLnRzXG5mdW5jdGlvbiBtYWtlRXZlbnRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIHJldHVybiB0cnlPbkNsZWFudXAodGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZCh0YXJnZXQsIHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXIodGFyZ2V0cywgdHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICBpZiAoaXNTZXJ2ZXIpXG4gICAgcmV0dXJuO1xuICBjb25zdCBhdHRhY2hMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgYXNBcnJheShhY2Nlc3ModGFyZ2V0cykpLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBpZiAoZWwpXG4gICAgICAgIGFzQXJyYXkoYWNjZXNzKHR5cGUpKS5mb3JFYWNoKCh0eXBlMikgPT4gbWFrZUV2ZW50TGlzdGVuZXIoZWwsIHR5cGUyLCBoYW5kbGVyLCBvcHRpb25zKSk7XG4gICAgfSk7XG4gIH07XG4gIGlmICh0eXBlb2YgdGFyZ2V0cyA9PT0gXCJmdW5jdGlvblwiKVxuICAgIGNyZWF0ZUVmZmVjdChhdHRhY2hMaXN0ZW5lcnMpO1xuICBlbHNlXG4gICAgY3JlYXRlUmVuZGVyRWZmZWN0KGF0dGFjaExpc3RlbmVycyk7XG59XG5mdW5jdGlvbiBjcmVhdGVFdmVudFNpZ25hbCh0YXJnZXQsIHR5cGUsIG9wdGlvbnMpIHtcbiAgaWYgKGlzU2VydmVyKSB7XG4gICAgcmV0dXJuICgpID0+IHZvaWQgMDtcbiAgfVxuICBjb25zdCBbbGFzdEV2ZW50LCBzZXRMYXN0RXZlbnRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNyZWF0ZUV2ZW50TGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBzZXRMYXN0RXZlbnQsIG9wdGlvbnMpO1xuICByZXR1cm4gbGFzdEV2ZW50O1xufVxudmFyIGV2ZW50TGlzdGVuZXIgPSAodGFyZ2V0LCBwcm9wcykgPT4ge1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IFt0eXBlLCBoYW5kbGVyLCBvcHRpb25zXSA9IHByb3BzKCk7XG4gICAgbWFrZUV2ZW50TGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gY3JlYXRlRXZlbnRMaXN0ZW5lck1hcCh0YXJnZXRzLCBoYW5kbGVyc01hcCwgb3B0aW9ucykge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChjb25zdCBbZXZlbnROYW1lLCBoYW5kbGVyXSBvZiBlbnRyaWVzKGhhbmRsZXJzTWFwKSkge1xuICAgIGlmIChoYW5kbGVyKVxuICAgICAgY3JlYXRlRXZlbnRMaXN0ZW5lcih0YXJnZXRzLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9XG59XG52YXIgYXR0YWNoUHJvcExpc3RlbmVycyA9ICh0YXJnZXQsIHByb3BzKSA9PiB7XG4gIGtleXMocHJvcHMpLmZvckVhY2goKGF0dHIpID0+IHtcbiAgICBpZiAoYXR0ci5zdGFydHNXaXRoKFwib25cIikgJiYgdHlwZW9mIHByb3BzW2F0dHJdID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBtYWtlRXZlbnRMaXN0ZW5lcih0YXJnZXQsIGF0dHIuc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCksIHByb3BzW2F0dHJdKTtcbiAgfSk7XG59O1xudmFyIFdpbmRvd0V2ZW50TGlzdGVuZXIgPSAocHJvcHMpID0+IHtcbiAgaWYgKGlzU2VydmVyKVxuICAgIHJldHVybiBudWxsO1xuICBhdHRhY2hQcm9wTGlzdGVuZXJzKHdpbmRvdywgcHJvcHMpO1xufTtcbnZhciBEb2N1bWVudEV2ZW50TGlzdGVuZXIgPSAocHJvcHMpID0+IHtcbiAgaWYgKGlzU2VydmVyKVxuICAgIHJldHVybiBudWxsO1xuICBhdHRhY2hQcm9wTGlzdGVuZXJzKGRvY3VtZW50LCBwcm9wcyk7XG59O1xuZnVuY3Rpb24gbWFrZUV2ZW50TGlzdGVuZXJTdGFjayh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgaWYgKGlzU2VydmVyKSB7XG4gICAgcmV0dXJuIFsoKSA9PiAoKSA9PiB2b2lkIDAsICgpID0+IHZvaWQgMF07XG4gIH1cbiAgY29uc3QgeyBwdXNoLCBleGVjdXRlIH0gPSBjcmVhdGVDYWxsYmFja1N0YWNrKCk7XG4gIHJldHVybiBbXG4gICAgKHR5cGUsIGhhbmRsZXIsIG92ZXJ3cml0ZU9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGNsZWFyID0gbWFrZUV2ZW50TGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBoYW5kbGVyLCBvdmVyd3JpdGVPcHRpb25zID8/IG9wdGlvbnMpO1xuICAgICAgcHVzaChjbGVhcik7XG4gICAgICByZXR1cm4gY2xlYXI7XG4gICAgfSxcbiAgICBvbkNsZWFudXAoZXhlY3V0ZSlcbiAgXTtcbn1cblxuLy8gc3JjL2NhbGxiYWNrV3JhcHBlcnMudHNcbnZhciBwcmV2ZW50RGVmYXVsdCA9IChjYWxsYmFjaykgPT4gKGUpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBjYWxsYmFjayhlKTtcbn07XG52YXIgc3RvcFByb3BhZ2F0aW9uID0gKGNhbGxiYWNrKSA9PiAoZSkgPT4ge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICBjYWxsYmFjayhlKTtcbn07XG52YXIgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gKGNhbGxiYWNrKSA9PiAoZSkgPT4ge1xuICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICBjYWxsYmFjayhlKTtcbn07XG5cbmV4cG9ydCB7IERvY3VtZW50RXZlbnRMaXN0ZW5lciwgV2luZG93RXZlbnRMaXN0ZW5lciwgY3JlYXRlRXZlbnRMaXN0ZW5lciwgY3JlYXRlRXZlbnRMaXN0ZW5lck1hcCwgY3JlYXRlRXZlbnRTaWduYWwsIGV2ZW50TGlzdGVuZXIsIG1ha2VFdmVudExpc3RlbmVyLCBtYWtlRXZlbnRMaXN0ZW5lclN0YWNrLCBwcmV2ZW50RGVmYXVsdCwgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLCBzdG9wUHJvcGFnYXRpb24gfTtcbiIsImltcG9ydCB7IG9uQ2xlYW51cCwgJFRSQUNLLCB1bnRyYWNrLCBjcmVhdGVSb290LCBjcmVhdGVTaWduYWwsIGNyZWF0ZU1lbW8sIG1hcEFycmF5LCBvbiB9IGZyb20gJ3NvbGlkLWpzJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnc29saWQtanMvd2ViJztcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgRkFMTEJBQ0sgPSBTeW1ib2woXCJmYWxsYmFja1wiKTtcbmZ1bmN0aW9uIGRpc3Bvc2UobGlzdCkge1xuICBmb3IgKGNvbnN0IG8gb2YgbGlzdClcbiAgICBvLmRpc3Bvc2UoKTtcbn1cbmZ1bmN0aW9uIGtleUFycmF5KGl0ZW1zLCBrZXlGbiwgbWFwRm4sIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICBjb25zdCBpdGVtc1JlZiA9IGl0ZW1zKCk7XG4gICAgbGV0IHMgPSBbXTtcbiAgICBpZiAoaXRlbXNSZWYgJiYgaXRlbXNSZWYubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaXRlbXNSZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIHMucHVzaChcbiAgICAgICAgICBtYXBGbihcbiAgICAgICAgICAgICgpID0+IGl0ZW1zUmVmW2ldLFxuICAgICAgICAgICAgKCkgPT4gaVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZmFsbGJhY2spXG4gICAgICBzID0gW29wdGlvbnMuZmFsbGJhY2soKV07XG4gICAgcmV0dXJuICgpID0+IHM7XG4gIH1cbiAgY29uc3QgcHJldiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIG9uQ2xlYW51cCgoKSA9PiBkaXNwb3NlKHByZXYudmFsdWVzKCkpKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gaXRlbXMoKSB8fCBbXTtcbiAgICBsaXN0WyRUUkFDS107XG4gICAgcmV0dXJuIHVudHJhY2soKCkgPT4ge1xuICAgICAgaWYgKCFsaXN0Lmxlbmd0aCkge1xuICAgICAgICBkaXNwb3NlKHByZXYudmFsdWVzKCkpO1xuICAgICAgICBwcmV2LmNsZWFyKCk7XG4gICAgICAgIGlmICghb3B0aW9ucy5mYWxsYmFjaylcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIGNvbnN0IGZiMiA9IGNyZWF0ZVJvb3QoKGRpc3Bvc2UyKSA9PiB7XG4gICAgICAgICAgcHJldi5zZXQoRkFMTEJBQ0ssIHsgZGlzcG9zZTogZGlzcG9zZTIgfSk7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmFsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbZmIyXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShsaXN0Lmxlbmd0aCk7XG4gICAgICBjb25zdCBmYiA9IHByZXYuZ2V0KEZBTExCQUNLKTtcbiAgICAgIGlmICghcHJldi5zaXplIHx8IGZiKSB7XG4gICAgICAgIGZiPy5kaXNwb3NlKCk7XG4gICAgICAgIHByZXYuZGVsZXRlKEZBTExCQUNLKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgICAgY29uc3Qga2V5ID0ga2V5Rm4oaXRlbSwgaSk7XG4gICAgICAgICAgYWRkTmV3SXRlbShyZXN1bHQsIGl0ZW0sIGksIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZXZLZXlzID0gbmV3IFNldChwcmV2LmtleXMoKSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgIGNvbnN0IGtleSA9IGtleUZuKGl0ZW0sIGkpO1xuICAgICAgICBwcmV2S2V5cy5kZWxldGUoa2V5KTtcbiAgICAgICAgY29uc3QgbG9va3VwID0gcHJldi5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGxvb2t1cCkge1xuICAgICAgICAgIHJlc3VsdFtpXSA9IGxvb2t1cC5tYXBwZWQ7XG4gICAgICAgICAgbG9va3VwLnNldEluZGV4Py4oaSk7XG4gICAgICAgICAgbG9va3VwLnNldEl0ZW0oKCkgPT4gaXRlbSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIGFkZE5ld0l0ZW0ocmVzdWx0LCBpdGVtLCBpLCBrZXkpO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgcHJldktleXMpIHtcbiAgICAgICAgcHJldi5nZXQoa2V5KT8uZGlzcG9zZSgpO1xuICAgICAgICBwcmV2LmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gYWRkTmV3SXRlbShsaXN0LCBpdGVtLCBpLCBrZXkpIHtcbiAgICBjcmVhdGVSb290KChkaXNwb3NlMikgPT4ge1xuICAgICAgY29uc3QgW2dldEl0ZW0sIHNldEl0ZW1dID0gY3JlYXRlU2lnbmFsKGl0ZW0pO1xuICAgICAgY29uc3Qgc2F2ZSA9IHsgc2V0SXRlbSwgZGlzcG9zZTogZGlzcG9zZTIgfTtcbiAgICAgIGlmIChtYXBGbi5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IFtpbmRleCwgc2V0SW5kZXhdID0gY3JlYXRlU2lnbmFsKGkpO1xuICAgICAgICBzYXZlLnNldEluZGV4ID0gc2V0SW5kZXg7XG4gICAgICAgIHNhdmUubWFwcGVkID0gbWFwRm4oZ2V0SXRlbSwgaW5kZXgpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHNhdmUubWFwcGVkID0gbWFwRm4oZ2V0SXRlbSk7XG4gICAgICBwcmV2LnNldChrZXksIHNhdmUpO1xuICAgICAgbGlzdFtpXSA9IHNhdmUubWFwcGVkO1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBLZXkocHJvcHMpIHtcbiAgY29uc3QgeyBieSB9ID0gcHJvcHM7XG4gIHJldHVybiBjcmVhdGVNZW1vKFxuICAgIGtleUFycmF5KFxuICAgICAgKCkgPT4gcHJvcHMuZWFjaCxcbiAgICAgIHR5cGVvZiBieSA9PT0gXCJmdW5jdGlvblwiID8gYnkgOiAodikgPT4gdltieV0sXG4gICAgICBwcm9wcy5jaGlsZHJlbixcbiAgICAgIFwiZmFsbGJhY2tcIiBpbiBwcm9wcyA/IHsgZmFsbGJhY2s6ICgpID0+IHByb3BzLmZhbGxiYWNrIH0gOiB2b2lkIDBcbiAgICApXG4gICk7XG59XG5mdW5jdGlvbiBFbnRyaWVzKHByb3BzKSB7XG4gIGNvbnN0IG1hcEZuID0gcHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBjcmVhdGVNZW1vKFxuICAgIG1hcEFycmF5KFxuICAgICAgKCkgPT4gcHJvcHMub2YgJiYgT2JqZWN0LmtleXMocHJvcHMub2YpLFxuICAgICAgbWFwRm4ubGVuZ3RoIDwgMyA/IChrZXkpID0+IG1hcEZuKFxuICAgICAgICBrZXksXG4gICAgICAgICgpID0+IHByb3BzLm9mW2tleV1cbiAgICAgICkgOiAoa2V5LCBpKSA9PiBtYXBGbihrZXksICgpID0+IHByb3BzLm9mW2tleV0sIGkpLFxuICAgICAgXCJmYWxsYmFja1wiIGluIHByb3BzID8geyBmYWxsYmFjazogKCkgPT4gcHJvcHMuZmFsbGJhY2sgfSA6IHZvaWQgMFxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIFJlcnVuKHByb3BzKSB7XG4gIGNvbnN0IGtleSA9IHR5cGVvZiBwcm9wcy5vbiA9PT0gXCJmdW5jdGlvblwiIHx8IEFycmF5LmlzQXJyYXkocHJvcHMub24pID8gcHJvcHMub24gOiAoKSA9PiBwcm9wcy5vbjtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8oXG4gICAgb24oa2V5LCAoYSwgYikgPT4ge1xuICAgICAgY29uc3QgY2hpbGQgPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHJldHVybiB0eXBlb2YgY2hpbGQgPT09IFwiZnVuY3Rpb25cIiAmJiBjaGlsZC5sZW5ndGggPiAwID8gY2hpbGQoYSwgYikgOiBjaGlsZDtcbiAgICB9KVxuICApO1xufVxuXG5leHBvcnQgeyBFbnRyaWVzLCBLZXksIFJlcnVuLCBrZXlBcnJheSB9O1xuIiwiaW1wb3J0IHsgY2hhaW4sIGFycmF5RXF1YWxzIH0gZnJvbSAnQHNvbGlkLXByaW1pdGl2ZXMvdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtbywgY2hpbGRyZW4sIGNyZWF0ZUNvbXB1dGVkLCB1bnRyYWNrLCBvbkNsZWFudXAgfSBmcm9tICdzb2xpZC1qcyc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJ3NvbGlkLWpzL3dlYic7XG5cbi8vIHNyYy9pbmRleC50c1xuZnVuY3Rpb24gbWVyZ2VSZWZzKC4uLnJlZnMpIHtcbiAgcmV0dXJuIGNoYWluKHJlZnMpO1xufVxudmFyIGRlZmF1bHRFbGVtZW50UHJlZGljYXRlID0gaXNTZXJ2ZXIgPyAoaXRlbSkgPT4gaXRlbSAhPSBudWxsICYmIHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiICYmIFwidFwiIGluIGl0ZW0gOiAoaXRlbSkgPT4gaXRlbSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG5mdW5jdGlvbiBnZXRSZXNvbHZlZEVsZW1lbnRzKHZhbHVlLCBwcmVkaWNhdGUpIHtcbiAgaWYgKHByZWRpY2F0ZSh2YWx1ZSkpXG4gICAgcmV0dXJuIHZhbHVlO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgJiYgIXZhbHVlLmxlbmd0aClcbiAgICByZXR1cm4gZ2V0UmVzb2x2ZWRFbGVtZW50cyh2YWx1ZSgpLCBwcmVkaWNhdGUpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRSZXNvbHZlZEVsZW1lbnRzKGl0ZW0sIHByZWRpY2F0ZSk7XG4gICAgICBpZiAocmVzdWx0KVxuICAgICAgICBBcnJheS5pc0FycmF5KHJlc3VsdCkgPyByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgcmVzdWx0KSA6IHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPyByZXN1bHRzIDogbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVFbGVtZW50cyhmbiwgcHJlZGljYXRlID0gZGVmYXVsdEVsZW1lbnRQcmVkaWNhdGUsIHNlcnZlclByZWRpY2F0ZSA9IGRlZmF1bHRFbGVtZW50UHJlZGljYXRlKSB7XG4gIGNvbnN0IGNoaWxkcmVuMiA9IGNyZWF0ZU1lbW8oZm4pO1xuICBjb25zdCBtZW1vID0gY3JlYXRlTWVtbyhcbiAgICAoKSA9PiBnZXRSZXNvbHZlZEVsZW1lbnRzKGNoaWxkcmVuMigpLCBpc1NlcnZlciA/IHNlcnZlclByZWRpY2F0ZSA6IHByZWRpY2F0ZSlcbiAgKTtcbiAgbWVtby50b0FycmF5ID0gKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gbWVtbygpO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG4gIH07XG4gIHJldHVybiBtZW1vO1xufVxuZnVuY3Rpb24gZ2V0Rmlyc3RDaGlsZCh2YWx1ZSwgcHJlZGljYXRlKSB7XG4gIGlmIChwcmVkaWNhdGUodmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiICYmICF2YWx1ZS5sZW5ndGgpXG4gICAgcmV0dXJuIGdldEZpcnN0Q2hpbGQodmFsdWUoKSwgcHJlZGljYXRlKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRGaXJzdENoaWxkKGl0ZW0sIHByZWRpY2F0ZSk7XG4gICAgICBpZiAocmVzdWx0KVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGaXJzdChmbiwgcHJlZGljYXRlID0gZGVmYXVsdEVsZW1lbnRQcmVkaWNhdGUsIHNlcnZlclByZWRpY2F0ZSA9IGRlZmF1bHRFbGVtZW50UHJlZGljYXRlKSB7XG4gIGNvbnN0IGNoaWxkcmVuMiA9IGNyZWF0ZU1lbW8oZm4pO1xuICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiBnZXRGaXJzdENoaWxkKGNoaWxkcmVuMigpLCBpc1NlcnZlciA/IHNlcnZlclByZWRpY2F0ZSA6IHByZWRpY2F0ZSkpO1xufVxuZnVuY3Rpb24gUmVmcyhwcm9wcykge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gIH1cbiAgY29uc3QgY2IgPSBwcm9wcy5yZWYsIHJlc29sdmVkID0gY2hpbGRyZW4oKCkgPT4gcHJvcHMuY2hpbGRyZW4pO1xuICBsZXQgcHJldiA9IFtdO1xuICBjcmVhdGVDb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgZWxzID0gcmVzb2x2ZWQudG9BcnJheSgpLmZpbHRlcihkZWZhdWx0RWxlbWVudFByZWRpY2F0ZSk7XG4gICAgaWYgKCFhcnJheUVxdWFscyhwcmV2LCBlbHMpKVxuICAgICAgdW50cmFjaygoKSA9PiBjYihlbHMpKTtcbiAgICBwcmV2ID0gZWxzO1xuICB9LCBbXSk7XG4gIG9uQ2xlYW51cCgoKSA9PiBwcmV2Lmxlbmd0aCAmJiBjYihbXSkpO1xuICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5mdW5jdGlvbiBSZWYocHJvcHMpIHtcbiAgaWYgKGlzU2VydmVyKSB7XG4gICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xuICB9XG4gIGNvbnN0IGNiID0gcHJvcHMucmVmLCByZXNvbHZlZCA9IGNoaWxkcmVuKCgpID0+IHByb3BzLmNoaWxkcmVuKTtcbiAgbGV0IHByZXY7XG4gIGNyZWF0ZUNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBlbCA9IHJlc29sdmVkLnRvQXJyYXkoKS5maW5kKGRlZmF1bHRFbGVtZW50UHJlZGljYXRlKTtcbiAgICBpZiAoZWwgIT09IHByZXYpXG4gICAgICB1bnRyYWNrKCgpID0+IGNiKGVsKSk7XG4gICAgcHJldiA9IGVsO1xuICB9KTtcbiAgb25DbGVhbnVwKCgpID0+IHByZXYgJiYgY2Iodm9pZCAwKSk7XG4gIHJldHVybiByZXNvbHZlZDtcbn1cblxuZXhwb3J0IHsgUmVmLCBSZWZzLCBkZWZhdWx0RWxlbWVudFByZWRpY2F0ZSwgZ2V0Rmlyc3RDaGlsZCwgZ2V0UmVzb2x2ZWRFbGVtZW50cywgbWVyZ2VSZWZzLCByZXNvbHZlRWxlbWVudHMsIHJlc29sdmVGaXJzdCB9O1xuIiwiaW1wb3J0IHsgb25DbGVhbnVwLCBtZXJnZVByb3BzIH0gZnJvbSAnc29saWQtanMnO1xuZXhwb3J0IHsgY3JlYXRlRXZlbnRMaXN0ZW5lciB9IGZyb20gJ0Bzb2xpZC1wcmltaXRpdmVzL2V2ZW50LWxpc3RlbmVyJztcbmV4cG9ydCB7IEtleSB9IGZyb20gJ0Bzb2xpZC1wcmltaXRpdmVzL2tleWVkJztcbmV4cG9ydCB7IFJlYWN0aXZlTWFwIH0gZnJvbSAnQHNvbGlkLXByaW1pdGl2ZXMvbWFwJztcbmV4cG9ydCB7IGNyZWF0ZU1lZGlhUXVlcnkgfSBmcm9tICdAc29saWQtcHJpbWl0aXZlcy9tZWRpYSc7XG5leHBvcnQgeyBjb21iaW5lUHJvcHMgfSBmcm9tICdAc29saWQtcHJpbWl0aXZlcy9wcm9wcyc7XG5leHBvcnQgeyBtZXJnZVJlZnMgfSBmcm9tICdAc29saWQtcHJpbWl0aXZlcy9yZWZzJztcbmV4cG9ydCB7IGFjY2VzcywgYWNjZXNzV2l0aCwgY2hhaW4gfSBmcm9tICdAc29saWQtcHJpbWl0aXZlcy91dGlscyc7XG5cbi8vIHNyYy9hcnJheS50c1xuZnVuY3Rpb24gYWRkSXRlbVRvQXJyYXkoYXJyYXksIGl0ZW0sIGluZGV4ID0gLTEpIHtcbiAgaWYgKCEoaW5kZXggaW4gYXJyYXkpKSB7XG4gICAgcmV0dXJuIFsuLi5hcnJheSwgaXRlbV07XG4gIH1cbiAgcmV0dXJuIFsuLi5hcnJheS5zbGljZSgwLCBpbmRleCksIGl0ZW0sIC4uLmFycmF5LnNsaWNlKGluZGV4KV07XG59XG5mdW5jdGlvbiByZW1vdmVJdGVtRnJvbUFycmF5KGFycmF5LCBpdGVtKSB7XG4gIGNvbnN0IHVwZGF0ZWRBcnJheSA9IFsuLi5hcnJheV07XG4gIGNvbnN0IGluZGV4ID0gdXBkYXRlZEFycmF5LmluZGV4T2YoaXRlbSk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB1cGRhdGVkQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdXBkYXRlZEFycmF5O1xufVxuXG4vLyBzcmMvYXNzZXJ0aW9uLnRzXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIjtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG4vLyBzcmMvY3JlYXRlLWdlbmVyYXRlLWlkLnRzXG5mdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKGJhc2VJZCkge1xuICByZXR1cm4gKHN1ZmZpeCkgPT4gYCR7YmFzZUlkKCl9LSR7c3VmZml4fWA7XG59XG5mdW5jdGlvbiBjcmVhdGVHbG9iYWxMaXN0ZW5lcnMoKSB7XG4gIGNvbnN0IGdsb2JhbExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGFkZEdsb2JhbExpc3RlbmVyID0gKGV2ZW50VGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGZuID0gb3B0aW9ucz8ub25jZSA/ICguLi5hcmdzKSA9PiB7XG4gICAgICBnbG9iYWxMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyKC4uLmFyZ3MpO1xuICAgIH0gOiBsaXN0ZW5lcjtcbiAgICBnbG9iYWxMaXN0ZW5lcnMuc2V0KGxpc3RlbmVyLCB7IHR5cGUsIGV2ZW50VGFyZ2V0LCBmbiwgb3B0aW9ucyB9KTtcbiAgICBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlR2xvYmFsTGlzdGVuZXIgPSAoZXZlbnRUYXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgZm4gPSBnbG9iYWxMaXN0ZW5lcnMuZ2V0KGxpc3RlbmVyKT8uZm4gfHwgbGlzdGVuZXI7XG4gICAgZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgb3B0aW9ucyk7XG4gICAgZ2xvYmFsTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gIH07XG4gIGNvbnN0IHJlbW92ZUFsbEdsb2JhbExpc3RlbmVycyA9ICgpID0+IHtcbiAgICBnbG9iYWxMaXN0ZW5lcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgcmVtb3ZlR2xvYmFsTGlzdGVuZXIodmFsdWUuZXZlbnRUYXJnZXQsIHZhbHVlLnR5cGUsIGtleSwgdmFsdWUub3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG4gIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgcmVtb3ZlQWxsR2xvYmFsTGlzdGVuZXJzKCk7XG4gIH0pO1xuICByZXR1cm4geyBhZGRHbG9iYWxMaXN0ZW5lciwgcmVtb3ZlR2xvYmFsTGlzdGVuZXIsIHJlbW92ZUFsbEdsb2JhbExpc3RlbmVycyB9O1xufVxuXG4vLyBzcmMvZG9tLnRzXG5mdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIGlmICghcGFyZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBwYXJlbnQgPT09IGNoaWxkIHx8IHBhcmVudC5jb250YWlucyhjaGlsZCk7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KG5vZGUsIGFjdGl2ZURlc2NlbmRhbnQgPSBmYWxzZSkge1xuICBjb25zdCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGdldERvY3VtZW50KG5vZGUpO1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQ/Lm5vZGVOYW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzRnJhbWUoYWN0aXZlRWxlbWVudCkgJiYgYWN0aXZlRWxlbWVudC5jb250ZW50RG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0QWN0aXZlRWxlbWVudChhY3RpdmVFbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5LCBhY3RpdmVEZXNjZW5kYW50KTtcbiAgfVxuICBpZiAoYWN0aXZlRGVzY2VuZGFudCkge1xuICAgIGNvbnN0IGlkID0gYWN0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIik7XG4gICAgaWYgKGlkKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RG9jdW1lbnQoYWN0aXZlRWxlbWVudCkuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhY3RpdmVFbGVtZW50O1xufVxuZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgcmV0dXJuIGdldERvY3VtZW50KG5vZGUpLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbn1cbmZ1bmN0aW9uIGdldERvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IGRvY3VtZW50O1xufVxuZnVuY3Rpb24gaXNGcmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnRhZ05hbWUgPT09IFwiSUZSQU1FXCI7XG59XG5cbi8vIHNyYy9lbnVtcy50c1xudmFyIEV2ZW50S2V5ID0gLyogQF9fUFVSRV9fICovICgoRXZlbnRLZXkyKSA9PiB7XG4gIEV2ZW50S2V5MltcIkVzY2FwZVwiXSA9IFwiRXNjYXBlXCI7XG4gIEV2ZW50S2V5MltcIkVudGVyXCJdID0gXCJFbnRlclwiO1xuICBFdmVudEtleTJbXCJUYWJcIl0gPSBcIlRhYlwiO1xuICBFdmVudEtleTJbXCJTcGFjZVwiXSA9IFwiIFwiO1xuICBFdmVudEtleTJbXCJBcnJvd0Rvd25cIl0gPSBcIkFycm93RG93blwiO1xuICBFdmVudEtleTJbXCJBcnJvd0xlZnRcIl0gPSBcIkFycm93TGVmdFwiO1xuICBFdmVudEtleTJbXCJBcnJvd1JpZ2h0XCJdID0gXCJBcnJvd1JpZ2h0XCI7XG4gIEV2ZW50S2V5MltcIkFycm93VXBcIl0gPSBcIkFycm93VXBcIjtcbiAgRXZlbnRLZXkyW1wiRW5kXCJdID0gXCJFbmRcIjtcbiAgRXZlbnRLZXkyW1wiSG9tZVwiXSA9IFwiSG9tZVwiO1xuICBFdmVudEtleTJbXCJQYWdlRG93blwiXSA9IFwiUGFnZURvd25cIjtcbiAgRXZlbnRLZXkyW1wiUGFnZVVwXCJdID0gXCJQYWdlVXBcIjtcbiAgcmV0dXJuIEV2ZW50S2V5Mjtcbn0pKEV2ZW50S2V5IHx8IHt9KTtcblxuLy8gc3JjL3BsYXRmb3JtLnRzXG5mdW5jdGlvbiB0ZXN0VXNlckFnZW50KHJlKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8IHdpbmRvdy5uYXZpZ2F0b3IgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3aW5kb3cubmF2aWdhdG9yW1widXNlckFnZW50RGF0YVwiXT8uYnJhbmRzLnNvbWUoXG4gICAgICAoYnJhbmQpID0+IHJlLnRlc3QoYnJhbmQuYnJhbmQpXG4gICAgKSB8fCByZS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICApO1xufVxuZnVuY3Rpb24gdGVzdFBsYXRmb3JtKHJlKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5uYXZpZ2F0b3IgIT0gbnVsbCA/IChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmUudGVzdCh3aW5kb3cubmF2aWdhdG9yW1widXNlckFnZW50RGF0YVwiXT8ucGxhdGZvcm0gfHwgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSlcbiAgKSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNNYWMoKSB7XG4gIHJldHVybiB0ZXN0UGxhdGZvcm0oL15NYWMvaSk7XG59XG5mdW5jdGlvbiBpc0lQaG9uZSgpIHtcbiAgcmV0dXJuIHRlc3RQbGF0Zm9ybSgvXmlQaG9uZS9pKTtcbn1cbmZ1bmN0aW9uIGlzSVBhZCgpIHtcbiAgcmV0dXJuIHRlc3RQbGF0Zm9ybSgvXmlQYWQvaSkgfHwgLy8gaVBhZE9TIDEzIGxpZXMgYW5kIHNheXMgaXQncyBhIE1hYywgYnV0IHdlIGNhbiBkaXN0aW5ndWlzaCBieSBkZXRlY3RpbmcgdG91Y2ggc3VwcG9ydC5cbiAgaXNNYWMoKSAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxO1xufVxuZnVuY3Rpb24gaXNJT1MoKSB7XG4gIHJldHVybiBpc0lQaG9uZSgpIHx8IGlzSVBhZCgpO1xufVxuZnVuY3Rpb24gaXNBcHBsZURldmljZSgpIHtcbiAgcmV0dXJuIGlzTWFjKCkgfHwgaXNJT1MoKTtcbn1cbmZ1bmN0aW9uIGlzV2ViS2l0KCkge1xuICByZXR1cm4gdGVzdFVzZXJBZ2VudCgvQXBwbGVXZWJLaXQvaSkgJiYgIWlzQ2hyb21lKCk7XG59XG5mdW5jdGlvbiBpc0Nocm9tZSgpIHtcbiAgcmV0dXJuIHRlc3RVc2VyQWdlbnQoL0Nocm9tZS9pKTtcbn1cbmZ1bmN0aW9uIGlzQW5kcm9pZCgpIHtcbiAgcmV0dXJuIHRlc3RVc2VyQWdlbnQoL0FuZHJvaWQvaSk7XG59XG5cbi8vIHNyYy9ldmVudHMudHNcbmZ1bmN0aW9uIGNhbGxIYW5kbGVyKGV2ZW50LCBoYW5kbGVyKSB7XG4gIGlmIChoYW5kbGVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVyWzBdKGhhbmRsZXJbMV0sIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV2ZW50Py5kZWZhdWx0UHJldmVudGVkO1xufVxuZnVuY3Rpb24gY29tcG9zZUV2ZW50SGFuZGxlcnMoaGFuZGxlcnMpIHtcbiAgcmV0dXJuIChldmVudCkgPT4ge1xuICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiBoYW5kbGVycykge1xuICAgICAgY2FsbEhhbmRsZXIoZXZlbnQsIGhhbmRsZXIpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGlzQ3RybEtleShlKSB7XG4gIGlmIChpc01hYygpKSB7XG4gICAgcmV0dXJuIGUubWV0YUtleSAmJiAhZS5jdHJsS2V5O1xuICB9XG4gIHJldHVybiBlLmN0cmxLZXkgJiYgIWUubWV0YUtleTtcbn1cblxuLy8gc3JjL2ZvY3VzLXdpdGhvdXQtc2Nyb2xsaW5nLnRzXG5mdW5jdGlvbiBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN1cHBvcnRzUHJldmVudFNjcm9sbCgpKSB7XG4gICAgZWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2Nyb2xsYWJsZUVsZW1lbnRzID0gZ2V0U2Nyb2xsYWJsZUVsZW1lbnRzKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZUVsZW1lbnRzKTtcbiAgfVxufVxudmFyIHN1cHBvcnRzUHJldmVudFNjcm9sbENhY2hlZCA9IG51bGw7XG5mdW5jdGlvbiBzdXBwb3J0c1ByZXZlbnRTY3JvbGwoKSB7XG4gIGlmIChzdXBwb3J0c1ByZXZlbnRTY3JvbGxDYWNoZWQgPT0gbnVsbCkge1xuICAgIHN1cHBvcnRzUHJldmVudFNjcm9sbENhY2hlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb2N1c0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZm9jdXNFbGVtLmZvY3VzKHtcbiAgICAgICAgZ2V0IHByZXZlbnRTY3JvbGwoKSB7XG4gICAgICAgICAgc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkO1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsYWJsZUVsZW1lbnRzKGVsZW1lbnQpIHtcbiAgbGV0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgY29uc3Qgc2Nyb2xsYWJsZUVsZW1lbnRzID0gW107XG4gIGNvbnN0IHJvb3RTY3JvbGxpbmdFbGVtZW50ID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBwYXJlbnQgIT09IHJvb3RTY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgaWYgKHBhcmVudC5vZmZzZXRIZWlnaHQgPCBwYXJlbnQuc2Nyb2xsSGVpZ2h0IHx8IHBhcmVudC5vZmZzZXRXaWR0aCA8IHBhcmVudC5zY3JvbGxXaWR0aCkge1xuICAgICAgc2Nyb2xsYWJsZUVsZW1lbnRzLnB1c2goe1xuICAgICAgICBlbGVtZW50OiBwYXJlbnQsXG4gICAgICAgIHNjcm9sbFRvcDogcGFyZW50LnNjcm9sbFRvcCxcbiAgICAgICAgc2Nyb2xsTGVmdDogcGFyZW50LnNjcm9sbExlZnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgfVxuICBpZiAocm9vdFNjcm9sbGluZ0VsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgIHNjcm9sbGFibGVFbGVtZW50cy5wdXNoKHtcbiAgICAgIGVsZW1lbnQ6IHJvb3RTY3JvbGxpbmdFbGVtZW50LFxuICAgICAgc2Nyb2xsVG9wOiByb290U2Nyb2xsaW5nRWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICBzY3JvbGxMZWZ0OiByb290U2Nyb2xsaW5nRWxlbWVudC5zY3JvbGxMZWZ0XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNjcm9sbGFibGVFbGVtZW50cztcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlRWxlbWVudHMpIHtcbiAgZm9yIChjb25zdCB7IGVsZW1lbnQsIHNjcm9sbFRvcCwgc2Nyb2xsTGVmdCB9IG9mIHNjcm9sbGFibGVFbGVtZW50cykge1xuICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gIH1cbn1cblxuLy8gc3JjL3RhYmJhYmxlLnRzXG52YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBbXG4gIFwiaW5wdXQ6bm90KFt0eXBlPSdoaWRkZW4nXSk6bm90KFtkaXNhYmxlZF0pXCIsXG4gIFwic2VsZWN0Om5vdChbZGlzYWJsZWRdKVwiLFxuICBcInRleHRhcmVhOm5vdChbZGlzYWJsZWRdKVwiLFxuICBcImJ1dHRvbjpub3QoW2Rpc2FibGVkXSlcIixcbiAgXCJhW2hyZWZdXCIsXG4gIFwiYXJlYVtocmVmXVwiLFxuICBcIlt0YWJpbmRleF1cIixcbiAgXCJpZnJhbWVcIixcbiAgXCJvYmplY3RcIixcbiAgXCJlbWJlZFwiLFxuICBcImF1ZGlvW2NvbnRyb2xzXVwiLFxuICBcInZpZGVvW2NvbnRyb2xzXVwiLFxuICBcIltjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPSdmYWxzZSddKVwiXG5dO1xudmFyIHRhYmJhYmxlRWxlbWVudHMgPSBbLi4uZm9jdXNhYmxlRWxlbWVudHMsICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9XCItMVwiXSk6bm90KFtkaXNhYmxlZF0pJ107XG52YXIgRk9DVVNBQkxFX0VMRU1FTlRfU0VMRUNUT1IgPSBmb2N1c2FibGVFbGVtZW50cy5qb2luKFwiOm5vdChbaGlkZGVuXSksXCIpICsgXCIsW3RhYmluZGV4XTpub3QoW2Rpc2FibGVkXSk6bm90KFtoaWRkZW5dKVwiO1xudmFyIFRBQkJBQkxFX0VMRU1FTlRfU0VMRUNUT1IgPSB0YWJiYWJsZUVsZW1lbnRzLmpvaW4oXG4gICc6bm90KFtoaWRkZW5dKTpub3QoW3RhYmluZGV4PVwiLTFcIl0pLCdcbik7XG5mdW5jdGlvbiBnZXRBbGxUYWJiYWJsZUluKGNvbnRhaW5lciwgaW5jbHVkZUNvbnRhaW5lcikge1xuICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoRk9DVVNBQkxFX0VMRU1FTlRfU0VMRUNUT1IpKTtcbiAgY29uc3QgdGFiYmFibGVFbGVtZW50czIgPSBlbGVtZW50cy5maWx0ZXIoaXNUYWJiYWJsZSk7XG4gIGlmIChpbmNsdWRlQ29udGFpbmVyICYmIGlzVGFiYmFibGUoY29udGFpbmVyKSkge1xuICAgIHRhYmJhYmxlRWxlbWVudHMyLnVuc2hpZnQoY29udGFpbmVyKTtcbiAgfVxuICB0YWJiYWJsZUVsZW1lbnRzMi5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgaWYgKGlzRnJhbWUoZWxlbWVudCkgJiYgZWxlbWVudC5jb250ZW50RG9jdW1lbnQpIHtcbiAgICAgIGNvbnN0IGZyYW1lQm9keSA9IGVsZW1lbnQuY29udGVudERvY3VtZW50LmJvZHk7XG4gICAgICBjb25zdCBhbGxGcmFtZVRhYmJhYmxlID0gZ2V0QWxsVGFiYmFibGVJbihmcmFtZUJvZHksIGZhbHNlKTtcbiAgICAgIHRhYmJhYmxlRWxlbWVudHMyLnNwbGljZShpLCAxLCAuLi5hbGxGcmFtZVRhYmJhYmxlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGFiYmFibGVFbGVtZW50czI7XG59XG5mdW5jdGlvbiBpc1RhYmJhYmxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGlzRm9jdXNhYmxlKGVsZW1lbnQpICYmICFoYXNOZWdhdGl2ZVRhYkluZGV4KGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gaXNGb2N1c2FibGUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5tYXRjaGVzKEZPQ1VTQUJMRV9FTEVNRU5UX1NFTEVDVE9SKSAmJiBpc0VsZW1lbnRWaXNpYmxlKGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gaGFzTmVnYXRpdmVUYWJJbmRleChlbGVtZW50KSB7XG4gIGNvbnN0IHRhYkluZGV4ID0gcGFyc2VJbnQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSB8fCBcIjBcIiwgMTApO1xuICByZXR1cm4gdGFiSW5kZXggPCAwO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZShlbGVtZW50LCBjaGlsZEVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQubm9kZU5hbWUgIT09IFwiI2NvbW1lbnRcIiAmJiBpc1N0eWxlVmlzaWJsZShlbGVtZW50KSAmJiBpc0F0dHJpYnV0ZVZpc2libGUoZWxlbWVudCwgY2hpbGRFbGVtZW50KSAmJiAoIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0VsZW1lbnRWaXNpYmxlKGVsZW1lbnQucGFyZW50RWxlbWVudCwgZWxlbWVudCkpO1xufVxuZnVuY3Rpb24gaXNTdHlsZVZpc2libGUoZWxlbWVudCkge1xuICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpICYmICEoZWxlbWVudCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHsgZGlzcGxheSwgdmlzaWJpbGl0eSB9ID0gZWxlbWVudC5zdHlsZTtcbiAgbGV0IGlzVmlzaWJsZSA9IGRpc3BsYXkgIT09IFwibm9uZVwiICYmIHZpc2liaWxpdHkgIT09IFwiaGlkZGVuXCIgJiYgdmlzaWJpbGl0eSAhPT0gXCJjb2xsYXBzZVwiO1xuICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgaWYgKCFlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIHtcbiAgICAgIHJldHVybiBpc1Zpc2libGU7XG4gICAgfVxuICAgIGNvbnN0IHsgZ2V0Q29tcHV0ZWRTdHlsZSB9ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIGNvbnN0IHsgZGlzcGxheTogY29tcHV0ZWREaXNwbGF5LCB2aXNpYmlsaXR5OiBjb21wdXRlZFZpc2liaWxpdHkgfSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgaXNWaXNpYmxlID0gY29tcHV0ZWREaXNwbGF5ICE9PSBcIm5vbmVcIiAmJiBjb21wdXRlZFZpc2liaWxpdHkgIT09IFwiaGlkZGVuXCIgJiYgY29tcHV0ZWRWaXNpYmlsaXR5ICE9PSBcImNvbGxhcHNlXCI7XG4gIH1cbiAgcmV0dXJuIGlzVmlzaWJsZTtcbn1cbmZ1bmN0aW9uIGlzQXR0cmlidXRlVmlzaWJsZShlbGVtZW50LCBjaGlsZEVsZW1lbnQpIHtcbiAgcmV0dXJuICFlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImhpZGRlblwiKSAmJiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gXCJERVRBSUxTXCIgJiYgY2hpbGRFbGVtZW50ICYmIGNoaWxkRWxlbWVudC5ub2RlTmFtZSAhPT0gXCJTVU1NQVJZXCIgPyBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcIm9wZW5cIikgOiB0cnVlKTtcbn1cbmZ1bmN0aW9uIGhhc0ZvY3VzV2l0aGluKGVsZW1lbnQpIHtcbiAgY29uc3QgYWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoZWxlbWVudCk7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIWNvbnRhaW5zKGVsZW1lbnQsIGFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgY29uc3QgYWN0aXZlRGVzY2VuZGFudCA9IGFjdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIpO1xuICAgIGlmICghYWN0aXZlRGVzY2VuZGFudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIShcImlkXCIgaW4gZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFjdGl2ZURlc2NlbmRhbnQgPT09IGVsZW1lbnQuaWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gISFlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke0NTUy5lc2NhcGUoYWN0aXZlRGVzY2VuZGFudCl9YCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLy8gc3JjL2ZvY3VzLW1hbmFnZXIudHNcbmZ1bmN0aW9uIGNyZWF0ZUZvY3VzTWFuYWdlcihyZWYsIGRlZmF1bHRPcHRpb25zID0gKCkgPT4gKHt9KSkge1xuICBjb25zdCBmb2N1c05leHQgPSAob3B0cyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgcm9vdCA9IHJlZigpO1xuICAgIGlmICghcm9vdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBmcm9tID0gZGVmYXVsdE9wdGlvbnMoKS5mcm9tIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsXG4gICAgICB0YWJiYWJsZSA9IGRlZmF1bHRPcHRpb25zKCkudGFiYmFibGUsXG4gICAgICB3cmFwID0gZGVmYXVsdE9wdGlvbnMoKS53cmFwLFxuICAgICAgYWNjZXB0ID0gZGVmYXVsdE9wdGlvbnMoKS5hY2NlcHRcbiAgICB9ID0gb3B0cztcbiAgICBjb25zdCB3YWxrZXIgPSBnZXRGb2N1c2FibGVUcmVlV2Fsa2VyKHJvb3QsIHsgdGFiYmFibGUsIGFjY2VwdCB9KTtcbiAgICBpZiAoZnJvbSAmJiByb290LmNvbnRhaW5zKGZyb20pKSB7XG4gICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBmcm9tO1xuICAgIH1cbiAgICBsZXQgbmV4dE5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICBpZiAoIW5leHROb2RlICYmIHdyYXApIHtcbiAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHJvb3Q7XG4gICAgICBuZXh0Tm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgIH1cbiAgICBpZiAobmV4dE5vZGUpIHtcbiAgICAgIGZvY3VzRWxlbWVudChuZXh0Tm9kZSwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0Tm9kZTtcbiAgfTtcbiAgY29uc3QgZm9jdXNQcmV2aW91cyA9IChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCByb290ID0gcmVmKCk7XG4gICAgaWYgKCFyb290KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGZyb20gPSBkZWZhdWx0T3B0aW9ucygpLmZyb20gfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCxcbiAgICAgIHRhYmJhYmxlID0gZGVmYXVsdE9wdGlvbnMoKS50YWJiYWJsZSxcbiAgICAgIHdyYXAgPSBkZWZhdWx0T3B0aW9ucygpLndyYXAsXG4gICAgICBhY2NlcHQgPSBkZWZhdWx0T3B0aW9ucygpLmFjY2VwdFxuICAgIH0gPSBvcHRzO1xuICAgIGNvbnN0IHdhbGtlciA9IGdldEZvY3VzYWJsZVRyZWVXYWxrZXIocm9vdCwgeyB0YWJiYWJsZSwgYWNjZXB0IH0pO1xuICAgIGlmIChmcm9tICYmIHJvb3QuY29udGFpbnMoZnJvbSkpIHtcbiAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IGZyb207XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5leHQgPSBsYXN0KHdhbGtlcik7XG4gICAgICBpZiAobmV4dCkge1xuICAgICAgICBmb2N1c0VsZW1lbnQobmV4dCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gICAgbGV0IHByZXZpb3VzTm9kZSA9IHdhbGtlci5wcmV2aW91c05vZGUoKTtcbiAgICBpZiAoIXByZXZpb3VzTm9kZSAmJiB3cmFwKSB7XG4gICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSByb290O1xuICAgICAgcHJldmlvdXNOb2RlID0gbGFzdCh3YWxrZXIpO1xuICAgIH1cbiAgICBpZiAocHJldmlvdXNOb2RlKSB7XG4gICAgICBmb2N1c0VsZW1lbnQocHJldmlvdXNOb2RlLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXZpb3VzTm9kZTtcbiAgfTtcbiAgY29uc3QgZm9jdXNGaXJzdCA9IChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCByb290ID0gcmVmKCk7XG4gICAgaWYgKCFyb290KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgdGFiYmFibGUgPSBkZWZhdWx0T3B0aW9ucygpLnRhYmJhYmxlLCBhY2NlcHQgPSBkZWZhdWx0T3B0aW9ucygpLmFjY2VwdCB9ID0gb3B0cztcbiAgICBjb25zdCB3YWxrZXIgPSBnZXRGb2N1c2FibGVUcmVlV2Fsa2VyKHJvb3QsIHsgdGFiYmFibGUsIGFjY2VwdCB9KTtcbiAgICBjb25zdCBuZXh0Tm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgIGlmIChuZXh0Tm9kZSkge1xuICAgICAgZm9jdXNFbGVtZW50KG5leHROb2RlLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHROb2RlO1xuICB9O1xuICBjb25zdCBmb2N1c0xhc3QgPSAob3B0cyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgcm9vdCA9IHJlZigpO1xuICAgIGlmICghcm9vdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHRhYmJhYmxlID0gZGVmYXVsdE9wdGlvbnMoKS50YWJiYWJsZSwgYWNjZXB0ID0gZGVmYXVsdE9wdGlvbnMoKS5hY2NlcHQgfSA9IG9wdHM7XG4gICAgY29uc3Qgd2Fsa2VyID0gZ2V0Rm9jdXNhYmxlVHJlZVdhbGtlcihyb290LCB7IHRhYmJhYmxlLCBhY2NlcHQgfSk7XG4gICAgY29uc3QgbmV4dCA9IGxhc3Qod2Fsa2VyKTtcbiAgICBpZiAobmV4dCkge1xuICAgICAgZm9jdXNFbGVtZW50KG5leHQsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dDtcbiAgfTtcbiAgcmV0dXJuIHsgZm9jdXNOZXh0LCBmb2N1c1ByZXZpb3VzLCBmb2N1c0ZpcnN0LCBmb2N1c0xhc3QgfTtcbn1cbmZ1bmN0aW9uIGZvY3VzRWxlbWVudChlbGVtZW50LCBzY3JvbGwgPSBmYWxzZSkge1xuICBpZiAoZWxlbWVudCAhPSBudWxsICYmICFzY3JvbGwpIHtcbiAgICB0cnkge1xuICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbGVtZW50ICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbGFzdCh3YWxrZXIpIHtcbiAgbGV0IG5leHQ7XG4gIGxldCBsYXN0MjtcbiAgZG8ge1xuICAgIGxhc3QyID0gd2Fsa2VyLmxhc3RDaGlsZCgpO1xuICAgIGlmIChsYXN0Mikge1xuICAgICAgbmV4dCA9IGxhc3QyO1xuICAgIH1cbiAgfSB3aGlsZSAobGFzdDIpO1xuICByZXR1cm4gbmV4dDtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudEluU2NvcGUoZWxlbWVudCwgc2NvcGUpIHtcbiAgcmV0dXJuIHNjb3BlLnNvbWUoKG5vZGUpID0+IG5vZGUuY29udGFpbnMoZWxlbWVudCkpO1xufVxuZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlVHJlZVdhbGtlcihyb290LCBvcHRzLCBzY29wZSkge1xuICBjb25zdCBzZWxlY3RvciA9IG9wdHM/LnRhYmJhYmxlID8gVEFCQkFCTEVfRUxFTUVOVF9TRUxFQ1RPUiA6IEZPQ1VTQUJMRV9FTEVNRU5UX1NFTEVDVE9SO1xuICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKHJvb3QsIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULCB7XG4gICAgYWNjZXB0Tm9kZShub2RlKSB7XG4gICAgICBpZiAob3B0cz8uZnJvbT8uY29udGFpbnMobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVDtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLm1hdGNoZXMoc2VsZWN0b3IpICYmIGlzRWxlbWVudFZpc2libGUobm9kZSkgJiYgKCFzY29wZSB8fCBpc0VsZW1lbnRJblNjb3BlKG5vZGUsIHNjb3BlKSkgJiYgKCFvcHRzPy5hY2NlcHQgfHwgb3B0cy5hY2NlcHQobm9kZSkpKSB7XG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfU0tJUDtcbiAgICB9XG4gIH0pO1xuICBpZiAob3B0cz8uZnJvbSkge1xuICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG9wdHMuZnJvbTtcbiAgfVxuICByZXR1cm4gd2Fsa2VyO1xufVxuXG4vLyBzcmMvZ2V0LXNjcm9sbC1wYXJlbnQudHNcbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIHdoaWxlIChub2RlICYmICFpc1Njcm9sbGFibGUobm9kZSkpIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlIHx8IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNTY3JvbGxhYmxlKG5vZGUpIHtcbiAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgcmV0dXJuIC8oYXV0b3xzY3JvbGwpLy50ZXN0KHN0eWxlLm92ZXJmbG93ICsgc3R5bGUub3ZlcmZsb3dYICsgc3R5bGUub3ZlcmZsb3dZKTtcbn1cblxuLy8gc3JjL2lzLXZpcnR1YWwtZXZlbnQudHNcbmZ1bmN0aW9uIGlzVmlydHVhbENsaWNrKGV2ZW50KSB7XG4gIGlmIChldmVudC5tb3pJbnB1dFNvdXJjZSA9PT0gMCAmJiBldmVudC5pc1RydXN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNBbmRyb2lkKCkgJiYgZXZlbnQucG9pbnRlclR5cGUpIHtcbiAgICByZXR1cm4gZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbnMgPT09IDE7XG4gIH1cbiAgcmV0dXJuIGV2ZW50LmRldGFpbCA9PT0gMCAmJiAhZXZlbnQucG9pbnRlclR5cGU7XG59XG5mdW5jdGlvbiBpc1ZpcnR1YWxQb2ludGVyRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LndpZHRoID09PSAwICYmIGV2ZW50LmhlaWdodCA9PT0gMCB8fCBldmVudC53aWR0aCA9PT0gMSAmJiBldmVudC5oZWlnaHQgPT09IDEgJiYgZXZlbnQucHJlc3N1cmUgPT09IDAgJiYgZXZlbnQuZGV0YWlsID09PSAwICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSBcIm1vdXNlXCI7XG59XG5cbi8vIHNyYy9ub29wLnRzXG5mdW5jdGlvbiBub29wKCkge1xuICByZXR1cm47XG59XG5cbi8vIHNyYy9udW1iZXIudHNcbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4gPSAtSW5maW5pdHksIG1heCA9IEluZmluaXR5KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluKSwgbWF4KTtcbn1cbmZ1bmN0aW9uIHNuYXBWYWx1ZVRvU3RlcCh2YWx1ZSwgbWluLCBtYXgsIHN0ZXApIHtcbiAgY29uc3QgcmVtYWluZGVyID0gKHZhbHVlIC0gKGlzTmFOKG1pbikgPyAwIDogbWluKSkgJSBzdGVwO1xuICBsZXQgc25hcHBlZFZhbHVlID0gTWF0aC5hYnMocmVtYWluZGVyKSAqIDIgPj0gc3RlcCA/IHZhbHVlICsgTWF0aC5zaWduKHJlbWFpbmRlcikgKiAoc3RlcCAtIE1hdGguYWJzKHJlbWFpbmRlcikpIDogdmFsdWUgLSByZW1haW5kZXI7XG4gIGlmICghaXNOYU4obWluKSkge1xuICAgIGlmIChzbmFwcGVkVmFsdWUgPCBtaW4pIHtcbiAgICAgIHNuYXBwZWRWYWx1ZSA9IG1pbjtcbiAgICB9IGVsc2UgaWYgKCFpc05hTihtYXgpICYmIHNuYXBwZWRWYWx1ZSA+IG1heCkge1xuICAgICAgc25hcHBlZFZhbHVlID0gbWluICsgTWF0aC5mbG9vcigobWF4IC0gbWluKSAvIHN0ZXApICogc3RlcDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzTmFOKG1heCkgJiYgc25hcHBlZFZhbHVlID4gbWF4KSB7XG4gICAgc25hcHBlZFZhbHVlID0gTWF0aC5mbG9vcihtYXggLyBzdGVwKSAqIHN0ZXA7XG4gIH1cbiAgY29uc3Qgc3RyaW5nID0gc3RlcC50b1N0cmluZygpO1xuICBjb25zdCBpbmRleCA9IHN0cmluZy5pbmRleE9mKFwiLlwiKTtcbiAgY29uc3QgcHJlY2lzaW9uID0gaW5kZXggPj0gMCA/IHN0cmluZy5sZW5ndGggLSBpbmRleCA6IDA7XG4gIGlmIChwcmVjaXNpb24gPiAwKSB7XG4gICAgY29uc3QgcG93ID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgc25hcHBlZFZhbHVlID0gTWF0aC5yb3VuZChzbmFwcGVkVmFsdWUgKiBwb3cpIC8gcG93O1xuICB9XG4gIHJldHVybiBzbmFwcGVkVmFsdWU7XG59XG5cbi8vIHNyYy9wb2x5Z29uLnRzXG5mdW5jdGlvbiBnZXRFdmVudFBvaW50KGV2ZW50KSB7XG4gIHJldHVybiBbZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WV07XG59XG5mdW5jdGlvbiBpc1BvaW50SW5Qb2x5Z29uKHBvaW50LCBwb2x5Z29uKSB7XG4gIGNvbnN0IFt4LCB5XSA9IHBvaW50O1xuICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gIGNvbnN0IGxlbmd0aCA9IHBvbHlnb24ubGVuZ3RoO1xuICBmb3IgKGxldCBsID0gbGVuZ3RoLCBpID0gMCwgaiA9IGwgLSAxOyBpIDwgbDsgaiA9IGkrKykge1xuICAgIGNvbnN0IFt4aSwgeWldID0gcG9seWdvbltpXTtcbiAgICBjb25zdCBbeGosIHlqXSA9IHBvbHlnb25bal07XG4gICAgY29uc3QgWywgdnldID0gcG9seWdvbltqID09PSAwID8gbCAtIDEgOiBqIC0gMV0gfHwgWzAsIDBdO1xuICAgIGNvbnN0IHdoZXJlID0gKHlpIC0geWopICogKHggLSB4aSkgLSAoeGkgLSB4aikgKiAoeSAtIHlpKTtcbiAgICBpZiAoeWogPCB5aSkge1xuICAgICAgaWYgKHkgPj0geWogJiYgeSA8IHlpKSB7XG4gICAgICAgIGlmICh3aGVyZSA9PT0gMClcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHdoZXJlID4gMCkge1xuICAgICAgICAgIGlmICh5ID09PSB5aikge1xuICAgICAgICAgICAgaWYgKHkgPiB2eSkge1xuICAgICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeWkgPCB5aikge1xuICAgICAgaWYgKHkgPiB5aSAmJiB5IDw9IHlqKSB7XG4gICAgICAgIGlmICh3aGVyZSA9PT0gMClcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHdoZXJlIDwgMCkge1xuICAgICAgICAgIGlmICh5ID09PSB5aikge1xuICAgICAgICAgICAgaWYgKHkgPCB2eSkge1xuICAgICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeSA9PSB5aSAmJiAoeCA+PSB4aiAmJiB4IDw9IHhpIHx8IHggPj0geGkgJiYgeCA8PSB4aikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5zaWRlO1xufVxuZnVuY3Rpb24gZ2V0UG9seWdvbigpIHtcbiAgY29uc3QgaWQgPSBcImRlYnVnLXBvbHlnb25cIjtcbiAgY29uc3QgZXhpc3RpbmdQb2x5Z29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICBpZiAoZXhpc3RpbmdQb2x5Z29uKSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nUG9seWdvbjtcbiAgfVxuICBjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcbiAgc3ZnLnN0eWxlLnRvcCA9IFwiMFwiO1xuICBzdmcuc3R5bGUubGVmdCA9IFwiMFwiO1xuICBzdmcuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgc3ZnLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICBzdmcuc3R5bGUuZmlsbCA9IFwiZ3JlZW5cIjtcbiAgc3ZnLnN0eWxlLm9wYWNpdHkgPSBcIjAuMlwiO1xuICBzdmcuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gIHN2Zy5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gIHN2Zy5zdHlsZS56SW5kZXggPSBcIjk5OTk5OVwiO1xuICBjb25zdCBwb2x5Z29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwb2x5Z29uXCIpO1xuICBwb2x5Z29uLnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcbiAgcG9seWdvbi5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgXCIwLDAgMCwwXCIpO1xuICBzdmcuYXBwZW5kQ2hpbGQocG9seWdvbik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgcmV0dXJuIHBvbHlnb247XG59XG5mdW5jdGlvbiBkZWJ1Z1BvbHlnb24ocG9seWdvbikge1xuICBjb25zdCBwb2x5Z29uRWxlbWVudCA9IGdldFBvbHlnb24oKTtcbiAgY29uc3QgcG9pbnRzID0gcG9seWdvbi5tYXAoKHBvaW50KSA9PiBwb2ludC5qb2luKFwiLFwiKSkuam9pbihcIiBcIik7XG4gIHBvbHlnb25FbGVtZW50LnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xuICByZXR1cm4gcG9seWdvbkVsZW1lbnQucGFyZW50RWxlbWVudDtcbn1cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdFByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgcmV0dXJuIG1lcmdlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcyk7XG59XG5cbi8vIHNyYy9ydW4tYWZ0ZXItdHJhbnNpdGlvbi50c1xudmFyIHRyYW5zaXRpb25zQnlFbGVtZW50ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbnZhciB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHNldHVwR2xvYmFsRXZlbnRzKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvblRyYW5zaXRpb25TdGFydCA9IChlKSA9PiB7XG4gICAgaWYgKCFlLnRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9uc0J5RWxlbWVudC5nZXQoZS50YXJnZXQpO1xuICAgIGlmICghdHJhbnNpdGlvbnMpIHtcbiAgICAgIHRyYW5zaXRpb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgIHRyYW5zaXRpb25zQnlFbGVtZW50LnNldChlLnRhcmdldCwgdHJhbnNpdGlvbnMpO1xuICAgICAgZS50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25jYW5jZWxcIiwgb25UcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gICAgdHJhbnNpdGlvbnMuYWRkKGUucHJvcGVydHlOYW1lKTtcbiAgfTtcbiAgY29uc3Qgb25UcmFuc2l0aW9uRW5kID0gKGUpID0+IHtcbiAgICBpZiAoIWUudGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0cmFuc2l0aW9uc0J5RWxlbWVudC5nZXQoZS50YXJnZXQpO1xuICAgIGlmICghcHJvcGVydGllcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcm9wZXJ0aWVzLmRlbGV0ZShlLnByb3BlcnR5TmFtZSk7XG4gICAgaWYgKHByb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25jYW5jZWxcIiwgb25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIHRyYW5zaXRpb25zQnlFbGVtZW50LmRlbGV0ZShlLnRhcmdldCk7XG4gICAgfVxuICAgIGlmICh0cmFuc2l0aW9uc0J5RWxlbWVudC5zaXplID09PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGNiIG9mIHRyYW5zaXRpb25DYWxsYmFja3MpIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cbiAgICAgIHRyYW5zaXRpb25DYWxsYmFja3MuY2xlYXIoKTtcbiAgICB9XG4gIH07XG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25ydW5cIiwgb25UcmFuc2l0aW9uU3RhcnQpO1xuICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIG9uVHJhbnNpdGlvbkVuZCk7XG59XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgIHNldHVwR2xvYmFsRXZlbnRzKCk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgc2V0dXBHbG9iYWxFdmVudHMpO1xuICB9XG59XG5mdW5jdGlvbiBydW5BZnRlclRyYW5zaXRpb24oZm4pIHtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBpZiAodHJhbnNpdGlvbnNCeUVsZW1lbnQuc2l6ZSA9PT0gMCkge1xuICAgICAgZm4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNpdGlvbkNhbGxiYWNrcy5hZGQoZm4pO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIHNyYy9zY3JvbGwtaW50by12aWV3LnRzXG5mdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhzY3JvbGxWaWV3LCBlbGVtZW50KSB7XG4gIGNvbnN0IG9mZnNldFggPSByZWxhdGl2ZU9mZnNldChzY3JvbGxWaWV3LCBlbGVtZW50LCBcImxlZnRcIik7XG4gIGNvbnN0IG9mZnNldFkgPSByZWxhdGl2ZU9mZnNldChzY3JvbGxWaWV3LCBlbGVtZW50LCBcInRvcFwiKTtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgbGV0IHggPSBzY3JvbGxWaWV3LnNjcm9sbExlZnQ7XG4gIGxldCB5ID0gc2Nyb2xsVmlldy5zY3JvbGxUb3A7XG4gIGNvbnN0IG1heFggPSB4ICsgc2Nyb2xsVmlldy5vZmZzZXRXaWR0aDtcbiAgY29uc3QgbWF4WSA9IHkgKyBzY3JvbGxWaWV3Lm9mZnNldEhlaWdodDtcbiAgaWYgKG9mZnNldFggPD0geCkge1xuICAgIHggPSBvZmZzZXRYO1xuICB9IGVsc2UgaWYgKG9mZnNldFggKyB3aWR0aCA+IG1heFgpIHtcbiAgICB4ICs9IG9mZnNldFggKyB3aWR0aCAtIG1heFg7XG4gIH1cbiAgaWYgKG9mZnNldFkgPD0geSkge1xuICAgIHkgPSBvZmZzZXRZO1xuICB9IGVsc2UgaWYgKG9mZnNldFkgKyBoZWlnaHQgPiBtYXhZKSB7XG4gICAgeSArPSBvZmZzZXRZICsgaGVpZ2h0IC0gbWF4WTtcbiAgfVxuICBzY3JvbGxWaWV3LnNjcm9sbExlZnQgPSB4O1xuICBzY3JvbGxWaWV3LnNjcm9sbFRvcCA9IHk7XG59XG5mdW5jdGlvbiByZWxhdGl2ZU9mZnNldChhbmNlc3RvciwgY2hpbGQsIGF4aXMpIHtcbiAgY29uc3QgcHJvcCA9IGF4aXMgPT09IFwibGVmdFwiID8gXCJvZmZzZXRMZWZ0XCIgOiBcIm9mZnNldFRvcFwiO1xuICBsZXQgc3VtID0gMDtcbiAgd2hpbGUgKGNoaWxkLm9mZnNldFBhcmVudCkge1xuICAgIHN1bSArPSBjaGlsZFtwcm9wXTtcbiAgICBpZiAoY2hpbGQub2Zmc2V0UGFyZW50ID09PSBhbmNlc3Rvcikge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGlsZC5vZmZzZXRQYXJlbnQuY29udGFpbnMoYW5jZXN0b3IpKSB7XG4gICAgICBzdW0gLT0gYW5jZXN0b3JbcHJvcF07XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5vZmZzZXRQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3cG9ydCh0YXJnZXRFbGVtZW50LCBvcHRzKSB7XG4gIGlmIChkb2N1bWVudC5jb250YWlucyh0YXJnZXRFbGVtZW50KSkge1xuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBpc1Njcm9sbFByZXZlbnRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHJvb3QpLm92ZXJmbG93ID09PSBcImhpZGRlblwiO1xuICAgIGlmICghaXNTY3JvbGxQcmV2ZW50ZWQpIHtcbiAgICAgIGNvbnN0IHsgbGVmdDogb3JpZ2luYWxMZWZ0LCB0b3A6IG9yaWdpbmFsVG9wIH0gPSB0YXJnZXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGFyZ2V0RWxlbWVudD8uc2Nyb2xsSW50b1ZpZXc/Lih7IGJsb2NrOiBcIm5lYXJlc3RcIiB9KTtcbiAgICAgIGNvbnN0IHsgbGVmdDogbmV3TGVmdCwgdG9wOiBuZXdUb3AgfSA9IHRhcmdldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBpZiAoTWF0aC5hYnMob3JpZ2luYWxMZWZ0IC0gbmV3TGVmdCkgPiAxIHx8IE1hdGguYWJzKG9yaWdpbmFsVG9wIC0gbmV3VG9wKSA+IDEpIHtcbiAgICAgICAgb3B0cz8uY29udGFpbmluZ0VsZW1lbnQ/LnNjcm9sbEludG9WaWV3Py4oeyBibG9jazogXCJjZW50ZXJcIiwgaW5saW5lOiBcImNlbnRlclwiIH0pO1xuICAgICAgICB0YXJnZXRFbGVtZW50LnNjcm9sbEludG9WaWV3Py4oeyBibG9jazogXCJuZWFyZXN0XCIgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQodGFyZ2V0RWxlbWVudCk7XG4gICAgICB3aGlsZSAodGFyZ2V0RWxlbWVudCAmJiBzY3JvbGxQYXJlbnQgJiYgdGFyZ2V0RWxlbWVudCAhPT0gcm9vdCAmJiBzY3JvbGxQYXJlbnQgIT09IHJvb3QpIHtcbiAgICAgICAgc2Nyb2xsSW50b1ZpZXcoc2Nyb2xsUGFyZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgdGFyZ2V0RWxlbWVudCA9IHNjcm9sbFBhcmVudDtcbiAgICAgICAgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHRhcmdldEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBzcmMvc3R5bGVzLnRzXG52YXIgdmlzdWFsbHlIaWRkZW5TdHlsZXMgPSB7XG4gIGJvcmRlcjogXCIwXCIsXG4gIGNsaXA6IFwicmVjdCgwIDAgMCAwKVwiLFxuICBcImNsaXAtcGF0aFwiOiBcImluc2V0KDUwJSlcIixcbiAgaGVpZ2h0OiBcIjFweFwiLFxuICBtYXJnaW46IFwiMCAtMXB4IC0xcHggMFwiLFxuICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgcGFkZGluZzogXCIwXCIsXG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHdpZHRoOiBcIjFweFwiLFxuICBcIndoaXRlLXNwYWNlXCI6IFwibm93cmFwXCJcbn07XG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXQuXG4gKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgRGllZ28gSGF6LlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIEFyaWFraXQgdGVhbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmlha2l0L2FyaWFraXQvYmxvYi9kYTE0MjY3MmVkZGVmYTk5MzY1NzczY2VkNzIxNzFmYWNjMDZmZGNiL3BhY2thZ2VzL2FyaWFraXQtdXRpbHMvc3JjL2FycmF5LnRzXG4gKi9cbi8qIVxuICogT3JpZ2luYWwgY29kZSBieSBDaGFrcmEgVUlcbiAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDE5IFNlZ3VuIEFkZWJheW8uXG4gKlxuICogQ3JlZGl0cyB0byB0aGUgQ2hha3JhIFVJIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hha3JhLXVpL2NoYWtyYS11aS9ibG9iL21haW4vcGFja2FnZXMvdXRpbHMvc3JjL2Fzc2VydGlvbi50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vc29saWRqcy1jb21tdW5pdHkvc29saWQtYXJpYS9ibG9iLzJjNWY1NGZlYjVjZmVhNTE0YjFlZTBhNTJkMDQxNjg3OGY4ODIzNTEvcGFja2FnZXMvdXRpbHMvc3JjL2NyZWF0ZUdsb2JhbExpc3RlbmVycy50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXQuXG4gKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgRGllZ28gSGF6LlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIEFyaWFraXQgdGVhbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmlha2l0L2FyaWFraXQvYmxvYi8yMzJiYzc5MDE4ZWMyMDk2N2ZlYzFlMDk3YTk0NzRhYmEzYmI1YmU3L3BhY2thZ2VzL2FyaWFraXQtdXRpbHMvc3JjL2RvbS50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9jZjlhYjI0ZjMyNTViZTE1MzBkMGY1ODQwNjFhMDFhYTFlODE4MGU2L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9wbGF0Zm9ybS50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9hOWRlYThhMzY3MjE3OWU2YzM4YWFmZDE0MjlkYWY0NGM3ZWEyZmY2L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9mb2N1c1dpdGhvdXRTY3JvbGxpbmcudHNcbiAqL1xuLyohXG4gKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSBhcmlha2l0LlxuICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAqXG4gKiBDcmVkaXRzIHRvIHRoZSBBcmlha2l0IHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvbWFpbi9wYWNrYWdlcy9hcmlha2l0LXV0aWxzL3NyYy9mb2N1cy50c1xuICpcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9tYWluL3BhY2thZ2VzLyU0MHJlYWN0LWFyaWEvZm9jdXMvc3JjL2lzRWxlbWVudFZpc2libGUudHNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iLzhmMmYyYWNiM2Q1ODUwMzgyZWJlNjMxZjA1NWY4OGM3MDRhYTdkMTcvcGFja2FnZXMvQHJlYWN0LWFyaWEvZm9jdXMvc3JjL0ZvY3VzU2NvcGUudHN4XG4gKi9cbi8qIVxuICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gKlxuICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2Y2ZTY4NmZlOWQzYjk4M2Q0ODY1MDk4MGMxZWNmZGRlMzIwYmM2MmYvcGFja2FnZXMvQHJlYWN0LWFyaWEvZm9jdXMvc3JjL0ZvY3VzU2NvcGUudHN4XG4gKi9cbi8qIVxuICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gKlxuICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2E5ZGVhOGEzNjcyMTc5ZTZjMzhhYWZkMTQyOWRhZjQ0YzdlYTJmZjYvcGFja2FnZXMvQHJlYWN0LWFyaWEvdXRpbHMvc3JjL2dldFNjcm9sbFBhcmVudC50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9hOWRlYThhMzY3MjE3OWU2YzM4YWFmZDE0MjlkYWY0NGM3ZWEyZmY2L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9pc1ZpcnR1YWxFdmVudC50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9mZjNlNjkwZmZmYzZjNTQzNjdiODA1N2UyOGEwZTViOTIxMWYzN2I1L3BhY2thZ2VzL0ByZWFjdC1zdGF0ZWx5L3V0aWxzL3NyYy9udW1iZXIudHNcbiAqL1xuLyohXG4gKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSBhcmlha2l0LlxuICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAqXG4gKiBDcmVkaXRzIHRvIHRoZSBBcmlha2l0IHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvODRlOTc5NDNhZDYzN2E1ODJjMDFjOWI1NmQ4ODBjZDk1ZjU5NTczNy9wYWNrYWdlcy9hcmlha2l0L3NyYy9ob3ZlcmNhcmQvX191dGlscy9wb2x5Z29uLnRzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvZjJhOTY5NzNkZTUyM2Q2N2U0MWVlYzk4MzI2MzkzNmM0ODllZjNlMi9wYWNrYWdlcy9hcmlha2l0L3NyYy9ob3ZlcmNhcmQvX191dGlscy9kZWJ1Zy1wb2x5Z29uLnRzXG4gKi9cbi8qIVxuICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gKlxuICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2E5ZGVhOGEzNjcyMTc5ZTZjMzhhYWZkMTQyOWRhZjQ0YzdlYTJmZjYvcGFja2FnZXMvQHJlYWN0LWFyaWEvdXRpbHMvc3JjL3J1bkFmdGVyVHJhbnNpdGlvbi50c1xuICovXG4vKiFcbiAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICpcbiAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi84ZjJmMmFjYjNkNTg1MDM4MmViZTYzMWYwNTVmODhjNzA0YWE3ZDE3L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9zY3JvbGxJbnRvVmlldy50c1xuICovXG5cbmV4cG9ydCB7IEV2ZW50S2V5LCBGT0NVU0FCTEVfRUxFTUVOVF9TRUxFQ1RPUiwgVEFCQkFCTEVfRUxFTUVOVF9TRUxFQ1RPUiwgYWRkSXRlbVRvQXJyYXksIGNhbGxIYW5kbGVyLCBjbGFtcCwgY29tcG9zZUV2ZW50SGFuZGxlcnMsIGNvbnRhaW5zLCBjcmVhdGVGb2N1c01hbmFnZXIsIGNyZWF0ZUdlbmVyYXRlSWQsIGNyZWF0ZUdsb2JhbExpc3RlbmVycywgZGVidWdQb2x5Z29uLCBmb2N1c1dpdGhvdXRTY3JvbGxpbmcsIGdldEFjdGl2ZUVsZW1lbnQsIGdldEFsbFRhYmJhYmxlSW4sIGdldERvY3VtZW50LCBnZXRFdmVudFBvaW50LCBnZXRGb2N1c2FibGVUcmVlV2Fsa2VyLCBnZXRTY3JvbGxQYXJlbnQsIGdldFdpbmRvdywgaGFzRm9jdXNXaXRoaW4sIGlzQW5kcm9pZCwgaXNBcHBsZURldmljZSwgaXNBcnJheSwgaXNDaHJvbWUsIGlzQ3RybEtleSwgaXNFbGVtZW50VmlzaWJsZSwgaXNGb2N1c2FibGUsIGlzRnJhbWUsIGlzRnVuY3Rpb24sIGlzSU9TLCBpc0lQYWQsIGlzSVBob25lLCBpc01hYywgaXNOdW1iZXIsIGlzUG9pbnRJblBvbHlnb24sIGlzU3RyaW5nLCBpc1RhYmJhYmxlLCBpc1ZpcnR1YWxDbGljaywgaXNWaXJ0dWFsUG9pbnRlckV2ZW50LCBpc1dlYktpdCwgbWVyZ2VEZWZhdWx0UHJvcHMsIG5vb3AsIHJlbW92ZUl0ZW1Gcm9tQXJyYXksIHJ1bkFmdGVyVHJhbnNpdGlvbiwgc2Nyb2xsSW50b1ZpZXcsIHNjcm9sbEludG9WaWV3cG9ydCwgc25hcFZhbHVlVG9TdGVwLCB2aXN1YWxseUhpZGRlblN0eWxlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLy8gc3JjL2Rpc21pc3NhYmxlLWxheWVyL2xheWVyLXN0YWNrLnRzeFxuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbnZhciBEQVRBX1RPUF9MQVlFUl9BVFRSID0gXCJkYXRhLWtiLXRvcC1sYXllclwiO1xudmFyIG9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHM7XG52YXIgaGFzRGlzYWJsZWRCb2R5UG9pbnRlckV2ZW50cyA9IGZhbHNlO1xudmFyIGxheWVycyA9IFtdO1xuZnVuY3Rpb24gaW5kZXhPZihub2RlKSB7XG4gIHJldHVybiBsYXllcnMuZmluZEluZGV4KChsYXllcikgPT4gbGF5ZXIubm9kZSA9PT0gbm9kZSk7XG59XG5mdW5jdGlvbiBmaW5kKG5vZGUpIHtcbiAgcmV0dXJuIGxheWVyc1tpbmRleE9mKG5vZGUpXTtcbn1cbmZ1bmN0aW9uIGlzVG9wTW9zdExheWVyKG5vZGUpIHtcbiAgcmV0dXJuIGxheWVyc1tsYXllcnMubGVuZ3RoIC0gMV0ubm9kZSA9PT0gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldFBvaW50ZXJCbG9ja2luZ0xheWVycygpIHtcbiAgcmV0dXJuIGxheWVycy5maWx0ZXIoKGxheWVyKSA9PiBsYXllci5pc1BvaW50ZXJCbG9ja2luZyk7XG59XG5mdW5jdGlvbiBnZXRUb3BNb3N0UG9pbnRlckJsb2NraW5nTGF5ZXIoKSB7XG4gIHJldHVybiBbLi4uZ2V0UG9pbnRlckJsb2NraW5nTGF5ZXJzKCldLnNsaWNlKC0xKVswXTtcbn1cbmZ1bmN0aW9uIGhhc1BvaW50ZXJCbG9ja2luZ0xheWVyKCkge1xuICByZXR1cm4gZ2V0UG9pbnRlckJsb2NraW5nTGF5ZXJzKCkubGVuZ3RoID4gMDtcbn1cbmZ1bmN0aW9uIGlzQmVsb3dQb2ludGVyQmxvY2tpbmdMYXllcihub2RlKSB7XG4gIGNvbnN0IGhpZ2hlc3RCbG9ja2luZ0luZGV4ID0gaW5kZXhPZihnZXRUb3BNb3N0UG9pbnRlckJsb2NraW5nTGF5ZXIoKT8ubm9kZSk7XG4gIHJldHVybiBpbmRleE9mKG5vZGUpIDwgaGlnaGVzdEJsb2NraW5nSW5kZXg7XG59XG5mdW5jdGlvbiBhZGRMYXllcihsYXllcikge1xuICBsYXllcnMucHVzaChsYXllcik7XG59XG5mdW5jdGlvbiByZW1vdmVMYXllcihub2RlKSB7XG4gIGNvbnN0IGluZGV4ID0gaW5kZXhPZihub2RlKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcbn1cbmZ1bmN0aW9uIGFzc2lnblBvaW50ZXJFdmVudFRvTGF5ZXJzKCkge1xuICBmb3IgKGNvbnN0IHsgbm9kZSB9IG9mIGxheWVycykge1xuICAgIG5vZGUuc3R5bGUucG9pbnRlckV2ZW50cyA9IGlzQmVsb3dQb2ludGVyQmxvY2tpbmdMYXllcihub2RlKSA/IFwibm9uZVwiIDogXCJhdXRvXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc2FibGVCb2R5UG9pbnRlckV2ZW50cyhub2RlKSB7XG4gIGlmIChoYXNQb2ludGVyQmxvY2tpbmdMYXllcigpICYmICFoYXNEaXNhYmxlZEJvZHlQb2ludGVyRXZlbnRzKSB7XG4gICAgY29uc3Qgb3duZXJEb2N1bWVudCA9IGdldERvY3VtZW50KG5vZGUpO1xuICAgIG9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHMgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHM7XG4gICAgb3duZXJEb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICBoYXNEaXNhYmxlZEJvZHlQb2ludGVyRXZlbnRzID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZUJvZHlQb2ludGVyRXZlbnRzKG5vZGUpIHtcbiAgaWYgKGhhc1BvaW50ZXJCbG9ja2luZ0xheWVyKCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3duZXJEb2N1bWVudCA9IGdldERvY3VtZW50KG5vZGUpO1xuICBvd25lckRvY3VtZW50LmJvZHkuc3R5bGUucG9pbnRlckV2ZW50cyA9IG9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHM7XG4gIGlmIChvd25lckRvY3VtZW50LmJvZHkuc3R5bGUubGVuZ3RoID09PSAwKSB7XG4gICAgb3duZXJEb2N1bWVudC5ib2R5LnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICB9XG4gIGhhc0Rpc2FibGVkQm9keVBvaW50ZXJFdmVudHMgPSBmYWxzZTtcbn1cbnZhciBsYXllclN0YWNrID0ge1xuICBsYXllcnMsXG4gIGlzVG9wTW9zdExheWVyLFxuICBoYXNQb2ludGVyQmxvY2tpbmdMYXllcixcbiAgaXNCZWxvd1BvaW50ZXJCbG9ja2luZ0xheWVyLFxuICBhZGRMYXllcixcbiAgcmVtb3ZlTGF5ZXIsXG4gIGluZGV4T2YsXG4gIGZpbmQsXG4gIGFzc2lnblBvaW50ZXJFdmVudFRvTGF5ZXJzLFxuICBkaXNhYmxlQm9keVBvaW50ZXJFdmVudHMsXG4gIHJlc3RvcmVCb2R5UG9pbnRlckV2ZW50c1xufTtcblxuZXhwb3J0IHtcbiAgREFUQV9UT1BfTEFZRVJfQVRUUixcbiAgbGF5ZXJTdGFja1xufTtcbiIsImltcG9ydCB7XG4gIERBVEFfVE9QX0xBWUVSX0FUVFJcbn0gZnJvbSBcIi4vM05JNkZUQTIuanN4XCI7XG5cbi8vIHNyYy9wcmltaXRpdmVzL2NyZWF0ZS1mb2N1cy1zY29wZS9jcmVhdGUtZm9jdXMtc2NvcGUudHN4XG5pbXBvcnQge1xuICBhY2Nlc3MsXG4gIGNvbnRhaW5zLFxuICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcsXG4gIGdldEFjdGl2ZUVsZW1lbnQsXG4gIGdldEFsbFRhYmJhYmxlSW4sXG4gIGdldERvY3VtZW50LFxuICBpc0ZvY3VzYWJsZSxcbiAgcmVtb3ZlSXRlbUZyb21BcnJheSxcbiAgdmlzdWFsbHlIaWRkZW5TdHlsZXNcbn0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIGNyZWF0ZVNpZ25hbCwgb25DbGVhbnVwIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gXCJzb2xpZC1qcy93ZWJcIjtcbnZhciBBVVRPRk9DVVNfT05fTU9VTlRfRVZFTlQgPSBcImZvY3VzU2NvcGUuYXV0b0ZvY3VzT25Nb3VudFwiO1xudmFyIEFVVE9GT0NVU19PTl9VTk1PVU5UX0VWRU5UID0gXCJmb2N1c1Njb3BlLmF1dG9Gb2N1c09uVW5tb3VudFwiO1xudmFyIEVWRU5UX09QVElPTlMgPSB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiB0cnVlIH07XG52YXIgZm9jdXNTY29wZVN0YWNrID0ge1xuICAvKiogQSBzdGFjayBvZiBmb2N1cyBzY29wZXMsIHdpdGggdGhlIGFjdGl2ZSBvbmUgYXQgdGhlIHRvcCAqL1xuICBzdGFjazogW10sXG4gIGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFja1swXTtcbiAgfSxcbiAgYWRkKHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlICE9PSB0aGlzLmFjdGl2ZSgpKSB7XG4gICAgICB0aGlzLmFjdGl2ZSgpPy5wYXVzZSgpO1xuICAgIH1cbiAgICB0aGlzLnN0YWNrID0gcmVtb3ZlSXRlbUZyb21BcnJheSh0aGlzLnN0YWNrLCBzY29wZSk7XG4gICAgdGhpcy5zdGFjay51bnNoaWZ0KHNjb3BlKTtcbiAgfSxcbiAgcmVtb3ZlKHNjb3BlKSB7XG4gICAgdGhpcy5zdGFjayA9IHJlbW92ZUl0ZW1Gcm9tQXJyYXkodGhpcy5zdGFjaywgc2NvcGUpO1xuICAgIHRoaXMuYWN0aXZlKCk/LnJlc3VtZSgpO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlRm9jdXNTY29wZShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IFtpc1BhdXNlZCwgc2V0SXNQYXVzZWRdID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcbiAgY29uc3QgZm9jdXNTY29wZSA9IHtcbiAgICBwYXVzZSgpIHtcbiAgICAgIHNldElzUGF1c2VkKHRydWUpO1xuICAgIH0sXG4gICAgcmVzdW1lKCkge1xuICAgICAgc2V0SXNQYXVzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgbGV0IGxhc3RGb2N1c2VkRWxlbWVudCA9IG51bGw7XG4gIGNvbnN0IG9uTW91bnRBdXRvRm9jdXMgPSAoZSkgPT4gcHJvcHMub25Nb3VudEF1dG9Gb2N1cz8uKGUpO1xuICBjb25zdCBvblVubW91bnRBdXRvRm9jdXMgPSAoZSkgPT4gcHJvcHMub25Vbm1vdW50QXV0b0ZvY3VzPy4oZSk7XG4gIGNvbnN0IG93bmVyRG9jdW1lbnQgPSAoKSA9PiBnZXREb2N1bWVudChyZWYoKSk7XG4gIGNvbnN0IGNyZWF0ZVNlbnRpbmVsID0gKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBvd25lckRvY3VtZW50KCkuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZvY3VzLXRyYXBcIiwgXCJcIik7XG4gICAgZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCB2aXN1YWxseUhpZGRlblN0eWxlcyk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG4gIGNvbnN0IHRhYmJhYmxlcyA9ICgpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSByZWYoKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWxsVGFiYmFibGVJbihjb250YWluZXIsIHRydWUpLmZpbHRlcihcbiAgICAgIChlbCkgPT4gIWVsLmhhc0F0dHJpYnV0ZShcImRhdGEtZm9jdXMtdHJhcFwiKVxuICAgICk7XG4gIH07XG4gIGNvbnN0IGZpcnN0VGFiYmFibGUgPSAoKSA9PiB7XG4gICAgY29uc3QgaXRlbXMgPSB0YWJiYWJsZXMoKTtcbiAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zWzBdIDogbnVsbDtcbiAgfTtcbiAgY29uc3QgbGFzdFRhYmJhYmxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGl0ZW1zID0gdGFiYmFibGVzKCk7XG4gICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXSA6IG51bGw7XG4gIH07XG4gIGNvbnN0IHNob3VsZFByZXZlbnRVbm1vdW50QXV0b0ZvY3VzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlZigpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KGNvbnRhaW5lcik7XG4gICAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChjb250YWlucyhjb250YWluZXIsIGFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBpc0ZvY3VzYWJsZShhY3RpdmVFbGVtZW50KTtcbiAgfTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9jdXNTY29wZVN0YWNrLmFkZChmb2N1c1Njb3BlKTtcbiAgICBjb25zdCBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KFxuICAgICAgY29udGFpbmVyXG4gICAgKTtcbiAgICBjb25zdCBoYXNGb2N1c2VkQ2FuZGlkYXRlID0gY29udGFpbnMoY29udGFpbmVyLCBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQpO1xuICAgIGlmICghaGFzRm9jdXNlZENhbmRpZGF0ZSkge1xuICAgICAgY29uc3QgbW91bnRFdmVudCA9IG5ldyBDdXN0b21FdmVudChcbiAgICAgICAgQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5ULFxuICAgICAgICBFVkVOVF9PUFRJT05TXG4gICAgICApO1xuICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5ULCBvbk1vdW50QXV0b0ZvY3VzKTtcbiAgICAgIGNvbnRhaW5lci5kaXNwYXRjaEV2ZW50KG1vdW50RXZlbnQpO1xuICAgICAgaWYgKCFtb3VudEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGZpcnN0VGFiYmFibGUoKSk7XG4gICAgICAgICAgaWYgKGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVyKSA9PT0gcHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoY29udGFpbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH1cbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5ULCBvbk1vdW50QXV0b0ZvY3VzKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB1bm1vdW50RXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXG4gICAgICAgICAgQVVUT0ZPQ1VTX09OX1VOTU9VTlRfRVZFTlQsXG4gICAgICAgICAgRVZFTlRfT1BUSU9OU1xuICAgICAgICApO1xuICAgICAgICBpZiAoc2hvdWxkUHJldmVudFVubW91bnRBdXRvRm9jdXMoKSkge1xuICAgICAgICAgIHVubW91bnRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgIEFVVE9GT0NVU19PTl9VTk1PVU5UX0VWRU5ULFxuICAgICAgICAgIG9uVW5tb3VudEF1dG9Gb2N1c1xuICAgICAgICApO1xuICAgICAgICBjb250YWluZXIuZGlzcGF0Y2hFdmVudCh1bm1vdW50RXZlbnQpO1xuICAgICAgICBpZiAoIXVubW91bnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKFxuICAgICAgICAgICAgcHJldmlvdXNseUZvY3VzZWRFbGVtZW50ID8/IG93bmVyRG9jdW1lbnQoKS5ib2R5XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBBVVRPRk9DVVNfT05fVU5NT1VOVF9FVkVOVCxcbiAgICAgICAgICBvblVubW91bnRBdXRvRm9jdXNcbiAgICAgICAgKTtcbiAgICAgICAgZm9jdXNTY29wZVN0YWNrLnJlbW92ZShmb2N1c1Njb3BlKTtcbiAgICAgIH0sIDApO1xuICAgIH0pO1xuICB9KTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgaWYgKCFjb250YWluZXIgfHwgIWFjY2Vzcyhwcm9wcy50cmFwRm9jdXMpIHx8IGlzUGF1c2VkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb25Gb2N1c0luID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICBpZiAodGFyZ2V0Py5jbG9zZXN0KGBbJHtEQVRBX1RPUF9MQVlFUl9BVFRSfV1gKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY29udGFpbnMoY29udGFpbmVyLCB0YXJnZXQpKSB7XG4gICAgICAgIGxhc3RGb2N1c2VkRWxlbWVudCA9IHRhcmdldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhsYXN0Rm9jdXNlZEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb25Gb2N1c091dCA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgICBjb25zdCB0YXJnZXQgPSByZWxhdGVkVGFyZ2V0ID8/IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVyKTtcbiAgICAgIGlmICh0YXJnZXQ/LmNsb3Nlc3QoYFske0RBVEFfVE9QX0xBWUVSX0FUVFJ9XWApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghY29udGFpbnMoY29udGFpbmVyLCB0YXJnZXQpKSB7XG4gICAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhsYXN0Rm9jdXNlZEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgb3duZXJEb2N1bWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXNJbik7XG4gICAgb3duZXJEb2N1bWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBvbkZvY3VzT3V0KTtcbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgb3duZXJEb2N1bWVudCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXNJbik7XG4gICAgICBvd25lckRvY3VtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIG9uRm9jdXNPdXQpO1xuICAgIH0pO1xuICB9KTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgaWYgKCFjb250YWluZXIgfHwgIWFjY2Vzcyhwcm9wcy50cmFwRm9jdXMpIHx8IGlzUGF1c2VkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnRTZW50aW5lbCA9IGNyZWF0ZVNlbnRpbmVsKCk7XG4gICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgc3RhcnRTZW50aW5lbCk7XG4gICAgY29uc3QgZW5kU2VudGluZWwgPSBjcmVhdGVTZW50aW5lbCgpO1xuICAgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIiwgZW5kU2VudGluZWwpO1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGZpcnN0ID0gZmlyc3RUYWJiYWJsZSgpO1xuICAgICAgY29uc3QgbGFzdCA9IGxhc3RUYWJiYWJsZSgpO1xuICAgICAgaWYgKGV2ZW50LnJlbGF0ZWRUYXJnZXQgPT09IGZpcnN0KSB7XG4gICAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhsYXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhmaXJzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXJ0U2VudGluZWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgb25Gb2N1cyk7XG4gICAgZW5kU2VudGluZWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgb25Gb2N1cyk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9ucykge1xuICAgICAgICBpZiAobXV0YXRpb24ucHJldmlvdXNTaWJsaW5nID09PSBlbmRTZW50aW5lbCkge1xuICAgICAgICAgIGVuZFNlbnRpbmVsLnJlbW92ZSgpO1xuICAgICAgICAgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIiwgZW5kU2VudGluZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtdXRhdGlvbi5uZXh0U2libGluZyA9PT0gc3RhcnRTZW50aW5lbCkge1xuICAgICAgICAgIHN0YXJ0U2VudGluZWwucmVtb3ZlKCk7XG4gICAgICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgc3RhcnRTZW50aW5lbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lciwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IGZhbHNlIH0pO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICBzdGFydFNlbnRpbmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXMpO1xuICAgICAgZW5kU2VudGluZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgb25Gb2N1cyk7XG4gICAgICBzdGFydFNlbnRpbmVsLnJlbW92ZSgpO1xuICAgICAgZW5kU2VudGluZWwucmVtb3ZlKCk7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQge1xuICBjcmVhdGVGb2N1c1Njb3BlXG59O1xuIiwiLy8gc3JjL2xpdmUtYW5ub3VuY2VyL2xpdmUtYW5ub3VuY2VyLnRzeFxuaW1wb3J0IHsgdmlzdWFsbHlIaWRkZW5TdHlsZXMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbnZhciBMSVZFUkVHSU9OX1RJTUVPVVRfREVMQVkgPSA3ZTM7XG52YXIgbGl2ZUFubm91bmNlciA9IG51bGw7XG52YXIgREFUQV9MSVZFX0FOTk9VTkNFUl9BVFRSID0gXCJkYXRhLWxpdmUtYW5ub3VuY2VyXCI7XG5mdW5jdGlvbiBhbm5vdW5jZShtZXNzYWdlLCBhc3NlcnRpdmVuZXNzID0gXCJhc3NlcnRpdmVcIiwgdGltZW91dCA9IExJVkVSRUdJT05fVElNRU9VVF9ERUxBWSkge1xuICBpZiAoIWxpdmVBbm5vdW5jZXIpIHtcbiAgICBsaXZlQW5ub3VuY2VyID0gbmV3IExpdmVBbm5vdW5jZXIoKTtcbiAgfVxuICBsaXZlQW5ub3VuY2VyLmFubm91bmNlKG1lc3NhZ2UsIGFzc2VydGl2ZW5lc3MsIHRpbWVvdXQpO1xufVxuZnVuY3Rpb24gY2xlYXJBbm5vdW5jZXIoYXNzZXJ0aXZlbmVzcykge1xuICBpZiAobGl2ZUFubm91bmNlcikge1xuICAgIGxpdmVBbm5vdW5jZXIuY2xlYXIoYXNzZXJ0aXZlbmVzcyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlc3Ryb3lBbm5vdW5jZXIoKSB7XG4gIGlmIChsaXZlQW5ub3VuY2VyKSB7XG4gICAgbGl2ZUFubm91bmNlci5kZXN0cm95KCk7XG4gICAgbGl2ZUFubm91bmNlciA9IG51bGw7XG4gIH1cbn1cbnZhciBMaXZlQW5ub3VuY2VyID0gY2xhc3Mge1xuICBub2RlO1xuICBhc3NlcnRpdmVMb2c7XG4gIHBvbGl0ZUxvZztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLm5vZGUuZGF0YXNldC5saXZlQW5ub3VuY2VyID0gXCJ0cnVlXCI7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLm5vZGUuc3R5bGUsIHZpc3VhbGx5SGlkZGVuU3R5bGVzKTtcbiAgICB0aGlzLmFzc2VydGl2ZUxvZyA9IHRoaXMuY3JlYXRlTG9nKFwiYXNzZXJ0aXZlXCIpO1xuICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0aGlzLmFzc2VydGl2ZUxvZyk7XG4gICAgdGhpcy5wb2xpdGVMb2cgPSB0aGlzLmNyZWF0ZUxvZyhcInBvbGl0ZVwiKTtcbiAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5wb2xpdGVMb2cpO1xuICAgIGRvY3VtZW50LmJvZHkucHJlcGVuZCh0aGlzLm5vZGUpO1xuICB9XG4gIGNyZWF0ZUxvZyhhcmlhTGl2ZSkge1xuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImxvZ1wiKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImFyaWEtbGl2ZVwiLCBhcmlhTGl2ZSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXJlbGV2YW50XCIsIFwiYWRkaXRpb25zXCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKCF0aGlzLm5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICAgIHRoaXMubm9kZSA9IG51bGw7XG4gIH1cbiAgYW5ub3VuY2UobWVzc2FnZSwgYXNzZXJ0aXZlbmVzcyA9IFwiYXNzZXJ0aXZlXCIsIHRpbWVvdXQgPSBMSVZFUkVHSU9OX1RJTUVPVVRfREVMQVkpIHtcbiAgICBpZiAoIXRoaXMubm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBub2RlLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICBpZiAoYXNzZXJ0aXZlbmVzcyA9PT0gXCJhc3NlcnRpdmVcIikge1xuICAgICAgdGhpcy5hc3NlcnRpdmVMb2cuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9saXRlTG9nLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZSAhPT0gXCJcIikge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgY2xlYXIoYXNzZXJ0aXZlbmVzcykge1xuICAgIGlmICghdGhpcy5ub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghYXNzZXJ0aXZlbmVzcyB8fCBhc3NlcnRpdmVuZXNzID09PSBcImFzc2VydGl2ZVwiKSB7XG4gICAgICB0aGlzLmFzc2VydGl2ZUxvZy5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAoIWFzc2VydGl2ZW5lc3MgfHwgYXNzZXJ0aXZlbmVzcyA9PT0gXCJwb2xpdGVcIikge1xuICAgICAgdGhpcy5wb2xpdGVMb2cuaW5uZXJIVE1MID0gXCJcIjtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIERBVEFfTElWRV9BTk5PVU5DRVJfQVRUUixcbiAgYW5ub3VuY2UsXG4gIGNsZWFyQW5ub3VuY2VyLFxuICBkZXN0cm95QW5ub3VuY2VyXG59O1xuIiwiaW1wb3J0IHtcbiAgREFUQV9MSVZFX0FOTk9VTkNFUl9BVFRSXG59IGZyb20gXCIuL0pITU5XT0xZLmpzeFwiO1xuaW1wb3J0IHtcbiAgREFUQV9UT1BfTEFZRVJfQVRUUlxufSBmcm9tIFwiLi8zTkk2RlRBMi5qc3hcIjtcblxuLy8gc3JjL3ByaW1pdGl2ZXMvY3JlYXRlLWhpZGUtb3V0c2lkZS9jcmVhdGUtaGlkZS1vdXRzaWRlLnRzXG5pbXBvcnQgeyBhY2Nlc3MgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZUVmZmVjdCwgb25DbGVhbnVwIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5mdW5jdGlvbiBjcmVhdGVIaWRlT3V0c2lkZShwcm9wcykge1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY2Nlc3MocHJvcHMuaXNEaXNhYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25DbGVhbnVwKGFyaWFIaWRlT3V0c2lkZShhY2Nlc3MocHJvcHMudGFyZ2V0cyksIGFjY2Vzcyhwcm9wcy5yb290KSkpO1xuICB9KTtcbn1cbnZhciByZWZDb3VudE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xudmFyIG9ic2VydmVyU3RhY2sgPSBbXTtcbmZ1bmN0aW9uIGFyaWFIaWRlT3V0c2lkZSh0YXJnZXRzLCByb290ID0gZG9jdW1lbnQuYm9keSkge1xuICBjb25zdCB2aXNpYmxlTm9kZXMgPSBuZXcgU2V0KHRhcmdldHMpO1xuICBjb25zdCBoaWRkZW5Ob2RlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHdhbGsgPSAocm9vdDIpID0+IHtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2Ygcm9vdDIucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGBbJHtEQVRBX0xJVkVfQU5OT1VOQ0VSX0FUVFJ9XSwgWyR7REFUQV9UT1BfTEFZRVJfQVRUUn1dYFxuICAgICkpIHtcbiAgICAgIHZpc2libGVOb2Rlcy5hZGQoZWxlbWVudCk7XG4gICAgfVxuICAgIGNvbnN0IGFjY2VwdE5vZGUgPSAobm9kZSkgPT4ge1xuICAgICAgaWYgKHZpc2libGVOb2Rlcy5oYXMobm9kZSkgfHwgbm9kZS5wYXJlbnRFbGVtZW50ICYmIGhpZGRlbk5vZGVzLmhhcyhub2RlLnBhcmVudEVsZW1lbnQpICYmIG5vZGUucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpICE9PSBcInJvd1wiKSB7XG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1Q7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IHRhcmdldCBvZiB2aXNpYmxlTm9kZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUO1xuICAgIH07XG4gICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihyb290MiwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsIHtcbiAgICAgIGFjY2VwdE5vZGVcbiAgICB9KTtcbiAgICBjb25zdCBhY2NlcHRSb290ID0gYWNjZXB0Tm9kZShyb290Mik7XG4gICAgaWYgKGFjY2VwdFJvb3QgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xuICAgICAgaGlkZShyb290Mik7XG4gICAgfVxuICAgIGlmIChhY2NlcHRSb290ICE9PSBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1QpIHtcbiAgICAgIGxldCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGhpZGUobm9kZSk7XG4gICAgICAgIG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhpZGUgPSAobm9kZSkgPT4ge1xuICAgIGNvbnN0IHJlZkNvdW50ID0gcmVmQ291bnRNYXAuZ2V0KG5vZGUpID8/IDA7XG4gICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikgPT09IFwidHJ1ZVwiICYmIHJlZkNvdW50ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZWZDb3VudCA9PT0gMCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgfVxuICAgIGhpZGRlbk5vZGVzLmFkZChub2RlKTtcbiAgICByZWZDb3VudE1hcC5zZXQobm9kZSwgcmVmQ291bnQgKyAxKTtcbiAgfTtcbiAgaWYgKG9ic2VydmVyU3RhY2subGVuZ3RoKSB7XG4gICAgb2JzZXJ2ZXJTdGFja1tvYnNlcnZlclN0YWNrLmxlbmd0aCAtIDFdLmRpc2Nvbm5lY3QoKTtcbiAgfVxuICB3YWxrKHJvb3QpO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChjaGFuZ2VzKSA9PiB7XG4gICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xuICAgICAgaWYgKGNoYW5nZS50eXBlICE9PSBcImNoaWxkTGlzdFwiIHx8IGNoYW5nZS5hZGRlZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICghWy4uLnZpc2libGVOb2RlcywgLi4uaGlkZGVuTm9kZXNdLnNvbWUoXG4gICAgICAgIChub2RlKSA9PiBub2RlLmNvbnRhaW5zKGNoYW5nZS50YXJnZXQpXG4gICAgICApKSB7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGFuZ2UucmVtb3ZlZE5vZGVzKSB7XG4gICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICB2aXNpYmxlTm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgICAgICAgICAgaGlkZGVuTm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgY2hhbmdlLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICBpZiAoKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkgJiYgKG5vZGUuZGF0YXNldC5saXZlQW5ub3VuY2VyID09PSBcInRydWVcIiB8fCBub2RlLmRhdGFzZXQucmVhY3RBcmlhVG9wTGF5ZXIgPT09IFwidHJ1ZVwiKSkge1xuICAgICAgICAgICAgdmlzaWJsZU5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICB3YWxrKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUocm9vdCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gIGNvbnN0IG9ic2VydmVyV3JhcHBlciA9IHtcbiAgICBvYnNlcnZlKCkge1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShyb290LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICB9LFxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9O1xuICBvYnNlcnZlclN0YWNrLnB1c2gob2JzZXJ2ZXJXcmFwcGVyKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIGhpZGRlbk5vZGVzKSB7XG4gICAgICBjb25zdCBjb3VudCA9IHJlZkNvdW50TWFwLmdldChub2RlKTtcbiAgICAgIGlmIChjb3VudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xuICAgICAgICByZWZDb3VudE1hcC5kZWxldGUobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWZDb3VudE1hcC5zZXQobm9kZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9ic2VydmVyV3JhcHBlciA9PT0gb2JzZXJ2ZXJTdGFja1tvYnNlcnZlclN0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgICBvYnNlcnZlclN0YWNrLnBvcCgpO1xuICAgICAgaWYgKG9ic2VydmVyU3RhY2subGVuZ3RoKSB7XG4gICAgICAgIG9ic2VydmVyU3RhY2tbb2JzZXJ2ZXJTdGFjay5sZW5ndGggLSAxXS5vYnNlcnZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmVyU3RhY2suc3BsaWNlKG9ic2VydmVyU3RhY2suaW5kZXhPZihvYnNlcnZlcldyYXBwZXIpLCAxKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZUhpZGVPdXRzaWRlLFxuICBhcmlhSGlkZU91dHNpZGVcbn07XG4iLCIvLyBzcmMvcHJpbWl0aXZlcy9jcmVhdGUtZXNjYXBlLWtleS1kb3duL2NyZWF0ZS1lc2NhcGUta2V5LWRvd24udHNcbmltcG9ydCB7IEV2ZW50S2V5LCBhY2Nlc3MsIGdldERvY3VtZW50IH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIG9uQ2xlYW51cCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tIFwic29saWQtanMvd2ViXCI7XG5mdW5jdGlvbiBjcmVhdGVFc2NhcGVLZXlEb3duKHByb3BzKSB7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSBFdmVudEtleS5Fc2NhcGUpIHtcbiAgICAgIHByb3BzLm9uRXNjYXBlS2V5RG93bj8uKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhY2Nlc3MocHJvcHMuaXNEaXNhYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZG9jdW1lbnQgPSBwcm9wcy5vd25lckRvY3VtZW50Py4oKSA/PyBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZUVzY2FwZUtleURvd25cbn07XG4iLCJpbXBvcnQge1xuICBEQVRBX1RPUF9MQVlFUl9BVFRSXG59IGZyb20gXCIuLzNOSTZGVEEyLmpzeFwiO1xuXG4vLyBzcmMvcHJpbWl0aXZlcy9jcmVhdGUtaW50ZXJhY3Qtb3V0c2lkZS9jcmVhdGUtaW50ZXJhY3Qtb3V0c2lkZS50c1xuaW1wb3J0IHtcbiAgYWNjZXNzLFxuICBjb21wb3NlRXZlbnRIYW5kbGVycyxcbiAgY29udGFpbnMsXG4gIGdldERvY3VtZW50LFxuICBpc0N0cmxLZXksXG4gIG5vb3Bcbn0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIG9uQ2xlYW51cCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tIFwic29saWQtanMvd2ViXCI7XG52YXIgUE9JTlRFUl9ET1dOX09VVFNJREVfRVZFTlQgPSBcImludGVyYWN0T3V0c2lkZS5wb2ludGVyRG93bk91dHNpZGVcIjtcbnZhciBGT0NVU19PVVRTSURFX0VWRU5UID0gXCJpbnRlcmFjdE91dHNpZGUuZm9jdXNPdXRzaWRlXCI7XG5mdW5jdGlvbiBjcmVhdGVJbnRlcmFjdE91dHNpZGUocHJvcHMsIHJlZikge1xuICBsZXQgcG9pbnRlckRvd25UaW1lb3V0SWQ7XG4gIGxldCBjbGlja0hhbmRsZXIgPSBub29wO1xuICBjb25zdCBvd25lckRvY3VtZW50ID0gKCkgPT4gZ2V0RG9jdW1lbnQocmVmKCkpO1xuICBjb25zdCBvblBvaW50ZXJEb3duT3V0c2lkZSA9IChlKSA9PiBwcm9wcy5vblBvaW50ZXJEb3duT3V0c2lkZT8uKGUpO1xuICBjb25zdCBvbkZvY3VzT3V0c2lkZSA9IChlKSA9PiBwcm9wcy5vbkZvY3VzT3V0c2lkZT8uKGUpO1xuICBjb25zdCBvbkludGVyYWN0T3V0c2lkZSA9IChlKSA9PiBwcm9wcy5vbkludGVyYWN0T3V0c2lkZT8uKGUpO1xuICBjb25zdCBpc0V2ZW50T3V0c2lkZSA9IChlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuY2xvc2VzdChgWyR7REFUQV9UT1BfTEFZRVJfQVRUUn1dYCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFjb250YWlucyhvd25lckRvY3VtZW50KCksIHRhcmdldCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zKHJlZigpLCB0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAhcHJvcHMuc2hvdWxkRXhjbHVkZUVsZW1lbnQ/Lih0YXJnZXQpO1xuICB9O1xuICBjb25zdCBvblBvaW50ZXJEb3duID0gKGUpID0+IHtcbiAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgIGlmICghY29udGFpbmVyIHx8ICF0YXJnZXQgfHwgIWlzRXZlbnRPdXRzaWRlKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhbmRsZXIyID0gY29tcG9zZUV2ZW50SGFuZGxlcnMoW1xuICAgICAgICBvblBvaW50ZXJEb3duT3V0c2lkZSxcbiAgICAgICAgb25JbnRlcmFjdE91dHNpZGVcbiAgICAgIF0pO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoUE9JTlRFUl9ET1dOX09VVFNJREVfRVZFTlQsIGhhbmRsZXIyLCB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcG9pbnRlckRvd25PdXRzaWRlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXG4gICAgICAgIFBPSU5URVJfRE9XTl9PVVRTSURFX0VWRU5ULFxuICAgICAgICB7XG4gICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgICAgICBpc0NvbnRleHRNZW51OiBlLmJ1dHRvbiA9PT0gMiB8fCBpc0N0cmxLZXkoZSkgJiYgZS5idXR0b24gPT09IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChwb2ludGVyRG93bk91dHNpZGVFdmVudCk7XG4gICAgfVxuICAgIGlmIChlLnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcbiAgICAgIG93bmVyRG9jdW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlcik7XG4gICAgICBjbGlja0hhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgb3duZXJEb2N1bWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXIoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uRm9jdXNJbiA9IChlKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKCFjb250YWluZXIgfHwgIXRhcmdldCB8fCAhaXNFdmVudE91dHNpZGUoZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlciA9IGNvbXBvc2VFdmVudEhhbmRsZXJzKFtcbiAgICAgIG9uRm9jdXNPdXRzaWRlLFxuICAgICAgb25JbnRlcmFjdE91dHNpZGVcbiAgICBdKTtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihGT0NVU19PVVRTSURFX0VWRU5ULCBoYW5kbGVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgY29uc3QgZm9jdXNPdXRzaWRlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoRk9DVVNfT1VUU0lERV9FVkVOVCwge1xuICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgZGV0YWlsOiB7XG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgIGlzQ29udGV4dE1lbnU6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZm9jdXNPdXRzaWRlRXZlbnQpO1xuICB9O1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYWNjZXNzKHByb3BzLmlzRGlzYWJsZWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBvaW50ZXJEb3duVGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgb3duZXJEb2N1bWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICB9LCAwKTtcbiAgICBvd25lckRvY3VtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgb25Gb2N1c0luLCB0cnVlKTtcbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChwb2ludGVyRG93blRpbWVvdXRJZCk7XG4gICAgICBvd25lckRvY3VtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrSGFuZGxlcik7XG4gICAgICBvd25lckRvY3VtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgICAgb3duZXJEb2N1bWVudCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXNJbiwgdHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQge1xuICBjcmVhdGVJbnRlcmFjdE91dHNpZGVcbn07XG4iLCIvLyBzcmMvcG9seW1vcnBoaWMvcG9seW1vcnBoaWMudHN4XG5pbXBvcnQgeyBzcGxpdFByb3BzIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5pbXBvcnQgeyBEeW5hbWljIH0gZnJvbSBcInNvbGlkLWpzL3dlYlwiO1xuZnVuY3Rpb24gUG9seW1vcnBoaWMocHJvcHMpIHtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wiYXNcIl0pO1xuICBpZiAoIWxvY2FsLmFzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJba29iYWx0ZV06IFBvbHltb3JwaGljIGlzIG1pc3NpbmcgdGhlIHJlcXVpcmVkIGBhc2AgcHJvcC5cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvLyBAdHMtaWdub3JlOiBQcm9wcyBhcmUgdmFsaWQgYnV0IG5vdCB3b3J0aCBjYWxjdWxhdGluZ1xuICAgIDxEeW5hbWljIGNvbXBvbmVudD17bG9jYWwuYXN9IHsuLi5vdGhlcnN9IC8+XG4gICk7XG59XG5cbmV4cG9ydCB7XG4gIFBvbHltb3JwaGljXG59O1xuIiwiaW1wb3J0IHtcbiAgY3JlYXRlRXNjYXBlS2V5RG93blxufSBmcm9tIFwiLi9XTlJBTjVHVi5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUludGVyYWN0T3V0c2lkZVxufSBmcm9tIFwiLi9CTU1DUTdZSi5qc3hcIjtcbmltcG9ydCB7XG4gIGxheWVyU3RhY2tcbn0gZnJvbSBcIi4vM05JNkZUQTIuanN4XCI7XG5pbXBvcnQge1xuICBQb2x5bW9ycGhpY1xufSBmcm9tIFwiLi9FNzNQS0ZCMy5qc3hcIjtcblxuLy8gc3JjL2Rpc21pc3NhYmxlLWxheWVyL2Rpc21pc3NhYmxlLWxheWVyLnRzeFxuaW1wb3J0IHsgY29udGFpbnMsIGdldERvY3VtZW50LCBtZXJnZVJlZnMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUVmZmVjdCxcbiAgb24sXG4gIG9uQ2xlYW51cCxcbiAgb25Nb3VudCxcbiAgc3BsaXRQcm9wc1xufSBmcm9tIFwic29saWQtanNcIjtcblxuLy8gc3JjL2Rpc21pc3NhYmxlLWxheWVyL2Rpc21pc3NhYmxlLWxheWVyLWNvbnRleHQudHN4XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSBcInNvbGlkLWpzXCI7XG52YXIgRGlzbWlzc2FibGVMYXllckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5mdW5jdGlvbiB1c2VPcHRpb25hbERpc21pc3NhYmxlTGF5ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChEaXNtaXNzYWJsZUxheWVyQ29udGV4dCk7XG59XG5cbi8vIHNyYy9kaXNtaXNzYWJsZS1sYXllci9kaXNtaXNzYWJsZS1sYXllci50c3hcbmZ1bmN0aW9uIERpc21pc3NhYmxlTGF5ZXIocHJvcHMpIHtcbiAgbGV0IHJlZjtcbiAgY29uc3QgcGFyZW50Q29udGV4dCA9IHVzZU9wdGlvbmFsRGlzbWlzc2FibGVMYXllckNvbnRleHQoKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1xuICAgIFwicmVmXCIsXG4gICAgXCJkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHNcIixcbiAgICBcImV4Y2x1ZGVkRWxlbWVudHNcIixcbiAgICBcIm9uRXNjYXBlS2V5RG93blwiLFxuICAgIFwib25Qb2ludGVyRG93bk91dHNpZGVcIixcbiAgICBcIm9uRm9jdXNPdXRzaWRlXCIsXG4gICAgXCJvbkludGVyYWN0T3V0c2lkZVwiLFxuICAgIFwib25EaXNtaXNzXCIsXG4gICAgXCJieXBhc3NUb3BNb3N0TGF5ZXJDaGVja1wiXG4gIF0pO1xuICBjb25zdCBuZXN0ZWRMYXllcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXSk7XG4gIGNvbnN0IHJlZ2lzdGVyTmVzdGVkTGF5ZXIgPSAoZWxlbWVudCkgPT4ge1xuICAgIG5lc3RlZExheWVycy5hZGQoZWxlbWVudCk7XG4gICAgY29uc3QgcGFyZW50VW5yZWdpc3RlciA9IHBhcmVudENvbnRleHQ/LnJlZ2lzdGVyTmVzdGVkTGF5ZXIoZWxlbWVudCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG5lc3RlZExheWVycy5kZWxldGUoZWxlbWVudCk7XG4gICAgICBwYXJlbnRVbnJlZ2lzdGVyPy4oKTtcbiAgICB9O1xuICB9O1xuICBjb25zdCBzaG91bGRFeGNsdWRlRWxlbWVudCA9IChlbGVtZW50KSA9PiB7XG4gICAgaWYgKCFyZWYpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsLmV4Y2x1ZGVkRWxlbWVudHM/LnNvbWUoKG5vZGUpID0+IGNvbnRhaW5zKG5vZGUoKSwgZWxlbWVudCkpIHx8IFsuLi5uZXN0ZWRMYXllcnNdLnNvbWUoKGxheWVyKSA9PiBjb250YWlucyhsYXllciwgZWxlbWVudCkpO1xuICB9O1xuICBjb25zdCBvblBvaW50ZXJEb3duT3V0c2lkZSA9IChlKSA9PiB7XG4gICAgaWYgKCFyZWYgfHwgbGF5ZXJTdGFjay5pc0JlbG93UG9pbnRlckJsb2NraW5nTGF5ZXIocmVmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWxvY2FsLmJ5cGFzc1RvcE1vc3RMYXllckNoZWNrICYmICFsYXllclN0YWNrLmlzVG9wTW9zdExheWVyKHJlZikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9jYWwub25Qb2ludGVyRG93bk91dHNpZGU/LihlKTtcbiAgICBsb2NhbC5vbkludGVyYWN0T3V0c2lkZT8uKGUpO1xuICAgIGlmICghZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBsb2NhbC5vbkRpc21pc3M/LigpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Gb2N1c091dHNpZGUgPSAoZSkgPT4ge1xuICAgIGxvY2FsLm9uRm9jdXNPdXRzaWRlPy4oZSk7XG4gICAgbG9jYWwub25JbnRlcmFjdE91dHNpZGU/LihlKTtcbiAgICBpZiAoIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgbG9jYWwub25EaXNtaXNzPy4oKTtcbiAgICB9XG4gIH07XG4gIGNyZWF0ZUludGVyYWN0T3V0c2lkZShcbiAgICB7XG4gICAgICBzaG91bGRFeGNsdWRlRWxlbWVudCxcbiAgICAgIG9uUG9pbnRlckRvd25PdXRzaWRlLFxuICAgICAgb25Gb2N1c091dHNpZGVcbiAgICB9LFxuICAgICgpID0+IHJlZlxuICApO1xuICBjcmVhdGVFc2NhcGVLZXlEb3duKHtcbiAgICBvd25lckRvY3VtZW50OiAoKSA9PiBnZXREb2N1bWVudChyZWYpLFxuICAgIG9uRXNjYXBlS2V5RG93bjogKGUpID0+IHtcbiAgICAgIGlmICghcmVmIHx8ICFsYXllclN0YWNrLmlzVG9wTW9zdExheWVyKHJlZikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9jYWwub25Fc2NhcGVLZXlEb3duPy4oZSk7XG4gICAgICBpZiAoIWUuZGVmYXVsdFByZXZlbnRlZCAmJiBsb2NhbC5vbkRpc21pc3MpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsb2NhbC5vbkRpc21pc3MoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBvbk1vdW50KCgpID0+IHtcbiAgICBpZiAoIXJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsYXllclN0YWNrLmFkZExheWVyKHtcbiAgICAgIG5vZGU6IHJlZixcbiAgICAgIGlzUG9pbnRlckJsb2NraW5nOiBsb2NhbC5kaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHMsXG4gICAgICBkaXNtaXNzOiBsb2NhbC5vbkRpc21pc3NcbiAgICB9KTtcbiAgICBjb25zdCB1bnJlZ2lzdGVyRnJvbVBhcmVudExheWVyID0gcGFyZW50Q29udGV4dD8ucmVnaXN0ZXJOZXN0ZWRMYXllcihyZWYpO1xuICAgIGxheWVyU3RhY2suYXNzaWduUG9pbnRlckV2ZW50VG9MYXllcnMoKTtcbiAgICBsYXllclN0YWNrLmRpc2FibGVCb2R5UG9pbnRlckV2ZW50cyhyZWYpO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICBpZiAoIXJlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsYXllclN0YWNrLnJlbW92ZUxheWVyKHJlZik7XG4gICAgICB1bnJlZ2lzdGVyRnJvbVBhcmVudExheWVyPy4oKTtcbiAgICAgIGxheWVyU3RhY2suYXNzaWduUG9pbnRlckV2ZW50VG9MYXllcnMoKTtcbiAgICAgIGxheWVyU3RhY2sucmVzdG9yZUJvZHlQb2ludGVyRXZlbnRzKHJlZik7XG4gICAgfSk7XG4gIH0pO1xuICBjcmVhdGVFZmZlY3QoXG4gICAgb24oXG4gICAgICBbKCkgPT4gcmVmLCAoKSA9PiBsb2NhbC5kaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHNdLFxuICAgICAgKFtyZWYyLCBkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHNdKSA9PiB7XG4gICAgICAgIGlmICghcmVmMikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXllciA9IGxheWVyU3RhY2suZmluZChyZWYyKTtcbiAgICAgICAgaWYgKGxheWVyICYmIGxheWVyLmlzUG9pbnRlckJsb2NraW5nICE9PSBkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICBsYXllci5pc1BvaW50ZXJCbG9ja2luZyA9IGRpc2FibGVPdXRzaWRlUG9pbnRlckV2ZW50cztcbiAgICAgICAgICBsYXllclN0YWNrLmFzc2lnblBvaW50ZXJFdmVudFRvTGF5ZXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc2FibGVPdXRzaWRlUG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGxheWVyU3RhY2suZGlzYWJsZUJvZHlQb2ludGVyRXZlbnRzKHJlZjIpO1xuICAgICAgICB9XG4gICAgICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICAgICAgbGF5ZXJTdGFjay5yZXN0b3JlQm9keVBvaW50ZXJFdmVudHMocmVmMik7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZGVmZXI6IHRydWVcbiAgICAgIH1cbiAgICApXG4gICk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgcmVnaXN0ZXJOZXN0ZWRMYXllclxuICB9O1xuICByZXR1cm4gPERpc21pc3NhYmxlTGF5ZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT48UG9seW1vcnBoaWNcbiAgICBhcz1cImRpdlwiXG4gICAgcmVmPXttZXJnZVJlZnMoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKX1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjwvRGlzbWlzc2FibGVMYXllckNvbnRleHQuUHJvdmlkZXI+O1xufVxuXG5leHBvcnQge1xuICBEaXNtaXNzYWJsZUxheWVyXG59O1xuIiwiLy8gc3JjL3ByaW1pdGl2ZXMvY3JlYXRlLWNvbnRyb2xsYWJsZS1zaWduYWwvY3JlYXRlLWNvbnRyb2xsYWJsZS1zaWduYWwudHNcbmltcG9ydCB7IGFjY2Vzc1dpdGggfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW8sIGNyZWF0ZVNpZ25hbCwgdW50cmFjayB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gY3JlYXRlQ29udHJvbGxhYmxlU2lnbmFsKHByb3BzKSB7XG4gIGNvbnN0IFtfdmFsdWUsIF9zZXRWYWx1ZV0gPSBjcmVhdGVTaWduYWwocHJvcHMuZGVmYXVsdFZhbHVlPy4oKSk7XG4gIGNvbnN0IGlzQ29udHJvbGxlZCA9IGNyZWF0ZU1lbW8oKCkgPT4gcHJvcHMudmFsdWU/LigpICE9PSB2b2lkIDApO1xuICBjb25zdCB2YWx1ZSA9IGNyZWF0ZU1lbW8oKCkgPT4gaXNDb250cm9sbGVkKCkgPyBwcm9wcy52YWx1ZT8uKCkgOiBfdmFsdWUoKSk7XG4gIGNvbnN0IHNldFZhbHVlID0gKG5leHQpID0+IHtcbiAgICB1bnRyYWNrKCgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRWYWx1ZSA9IGFjY2Vzc1dpdGgobmV4dCwgdmFsdWUoKSk7XG4gICAgICBpZiAoIU9iamVjdC5pcyhuZXh0VmFsdWUsIHZhbHVlKCkpKSB7XG4gICAgICAgIGlmICghaXNDb250cm9sbGVkKCkpIHtcbiAgICAgICAgICBfc2V0VmFsdWUobmV4dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wcy5vbkNoYW5nZT8uKG5leHRWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dFZhbHVlO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZV07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250cm9sbGFibGVCb29sZWFuU2lnbmFsKHByb3BzKSB7XG4gIGNvbnN0IFtfdmFsdWUsIHNldFZhbHVlXSA9IGNyZWF0ZUNvbnRyb2xsYWJsZVNpZ25hbChwcm9wcyk7XG4gIGNvbnN0IHZhbHVlID0gKCkgPT4gX3ZhbHVlKCkgPz8gZmFsc2U7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlXTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsYWJsZUFycmF5U2lnbmFsKHByb3BzKSB7XG4gIGNvbnN0IFtfdmFsdWUsIHNldFZhbHVlXSA9IGNyZWF0ZUNvbnRyb2xsYWJsZVNpZ25hbChwcm9wcyk7XG4gIGNvbnN0IHZhbHVlID0gKCkgPT4gX3ZhbHVlKCkgPz8gW107XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlXTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsYWJsZVNldFNpZ25hbChwcm9wcykge1xuICBjb25zdCBbX3ZhbHVlLCBzZXRWYWx1ZV0gPSBjcmVhdGVDb250cm9sbGFibGVTaWduYWwocHJvcHMpO1xuICBjb25zdCB2YWx1ZSA9ICgpID0+IF92YWx1ZSgpID8/IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlXTtcbn1cblxuZXhwb3J0IHtcbiAgY3JlYXRlQ29udHJvbGxhYmxlU2lnbmFsLFxuICBjcmVhdGVDb250cm9sbGFibGVCb29sZWFuU2lnbmFsLFxuICBjcmVhdGVDb250cm9sbGFibGVBcnJheVNpZ25hbCxcbiAgY3JlYXRlQ29udHJvbGxhYmxlU2V0U2lnbmFsXG59O1xuIiwiaW1wb3J0IHtcbiAgY3JlYXRlQ29udHJvbGxhYmxlQm9vbGVhblNpZ25hbFxufSBmcm9tIFwiLi9GTjZFSUNHTy5qc3hcIjtcblxuLy8gc3JjL3ByaW1pdGl2ZXMvY3JlYXRlLWRpc2Nsb3N1cmUtc3RhdGUvY3JlYXRlLWRpc2Nsb3N1cmUtc3RhdGUudHNcbmltcG9ydCB7IGFjY2VzcyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuZnVuY3Rpb24gY3JlYXRlRGlzY2xvc3VyZVN0YXRlKHByb3BzID0ge30pIHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IGNyZWF0ZUNvbnRyb2xsYWJsZUJvb2xlYW5TaWduYWwoe1xuICAgIHZhbHVlOiAoKSA9PiBhY2Nlc3MocHJvcHMub3BlbiksXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiAhIWFjY2Vzcyhwcm9wcy5kZWZhdWx0T3BlbiksXG4gICAgb25DaGFuZ2U6ICh2YWx1ZSkgPT4gcHJvcHMub25PcGVuQ2hhbmdlPy4odmFsdWUpXG4gIH0pO1xuICBjb25zdCBvcGVuID0gKCkgPT4ge1xuICAgIHNldElzT3Blbih0cnVlKTtcbiAgfTtcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgc2V0SXNPcGVuKGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgdG9nZ2xlID0gKCkgPT4ge1xuICAgIGlzT3BlbigpID8gY2xvc2UoKSA6IG9wZW4oKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpc09wZW4sXG4gICAgc2V0SXNPcGVuLFxuICAgIG9wZW4sXG4gICAgY2xvc2UsXG4gICAgdG9nZ2xlXG4gIH07XG59XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZURpc2Nsb3N1cmVTdGF0ZVxufTtcbiIsIi8vIHNyYy9wcmltaXRpdmVzL2NyZWF0ZS10YWctbmFtZS9jcmVhdGUtdGFnLW5hbWUudHNcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIGNyZWF0ZVNpZ25hbCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gY3JlYXRlVGFnTmFtZShyZWYsIGZhbGxiYWNrKSB7XG4gIGNvbnN0IFt0YWdOYW1lLCBzZXRUYWdOYW1lXSA9IGNyZWF0ZVNpZ25hbChzdHJpbmdPclVuZGVmaW5lZChmYWxsYmFjaz8uKCkpKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRUYWdOYW1lKHJlZigpPy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgfHwgc3RyaW5nT3JVbmRlZmluZWQoZmFsbGJhY2s/LigpKSk7XG4gIH0pO1xuICByZXR1cm4gdGFnTmFtZTtcbn1cbmZ1bmN0aW9uIHN0cmluZ09yVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZSA6IHZvaWQgMDtcbn1cblxuZXhwb3J0IHtcbiAgY3JlYXRlVGFnTmFtZVxufTtcbiIsInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydCB7XG4gIF9fZXhwb3J0XG59O1xuIiwiaW1wb3J0IHtcbiAgY3JlYXRlVGFnTmFtZVxufSBmcm9tIFwiLi9DV0NCNDQ3Ri5qc3hcIjtcbmltcG9ydCB7XG4gIFBvbHltb3JwaGljXG59IGZyb20gXCIuL0U3M1BLRkIzLmpzeFwiO1xuaW1wb3J0IHtcbiAgX19leHBvcnRcbn0gZnJvbSBcIi4vNVdYSEpEQ1ouanN4XCI7XG5cbi8vIHNyYy9idXR0b24vaW5kZXgudHN4XG52YXIgYnV0dG9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGJ1dHRvbl9leHBvcnRzLCB7XG4gIEJ1dHRvbjogKCkgPT4gQnV0dG9uLFxuICBSb290OiAoKSA9PiBCdXR0b25Sb290XG59KTtcblxuLy8gc3JjL2J1dHRvbi9idXR0b24tcm9vdC50c3hcbmltcG9ydCB7IG1lcmdlRGVmYXVsdFByb3BzLCBtZXJnZVJlZnMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW8sIHNwbGl0UHJvcHMgfSBmcm9tIFwic29saWQtanNcIjtcblxuLy8gc3JjL2J1dHRvbi9pcy1idXR0b24udHNcbnZhciBCVVRUT05fSU5QVVRfVFlQRVMgPSBbXG4gIFwiYnV0dG9uXCIsXG4gIFwiY29sb3JcIixcbiAgXCJmaWxlXCIsXG4gIFwiaW1hZ2VcIixcbiAgXCJyZXNldFwiLFxuICBcInN1Ym1pdFwiXG5dO1xuZnVuY3Rpb24gaXNCdXR0b24oZWxlbWVudCkge1xuICBjb25zdCB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh0YWdOYW1lID09PSBcImJ1dHRvblwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHRhZ05hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtZW50LnR5cGUpIHtcbiAgICByZXR1cm4gQlVUVE9OX0lOUFVUX1RZUEVTLmluZGV4T2YoZWxlbWVudC50eXBlKSAhPT0gLTE7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBzcmMvYnV0dG9uL2J1dHRvbi1yb290LnRzeFxuZnVuY3Rpb24gQnV0dG9uUm9vdChwcm9wcykge1xuICBsZXQgcmVmO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKFxuICAgIHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMobWVyZ2VkUHJvcHMsIFtcInJlZlwiLCBcInR5cGVcIiwgXCJkaXNhYmxlZFwiXSk7XG4gIGNvbnN0IHRhZ05hbWUgPSBjcmVhdGVUYWdOYW1lKFxuICAgICgpID0+IHJlZixcbiAgICAoKSA9PiBcImJ1dHRvblwiXG4gICk7XG4gIGNvbnN0IGlzTmF0aXZlQnV0dG9uID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudFRhZ05hbWUgPSB0YWdOYW1lKCk7XG4gICAgaWYgKGVsZW1lbnRUYWdOYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQnV0dG9uKHsgdGFnTmFtZTogZWxlbWVudFRhZ05hbWUsIHR5cGU6IGxvY2FsLnR5cGUgfSk7XG4gIH0pO1xuICBjb25zdCBpc05hdGl2ZUlucHV0ID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRhZ05hbWUoKSA9PT0gXCJpbnB1dFwiO1xuICB9KTtcbiAgY29uc3QgaXNOYXRpdmVMaW5rID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRhZ05hbWUoKSA9PT0gXCJhXCIgJiYgcmVmPy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpICE9IG51bGw7XG4gIH0pO1xuICByZXR1cm4gPFBvbHltb3JwaGljXG4gICAgYXM9XCJidXR0b25cIlxuICAgIHJlZj17bWVyZ2VSZWZzKChlbCkgPT4gcmVmID0gZWwsIGxvY2FsLnJlZil9XG4gICAgdHlwZT17aXNOYXRpdmVCdXR0b24oKSB8fCBpc05hdGl2ZUlucHV0KCkgPyBsb2NhbC50eXBlIDogdm9pZCAwfVxuICAgIHJvbGU9eyFpc05hdGl2ZUJ1dHRvbigpICYmICFpc05hdGl2ZUxpbmsoKSA/IFwiYnV0dG9uXCIgOiB2b2lkIDB9XG4gICAgdGFiSW5kZXg9eyFpc05hdGl2ZUJ1dHRvbigpICYmICFpc05hdGl2ZUxpbmsoKSAmJiAhbG9jYWwuZGlzYWJsZWQgPyAwIDogdm9pZCAwfVxuICAgIGRpc2FibGVkPXtpc05hdGl2ZUJ1dHRvbigpIHx8IGlzTmF0aXZlSW5wdXQoKSA/IGxvY2FsLmRpc2FibGVkIDogdm9pZCAwfVxuICAgIGFyaWEtZGlzYWJsZWQ9eyFpc05hdGl2ZUJ1dHRvbigpICYmICFpc05hdGl2ZUlucHV0KCkgJiYgbG9jYWwuZGlzYWJsZWQgPyB0cnVlIDogdm9pZCAwfVxuICAgIGRhdGEtZGlzYWJsZWQ9e2xvY2FsLmRpc2FibGVkID8gXCJcIiA6IHZvaWQgMH1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjtcbn1cblxuLy8gc3JjL2J1dHRvbi9pbmRleC50c3hcbnZhciBCdXR0b24gPSBCdXR0b25Sb290O1xuXG5leHBvcnQge1xuICBCdXR0b25Sb290LFxuICBCdXR0b24sXG4gIGJ1dHRvbl9leHBvcnRzXG59O1xuIiwiLy8gc3JjL3ByaW1pdGl2ZXMvY3JlYXRlLXJlZ2lzdGVyLWlkL2NyZWF0ZS1yZWdpc3Rlci1pZC50c1xuZnVuY3Rpb24gY3JlYXRlUmVnaXN0ZXJJZChzZXR0ZXIpIHtcbiAgcmV0dXJuIChpZCkgPT4ge1xuICAgIHNldHRlcihpZCk7XG4gICAgcmV0dXJuICgpID0+IHNldHRlcih2b2lkIDApO1xuICB9O1xufVxuXG5leHBvcnQge1xuICBjcmVhdGVSZWdpc3RlcklkXG59O1xuIiwiLy8gc3JjL3JlYWN0aXZpdHkvbGliLnRzXG5pbXBvcnQgXCJzb2xpZC1qc1wiO1xudmFyIGFjY2VzcyA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdigpIDogdjtcbnZhciBjaGFpbiA9IChjYWxsYmFja3MpID0+IHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIGNhbGxiYWNrICYmIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICB9O1xufTtcbnZhciBtZXJnZVJlZnMgPSAoLi4ucmVmcykgPT4ge1xuICByZXR1cm4gY2hhaW4ocmVmcyk7XG59O1xudmFyIHNvbWUgPSAoLi4uc2lnbmFscykgPT4ge1xuICByZXR1cm4gc2lnbmFscy5zb21lKChzaWduYWwpID0+ICEhc2lnbmFsKCkpO1xufTtcblxuZXhwb3J0IHtcbiAgYWNjZXNzLFxuICBjaGFpbixcbiAgbWVyZ2VSZWZzLFxuICBzb21lXG59O1xuIiwiaW1wb3J0IHtcbiAgYWNjZXNzXG59IGZyb20gXCIuL1U0MkVDTU5ELmpzeFwiO1xuXG4vLyBzcmMvY3JlYXRlL3N0eWxlLnRzXG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIG9uQ2xlYW51cCB9IGZyb20gXCJzb2xpZC1qc1wiO1xudmFyIGFjdGl2ZVN0eWxlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG52YXIgY3JlYXRlU3R5bGUgPSAocHJvcHMpID0+IHtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdHlsZSA9IGFjY2Vzcyhwcm9wcy5zdHlsZSkgPz8ge307XG4gICAgY29uc3QgcHJvcGVydGllcyA9IGFjY2Vzcyhwcm9wcy5wcm9wZXJ0aWVzKSA/PyBbXTtcbiAgICBjb25zdCBvcmlnaW5hbFN0eWxlcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlKSB7XG4gICAgICBvcmlnaW5hbFN0eWxlc1trZXldID0gcHJvcHMuZWxlbWVudC5zdHlsZVtrZXldO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmVTdHlsZSA9IGFjdGl2ZVN0eWxlcy5nZXQocHJvcHMua2V5KTtcbiAgICBpZiAoYWN0aXZlU3R5bGUpIHtcbiAgICAgIGFjdGl2ZVN0eWxlLmFjdGl2ZUNvdW50Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVN0eWxlcy5zZXQocHJvcHMua2V5LCB7XG4gICAgICAgIGFjdGl2ZUNvdW50OiAxLFxuICAgICAgICBvcmlnaW5hbFN0eWxlcyxcbiAgICAgICAgcHJvcGVydGllczogcHJvcGVydGllcy5tYXAoKHByb3BlcnR5KSA9PiBwcm9wZXJ0eS5rZXkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihwcm9wcy5lbGVtZW50LnN0eWxlLCBwcm9wcy5zdHlsZSk7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICBwcm9wcy5lbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LmtleSwgcHJvcGVydHkudmFsdWUpO1xuICAgIH1cbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlU3R5bGUyID0gYWN0aXZlU3R5bGVzLmdldChwcm9wcy5rZXkpO1xuICAgICAgaWYgKCFhY3RpdmVTdHlsZTIpIHJldHVybjtcbiAgICAgIGlmIChhY3RpdmVTdHlsZTIuYWN0aXZlQ291bnQgIT09IDEpIHtcbiAgICAgICAgYWN0aXZlU3R5bGUyLmFjdGl2ZUNvdW50LS07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZVN0eWxlcy5kZWxldGUocHJvcHMua2V5KTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFjdGl2ZVN0eWxlMi5vcmlnaW5hbFN0eWxlcykpIHtcbiAgICAgICAgcHJvcHMuZWxlbWVudC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIGFjdGl2ZVN0eWxlMi5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIHByb3BzLmVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmVsZW1lbnQuc3R5bGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHByb3BzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgICB9XG4gICAgICBwcm9wcy5jbGVhbnVwPy4oKTtcbiAgICB9KTtcbiAgfSk7XG59O1xudmFyIHN0eWxlX2RlZmF1bHQgPSBjcmVhdGVTdHlsZTtcblxuZXhwb3J0IHtcbiAgc3R5bGVfZGVmYXVsdFxufTtcbiIsIi8vIHNyYy9zY3JvbGwvbGliLnRzXG52YXIgZ2V0U2Nyb2xsRGltZW5zaW9ucyA9IChlbGVtZW50LCBheGlzKSA9PiB7XG4gIHN3aXRjaCAoYXhpcykge1xuICAgIGNhc2UgXCJ4XCI6XG4gICAgICByZXR1cm4gW2VsZW1lbnQuY2xpZW50V2lkdGgsIGVsZW1lbnQuc2Nyb2xsTGVmdCwgZWxlbWVudC5zY3JvbGxXaWR0aF07XG4gICAgY2FzZSBcInlcIjpcbiAgICAgIHJldHVybiBbZWxlbWVudC5jbGllbnRIZWlnaHQsIGVsZW1lbnQuc2Nyb2xsVG9wLCBlbGVtZW50LnNjcm9sbEhlaWdodF07XG4gIH1cbn07XG52YXIgaXNTY3JvbGxDb250YWluZXIgPSAoZWxlbWVudCwgYXhpcykgPT4ge1xuICBjb25zdCBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICBjb25zdCBvdmVyZmxvdyA9IGF4aXMgPT09IFwieFwiID8gc3R5bGVzLm92ZXJmbG93WCA6IHN0eWxlcy5vdmVyZmxvd1k7XG4gIHJldHVybiBvdmVyZmxvdyA9PT0gXCJhdXRvXCIgfHwgb3ZlcmZsb3cgPT09IFwic2Nyb2xsXCIgfHwgLy8gVGhlIEhUTUwgZWxlbWVudCBpcyBhIHNjcm9sbCBjb250YWluZXIgaWYgaXQgaGFzIG92ZXJmbG93IHZpc2libGVcbiAgZWxlbWVudC50YWdOYW1lID09PSBcIkhUTUxcIiAmJiBvdmVyZmxvdyA9PT0gXCJ2aXNpYmxlXCI7XG59O1xudmFyIGdldFNjcm9sbEF0TG9jYXRpb24gPSAobG9jYXRpb24sIGF4aXMsIHN0b3BBdCkgPT4ge1xuICBjb25zdCBkaXJlY3Rpb25GYWN0b3IgPSBheGlzID09PSBcInhcIiAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShsb2NhdGlvbikuZGlyZWN0aW9uID09PSBcInJ0bFwiID8gLTEgOiAxO1xuICBsZXQgY3VycmVudEVsZW1lbnQgPSBsb2NhdGlvbjtcbiAgbGV0IGF2YWlsYWJsZVNjcm9sbCA9IDA7XG4gIGxldCBhdmFpbGFibGVTY3JvbGxUb3AgPSAwO1xuICBsZXQgd3JhcHBlclJlYWNoZWQgPSBmYWxzZTtcbiAgZG8ge1xuICAgIGNvbnN0IFtjbGllbnRTaXplLCBzY3JvbGxPZmZzZXQsIHNjcm9sbFNpemVdID0gZ2V0U2Nyb2xsRGltZW5zaW9ucyhcbiAgICAgIGN1cnJlbnRFbGVtZW50LFxuICAgICAgYXhpc1xuICAgICk7XG4gICAgY29uc3Qgc2Nyb2xsZWQgPSBzY3JvbGxTaXplIC0gY2xpZW50U2l6ZSAtIGRpcmVjdGlvbkZhY3RvciAqIHNjcm9sbE9mZnNldDtcbiAgICBpZiAoKHNjcm9sbE9mZnNldCAhPT0gMCB8fCBzY3JvbGxlZCAhPT0gMCkgJiYgaXNTY3JvbGxDb250YWluZXIoY3VycmVudEVsZW1lbnQsIGF4aXMpKSB7XG4gICAgICBhdmFpbGFibGVTY3JvbGwgKz0gc2Nyb2xsZWQ7XG4gICAgICBhdmFpbGFibGVTY3JvbGxUb3AgKz0gc2Nyb2xsT2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoY3VycmVudEVsZW1lbnQgPT09IChzdG9wQXQgPz8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgd3JhcHBlclJlYWNoZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50Ll8kaG9zdCA/PyBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgfSB3aGlsZSAoY3VycmVudEVsZW1lbnQgJiYgIXdyYXBwZXJSZWFjaGVkKTtcbiAgcmV0dXJuIFthdmFpbGFibGVTY3JvbGwsIGF2YWlsYWJsZVNjcm9sbFRvcF07XG59O1xuZXhwb3J0IHtcbiAgZ2V0U2Nyb2xsQXRMb2NhdGlvblxufTtcbiIsIi8vIHNyYy9wcmV2ZW50U2Nyb2xsLnRzXG5pbXBvcnQgeyBhY2Nlc3MgfSBmcm9tIFwiQGNvcnZ1L3V0aWxzL3JlYWN0aXZpdHlcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUVmZmVjdCxcbiAgY3JlYXRlU2lnbmFsLFxuICBjcmVhdGVVbmlxdWVJZCxcbiAgbWVyZ2VQcm9wcyxcbiAgb25DbGVhbnVwXG59IGZyb20gXCJzb2xpZC1qc1wiO1xuaW1wb3J0IGNyZWF0ZVN0eWxlIGZyb20gXCJAY29ydnUvdXRpbHMvY3JlYXRlL3N0eWxlXCI7XG5pbXBvcnQgeyBnZXRTY3JvbGxBdExvY2F0aW9uIH0gZnJvbSBcIkBjb3J2dS91dGlscy9zY3JvbGxcIjtcbnZhciBbcHJldmVudFNjcm9sbFN0YWNrLCBzZXRQcmV2ZW50U2Nyb2xsU3RhY2tdID0gY3JlYXRlU2lnbmFsKFtdKTtcbnZhciBpc0FjdGl2ZSA9IChpZCkgPT4gcHJldmVudFNjcm9sbFN0YWNrKCkuaW5kZXhPZihpZCkgPT09IHByZXZlbnRTY3JvbGxTdGFjaygpLmxlbmd0aCAtIDE7XG52YXIgY3JlYXRlUHJldmVudFNjcm9sbCA9IChwcm9wcykgPT4ge1xuICBjb25zdCBkZWZhdWx0ZWRQcm9wcyA9IG1lcmdlUHJvcHMoXG4gICAge1xuICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBoaWRlU2Nyb2xsYmFyOiB0cnVlLFxuICAgICAgcHJldmVudFNjcm9sbGJhclNoaWZ0OiB0cnVlLFxuICAgICAgcHJldmVudFNjcm9sbGJhclNoaWZ0TW9kZTogXCJwYWRkaW5nXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHRydWUsXG4gICAgICBhbGxvd1BpbmNoWm9vbTogZmFsc2VcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IHByZXZlbnRTY3JvbGxJZCA9IGNyZWF0ZVVuaXF1ZUlkKCk7XG4gIGxldCBjdXJyZW50VG91Y2hTdGFydCA9IFswLCAwXTtcbiAgbGV0IGN1cnJlbnRUb3VjaFN0YXJ0QXhpcyA9IG51bGw7XG4gIGxldCBjdXJyZW50VG91Y2hTdGFydERlbHRhID0gbnVsbDtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWFjY2VzcyhkZWZhdWx0ZWRQcm9wcy5lbmFibGVkKSkgcmV0dXJuO1xuICAgIHNldFByZXZlbnRTY3JvbGxTdGFjaygoc3RhY2spID0+IFsuLi5zdGFjaywgcHJldmVudFNjcm9sbElkXSk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIHNldFByZXZlbnRTY3JvbGxTdGFjayhcbiAgICAgICAgKHN0YWNrKSA9PiBzdGFjay5maWx0ZXIoKGlkKSA9PiBpZCAhPT0gcHJldmVudFNjcm9sbElkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFhY2Nlc3MoZGVmYXVsdGVkUHJvcHMuZW5hYmxlZCkgfHwgIWFjY2VzcyhkZWZhdWx0ZWRQcm9wcy5oaWRlU2Nyb2xsYmFyKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB7IGJvZHkgfSA9IGRvY3VtZW50O1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBib2R5Lm9mZnNldFdpZHRoO1xuICAgIGlmIChhY2Nlc3MoZGVmYXVsdGVkUHJvcHMucHJldmVudFNjcm9sbGJhclNoaWZ0KSkge1xuICAgICAgY29uc3Qgc3R5bGUgPSB7IG92ZXJmbG93OiBcImhpZGRlblwiIH07XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gW107XG4gICAgICBpZiAoc2Nyb2xsYmFyV2lkdGggPiAwKSB7XG4gICAgICAgIGlmIChhY2Nlc3MoZGVmYXVsdGVkUHJvcHMucHJldmVudFNjcm9sbGJhclNoaWZ0TW9kZSkgPT09IFwicGFkZGluZ1wiKSB7XG4gICAgICAgICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gYGNhbGMoJHt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShib2R5KS5wYWRkaW5nUmlnaHR9ICsgJHtzY3JvbGxiYXJXaWR0aH1weClgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlLm1hcmdpblJpZ2h0ID0gYGNhbGMoJHt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShib2R5KS5tYXJnaW5SaWdodH0gKyAke3Njcm9sbGJhcldpZHRofXB4KWA7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IFwiLS1zY3JvbGxiYXItd2lkdGhcIixcbiAgICAgICAgICB2YWx1ZTogYCR7c2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0VG9wID0gd2luZG93LnNjcm9sbFk7XG4gICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gd2luZG93LnNjcm9sbFg7XG4gICAgICBjcmVhdGVTdHlsZSh7XG4gICAgICAgIGtleTogXCJwcmV2ZW50LXNjcm9sbFwiLFxuICAgICAgICBlbGVtZW50OiBib2R5LFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgY2xlYW51cDogKCkgPT4ge1xuICAgICAgICAgIGlmIChhY2Nlc3MoZGVmYXVsdGVkUHJvcHMucmVzdG9yZVNjcm9sbFBvc2l0aW9uKSAmJiBzY3JvbGxiYXJXaWR0aCA+IDApIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyhvZmZzZXRMZWZ0LCBvZmZzZXRUb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVN0eWxlKHtcbiAgICAgICAga2V5OiBcInByZXZlbnQtc2Nyb2xsXCIsXG4gICAgICAgIGVsZW1lbnQ6IGJvZHksXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCJcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWlzQWN0aXZlKHByZXZlbnRTY3JvbGxJZCkgfHwgIWFjY2VzcyhkZWZhdWx0ZWRQcm9wcy5lbmFibGVkKSkgcmV0dXJuO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCBtYXliZVByZXZlbnRXaGVlbCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBsb2dUb3VjaFN0YXJ0LCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbWF5YmVQcmV2ZW50VG91Y2gsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCBtYXliZVByZXZlbnRXaGVlbCk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBsb2dUb3VjaFN0YXJ0KTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbWF5YmVQcmV2ZW50VG91Y2gpO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgbG9nVG91Y2hTdGFydCA9IChldmVudCkgPT4ge1xuICAgIGN1cnJlbnRUb3VjaFN0YXJ0ID0gZ2V0VG91Y2hYWShldmVudCk7XG4gICAgY3VycmVudFRvdWNoU3RhcnRBeGlzID0gbnVsbDtcbiAgICBjdXJyZW50VG91Y2hTdGFydERlbHRhID0gbnVsbDtcbiAgfTtcbiAgY29uc3QgbWF5YmVQcmV2ZW50V2hlZWwgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3Qgd3JhcHBlciA9IGFjY2VzcyhkZWZhdWx0ZWRQcm9wcy5lbGVtZW50KTtcbiAgICBjb25zdCBkZWx0YSA9IGdldERlbHRhWFkoZXZlbnQpO1xuICAgIGNvbnN0IGF4aXMgPSBNYXRoLmFicyhkZWx0YVswXSkgPiBNYXRoLmFicyhkZWx0YVsxXSkgPyBcInhcIiA6IFwieVwiO1xuICAgIGNvbnN0IGF4aXNEZWx0YSA9IGF4aXMgPT09IFwieFwiID8gZGVsdGFbMF0gOiBkZWx0YVsxXTtcbiAgICBjb25zdCByZXN1bHRzSW5TY3JvbGwgPSB3b3VsZFNjcm9sbCh0YXJnZXQsIGF4aXMsIGF4aXNEZWx0YSwgd3JhcHBlcik7XG4gICAgbGV0IHNob3VsZENhbmNlbDtcbiAgICBpZiAod3JhcHBlciAmJiBjb250YWlucyh3cmFwcGVyLCB0YXJnZXQpKSB7XG4gICAgICBzaG91bGRDYW5jZWwgPSAhcmVzdWx0c0luU2Nyb2xsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRDYW5jZWwgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkQ2FuY2VsICYmIGV2ZW50LmNhbmNlbGFibGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtYXliZVByZXZlbnRUb3VjaCA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBhY2Nlc3MoZGVmYXVsdGVkUHJvcHMuZWxlbWVudCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIGxldCBzaG91bGRDYW5jZWw7XG4gICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICBzaG91bGRDYW5jZWwgPSAhYWNjZXNzKGRlZmF1bHRlZFByb3BzLmFsbG93UGluY2hab29tKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJlbnRUb3VjaFN0YXJ0QXhpcyA9PSBudWxsIHx8IGN1cnJlbnRUb3VjaFN0YXJ0RGVsdGEgPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBnZXRUb3VjaFhZKGV2ZW50KS5tYXAoXG4gICAgICAgICAgKHRvdWNoLCBpKSA9PiBjdXJyZW50VG91Y2hTdGFydFtpXSAtIHRvdWNoXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBNYXRoLmFicyhkZWx0YVswXSkgPiBNYXRoLmFicyhkZWx0YVsxXSkgPyBcInhcIiA6IFwieVwiO1xuICAgICAgICBjdXJyZW50VG91Y2hTdGFydEF4aXMgPSBheGlzO1xuICAgICAgICBjdXJyZW50VG91Y2hTdGFydERlbHRhID0gYXhpcyA9PT0gXCJ4XCIgPyBkZWx0YVswXSA6IGRlbHRhWzFdO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldC50eXBlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgc2hvdWxkQ2FuY2VsID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB3b3VsZFJlc3VsdEluU2Nyb2xsID0gd291bGRTY3JvbGwoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIGN1cnJlbnRUb3VjaFN0YXJ0QXhpcyxcbiAgICAgICAgICBjdXJyZW50VG91Y2hTdGFydERlbHRhLFxuICAgICAgICAgIHdyYXBwZXJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHdyYXBwZXIgJiYgY29udGFpbnMod3JhcHBlciwgdGFyZ2V0KSkge1xuICAgICAgICAgIHNob3VsZENhbmNlbCA9ICF3b3VsZFJlc3VsdEluU2Nyb2xsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNob3VsZENhbmNlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNob3VsZENhbmNlbCAmJiBldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbn07XG52YXIgZ2V0RGVsdGFYWSA9IChldmVudCkgPT4gW1xuICBldmVudC5kZWx0YVgsXG4gIGV2ZW50LmRlbHRhWVxuXTtcbnZhciBnZXRUb3VjaFhZID0gKGV2ZW50KSA9PiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA/IFtldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLCBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZXSA6IFswLCAwXTtcbnZhciB3b3VsZFNjcm9sbCA9ICh0YXJnZXQsIGF4aXMsIGRlbHRhLCB3cmFwcGVyKSA9PiB7XG4gIGNvbnN0IHRhcmdldEluV3JhcHBlciA9IHdyYXBwZXIgIT09IG51bGwgJiYgY29udGFpbnMod3JhcHBlciwgdGFyZ2V0KTtcbiAgY29uc3QgW2F2YWlsYWJsZVNjcm9sbCwgYXZhaWxhYmxlU2Nyb2xsVG9wXSA9IGdldFNjcm9sbEF0TG9jYXRpb24oXG4gICAgdGFyZ2V0LFxuICAgIGF4aXMsXG4gICAgdGFyZ2V0SW5XcmFwcGVyID8gd3JhcHBlciA6IHZvaWQgMFxuICApO1xuICBpZiAoZGVsdGEgPiAwICYmIE1hdGguYWJzKGF2YWlsYWJsZVNjcm9sbCkgPD0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGVsdGEgPCAwICYmIE1hdGguYWJzKGF2YWlsYWJsZVNjcm9sbFRvcCkgPCAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBjb250YWlucyA9ICh3cmFwcGVyLCB0YXJnZXQpID0+IHtcbiAgaWYgKHdyYXBwZXIuY29udGFpbnModGFyZ2V0KSkgcmV0dXJuIHRydWU7XG4gIGxldCBjdXJyZW50RWxlbWVudCA9IHRhcmdldDtcbiAgd2hpbGUgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgaWYgKGN1cnJlbnRFbGVtZW50ID09PSB3cmFwcGVyKSByZXR1cm4gdHJ1ZTtcbiAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50Ll8kaG9zdCA/PyBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgcHJldmVudFNjcm9sbF9kZWZhdWx0ID0gY3JlYXRlUHJldmVudFNjcm9sbDtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2RlZmF1bHQgPSBwcmV2ZW50U2Nyb2xsX2RlZmF1bHQ7XG5leHBvcnQge1xuICBzcmNfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuIiwiLy8gc3JjL3ByZXNlbmNlLnRzXG5pbXBvcnQgeyBhY2Nlc3MgfSBmcm9tIFwiQGNvcnZ1L3V0aWxzL3JlYWN0aXZpdHlcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUVmZmVjdCxcbiAgY3JlYXRlTWVtbyxcbiAgY3JlYXRlU2lnbmFsLFxuICBvbkNsZWFudXAsXG4gIHVudHJhY2tcbn0gZnJvbSBcInNvbGlkLWpzXCI7XG52YXIgY3JlYXRlUHJlc2VuY2UgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgcmVmU3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFjY2Vzcyhwcm9wcy5lbGVtZW50KTtcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgfSk7XG4gIGNvbnN0IGdldEFuaW1hdGlvbk5hbWUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHJlZlN0eWxlcygpPy5hbmltYXRpb25OYW1lID8/IFwibm9uZVwiO1xuICB9O1xuICBjb25zdCBbcHJlc2VudFN0YXRlLCBzZXRQcmVzZW50U3RhdGVdID0gY3JlYXRlU2lnbmFsKGFjY2Vzcyhwcm9wcy5zaG93KSA/IFwicHJlc2VudFwiIDogXCJoaWRkZW5cIik7XG4gIGxldCBhbmltYXRpb25OYW1lID0gXCJub25lXCI7XG4gIGNyZWF0ZUVmZmVjdCgocHJldlNob3cpID0+IHtcbiAgICBjb25zdCBzaG93ID0gYWNjZXNzKHByb3BzLnNob3cpO1xuICAgIHVudHJhY2soKCkgPT4ge1xuICAgICAgaWYgKHByZXZTaG93ID09PSBzaG93KSByZXR1cm4gc2hvdztcbiAgICAgIGNvbnN0IHByZXZBbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcbiAgICAgIGNvbnN0IGN1cnJlbnRBbmltYXRpb25OYW1lID0gZ2V0QW5pbWF0aW9uTmFtZSgpO1xuICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgc2V0UHJlc2VudFN0YXRlKFwicHJlc2VudFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudEFuaW1hdGlvbk5hbWUgPT09IFwibm9uZVwiIHx8IHJlZlN0eWxlcygpPy5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICBzZXRQcmVzZW50U3RhdGUoXCJoaWRkZW5cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpc0FuaW1hdGluZyA9IHByZXZBbmltYXRpb25OYW1lICE9PSBjdXJyZW50QW5pbWF0aW9uTmFtZTtcbiAgICAgICAgaWYgKHByZXZTaG93ID09PSB0cnVlICYmIGlzQW5pbWF0aW5nKSB7XG4gICAgICAgICAgc2V0UHJlc2VudFN0YXRlKFwiaGlkaW5nXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFByZXNlbnRTdGF0ZShcImhpZGRlblwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzaG93O1xuICB9KTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gYWNjZXNzKHByb3BzLmVsZW1lbnQpO1xuICAgIGlmICghZWxlbWVudCkgcmV0dXJuO1xuICAgIGNvbnN0IGhhbmRsZUFuaW1hdGlvblN0YXJ0ID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50KSB7XG4gICAgICAgIGFuaW1hdGlvbk5hbWUgPSBnZXRBbmltYXRpb25OYW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVBbmltYXRpb25FbmQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRBbmltYXRpb25OYW1lID0gZ2V0QW5pbWF0aW9uTmFtZSgpO1xuICAgICAgY29uc3QgaXNDdXJyZW50QW5pbWF0aW9uID0gY3VycmVudEFuaW1hdGlvbk5hbWUuaW5jbHVkZXMoXG4gICAgICAgIGV2ZW50LmFuaW1hdGlvbk5hbWVcbiAgICAgICk7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50ICYmIGlzQ3VycmVudEFuaW1hdGlvbiAmJiBwcmVzZW50U3RhdGUoKSA9PT0gXCJoaWRpbmdcIikge1xuICAgICAgICBzZXRQcmVzZW50U3RhdGUoXCJoaWRkZW5cIik7XG4gICAgICB9XG4gICAgfTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25zdGFydFwiLCBoYW5kbGVBbmltYXRpb25TdGFydCk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uY2FuY2VsXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbnN0YXJ0XCIsIGhhbmRsZUFuaW1hdGlvblN0YXJ0KTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmNhbmNlbFwiLCBoYW5kbGVBbmltYXRpb25FbmQpO1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHByZXNlbnQ6ICgpID0+IHByZXNlbnRTdGF0ZSgpID09PSBcInByZXNlbnRcIiB8fCBwcmVzZW50U3RhdGUoKSA9PT0gXCJoaWRpbmdcIixcbiAgICBzdGF0ZTogcHJlc2VudFN0YXRlXG4gIH07XG59O1xudmFyIHByZXNlbmNlX2RlZmF1bHQgPSBjcmVhdGVQcmVzZW5jZTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2RlZmF1bHQgPSBwcmVzZW5jZV9kZWZhdWx0O1xuZXhwb3J0IHtcbiAgc3JjX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbiIsImltcG9ydCB7XG4gIGNyZWF0ZUZvY3VzU2NvcGVcbn0gZnJvbSBcIi4vN0EzR0RGNFkuanN4XCI7XG5pbXBvcnQge1xuICBjcmVhdGVIaWRlT3V0c2lkZVxufSBmcm9tIFwiLi9QNlhVNzVaRy5qc3hcIjtcbmltcG9ydCB7XG4gIERpc21pc3NhYmxlTGF5ZXJcbn0gZnJvbSBcIi4vTk5HTVJZMk8uanN4XCI7XG5pbXBvcnQge1xuICBjcmVhdGVEaXNjbG9zdXJlU3RhdGVcbn0gZnJvbSBcIi4vRTUzREI3QlMuanN4XCI7XG5pbXBvcnQge1xuICBCdXR0b25Sb290XG59IGZyb20gXCIuL1NBMjdWNVlKLmpzeFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlUmVnaXN0ZXJJZFxufSBmcm9tIFwiLi9KTkNDRjZNUC5qc3hcIjtcbmltcG9ydCB7XG4gIFBvbHltb3JwaGljXG59IGZyb20gXCIuL0U3M1BLRkIzLmpzeFwiO1xuaW1wb3J0IHtcbiAgX19leHBvcnRcbn0gZnJvbSBcIi4vNVdYSEpEQ1ouanN4XCI7XG5cbi8vIHNyYy9kaWFsb2cvaW5kZXgudHN4XG52YXIgZGlhbG9nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGRpYWxvZ19leHBvcnRzLCB7XG4gIENsb3NlQnV0dG9uOiAoKSA9PiBEaWFsb2dDbG9zZUJ1dHRvbixcbiAgQ29udGVudDogKCkgPT4gRGlhbG9nQ29udGVudCxcbiAgRGVzY3JpcHRpb246ICgpID0+IERpYWxvZ0Rlc2NyaXB0aW9uLFxuICBEaWFsb2c6ICgpID0+IERpYWxvZyxcbiAgT3ZlcmxheTogKCkgPT4gRGlhbG9nT3ZlcmxheSxcbiAgUG9ydGFsOiAoKSA9PiBEaWFsb2dQb3J0YWwsXG4gIFJvb3Q6ICgpID0+IERpYWxvZ1Jvb3QsXG4gIFRpdGxlOiAoKSA9PiBEaWFsb2dUaXRsZSxcbiAgVHJpZ2dlcjogKCkgPT4gRGlhbG9nVHJpZ2dlclxufSk7XG5cbi8vIHNyYy9kaWFsb2cvZGlhbG9nLWNsb3NlLWJ1dHRvbi50c3hcbmltcG9ydCB7IGNhbGxIYW5kbGVyIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBzcGxpdFByb3BzIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5cbi8vIHNyYy9kaWFsb2cvZGlhbG9nLWNvbnRleHQudHN4XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSBcInNvbGlkLWpzXCI7XG52YXIgRGlhbG9nQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbmZ1bmN0aW9uIHVzZURpYWxvZ0NvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KERpYWxvZ0NvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJba29iYWx0ZV06IGB1c2VEaWFsb2dDb250ZXh0YCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYERpYWxvZ2AgY29tcG9uZW50XCJcbiAgICApO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy1jbG9zZS1idXR0b24udHN4XG5mdW5jdGlvbiBEaWFsb2dDbG9zZUJ1dHRvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlRGlhbG9nQ29udGV4dCgpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXG4gICAgXCJhcmlhLWxhYmVsXCIsXG4gICAgXCJvbkNsaWNrXCJcbiAgXSk7XG4gIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUsIGxvY2FsLm9uQ2xpY2spO1xuICAgIGNvbnRleHQuY2xvc2UoKTtcbiAgfTtcbiAgcmV0dXJuIDxCdXR0b25Sb290XG4gICAgYXJpYS1sYWJlbD17bG9jYWxbXCJhcmlhLWxhYmVsXCJdIHx8IGNvbnRleHQudHJhbnNsYXRpb25zKCkuZGlzbWlzc31cbiAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgIHsuLi5vdGhlcnN9XG4gIC8+O1xufVxuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy1jb250ZW50LnRzeFxuaW1wb3J0IHtcbiAgY29udGFpbnMsXG4gIGZvY3VzV2l0aG91dFNjcm9sbGluZyxcbiAgbWVyZ2VEZWZhdWx0UHJvcHMsXG4gIG1lcmdlUmVmc1xufSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7XG4gIFNob3csXG4gIGNyZWF0ZUVmZmVjdCxcbiAgb25DbGVhbnVwLFxuICBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHMyXG59IGZyb20gXCJzb2xpZC1qc1wiO1xuaW1wb3J0IGNyZWF0ZVByZXZlbnRTY3JvbGwgZnJvbSBcInNvbGlkLXByZXZlbnQtc2Nyb2xsXCI7XG5mdW5jdGlvbiBEaWFsb2dDb250ZW50KHByb3BzKSB7XG4gIGxldCByZWY7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VEaWFsb2dDb250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoXG4gICAge1xuICAgICAgaWQ6IGNvbnRleHQuZ2VuZXJhdGVJZChcImNvbnRlbnRcIilcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMyKG1lcmdlZFByb3BzLCBbXG4gICAgXCJyZWZcIixcbiAgICBcIm9uT3BlbkF1dG9Gb2N1c1wiLFxuICAgIFwib25DbG9zZUF1dG9Gb2N1c1wiLFxuICAgIFwib25Qb2ludGVyRG93bk91dHNpZGVcIixcbiAgICBcIm9uRm9jdXNPdXRzaWRlXCIsXG4gICAgXCJvbkludGVyYWN0T3V0c2lkZVwiXG4gIF0pO1xuICBsZXQgaGFzSW50ZXJhY3RlZE91dHNpZGUgPSBmYWxzZTtcbiAgbGV0IGhhc1BvaW50ZXJEb3duT3V0c2lkZSA9IGZhbHNlO1xuICBjb25zdCBvblBvaW50ZXJEb3duT3V0c2lkZSA9IChlKSA9PiB7XG4gICAgbG9jYWwub25Qb2ludGVyRG93bk91dHNpZGU/LihlKTtcbiAgICBpZiAoY29udGV4dC5tb2RhbCgpICYmIGUuZGV0YWlsLmlzQ29udGV4dE1lbnUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uRm9jdXNPdXRzaWRlID0gKGUpID0+IHtcbiAgICBsb2NhbC5vbkZvY3VzT3V0c2lkZT8uKGUpO1xuICAgIGlmIChjb250ZXh0Lm1vZGFsKCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uSW50ZXJhY3RPdXRzaWRlID0gKGUpID0+IHtcbiAgICBsb2NhbC5vbkludGVyYWN0T3V0c2lkZT8uKGUpO1xuICAgIGlmIChjb250ZXh0Lm1vZGFsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGhhc0ludGVyYWN0ZWRPdXRzaWRlID0gdHJ1ZTtcbiAgICAgIGlmIChlLmRldGFpbC5vcmlnaW5hbEV2ZW50LnR5cGUgPT09IFwicG9pbnRlcmRvd25cIikge1xuICAgICAgICBoYXNQb2ludGVyRG93bk91dHNpZGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29udGFpbnMoY29udGV4dC50cmlnZ2VyUmVmKCksIGUudGFyZ2V0KSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAoZS5kZXRhaWwub3JpZ2luYWxFdmVudC50eXBlID09PSBcImZvY3VzaW5cIiAmJiBoYXNQb2ludGVyRG93bk91dHNpZGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uQ2xvc2VBdXRvRm9jdXMgPSAoZSkgPT4ge1xuICAgIGxvY2FsLm9uQ2xvc2VBdXRvRm9jdXM/LihlKTtcbiAgICBpZiAoY29udGV4dC5tb2RhbCgpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoY29udGV4dC50cmlnZ2VyUmVmKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICBpZiAoIWhhc0ludGVyYWN0ZWRPdXRzaWRlKSB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGNvbnRleHQudHJpZ2dlclJlZigpKTtcbiAgICAgICAgfVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBoYXNJbnRlcmFjdGVkT3V0c2lkZSA9IGZhbHNlO1xuICAgICAgaGFzUG9pbnRlckRvd25PdXRzaWRlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBjcmVhdGVIaWRlT3V0c2lkZSh7XG4gICAgaXNEaXNhYmxlZDogKCkgPT4gIShjb250ZXh0LmlzT3BlbigpICYmIGNvbnRleHQubW9kYWwoKSksXG4gICAgdGFyZ2V0czogKCkgPT4gcmVmID8gW3JlZl0gOiBbXVxuICB9KTtcbiAgY3JlYXRlUHJldmVudFNjcm9sbCh7XG4gICAgZWxlbWVudDogKCkgPT4gcmVmID8/IG51bGwsXG4gICAgZW5hYmxlZDogKCkgPT4gY29udGV4dC5pc09wZW4oKSAmJiBjb250ZXh0LnByZXZlbnRTY3JvbGwoKVxuICB9KTtcbiAgY3JlYXRlRm9jdXNTY29wZShcbiAgICB7XG4gICAgICB0cmFwRm9jdXM6ICgpID0+IGNvbnRleHQuaXNPcGVuKCkgJiYgY29udGV4dC5tb2RhbCgpLFxuICAgICAgb25Nb3VudEF1dG9Gb2N1czogbG9jYWwub25PcGVuQXV0b0ZvY3VzLFxuICAgICAgb25Vbm1vdW50QXV0b0ZvY3VzOiBvbkNsb3NlQXV0b0ZvY3VzXG4gICAgfSxcbiAgICAoKSA9PiByZWZcbiAgKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IG9uQ2xlYW51cChjb250ZXh0LnJlZ2lzdGVyQ29udGVudElkKG90aGVycy5pZCkpKTtcbiAgcmV0dXJuIDxTaG93IHdoZW49e2NvbnRleHQuY29udGVudFByZXNlbnQoKX0+PERpc21pc3NhYmxlTGF5ZXJcbiAgICByZWY9e21lcmdlUmVmcygoZWwpID0+IHtcbiAgICAgIGNvbnRleHQuc2V0Q29udGVudFJlZihlbCk7XG4gICAgICByZWYgPSBlbDtcbiAgICB9LCBsb2NhbC5yZWYpfVxuICAgIHJvbGU9XCJkaWFsb2dcIlxuICAgIHRhYkluZGV4PXstMX1cbiAgICBkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHM9e2NvbnRleHQubW9kYWwoKSAmJiBjb250ZXh0LmlzT3BlbigpfVxuICAgIGV4Y2x1ZGVkRWxlbWVudHM9e1tjb250ZXh0LnRyaWdnZXJSZWZdfVxuICAgIGFyaWEtbGFiZWxsZWRieT17Y29udGV4dC50aXRsZUlkKCl9XG4gICAgYXJpYS1kZXNjcmliZWRieT17Y29udGV4dC5kZXNjcmlwdGlvbklkKCl9XG4gICAgZGF0YS1leHBhbmRlZD17Y29udGV4dC5pc09wZW4oKSA/IFwiXCIgOiB2b2lkIDB9XG4gICAgZGF0YS1jbG9zZWQ9eyFjb250ZXh0LmlzT3BlbigpID8gXCJcIiA6IHZvaWQgMH1cbiAgICBvblBvaW50ZXJEb3duT3V0c2lkZT17b25Qb2ludGVyRG93bk91dHNpZGV9XG4gICAgb25Gb2N1c091dHNpZGU9e29uRm9jdXNPdXRzaWRlfVxuICAgIG9uSW50ZXJhY3RPdXRzaWRlPXtvbkludGVyYWN0T3V0c2lkZX1cbiAgICBvbkRpc21pc3M9e2NvbnRleHQuY2xvc2V9XG4gICAgey4uLm90aGVyc31cbiAgLz48L1Nob3c+O1xufVxuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy1kZXNjcmlwdGlvbi50c3hcbmltcG9ydCB7IG1lcmdlRGVmYXVsdFByb3BzIGFzIG1lcmdlRGVmYXVsdFByb3BzMiB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWZmZWN0IGFzIGNyZWF0ZUVmZmVjdDIsIG9uQ2xlYW51cCBhcyBvbkNsZWFudXAyLCBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHMzIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5mdW5jdGlvbiBEaWFsb2dEZXNjcmlwdGlvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlRGlhbG9nQ29udGV4dCgpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzMihcbiAgICB7XG4gICAgICBpZDogY29udGV4dC5nZW5lcmF0ZUlkKFwiZGVzY3JpcHRpb25cIilcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMzKG1lcmdlZFByb3BzLCBbXCJpZFwiXSk7XG4gIGNyZWF0ZUVmZmVjdDIoKCkgPT4gb25DbGVhbnVwMihjb250ZXh0LnJlZ2lzdGVyRGVzY3JpcHRpb25JZChsb2NhbC5pZCkpKTtcbiAgcmV0dXJuIDxQb2x5bW9ycGhpY1xuICAgIGFzPVwicFwiXG4gICAgaWQ9e2xvY2FsLmlkfVxuICAgIHsuLi5vdGhlcnN9XG4gIC8+O1xufVxuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy1vdmVybGF5LnRzeFxuaW1wb3J0IHsgY2FsbEhhbmRsZXIgYXMgY2FsbEhhbmRsZXIyLCBtZXJnZVJlZnMgYXMgbWVyZ2VSZWZzMiB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgU2hvdyBhcyBTaG93Miwgc3BsaXRQcm9wcyBhcyBzcGxpdFByb3BzNCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gRGlhbG9nT3ZlcmxheShwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlRGlhbG9nQ29udGV4dCgpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzNChwcm9wcywgW1xuICAgIFwicmVmXCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwib25Qb2ludGVyRG93blwiXG4gIF0pO1xuICBjb25zdCBvblBvaW50ZXJEb3duID0gKGUpID0+IHtcbiAgICBjYWxsSGFuZGxlcjIoZSwgbG9jYWwub25Qb2ludGVyRG93bik7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiA8U2hvdzIgd2hlbj17Y29udGV4dC5vdmVybGF5UHJlc2VudCgpfT48UG9seW1vcnBoaWNcbiAgICBhcz1cImRpdlwiXG4gICAgcmVmPXttZXJnZVJlZnMyKGNvbnRleHQuc2V0T3ZlcmxheVJlZiwgbG9jYWwucmVmKX1cbiAgICBzdHlsZT17eyBcInBvaW50ZXItZXZlbnRzXCI6IFwiYXV0b1wiLCAuLi5sb2NhbC5zdHlsZSB9fVxuICAgIGRhdGEtZXhwYW5kZWQ9e2NvbnRleHQuaXNPcGVuKCkgPyBcIlwiIDogdm9pZCAwfVxuICAgIGRhdGEtY2xvc2VkPXshY29udGV4dC5pc09wZW4oKSA/IFwiXCIgOiB2b2lkIDB9XG4gICAgb25Qb2ludGVyRG93bj17b25Qb2ludGVyRG93bn1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjwvU2hvdzI+O1xufVxuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy1wb3J0YWwudHN4XG5pbXBvcnQgeyBTaG93IGFzIFNob3czIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5pbXBvcnQgeyBQb3J0YWwgfSBmcm9tIFwic29saWQtanMvd2ViXCI7XG5mdW5jdGlvbiBEaWFsb2dQb3J0YWwocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZURpYWxvZ0NvbnRleHQoKTtcbiAgcmV0dXJuIDxTaG93MyB3aGVuPXtjb250ZXh0LmNvbnRlbnRQcmVzZW50KCkgfHwgY29udGV4dC5vdmVybGF5UHJlc2VudCgpfT48UG9ydGFsIHsuLi5wcm9wc30gLz48L1Nob3czPjtcbn1cblxuLy8gc3JjL2RpYWxvZy9kaWFsb2ctcm9vdC50c3hcbmltcG9ydCB7IGNyZWF0ZUdlbmVyYXRlSWQsIG1lcmdlRGVmYXVsdFByb3BzIGFzIG1lcmdlRGVmYXVsdFByb3BzMyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCBjcmVhdGVVbmlxdWVJZCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuaW1wb3J0IGNyZWF0ZVByZXNlbmNlIGZyb20gXCJzb2xpZC1wcmVzZW5jZVwiO1xuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy5pbnRsLnRzXG52YXIgRElBTE9HX0lOVExfVFJBTlNMQVRJT05TID0ge1xuICAvLyBgYXJpYS1sYWJlbGAgb2YgRGlhbG9nLkNsb3NlQnV0dG9uLlxuICBkaXNtaXNzOiBcIkRpc21pc3NcIlxufTtcblxuLy8gc3JjL2RpYWxvZy9kaWFsb2ctcm9vdC50c3hcbmZ1bmN0aW9uIERpYWxvZ1Jvb3QocHJvcHMpIHtcbiAgY29uc3QgZGVmYXVsdElkID0gYGRpYWxvZy0ke2NyZWF0ZVVuaXF1ZUlkKCl9YDtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wczMoXG4gICAge1xuICAgICAgaWQ6IGRlZmF1bHRJZCxcbiAgICAgIG1vZGFsOiB0cnVlLFxuICAgICAgdHJhbnNsYXRpb25zOiBESUFMT0dfSU5UTF9UUkFOU0xBVElPTlNcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtjb250ZW50SWQsIHNldENvbnRlbnRJZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW3RpdGxlSWQsIHNldFRpdGxlSWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtkZXNjcmlwdGlvbklkLCBzZXREZXNjcmlwdGlvbklkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbb3ZlcmxheVJlZiwgc2V0T3ZlcmxheVJlZl0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2NvbnRlbnRSZWYsIHNldENvbnRlbnRSZWZdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFt0cmlnZ2VyUmVmLCBzZXRUcmlnZ2VyUmVmXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBkaXNjbG9zdXJlU3RhdGUgPSBjcmVhdGVEaXNjbG9zdXJlU3RhdGUoe1xuICAgIG9wZW46ICgpID0+IG1lcmdlZFByb3BzLm9wZW4sXG4gICAgZGVmYXVsdE9wZW46ICgpID0+IG1lcmdlZFByb3BzLmRlZmF1bHRPcGVuLFxuICAgIG9uT3BlbkNoYW5nZTogKGlzT3BlbikgPT4gbWVyZ2VkUHJvcHMub25PcGVuQ2hhbmdlPy4oaXNPcGVuKVxuICB9KTtcbiAgY29uc3Qgc2hvdWxkTW91bnQgPSAoKSA9PiBtZXJnZWRQcm9wcy5mb3JjZU1vdW50IHx8IGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKTtcbiAgY29uc3QgeyBwcmVzZW50OiBvdmVybGF5UHJlc2VudCB9ID0gY3JlYXRlUHJlc2VuY2Uoe1xuICAgIHNob3c6IHNob3VsZE1vdW50LFxuICAgIGVsZW1lbnQ6ICgpID0+IG92ZXJsYXlSZWYoKSA/PyBudWxsXG4gIH0pO1xuICBjb25zdCB7IHByZXNlbnQ6IGNvbnRlbnRQcmVzZW50IH0gPSBjcmVhdGVQcmVzZW5jZSh7XG4gICAgc2hvdzogc2hvdWxkTW91bnQsXG4gICAgZWxlbWVudDogKCkgPT4gY29udGVudFJlZigpID8/IG51bGxcbiAgfSk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgdHJhbnNsYXRpb25zOiAoKSA9PiBtZXJnZWRQcm9wcy50cmFuc2xhdGlvbnMgPz8gRElBTE9HX0lOVExfVFJBTlNMQVRJT05TLFxuICAgIGlzT3BlbjogZGlzY2xvc3VyZVN0YXRlLmlzT3BlbixcbiAgICBtb2RhbDogKCkgPT4gbWVyZ2VkUHJvcHMubW9kYWwgPz8gdHJ1ZSxcbiAgICBwcmV2ZW50U2Nyb2xsOiAoKSA9PiBtZXJnZWRQcm9wcy5wcmV2ZW50U2Nyb2xsID8/IGNvbnRleHQubW9kYWwoKSxcbiAgICBjb250ZW50SWQsXG4gICAgdGl0bGVJZCxcbiAgICBkZXNjcmlwdGlvbklkLFxuICAgIHRyaWdnZXJSZWYsXG4gICAgb3ZlcmxheVJlZixcbiAgICBzZXRPdmVybGF5UmVmLFxuICAgIGNvbnRlbnRSZWYsXG4gICAgc2V0Q29udGVudFJlZixcbiAgICBvdmVybGF5UHJlc2VudCxcbiAgICBjb250ZW50UHJlc2VudCxcbiAgICBjbG9zZTogZGlzY2xvc3VyZVN0YXRlLmNsb3NlLFxuICAgIHRvZ2dsZTogZGlzY2xvc3VyZVN0YXRlLnRvZ2dsZSxcbiAgICBzZXRUcmlnZ2VyUmVmLFxuICAgIGdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQoKCkgPT4gbWVyZ2VkUHJvcHMuaWQpLFxuICAgIHJlZ2lzdGVyQ29udGVudElkOiBjcmVhdGVSZWdpc3RlcklkKHNldENvbnRlbnRJZCksXG4gICAgcmVnaXN0ZXJUaXRsZUlkOiBjcmVhdGVSZWdpc3RlcklkKHNldFRpdGxlSWQpLFxuICAgIHJlZ2lzdGVyRGVzY3JpcHRpb25JZDogY3JlYXRlUmVnaXN0ZXJJZChzZXREZXNjcmlwdGlvbklkKVxuICB9O1xuICByZXR1cm4gPERpYWxvZ0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PnttZXJnZWRQcm9wcy5jaGlsZHJlbn08L0RpYWxvZ0NvbnRleHQuUHJvdmlkZXI+O1xufVxuXG4vLyBzcmMvZGlhbG9nL2RpYWxvZy10aXRsZS50c3hcbmltcG9ydCB7IG1lcmdlRGVmYXVsdFByb3BzIGFzIG1lcmdlRGVmYXVsdFByb3BzNCB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWZmZWN0IGFzIGNyZWF0ZUVmZmVjdDMsIG9uQ2xlYW51cCBhcyBvbkNsZWFudXAzLCBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHM1IH0gZnJvbSBcInNvbGlkLWpzXCI7XG5mdW5jdGlvbiBEaWFsb2dUaXRsZShwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlRGlhbG9nQ29udGV4dCgpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzNChcbiAgICB7XG4gICAgICBpZDogY29udGV4dC5nZW5lcmF0ZUlkKFwidGl0bGVcIilcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHM1KG1lcmdlZFByb3BzLCBbXCJpZFwiXSk7XG4gIGNyZWF0ZUVmZmVjdDMoKCkgPT4gb25DbGVhbnVwMyhjb250ZXh0LnJlZ2lzdGVyVGl0bGVJZChsb2NhbC5pZCkpKTtcbiAgcmV0dXJuIDxQb2x5bW9ycGhpYyBhcz1cImgyXCIgaWQ9e2xvY2FsLmlkfSB7Li4ub3RoZXJzfSAvPjtcbn1cblxuLy8gc3JjL2RpYWxvZy9kaWFsb2ctdHJpZ2dlci50c3hcbmltcG9ydCB7IGNhbGxIYW5kbGVyIGFzIGNhbGxIYW5kbGVyMywgbWVyZ2VSZWZzIGFzIG1lcmdlUmVmczMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IHNwbGl0UHJvcHMgYXMgc3BsaXRQcm9wczYgfSBmcm9tIFwic29saWQtanNcIjtcbmZ1bmN0aW9uIERpYWxvZ1RyaWdnZXIocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZURpYWxvZ0NvbnRleHQoKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wczYocHJvcHMsIFtcbiAgICBcInJlZlwiLFxuICAgIFwib25DbGlja1wiXG4gIF0pO1xuICBjb25zdCBvbkNsaWNrID0gKGUpID0+IHtcbiAgICBjYWxsSGFuZGxlcjMoZSwgbG9jYWwub25DbGljayk7XG4gICAgY29udGV4dC50b2dnbGUoKTtcbiAgfTtcbiAgcmV0dXJuIDxCdXR0b25Sb290XG4gICAgcmVmPXttZXJnZVJlZnMzKGNvbnRleHQuc2V0VHJpZ2dlclJlZiwgbG9jYWwucmVmKX1cbiAgICBhcmlhLWhhc3BvcHVwPVwiZGlhbG9nXCJcbiAgICBhcmlhLWV4cGFuZGVkPXtjb250ZXh0LmlzT3BlbigpfVxuICAgIGFyaWEtY29udHJvbHM9e2NvbnRleHQuaXNPcGVuKCkgPyBjb250ZXh0LmNvbnRlbnRJZCgpIDogdm9pZCAwfVxuICAgIGRhdGEtZXhwYW5kZWQ9e2NvbnRleHQuaXNPcGVuKCkgPyBcIlwiIDogdm9pZCAwfVxuICAgIGRhdGEtY2xvc2VkPXshY29udGV4dC5pc09wZW4oKSA/IFwiXCIgOiB2b2lkIDB9XG4gICAgb25DbGljaz17b25DbGlja31cbiAgICB7Li4ub3RoZXJzfVxuICAvPjtcbn1cblxuLy8gc3JjL2RpYWxvZy9pbmRleC50c3hcbnZhciBEaWFsb2cgPSBPYmplY3QuYXNzaWduKERpYWxvZ1Jvb3QsIHtcbiAgQ2xvc2VCdXR0b246IERpYWxvZ0Nsb3NlQnV0dG9uLFxuICBDb250ZW50OiBEaWFsb2dDb250ZW50LFxuICBEZXNjcmlwdGlvbjogRGlhbG9nRGVzY3JpcHRpb24sXG4gIE92ZXJsYXk6IERpYWxvZ092ZXJsYXksXG4gIFBvcnRhbDogRGlhbG9nUG9ydGFsLFxuICBUaXRsZTogRGlhbG9nVGl0bGUsXG4gIFRyaWdnZXI6IERpYWxvZ1RyaWdnZXJcbn0pO1xuXG5leHBvcnQge1xuICBEaWFsb2dDbG9zZUJ1dHRvbixcbiAgRGlhbG9nQ29udGVudCxcbiAgRGlhbG9nRGVzY3JpcHRpb24sXG4gIERpYWxvZ092ZXJsYXksXG4gIERpYWxvZ1BvcnRhbCxcbiAgRGlhbG9nUm9vdCxcbiAgRGlhbG9nVGl0bGUsXG4gIERpYWxvZ1RyaWdnZXIsXG4gIERpYWxvZyxcbiAgZGlhbG9nX2V4cG9ydHNcbn07XG4iLCJpbXBvcnQgeyBDb21wb25lbnRQcm9wcywgc3BsaXRQcm9wcyB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyB0d01lcmdlIH0gZnJvbSBcInRhaWx3aW5kLW1lcmdlXCI7XHJcblxyXG50eXBlIFZhcmlhbnQgPSBcImRlZmF1bHRcIiB8IFwiZ2hvc3RcIiB8IFwib3V0bGluZVwiIHwgXCJhY2NlbnRcIiB8IFwiZGVzdHJ1Y3RpdmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBidXR0b25WYXJpYW50czogUmVjb3JkPFZhcmlhbnQsIHN0cmluZz4gPSB7XHJcbiAgZGVmYXVsdDpcclxuICAgIFwiaW5saW5lLWZsZXggaC1bdmFyKC0taW5wdXQtaGVpZ2h0KV0gY3Vyc29yLVt2YXIoLS1jdXJzb3IpXSBzZWxlY3Qtbm9uZSBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgd2hpdGVzcGFjZS1ub3dyYXAgcm91bmRlZC1idXR0b24gYm9yZGVyLTAgcC1idXR0b24gdGV4dC1bbGVuZ3RoOnZhcigtLWZvbnQtdWktc21hbGwpXSBmb250LVt2YXIoLS1pbnB1dC1mb250LXdlaWdodCldIHRleHQtbm9ybWFsIG91dGxpbmUtbm9uZSBiZy1pbnRlcmFjdGl2ZS1ub3JtYWwgaG92ZXI6YmctaW50ZXJhY3RpdmUtaG92ZXIgc2hhZG93LVsndmFyKC0taW5wdXQtc2hhZG93KSddXCIsXHJcbiAgZ2hvc3Q6IFwiYmctdHJhbnNwYXJlbnQgc2hhZG93LW5vbmVcIixcclxuICAvLyBUT0RPIGZpbmQgYmV0dGVyIHdpZHRoIGhlcmVcclxuICBvdXRsaW5lOlxyXG4gICAgXCJiZy10cmFuc3BhcmVudCBzaGFkb3ctbm9uZSBib3JkZXItYm9yZGVyIGJvcmRlci1bbGVuZ3RoOnZhcigtLXByb21wdC1ib3JkZXItd2lkdGgpXVwiLFxyXG4gIGFjY2VudDpcclxuICAgIFwiYmctaW50ZXJhY3RpdmUtYWNjZW50IHRleHQtb24tYWNjZW50IGhvdmVyOmJnLWludGVyYWN0aXZlLWFjY2VudC1ob3ZlciBob3Zlcjp0ZXh0LWFjY2VudC1ob3ZlclwiLFxyXG4gIGRlc3RydWN0aXZlOiBcImJnLWVycm9yIGhvdmVyOmJnLWVycm9yIGhvdmVyOm9wYWNpdHktNzAgdGV4dC1vbi1lcnJvclwiLFxyXG59O1xyXG5cclxuLy8gY29uc3QgY2xhc3MgPSBcIlwiXHJcblxyXG50eXBlIEJ1dHRvbkxvY2FsUHJvcHMgPSB7XHJcbiAgdmFyaWFudD86IFZhcmlhbnQ7XHJcbn07XHJcbmV4cG9ydCB0eXBlIEJ1dHRvblByb3BzID0gQnV0dG9uTG9jYWxQcm9wcyAmIENvbXBvbmVudFByb3BzPFwiYnV0dG9uXCI+O1xyXG5leHBvcnQgY29uc3QgQnV0dG9uID0gKHByb3BzOiBCdXR0b25Qcm9wcykgPT4ge1xyXG4gIGNvbnN0IFtsb2NhbCwgcmVzdF0gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJ2YXJpYW50XCIsIFwiY2xhc3NcIl0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGJ1dHRvblxyXG4gICAgICB7Li4ucmVzdH1cclxuICAgICAgY2xhc3M9e3R3TWVyZ2UoXHJcbiAgICAgICAgYnV0dG9uVmFyaWFudHNbXCJkZWZhdWx0XCJdLFxyXG4gICAgICAgIGxvY2FsLnZhcmlhbnQgJiYgYnV0dG9uVmFyaWFudHNbbG9jYWwudmFyaWFudF0sXHJcbiAgICAgICAgbG9jYWwuY2xhc3MsXHJcbiAgICAgICl9XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyBpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYnMvY25cIjtcclxuLy8gaW1wb3J0IHR5cGUgeyBCdXR0b25Sb290UHJvcHMgfSBmcm9tIFwiQGtvYmFsdGUvY29yZS9idXR0b25cIjtcclxuLy8gaW1wb3J0IHsgQnV0dG9uIGFzIEJ1dHRvblByaW1pdGl2ZSB9IGZyb20gXCJAa29iYWx0ZS9jb3JlL2J1dHRvblwiO1xyXG4vLyBpbXBvcnQgdHlwZSB7IFBvbHltb3JwaGljUHJvcHMgfSBmcm9tIFwiQGtvYmFsdGUvY29yZS9wb2x5bW9ycGhpY1wiO1xyXG4vLyBpbXBvcnQgdHlwZSB7IFZhcmlhbnRQcm9wcyB9IGZyb20gXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjtcclxuLy8gaW1wb3J0IHsgY3ZhIH0gZnJvbSBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiO1xyXG4vLyBpbXBvcnQgdHlwZSB7IFZhbGlkQ29tcG9uZW50IH0gZnJvbSBcInNvbGlkLWpzXCI7XHJcbi8vIGltcG9ydCB7IHNwbGl0UHJvcHMgfSBmcm9tIFwic29saWQtanNcIjtcclxuXHJcbi8vIGV4cG9ydCBjb25zdCBidXR0b25WYXJpYW50cyA9IGN2YShcclxuLy8gXHRcImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLW1kIHRleHQtc20gZm9udC1tZWRpdW0gdHJhbnNpdGlvbi1bY29sb3IsYmFja2dyb3VuZC1jb2xvcixib3gtc2hhZG93XSBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctWzEuNXB4XSBmb2N1cy12aXNpYmxlOnJpbmctcmluZyBkaXNhYmxlZDpwb2ludGVyLWV2ZW50cy1ub25lIGRpc2FibGVkOm9wYWNpdHktNTBcIixcclxuLy8gXHR7XHJcbi8vIFx0XHR2YXJpYW50czoge1xyXG4vLyBcdFx0XHR2YXJpYW50OiB7XHJcbi8vIFx0XHRcdFx0ZGVmYXVsdDpcclxuLy8gXHRcdFx0XHRcdFwiYmctcHJpbWFyeSB0ZXh0LXByaW1hcnktZm9yZWdyb3VuZCBzaGFkb3cgaG92ZXI6YmctcHJpbWFyeS85MFwiLFxyXG4vLyBcdFx0XHRcdGRlc3RydWN0aXZlOlxyXG4vLyBcdFx0XHRcdFx0XCJiZy1kZXN0cnVjdGl2ZSB0ZXh0LWRlc3RydWN0aXZlLWZvcmVncm91bmQgc2hhZG93LXNtIGhvdmVyOmJnLWRlc3RydWN0aXZlLzkwXCIsXHJcbi8vIFx0XHRcdFx0b3V0bGluZTpcclxuLy8gXHRcdFx0XHRcdFwiYm9yZGVyIGJvcmRlci1pbnB1dCBiZy1iYWNrZ3JvdW5kIHNoYWRvdy1zbSBob3ZlcjpiZy1hY2NlbnQgaG92ZXI6dGV4dC1hY2NlbnQtZm9yZWdyb3VuZFwiLFxyXG4vLyBcdFx0XHRcdHNlY29uZGFyeTpcclxuLy8gXHRcdFx0XHRcdFwiYmctc2Vjb25kYXJ5IHRleHQtc2Vjb25kYXJ5LWZvcmVncm91bmQgc2hhZG93LXNtIGhvdmVyOmJnLXNlY29uZGFyeS84MFwiLFxyXG4vLyBcdFx0XHRcdGdob3N0OiBcImhvdmVyOmJnLWFjY2VudCBob3Zlcjp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXHJcbi8vIFx0XHRcdFx0bGluazogXCJ0ZXh0LXByaW1hcnkgdW5kZXJsaW5lLW9mZnNldC00IGhvdmVyOnVuZGVybGluZVwiLFxyXG4vLyBcdFx0XHR9LFxyXG4vLyBcdFx0XHRzaXplOiB7XHJcbi8vIFx0XHRcdFx0ZGVmYXVsdDogXCJoLTkgcHgtNCBweS0yXCIsXHJcbi8vIFx0XHRcdFx0c206IFwiaC04IHJvdW5kZWQtbWQgcHgtMyB0ZXh0LXhzXCIsXHJcbi8vIFx0XHRcdFx0bGc6IFwiaC0xMCByb3VuZGVkLW1kIHB4LThcIixcclxuLy8gXHRcdFx0XHRpY29uOiBcImgtOSB3LTlcIixcclxuLy8gXHRcdFx0fSxcclxuLy8gXHRcdH0sXHJcbi8vIFx0XHRkZWZhdWx0VmFyaWFudHM6IHtcclxuLy8gXHRcdFx0dmFyaWFudDogXCJkZWZhdWx0XCIsXHJcbi8vIFx0XHRcdHNpemU6IFwiZGVmYXVsdFwiLFxyXG4vLyBcdFx0fSxcclxuLy8gXHR9LFxyXG4vLyApO1xyXG5cclxuLy8gdHlwZSBidXR0b25Qcm9wczxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImJ1dHRvblwiPiA9IEJ1dHRvblJvb3RQcm9wczxUPiAmXHJcbi8vIFx0VmFyaWFudFByb3BzPHR5cGVvZiBidXR0b25WYXJpYW50cz4gJiB7XHJcbi8vIFx0XHRjbGFzcz86IHN0cmluZztcclxuLy8gXHR9O1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IEJ1dHRvbiA9IDxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImJ1dHRvblwiPihcclxuLy8gXHRwcm9wczogUG9seW1vcnBoaWNQcm9wczxULCBidXR0b25Qcm9wczxUPj4sXHJcbi8vICkgPT4ge1xyXG4vLyBcdGNvbnN0IFtsb2NhbCwgcmVzdF0gPSBzcGxpdFByb3BzKHByb3BzIGFzIGJ1dHRvblByb3BzLCBbXHJcbi8vIFx0XHRcImNsYXNzXCIsXHJcbi8vIFx0XHRcInZhcmlhbnRcIixcclxuLy8gXHRcdFwic2l6ZVwiLFxyXG4vLyBcdF0pO1xyXG5cclxuLy8gXHRyZXR1cm4gKFxyXG4vLyBcdFx0PEJ1dHRvblByaW1pdGl2ZVxyXG4vLyBcdFx0XHRjbGFzcz17Y24oXHJcbi8vIFx0XHRcdFx0YnV0dG9uVmFyaWFudHMoe1xyXG4vLyBcdFx0XHRcdFx0c2l6ZTogbG9jYWwuc2l6ZSxcclxuLy8gXHRcdFx0XHRcdHZhcmlhbnQ6IGxvY2FsLnZhcmlhbnQsXHJcbi8vIFx0XHRcdFx0fSksXHJcbi8vIFx0XHRcdFx0bG9jYWwuY2xhc3MsXHJcbi8vIFx0XHRcdCl9XHJcbi8vIFx0XHRcdHsuLi5yZXN0fVxyXG4vLyBcdFx0Lz5cclxuLy8gXHQpO1xyXG4vLyB9O1xyXG4iLCJpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYnMvY25cIjtcclxuaW1wb3J0IHR5cGUge1xyXG4gIERpYWxvZ0NvbnRlbnRQcm9wcyxcclxuICBEaWFsb2dEZXNjcmlwdGlvblByb3BzLFxyXG4gIERpYWxvZ1RpdGxlUHJvcHMsXHJcbiAgRGlhbG9nQ2xvc2VCdXR0b25Qcm9wcyxcclxufSBmcm9tIFwiQGtvYmFsdGUvY29yZS9kaWFsb2dcIjtcclxuaW1wb3J0IHsgRGlhbG9nIGFzIERpYWxvZ1ByaW1pdGl2ZSB9IGZyb20gXCJAa29iYWx0ZS9jb3JlL2RpYWxvZ1wiO1xyXG5pbXBvcnQgdHlwZSB7IFBvbHltb3JwaGljUHJvcHMgfSBmcm9tIFwiQGtvYmFsdGUvY29yZS9wb2x5bW9ycGhpY1wiO1xyXG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudFByb3BzLCBQYXJlbnRQcm9wcywgVmFsaWRDb21wb25lbnQgfSBmcm9tIFwic29saWQtanNcIjtcclxuaW1wb3J0IHsgc3BsaXRQcm9wcyB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyBidXR0b25WYXJpYW50cyB9IGZyb20gXCIuL2J1dHRvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IERpYWxvZyA9IERpYWxvZ1ByaW1pdGl2ZTtcclxuZXhwb3J0IGNvbnN0IERpYWxvZ1RyaWdnZXIgPSBEaWFsb2dQcmltaXRpdmUuVHJpZ2dlcjtcclxuXHJcbnR5cGUgZGlhbG9nQ2xvc2VQcm9wczxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImJ1dHRvblwiPiA9IFBvbHltb3JwaGljUHJvcHM8XHJcbiAgVCxcclxuICBEaWFsb2dDbG9zZUJ1dHRvblByb3BzPFQ+XHJcbj47XHJcblxyXG5leHBvcnQgY29uc3QgRGlhbG9nQ2xvc2UgPSAocHJvcHM6IGRpYWxvZ0Nsb3NlUHJvcHMpID0+IHtcclxuICBjb25zdCBbbG9jYWwsIHJlc3RdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wiY2xhc3NcIl0pO1xyXG4gIHJldHVybiAoXHJcbiAgICA8RGlhbG9nUHJpbWl0aXZlLkNsb3NlQnV0dG9uXHJcbiAgICAgIHsuLi5yZXN0fVxyXG4gICAgICBjbGFzcz17Y24oYnV0dG9uVmFyaWFudHMuZGVmYXVsdCwgbG9jYWwuY2xhc3MpfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5leHBvcnQgY29uc3QgRGlhbG9nQ2xvc2VYID0gKCkgPT4gKFxyXG4gIDxEaWFsb2dQcmltaXRpdmUuQ2xvc2VCdXR0b24gY2xhc3M9XCJjbGlja2FibGUtaWNvbiBhYnNvbHV0ZSByaWdodC00IHRvcC00IHJvdW5kZWQtc20gcC0xIG9wYWNpdHktNzAgcmluZy1vZmZzZXQtYmFja2dyb3VuZCB0cmFuc2l0aW9uLVtvcGFjaXR5LGJveC1zaGFkb3ddIGhvdmVyOm9wYWNpdHktMTAwIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLVsxLjVweF0gZm9jdXM6cmluZy1zZWxlY3Rpb24gZm9jdXM6cmluZy1vZmZzZXQtMiBkaXNhYmxlZDpwb2ludGVyLWV2ZW50cy1ub25lXCI+XHJcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgY2xhc3M9XCJoLTQgdy00XCI+XHJcbiAgICAgIDxwYXRoXHJcbiAgICAgICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXHJcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXHJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxyXG4gICAgICAgIHN0cm9rZS13aWR0aD1cIjJcIlxyXG4gICAgICAgIGQ9XCJNMTggNkw2IDE4TTYgNmwxMiAxMlwiXHJcbiAgICAgIC8+XHJcbiAgICAgIHsvKiA8dGl0bGU+Q2xvc2U8L3RpdGxlPiAqL31cclxuICAgIDwvc3ZnPlxyXG4gIDwvRGlhbG9nUHJpbWl0aXZlLkNsb3NlQnV0dG9uPlxyXG4pO1xyXG5cclxuLy8gb2JzaWRpYW4gbmF0aXZlbHkgZG9lc24ndCB1c2UgYW5pbWF0aW9ucyBmb3IgZGlhbG9nc1xyXG4vLyBidXQgSSBtaWdodCB3YW50IHRvIHVzZSB0aGlzIGF0IHNvbWUgcG9pbnRcclxuZXhwb3J0IGNvbnN0IGFuaW1hdGVPdmVybGF5Q2xhc3MgPVxyXG4gIFwiZGF0YS1bZXhwYW5kZWRdOmFuaW1hdGUtaW4gZGF0YS1bY2xvc2VkXTphbmltYXRlLW91dCBkYXRhLVtjbG9zZWRdOmZhZGUtb3V0LTAgZGF0YS1bZXhwYW5kZWRdOmZhZGUtaW4tMFwiO1xyXG5leHBvcnQgY29uc3QgYW5pbWF0ZUNvbnRlbnRDbGFzcyA9XHJcbiAgXCJkYXRhLVtjbG9zZWRdOmR1cmF0aW9uLTIwMCBkYXRhLVtleHBhbmRlZF06ZHVyYXRpb24tMjAwIGRhdGEtW2V4cGFuZGVkXTphbmltYXRlLWluIGRhdGEtW2Nsb3NlZF06YW5pbWF0ZS1vdXQgZGF0YS1bY2xvc2VkXTpmYWRlLW91dC0wIGRhdGEtW2V4cGFuZGVkXTpmYWRlLWluLTAgZGF0YS1bY2xvc2VkXTp6b29tLW91dC05NSBkYXRhLVtleHBhbmRlZF06em9vbS1pbi05NSBkYXRhLVtjbG9zZWRdOnNsaWRlLW91dC10by1sZWZ0LTEvMiBkYXRhLVtjbG9zZWRdOnNsaWRlLW91dC10by10b3AtWzQ4JV0gZGF0YS1bZXhwYW5kZWRdOnNsaWRlLWluLWZyb20tbGVmdC0xLzIgZGF0YS1bZXhwYW5kZWRdOnNsaWRlLWluLWZyb20tdG9wLVs0OCVdXCI7XHJcblxyXG50eXBlIGRpYWxvZ0NvbnRlbnRQcm9wczxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImRpdlwiPiA9IFBhcmVudFByb3BzPFxyXG4gIERpYWxvZ0NvbnRlbnRQcm9wczxUPiAmIHtcclxuICAgIGNsYXNzPzogc3RyaW5nO1xyXG4gIH1cclxuPjtcclxuXHJcbmV4cG9ydCBjb25zdCBEaWFsb2dDb250ZW50ID0gPFQgZXh0ZW5kcyBWYWxpZENvbXBvbmVudCA9IFwiZGl2XCI+KFxyXG4gIHByb3BzOiBQb2x5bW9ycGhpY1Byb3BzPFQsIGRpYWxvZ0NvbnRlbnRQcm9wczxUPj4sXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtsb2NhbCwgcmVzdF0gPSBzcGxpdFByb3BzKHByb3BzIGFzIGRpYWxvZ0NvbnRlbnRQcm9wcywgW1xyXG4gICAgXCJjbGFzc1wiLFxyXG4gICAgXCJjaGlsZHJlblwiLFxyXG4gIF0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPERpYWxvZ1ByaW1pdGl2ZS5Qb3J0YWw+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJ0d2Nzc1wiPlxyXG4gICAgICAgIDxEaWFsb2dQcmltaXRpdmUuT3ZlcmxheVxyXG4gICAgICAgICAgY2xhc3M9e2NuKFwibW9kYWwtYmcgei01MCBvcGFjaXR5LTg1XCIpfVxyXG4gICAgICAgICAgey4uLnJlc3R9XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8RGlhbG9nUHJpbWl0aXZlLkNvbnRlbnRcclxuICAgICAgICAgIGNsYXNzPXtjbihcclxuICAgICAgICAgICAgXCJwcm9tcHQgbGVmdC0xLzIgei01MCB3LWZ1bGwgLXRyYW5zbGF0ZS14LTEvMiBnYXAtNCBib3JkZXItW2xlbmd0aDp2YXIoLS1wcm9tcHQtYm9yZGVyLXdpZHRoKV0gYm9yZGVyLW1vZGFsIHAtNlwiLFxyXG4gICAgICAgICAgICBsb2NhbC5jbGFzcyxcclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICB7Li4ucmVzdH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7bG9jYWwuY2hpbGRyZW59XHJcbiAgICAgICAgICA8RGlhbG9nQ2xvc2VYIC8+XHJcbiAgICAgICAgPC9EaWFsb2dQcmltaXRpdmUuQ29udGVudD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L0RpYWxvZ1ByaW1pdGl2ZS5Qb3J0YWw+XHJcbiAgKTtcclxufTtcclxuXHJcbnR5cGUgZGlhbG9nVGl0bGVQcm9wczxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImgyXCI+ID0gRGlhbG9nVGl0bGVQcm9wczxUPiAmIHtcclxuICBjbGFzcz86IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBEaWFsb2dUaXRsZSA9IDxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImgyXCI+KFxyXG4gIHByb3BzOiBQb2x5bW9ycGhpY1Byb3BzPFQsIGRpYWxvZ1RpdGxlUHJvcHM8VD4+LFxyXG4pID0+IHtcclxuICBjb25zdCBbbG9jYWwsIHJlc3RdID0gc3BsaXRQcm9wcyhwcm9wcyBhcyBkaWFsb2dUaXRsZVByb3BzLCBbXCJjbGFzc1wiXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8RGlhbG9nUHJpbWl0aXZlLlRpdGxlXHJcbiAgICAgIGNsYXNzPXtjbihcInRleHQtZm9yZWdyb3VuZCBtLTAgdGV4dC1sZyBmb250LXNlbWlib2xkXCIsIGxvY2FsLmNsYXNzKX1cclxuICAgICAgey4uLnJlc3R9XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG50eXBlIGRpYWxvZ0Rlc2NyaXB0aW9uUHJvcHM8VCBleHRlbmRzIFZhbGlkQ29tcG9uZW50ID0gXCJwXCI+ID1cclxuICBEaWFsb2dEZXNjcmlwdGlvblByb3BzPFQ+ICYge1xyXG4gICAgY2xhc3M/OiBzdHJpbmc7XHJcbiAgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBEaWFsb2dEZXNjcmlwdGlvbiA9IDxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcInBcIj4oXHJcbiAgcHJvcHM6IFBvbHltb3JwaGljUHJvcHM8VCwgZGlhbG9nRGVzY3JpcHRpb25Qcm9wczxUPj4sXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtsb2NhbCwgcmVzdF0gPSBzcGxpdFByb3BzKHByb3BzIGFzIGRpYWxvZ0Rlc2NyaXB0aW9uUHJvcHMsIFtcImNsYXNzXCJdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxEaWFsb2dQcmltaXRpdmUuRGVzY3JpcHRpb25cclxuICAgICAgY2xhc3M9e2NuKFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG0tMCB0ZXh0LXNtXCIsIGxvY2FsLmNsYXNzKX1cclxuICAgICAgey4uLnJlc3R9XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgRGlhbG9nSGVhZGVyID0gKHByb3BzOiBDb21wb25lbnRQcm9wczxcImRpdlwiPikgPT4ge1xyXG4gIGNvbnN0IFtsb2NhbCwgcmVzdF0gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJjbGFzc1wiXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzPXtjbihcclxuICAgICAgICBcImZsZXggZmxleC1jb2wgc3BhY2UteS0yIHRleHQtY2VudGVyIHNtOnRleHQtbGVmdFwiLFxyXG4gICAgICAgIGxvY2FsLmNsYXNzLFxyXG4gICAgICApfVxyXG4gICAgICB7Li4ucmVzdH1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBEaWFsb2dGb290ZXIgPSAocHJvcHM6IENvbXBvbmVudFByb3BzPFwiZGl2XCI+KSA9PiB7XHJcbiAgY29uc3QgW2xvY2FsLCByZXN0XSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcImNsYXNzXCJdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3M9e2NuKFxyXG4gICAgICAgIFwiZmxleCBmbGV4LWNvbC1yZXZlcnNlIHNtOmZsZXgtcm93IHNtOmp1c3RpZnktZW5kIHNtOnNwYWNlLXgtMlwiLFxyXG4gICAgICAgIGxvY2FsLmNsYXNzLFxyXG4gICAgICApfVxyXG4gICAgICB7Li4ucmVzdH1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwic29saWQtanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBFeHRlcm5hbExpbmsgPSAocHJvcHM6IENvbXBvbmVudFByb3BzPFwiYVwiPikgPT4gKFxyXG4gIDw+XHJcbiAgICA8c3BhbiBjbGFzcz1cImNtLWxpbmtcIj5cclxuICAgICAgPGEgey4uLnByb3BzfSBjbGFzcz1cInRleHQtYWNjZW50IHVuZGVybGluZSBob3Zlcjp0ZXh0LWFjY2VudC1ob3ZlclwiPjwvYT5cclxuICAgIDwvc3Bhbj5cclxuICAgIDxzcGFuIGNsYXNzPVwiZXh0ZXJuYWwtbGlua1wiPjwvc3Bhbj5cclxuICA8Lz5cclxuKTtcclxuIiwiLyoqXG4qIEBsaWNlbnNlIGx1Y2lkZS1zb2xpZCB2MC40MTIuMCAtIElTQ1xuKlxuKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4qL1xuXG4vLyBzcmMvaWNvbnMvbWludXMudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBkOiBcIk01IDEyaDE0XCIsIGtleTogXCIxYXlzMGhcIiB9XV07XG52YXIgTWludXMgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIk1pbnVzXCIgaWNvbk5vZGU9e2ljb25Ob2RlfSAvPjtcbnZhciBtaW51c19kZWZhdWx0ID0gTWludXM7XG5leHBvcnQge1xuICBtaW51c19kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taW51cy5qc3gubWFwXG4iLCIvKipcbiogQGxpY2Vuc2UgbHVjaWRlLXNvbGlkIHYwLjQxMi4wIC0gSVNDXG4qXG4qIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiovXG5cbi8vIHNyYy9pY29ucy9wYXJlbnRoZXNlcy50c3hcbmltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG52YXIgaWNvbk5vZGUgPSBbXG4gIFtcInBhdGhcIiwgeyBkOiBcIk04IDIxcy00LTMtNC05IDQtOSA0LTlcIiwga2V5OiBcInV0bzl1ZFwiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMTYgM3M0IDMgNCA5LTQgOS00IDlcIiwga2V5OiBcIjR3MnZzcVwiIH1dXG5dO1xudmFyIFBhcmVudGhlc2VzID0gKHByb3BzKSA9PiA8SWNvbiB7Li4ucHJvcHN9IG5hbWU9XCJQYXJlbnRoZXNlc1wiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgcGFyZW50aGVzZXNfZGVmYXVsdCA9IFBhcmVudGhlc2VzO1xuZXhwb3J0IHtcbiAgcGFyZW50aGVzZXNfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyZW50aGVzZXMuanN4Lm1hcFxuIiwiaW1wb3J0IHsgdXBkYXRlTWV0YWRhdGFQcm9wZXJ0eSwgdG9OdW1iZXIgfSBmcm9tIFwiQC9saWIvdXRpbFwiO1xyXG5pbXBvcnQgRGF0YUVkaXQgZnJvbSBcIkAvbWFpblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTaWduYWwsIFNob3cgfSBmcm9tIFwic29saWQtanNcIjtcclxuaW1wb3J0IHsgVGFibGVEYXRhRWRpdFByb3BzLCBUYWJsZURhdGFQcm9wcyB9IGZyb20gXCIuLi9UYWJsZS9UYWJsZURhdGFcIjtcclxuaW1wb3J0IHtcclxuICBEaWFsb2csXHJcbiAgRGlhbG9nVHJpZ2dlcixcclxuICBEaWFsb2dDb250ZW50LFxyXG4gIERpYWxvZ0hlYWRlcixcclxuICBEaWFsb2dUaXRsZSxcclxuICBEaWFsb2dEZXNjcmlwdGlvbixcclxuICBEaWFsb2dGb290ZXIsXHJcbn0gZnJvbSBcIi4uL3VpL2RpYWxvZ1wiO1xyXG5pbXBvcnQgeyBFeHRlcm5hbExpbmsgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2V4dGVybmFsLWxpbmtcIjtcclxuaW1wb3J0IE1pbnVzIGZyb20gXCJsdWNpZGUtc29saWQvaWNvbnMvTWludXNcIjtcclxuaW1wb3J0IFBhcmVudGhlc2VzIGZyb20gXCJsdWNpZGUtc29saWQvaWNvbnMvUGFyZW50aGVzZXNcIjtcclxuaW1wb3J0IFBsdXMgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9QbHVzXCI7XHJcbmltcG9ydCB7IGF1dG9mb2N1cyB9IGZyb20gXCJAc29saWQtcHJpbWl0aXZlcy9hdXRvZm9jdXNcIjtcclxuaW1wb3J0IHsgdXNlQ29kZUJsb2NrIH0gZnJvbSBcIkAvaG9va3MvdXNlRGF0YUVkaXRcIjtcclxuLy8gVG8gcHJldmVudCB0cmVlc2hha2luZ1xyXG5hdXRvZm9jdXM7XHJcblxyXG5leHBvcnQgY29uc3QgTnVtYmVySW5wdXQgPSAocHJvcHM6IFRhYmxlRGF0YUVkaXRQcm9wcykgPT4ge1xyXG4gIGNvbnN0IFtzaXplLCBzZXRTaXplXSA9IGNyZWF0ZVNpZ25hbChwcm9wcy52YWx1ZT8udG9TdHJpbmcoKS5sZW5ndGggPz8gNSk7XHJcbiAgY29uc3QgeyBwbHVnaW4gfSA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIHJldHVybiAoXHJcbiAgICA8aW5wdXRcclxuICAgICAgdXNlOmF1dG9mb2N1c1xyXG4gICAgICBhdXRvZm9jdXNcclxuICAgICAgY2xhc3M9XCJoLWF1dG8gcm91bmRlZC1ub25lIGJvcmRlci1ub25lIGJnLXRyYW5zcGFyZW50IHAtMCAhc2hhZG93LW5vbmVcIlxyXG4gICAgICAvLyBzdHlsZT17eyBcImJveC1zaGFkb3dcIjogXCJub25lXCIgfX1cclxuICAgICAgc2l6ZT17c2l6ZSgpfVxyXG4gICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgdmFsdWU9e3Byb3BzLnZhbHVlPy50b1N0cmluZygpID8/IFwiXCJ9XHJcbiAgICAgIG9uQmx1cj17YXN5bmMgKGUpID0+IHtcclxuICAgICAgICBhd2FpdCB1cGRhdGVNZXRhZGF0YVByb3BlcnR5KFxyXG4gICAgICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgICAgICB0b051bWJlcihlLnRhcmdldC52YWx1ZSksXHJcbiAgICAgICAgICBwcm9wcy5maWxlUGF0aCxcclxuICAgICAgICAgIHBsdWdpbixcclxuICAgICAgICAgIHByb3BzLnZhbHVlLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcHJvcHMuc2V0RWRpdGluZyhmYWxzZSk7XHJcbiAgICAgIH19XHJcbiAgICAgIG9uSW5wdXQ9eyhlKSA9PiB7XHJcbiAgICAgICAgc2V0U2l6ZShlLnRhcmdldC52YWx1ZS5sZW5ndGgpO1xyXG4gICAgICB9fVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxudHlwZSBOdW1iZXJCdXR0b25zUHJvcHMgPSBUYWJsZURhdGFQcm9wczxudW1iZXI+ICYgeyBwbHVnaW46IERhdGFFZGl0IH07XHJcbmV4cG9ydCBjb25zdCBOdW1iZXJCdXR0b25zID0gKHByb3BzOiBOdW1iZXJCdXR0b25zUHJvcHMpID0+IChcclxuICA8ZGl2IGNsYXNzPVwiZmxleCB3LWZ1bGwgaXRlbXMtY2VudGVyIGdhcC0xXCI+XHJcbiAgICA8YnV0dG9uXHJcbiAgICAgIGNsYXNzPVwiY2xpY2thYmxlLWljb24gc2l6ZS1maXQgcC0xXCJcclxuICAgICAgb25DbGljaz17YXN5bmMgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgYXdhaXQgdXBkYXRlTWV0YWRhdGFQcm9wZXJ0eShcclxuICAgICAgICAgIHByb3BzLnByb3BlcnR5LFxyXG4gICAgICAgICAgcHJvcHMudmFsdWUgLSAxLFxyXG4gICAgICAgICAgcHJvcHMuZmlsZVBhdGgsXHJcbiAgICAgICAgICBwcm9wcy5wbHVnaW4sXHJcbiAgICAgICAgICBwcm9wcy52YWx1ZSxcclxuICAgICAgICApO1xyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICA8TWludXMgY2xhc3M9XCJwb2ludGVyLWV2ZW50cy1ub25lIHNpemUtM1wiIC8+XHJcbiAgICA8L2J1dHRvbj5cclxuICAgIDxOdW1iZXJFeHByZXNzaW9uQnV0dG9uIHsuLi5wcm9wc30gLz5cclxuICAgIDxidXR0b25cclxuICAgICAgY2xhc3M9XCJjbGlja2FibGUtaWNvbiBzaXplLWZpdCBwLTFcIlxyXG4gICAgICBvbkNsaWNrPXthc3luYyAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBhd2FpdCB1cGRhdGVNZXRhZGF0YVByb3BlcnR5KFxyXG4gICAgICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgICAgICBwcm9wcy52YWx1ZSArIDEsXHJcbiAgICAgICAgICBwcm9wcy5maWxlUGF0aCxcclxuICAgICAgICAgIHByb3BzLnBsdWdpbixcclxuICAgICAgICAgIHByb3BzLnZhbHVlLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIDxQbHVzIGNsYXNzPVwicG9pbnRlci1ldmVudHMtbm9uZSBzaXplLTNcIiAvPlxyXG4gICAgPC9idXR0b24+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5jb25zdCBOdW1iZXJFeHByZXNzaW9uQnV0dG9uID0gKHByb3BzOiBOdW1iZXJCdXR0b25zUHJvcHMpID0+IHtcclxuICAvLyBjb25zdCB7XHJcbiAgLy8gICBkYXRhdmlld0FQSTogeyBldmFsdWF0ZSB9LFxyXG4gIC8vIH0gPSB1c2VEYXRhRWRpdCgpO1xyXG4gIGNvbnN0IFtpc09wZW4sIHNldE9wZW5dID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcclxuICBjb25zdCBbY2FsY3VsYXRlZCwgc2V0Q2FsY3VsYXRlZF0gPSBjcmVhdGVTaWduYWwoTnVtYmVyKHByb3BzLnZhbHVlKSk7XHJcblxyXG4gIGNvbnN0IHVwZGF0ZVByb3BlcnR5ID0gYXN5bmMgKHY6IG51bWJlcikgPT4ge1xyXG4gICAgYXdhaXQgdXBkYXRlTWV0YWRhdGFQcm9wZXJ0eShcclxuICAgICAgcHJvcHMucHJvcGVydHksXHJcbiAgICAgIHYsXHJcbiAgICAgIHByb3BzLmZpbGVQYXRoLFxyXG4gICAgICBwcm9wcy5wbHVnaW4sXHJcbiAgICAgIHByb3BzLnZhbHVlLFxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPERpYWxvZyBtb2RhbCBvcGVuPXtpc09wZW4oKX0gb25PcGVuQ2hhbmdlPXsoYikgPT4gc2V0T3BlbihiKX0+XHJcbiAgICAgIDxEaWFsb2dUcmlnZ2VyIGNsYXNzPVwiY2xpY2thYmxlLWljb24gc2l6ZS1maXQgcC0xXCI+XHJcbiAgICAgICAgPFBhcmVudGhlc2VzIGNsYXNzPVwicG9pbnRlci1ldmVudHMtbm9uZSBzaXplLTNcIiAvPlxyXG4gICAgICA8L0RpYWxvZ1RyaWdnZXI+XHJcbiAgICAgIDxEaWFsb2dDb250ZW50PlxyXG4gICAgICAgIDxEaWFsb2dIZWFkZXI+XHJcbiAgICAgICAgICA8RGlhbG9nVGl0bGU+VXBkYXRlIGJ5IGV4cHJlc3Npb248L0RpYWxvZ1RpdGxlPlxyXG4gICAgICAgICAgPERpYWxvZ0Rlc2NyaXB0aW9uPlxyXG4gICAgICAgICAgICBFbnRlciBhIHZhbGlke1wiIFwifVxyXG4gICAgICAgICAgICA8RXh0ZXJuYWxMaW5rIGhyZWY9XCJodHRwczovL2JsYWNrc21pdGhndS5naXRodWIuaW8vb2JzaWRpYW4tZGF0YXZpZXcvcmVmZXJlbmNlL2V4cHJlc3Npb25zL1wiPlxyXG4gICAgICAgICAgICAgIERhdGF2aWV3IG1hdGhlbWF0aWNhbCBleHByZXNzaW9uXHJcbiAgICAgICAgICAgIDwvRXh0ZXJuYWxMaW5rPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgWW91IGNhbiB1c2UgPGNvZGU+eDwvY29kZT4gYXMgdGhlIGN1cnJlbnQgdmFsdWUuXHJcbiAgICAgICAgICA8L0RpYWxvZ0Rlc2NyaXB0aW9uPlxyXG4gICAgICAgIDwvRGlhbG9nSGVhZGVyPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgdXNlOmF1dG9mb2N1c1xyXG4gICAgICAgICAgYXV0b2ZvY3VzXHJcbiAgICAgICAgICBjbGFzcz1cImJvcmRlci1ib3JkZXIgcHgtMVwiXHJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cInggKyAyIC8geCAqIDNcIlxyXG4gICAgICAgICAgb25LZXlEb3duPXthc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIiAmJiAhTnVtYmVyLmlzTmFOKGNhbGN1bGF0ZWQoKSkpIHtcclxuICAgICAgICAgICAgICBhd2FpdCB1cGRhdGVQcm9wZXJ0eShjYWxjdWxhdGVkKCkpO1xyXG4gICAgICAgICAgICAgIHNldE9wZW4oZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgb25JbnB1dD17YXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgLyogXHJcbiAgICAgICAgICAgICAgICAgIFRPRE8gbWFrZSB0aGlzIGJldHRlclxyXG4gICAgICAgICAgICAgICAgICAtIGV2YWw6IHNvbGlkIGRvZXNuJ3QgbGlrZSBpdCB3aGVuIGludGVyb3BwZWQgd2l0aCBzaWduYWxzIGl0IHNlZW1zXHJcbiAgICAgICAgICAgICAgICAgIC0gbWF0aGpzOiBzb2xpZCBhbHNvIHNlZW1zIHRvIG5vdCBsaWtlIGl0J3MgZXZhbHVhdGUgZnVuY3Rpb24uIEl0IGFsc28gYWRkcyA1MDBrYiB0byB0aGUgYnVuZGxlIDovXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBjb25zdCBleHAgPSBlLnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlQWxsKFwieFwiLCBwcm9wcy52YWx1ZS50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgIC50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9XHJcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgICAgICAgIGF3YWl0IGFwcC5wbHVnaW5zLnBsdWdpbnMuZGF0YXZpZXcuYXBpLmV2YWx1YXRlKGV4cCk7XHJcblxyXG4gICAgICAgICAgICBzZXRDYWxjdWxhdGVkKCgpID0+IHtcclxuICAgICAgICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3NmdWwpIHJldHVybiBOdW1iZXIocmVzdWx0LnZhbHVlKTtcclxuICAgICAgICAgICAgICByZXR1cm4gTmFOO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8cD5cclxuICAgICAgICAgIDxzcGFuPkNhbGN1bGF0ZWQ6Jm5ic3A7PC9zcGFuPlxyXG4gICAgICAgICAgPFNob3dcclxuICAgICAgICAgICAgd2hlbj17TnVtYmVyLmlzTmFOKGNhbGN1bGF0ZWQoKSl9XHJcbiAgICAgICAgICAgIGZhbGxiYWNrPXs8c3BhbiBjbGFzcz1cInRleHQtc3VjY2Vzc1wiPntjYWxjdWxhdGVkKCl9PC9zcGFuPn1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWVycm9yXCI+ZXJyb3I8L3NwYW4+XHJcbiAgICAgICAgICA8L1Nob3c+XHJcbiAgICAgICAgPC9wPlxyXG4gICAgICAgIDxEaWFsb2dGb290ZXI+XHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzPVwicm91bmRlZC1idXR0b24gYmctaW50ZXJhY3RpdmUtYWNjZW50IHAtYnV0dG9uIHRleHQtb24tYWNjZW50IGhvdmVyOmJnLWludGVyYWN0aXZlLWFjY2VudC1ob3ZlclwiXHJcbiAgICAgICAgICAgIGRpc2FibGVkPXtOdW1iZXIuaXNOYU4oY2FsY3VsYXRlZCgpKX1cclxuICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVByb3BlcnR5KGNhbGN1bGF0ZWQoKSk7XHJcbiAgICAgICAgICAgICAgc2V0T3BlbihmYWxzZSk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHVwZGF0ZVxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9EaWFsb2dGb290ZXI+XHJcbiAgICAgIDwvRGlhbG9nQ29udGVudD5cclxuICAgIDwvRGlhbG9nPlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCB7IENPTVBMRVhfUFJPUEVSVFlfUExBQ0VIT0xERVIgfSBmcm9tIFwiQC9saWIvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7XHJcbiAgRGF0YXZpZXdQcm9wZXJ0eVZhbHVlLFxyXG4gIERhdGF2aWV3UHJvcGVydHlWYWx1ZUFycmF5LFxyXG4gIFByb3BlcnR5VHlwZSxcclxufSBmcm9tIFwiQC9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICBjaGVja0lmRGF0ZUhhc1RpbWUsXHJcbiAgZ2V0VmFsdWVUeXBlLFxyXG4gIHRyeURhdGF2aWV3TGlua1RvTWFya2Rvd24sXHJcbn0gZnJvbSBcIkAvbGliL3V0aWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCBjcmVhdGVNZW1vLCBTaG93LCBTZXR0ZXIsIEpTWCB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyBNYXJrZG93biB9IGZyb20gXCJAL2NvbXBvbmVudHMvTWFya2Rvd25cIjtcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tIFwibHV4b25cIjtcclxuaW1wb3J0IHsgQ2hlY2tib3hJbnB1dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvSW5wdXRzL2NoZWNrYm94XCI7XHJcbmltcG9ydCB7IERhdGVEYXRldGltZUlucHV0IH0gZnJvbSBcIkAvY29tcG9uZW50cy9JbnB1dHMvZGF0ZWRhdGV0aW1lXCI7XHJcbmltcG9ydCB7IExpc3RUYWJsZURhdGFXcmFwcGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy9JbnB1dHMvbGlzdFwiO1xyXG5pbXBvcnQgeyBOdW1iZXJCdXR0b25zLCBOdW1iZXJJbnB1dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvSW5wdXRzL251bWJlclwiO1xyXG5pbXBvcnQgeyBUZXh0SW5wdXQgfSBmcm9tIFwiQC9jb21wb25lbnRzL0lucHV0cy90ZXh0XCI7XHJcbmltcG9ydCB7IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyB1c2VDb2RlQmxvY2sgfSBmcm9tIFwiQC9ob29rcy91c2VEYXRhRWRpdFwiO1xyXG5pbXBvcnQgRGF0YUVkaXQgZnJvbSBcIkAvbWFpblwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVGFibGVEYXRhUHJvcHM8VCA9IERhdGF2aWV3UHJvcGVydHlWYWx1ZT4gPSB7XHJcbiAgdmFsdWU6IFQ7XHJcbiAgaGVhZGVyOiBzdHJpbmc7XHJcbiAgcHJvcGVydHk6IHN0cmluZztcclxuICBmaWxlUGF0aDogc3RyaW5nO1xyXG4gIHN0eWxlOiBzdHJpbmcgfCBKU1guQ1NTUHJvcGVydGllcyB8IHVuZGVmaW5lZDtcclxuICBvbk1vdXNlTW92ZTogKGU6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBUYWJsZURhdGEgPSAocHJvcHM6IFRhYmxlRGF0YVByb3BzKSA9PiB7XHJcbiAgY29uc3QgW2lzRWRpdGluZywgc2V0RWRpdGluZ10gPSBjcmVhdGVTaWduYWwoZmFsc2UpO1xyXG4gIGNvbnN0IHtcclxuICAgIHBsdWdpbixcclxuICAgIGRhdGF2aWV3QVBJOiB7XHJcbiAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgdGFibGVJZENvbHVtbk5hbWUsXHJcbiAgICAgICAgZGVmYXVsdERhdGVGb3JtYXQsXHJcbiAgICAgICAgZGVmYXVsdERhdGVUaW1lRm9ybWF0LFxyXG4gICAgICAgIHJlbmRlck51bGxBcyxcclxuICAgICAgfSxcclxuICAgICAgbHV4b24sXHJcbiAgICB9LFxyXG4gICAgY29uZmlnLFxyXG4gICAgY3R4LFxyXG4gIH0gPSB1c2VDb2RlQmxvY2soKTtcclxuICBjb25zdCB2YWx1ZVR5cGUgPSBjcmVhdGVNZW1vKCgpID0+IHtcclxuICAgIHJldHVybiBnZXRWYWx1ZVR5cGUocHJvcHMudmFsdWUsIHByb3BzLmhlYWRlciwgbHV4b24pO1xyXG4gIH0pO1xyXG4gIGNvbnN0IGlzRWRpdGFibGVQcm9wZXJ0eSA9IChwcm9wZXJ0eTogc3RyaW5nKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInByb3BlcnR5OiBcIiwgcHJvcGVydHkpO1xyXG4gICAgY29uc3Qgc3RyID0gKHByb3BlcnR5ID8/IFwiXCIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoc3RyID09PSBDT01QTEVYX1BST1BFUlRZX1BMQUNFSE9MREVSLnRvTG93ZXJDYXNlKCkpIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChzdHIgPT09IHRhYmxlSWRDb2x1bW5OYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChzdHIuaW5jbHVkZXMoXCJmaWxlLlwiKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuICByZXR1cm4gKFxyXG4gICAgPHRkXHJcbiAgICAgIGNsYXNzPVwid2hpdGVzcGFjZS1ub3JtYWwgdGV4dC1ub3dyYXBcIlxyXG4gICAgICB0YWJJbmRleD17MH1cclxuICAgICAgb25DbGljaz17KGUpID0+IHtcclxuICAgICAgICAvLyBuZXcgTm90aWNlKGUudGFyZ2V0LnRhZ05hbWUpO1xyXG4gICAgICAgIC8vIGlmIG51bWJlciBidXR0b25zIGFyZSBjbGlja2VkXHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIikgcmV0dXJuO1xyXG4gICAgICAgIGlmICh2YWx1ZVR5cGUoKSA9PT0gXCJtdWx0aXRleHRcIikgcmV0dXJuO1xyXG4gICAgICAgIHNldEVkaXRpbmcodHJ1ZSk7XHJcbiAgICAgIH19XHJcbiAgICAgIG9uTW91c2VNb3ZlPXtwcm9wcy5vbk1vdXNlTW92ZX1cclxuICAgICAgc3R5bGU9e3Byb3BzLnN0eWxlfVxyXG4gICAgPlxyXG4gICAgICA8U2hvd1xyXG4gICAgICAgIHdoZW49e3ZhbHVlVHlwZSgpICE9PSBcIm11bHRpdGV4dFwiIHx8IHZhbHVlVHlwZSgpICE9PSBcImFsaWFzZXNcIn1cclxuICAgICAgICBmYWxsYmFjaz17XHJcbiAgICAgICAgICA8TGlzdFRhYmxlRGF0YVdyYXBwZXJcclxuICAgICAgICAgICAgey4uLihwcm9wcyBhcyBUYWJsZURhdGFQcm9wczxEYXRhdmlld1Byb3BlcnR5VmFsdWVBcnJheT4pfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICB9XHJcbiAgICAgID5cclxuICAgICAgICA8U2hvd1xyXG4gICAgICAgICAgd2hlbj17XHJcbiAgICAgICAgICAgICFjb25maWcubG9ja0VkaXRpbmcgJiZcclxuICAgICAgICAgICAgaXNFZGl0aW5nKCkgJiZcclxuICAgICAgICAgICAgaXNFZGl0YWJsZVByb3BlcnR5KHByb3BzLnByb3BlcnR5KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZmFsbGJhY2s9e1xyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgb25DbGljaz17XHJcbiAgICAgICAgICAgICAgICBpc0VkaXRhYmxlUHJvcGVydHkocHJvcHMucHJvcGVydHkpXHJcbiAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgIDogY29uZmlnLmxvY2tFZGl0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA6ICgpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIGlzIGEgY2FsY3VsYXRlZCBwcm9wZXJ0eSwgc28geW91IGNhbid0IGVkaXQgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8VGFibGVEYXRhRGlzcGxheVxyXG4gICAgICAgICAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgICAgICAgICAgc2V0RWRpdGluZz17c2V0RWRpdGluZ31cclxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZT17dmFsdWVUeXBlKCl9XHJcbiAgICAgICAgICAgICAgICBwbHVnaW49e3BsdWdpbn1cclxuICAgICAgICAgICAgICAgIGN0eD17Y3R4fVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdERhdGVGb3JtYXQ9e2RlZmF1bHREYXRlRm9ybWF0fVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdERhdGVUaW1lRm9ybWF0PXtkZWZhdWx0RGF0ZVRpbWVGb3JtYXR9XHJcbiAgICAgICAgICAgICAgICByZW5kZXJOdWxsQXM9e3JlbmRlck51bGxBc31cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8VGFibGVEYXRhRWRpdFxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgIHNldEVkaXRpbmc9e3NldEVkaXRpbmd9XHJcbiAgICAgICAgICAgIHZhbHVlVHlwZT17dmFsdWVUeXBlKCl9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvU2hvdz5cclxuICAgICAgICA8U2hvd1xyXG4gICAgICAgICAgd2hlbj17XHJcbiAgICAgICAgICAgIHZhbHVlVHlwZSgpID09PSBcIm51bWJlclwiICYmXHJcbiAgICAgICAgICAgIGlzRWRpdGFibGVQcm9wZXJ0eShwcm9wcy5wcm9wZXJ0eSkgJiZcclxuICAgICAgICAgICAgIWNvbmZpZy5sb2NrRWRpdGluZ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxOdW1iZXJCdXR0b25zXHJcbiAgICAgICAgICAgIHsuLi4ocHJvcHMgYXMgVGFibGVEYXRhUHJvcHM8bnVtYmVyPil9XHJcbiAgICAgICAgICAgIHBsdWdpbj17cGx1Z2lufVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L1Nob3c+XHJcbiAgICAgIDwvU2hvdz5cclxuICAgIDwvdGQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFRhYmxlRGF0YURpc3BsYXlQcm9wcyA9IFRhYmxlRGF0YVByb3BzICYge1xyXG4gIHNldEVkaXRpbmc6IFNldHRlcjxib29sZWFuPjtcclxuICB2YWx1ZVR5cGU6IFByb3BlcnR5VHlwZTtcclxuICBwbHVnaW46IERhdGFFZGl0O1xyXG4gIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dDtcclxuICBkZWZhdWx0RGF0ZUZvcm1hdDogc3RyaW5nO1xyXG4gIGRlZmF1bHREYXRlVGltZUZvcm1hdDogc3RyaW5nO1xyXG4gIHJlbmRlck51bGxBczogc3RyaW5nO1xyXG59O1xyXG5leHBvcnQgY29uc3QgVGFibGVEYXRhRGlzcGxheSA9IChwcm9wczogVGFibGVEYXRhRGlzcGxheVByb3BzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxTaG93IHdoZW49e3Byb3BzLnZhbHVlVHlwZSA9PT0gXCJ0ZXh0XCIgfHwgcHJvcHMudmFsdWVUeXBlID09PSBcIm51bWJlclwifT5cclxuICAgICAgICA8TWFya2Rvd25cclxuICAgICAgICAgIGNsYXNzPVwic2l6ZS1mdWxsXCJcclxuICAgICAgICAgIGFwcD17cHJvcHMucGx1Z2luLmFwcH1cclxuICAgICAgICAgIG1hcmtkb3duPXtcclxuICAgICAgICAgICAgdHJ5RGF0YXZpZXdMaW5rVG9NYXJrZG93bihwcm9wcy52YWx1ZSkgfHwgcHJvcHMucmVuZGVyTnVsbEFzXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzb3VyY2VQYXRoPXtwcm9wcy5jdHguc291cmNlUGF0aH1cclxuICAgICAgICAvPlxyXG4gICAgICA8L1Nob3c+XHJcbiAgICAgIDxTaG93IHdoZW49e3Byb3BzLnZhbHVlVHlwZSA9PT0gXCJjaGVja2JveFwifT5cclxuICAgICAgICA8Q2hlY2tib3hJbnB1dCB7Li4ucHJvcHN9IC8+XHJcbiAgICAgIDwvU2hvdz5cclxuICAgICAgPFNob3cgd2hlbj17cHJvcHMudmFsdWVUeXBlID09PSBcImRhdGVcIiB8fCBwcm9wcy52YWx1ZVR5cGUgPT09IFwiZGF0ZXRpbWVcIn0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInNpemUtZnVsbFwiPlxyXG4gICAgICAgICAgeyhwcm9wcy52YWx1ZSBhcyBEYXRlVGltZSkudG9Gb3JtYXQoXHJcbiAgICAgICAgICAgIGNoZWNrSWZEYXRlSGFzVGltZShwcm9wcy52YWx1ZSBhcyBEYXRlVGltZSlcclxuICAgICAgICAgICAgICA/IHByb3BzLmRlZmF1bHREYXRlVGltZUZvcm1hdFxyXG4gICAgICAgICAgICAgIDogcHJvcHMuZGVmYXVsdERhdGVGb3JtYXQsXHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L1Nob3c+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVGFibGVEYXRhRWRpdFByb3BzPFQgPSB1bmtub3duPiA9IFRhYmxlRGF0YVByb3BzPFQ+ICYge1xyXG4gIHNldEVkaXRpbmc6IFNldHRlcjxib29sZWFuPjtcclxuICB2YWx1ZVR5cGU6IFByb3BlcnR5VHlwZTtcclxufTtcclxuZXhwb3J0IGNvbnN0IFRhYmxlRGF0YUVkaXQgPSAocHJvcHM6IFRhYmxlRGF0YUVkaXRQcm9wcykgPT4ge1xyXG4gIC8vIHJldHVybiA8VGV4dElucHV0IHsuLi5wcm9wc30gLz47XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8U2hvdyB3aGVuPXtwcm9wcy52YWx1ZVR5cGUgPT09IFwidGV4dFwifT5cclxuICAgICAgICA8VGV4dElucHV0IHsuLi5wcm9wc30gLz5cclxuICAgICAgPC9TaG93PlxyXG4gICAgICA8U2hvdyB3aGVuPXtwcm9wcy52YWx1ZVR5cGUgPT09IFwibnVtYmVyXCJ9PlxyXG4gICAgICAgIDxOdW1iZXJJbnB1dCB7Li4ucHJvcHN9IC8+XHJcbiAgICAgIDwvU2hvdz5cclxuICAgICAgPFNob3cgd2hlbj17cHJvcHMudmFsdWVUeXBlID09PSBcImRhdGVcIiB8fCBwcm9wcy52YWx1ZVR5cGUgPT09IFwiZGF0ZXRpbWVcIn0+XHJcbiAgICAgICAgPERhdGVEYXRldGltZUlucHV0IHsuLi4ocHJvcHMgYXMgVGFibGVEYXRhRWRpdFByb3BzPERhdGVUaW1lPil9IC8+XHJcbiAgICAgIDwvU2hvdz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCB7XHJcbiAgRGF0YXZpZXdRdWVyeVJlc3VsdEhlYWRlcnMsXHJcbiAgRGF0YXZpZXdRdWVyeVJlc3VsdFZhbHVlcyxcclxuICBEYXRhdmlld0xpbmssXHJcbn0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XHJcbmltcG9ydCB7IGdldElkQ29sdW1uSW5kZXggfSBmcm9tIFwiQC9saWIvdXRpbFwiO1xyXG5pbXBvcnQgeyBGb3IsIFNldHRlciwgU2hvdyB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyBUYWJsZURhdGEgfSBmcm9tIFwiLi4vVGFibGVEYXRhXCI7XHJcbmltcG9ydCB7IHVzZUNvZGVCbG9jayB9IGZyb20gXCJAL2hvb2tzL3VzZURhdGFFZGl0XCI7XHJcblxyXG5jb25zdCBoaWdobGlnaHRTdHlsZSA9IHtcclxuICBcImJvcmRlci1sZWZ0LXdpZHRoXCI6IFwiMnB4XCIsXHJcbiAgXCJib3JkZXItcmlnaHQtd2lkdGhcIjogXCIycHhcIixcclxuICBcImJvcmRlci1sZWZ0LWNvbG9yXCI6IFwiaHNsKHZhcigtLWFjY2VudC1oKSB2YXIoLS1hY2NlbnQtcykgdmFyKC0tYWNjZW50LWwpKVwiLFxyXG4gIFwiYm9yZGVyLXJpZ2h0LWNvbG9yXCI6IFwiaHNsKHZhcigtLWFjY2VudC1oKSB2YXIoLS1hY2NlbnQtcykgdmFyKC0tYWNjZW50LWwpKVwiLFxyXG4gIFwiYmFja2dyb3VuZC1jb2xvclwiOiBgaHNsKHZhcigtLWFjY2VudC1oKSB2YXIoLS1hY2NlbnQtcykgdmFyKC0tYWNjZW50LWwpIC8gMTAlKWAsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZHJhZ2dlZE92ZXJSaWdodCA9IHtcclxuICBcImJvcmRlci1yaWdodC13aWR0aFwiOiBcIjJweFwiLFxyXG4gIFwiYm9yZGVyLXJpZ2h0LWNvbG9yXCI6IFwiaHNsKHZhcigtLWFjY2VudC1oKSB2YXIoLS1hY2NlbnQtcykgdmFyKC0tYWNjZW50LWwpKVwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYWdnZWRPdmVyTGVmdCA9IHtcclxuICBcImJvcmRlci1sZWZ0LXdpZHRoXCI6IFwiMnB4XCIsXHJcbiAgXCJib3JkZXItbGVmdC1jb2xvclwiOiBcImhzbCh2YXIoLS1hY2NlbnQtaCkgdmFyKC0tYWNjZW50LXMpIHZhcigtLWFjY2VudC1sKSlcIixcclxufTtcclxuXHJcbmNvbnN0IGxhc3RDZWxsSGlnaGxpZ2h0ID0ge1xyXG4gIFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiOiBcIjJweFwiLFxyXG4gIFwiYm9yZGVyLWJvdHRvbS1jb2xvclwiOiBcImhzbCh2YXIoLS1hY2NlbnQtaCkgdmFyKC0tYWNjZW50LXMpIHZhcigtLWFjY2VudC1sKSlcIixcclxufTtcclxuXHJcbnR5cGUgVGFibGVCb2R5UHJvcHMgPSB7XHJcbiAgaGVhZGVyczogRGF0YXZpZXdRdWVyeVJlc3VsdEhlYWRlcnM7XHJcbiAgcHJvcGVydGllczogc3RyaW5nW107XHJcbiAgcm93czogRGF0YXZpZXdRdWVyeVJlc3VsdFZhbHVlcztcclxuICBoaWdobGlnaHRJbmRleDogbnVtYmVyO1xyXG4gIHNldEhpZ2hsaWdodEluZGV4OiBTZXR0ZXI8bnVtYmVyPjtcclxuICBkcmFnZ2VkT3ZlckluZGV4OiBudW1iZXI7XHJcbiAgc2V0RHJhZ2dlZE92ZXJJbmRleDogU2V0dGVyPG51bWJlcj47XHJcbn07XHJcbmV4cG9ydCBjb25zdCBUYWJsZUJvZHkgPSAocHJvcHM6IFRhYmxlQm9keVByb3BzKSA9PiB7XHJcbiAgY29uc3QgY29kZUJsb2NrSW5mbyA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIGNvbnN0IHtcclxuICAgIGRhdGF2aWV3QVBJOiB7XHJcbiAgICAgIHNldHRpbmdzOiB7IHRhYmxlSWRDb2x1bW5OYW1lIH0sXHJcbiAgICB9LFxyXG4gIH0gPSBjb2RlQmxvY2tJbmZvO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHRib2R5PlxyXG4gICAgICA8Rm9yIGVhY2g9e3Byb3BzLnJvd3N9PlxyXG4gICAgICAgIHsocm93LCByb3dJbmRleCkgPT4gKFxyXG4gICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICA8Rm9yIGVhY2g9e3Jvd30+XHJcbiAgICAgICAgICAgICAgeyh2YWx1ZSwgdmFsdWVJbmRleCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgPFNob3dcclxuICAgICAgICAgICAgICAgICAgd2hlbj17XHJcbiAgICAgICAgICAgICAgICAgICAgIShcclxuICAgICAgICAgICAgICAgICAgICAgIGNvZGVCbG9ja0luZm8uaGlkZUZpbGVDb2wgJiZcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSW5kZXgoKSA9PT0gcHJvcHMuaGVhZGVycy5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIDxUYWJsZURhdGFcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyPXtwcm9wcy5oZWFkZXJzW3ZhbHVlSW5kZXgoKV19XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BzLnByb3BlcnRpZXNbdmFsdWVJbmRleCgpXX1cclxuICAgICAgICAgICAgICAgICAgICBmaWxlUGF0aD17XHJcbiAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRJZENvbHVtbkluZGV4KHByb3BzLmhlYWRlcnMsIHRhYmxlSWRDb2x1bW5OYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdIGFzIERhdGF2aWV3TGlua1xyXG4gICAgICAgICAgICAgICAgICAgICAgKS5wYXRoID8/IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU1vdmU9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5oaWdobGlnaHRJbmRleCA9PT0gLTEpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnNldERyYWdnZWRPdmVySW5kZXgodmFsdWVJbmRleCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSW5kZXgoKSA9PT0gcHJvcHMuaGlnaGxpZ2h0SW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByb3dJbmRleCgpID09PSBwcm9wcy5yb3dzLmxlbmd0aCAtIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgLi4uaGlnaGxpZ2h0U3R5bGUsIC4uLmxhc3RDZWxsSGlnaGxpZ2h0IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGhpZ2hsaWdodFN0eWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWVJbmRleCgpID09PSBwcm9wcy5kcmFnZ2VkT3ZlckluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwcm9wcy5oaWdobGlnaHRJbmRleCA8IHZhbHVlSW5kZXgoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkcmFnZ2VkT3ZlclJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRyYWdnZWRPdmVyTGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDoge31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L1Nob3c+XHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC9Gb3I+XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvRm9yPlxyXG4gICAgPC90Ym9keT5cclxuICApO1xyXG59O1xyXG4iLCIvKipcbiogQGxpY2Vuc2UgbHVjaWRlLXNvbGlkIHYwLjQxMi4wIC0gSVNDXG4qXG4qIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiovXG5cbi8vIHNyYy9pY29ucy9ncmlwLWhvcml6b250YWwudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJjaXJjbGVcIiwgeyBjeDogXCIxMlwiLCBjeTogXCI5XCIsIHI6IFwiMVwiLCBrZXk6IFwiMTI0bXR5XCIgfV0sXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjE5XCIsIGN5OiBcIjlcIiwgcjogXCIxXCIsIGtleTogXCIxcnV6bzJcIiB9XSxcbiAgW1wiY2lyY2xlXCIsIHsgY3g6IFwiNVwiLCBjeTogXCI5XCIsIHI6IFwiMVwiLCBrZXk6IFwiMWE4YjI4XCIgfV0sXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjEyXCIsIGN5OiBcIjE1XCIsIHI6IFwiMVwiLCBrZXk6IFwiMWU1NnhnXCIgfV0sXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjE5XCIsIGN5OiBcIjE1XCIsIHI6IFwiMVwiLCBrZXk6IFwiMWE5MmVwXCIgfV0sXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjVcIiwgY3k6IFwiMTVcIiwgcjogXCIxXCIsIGtleTogXCI1cjFqd3lcIiB9XVxuXTtcbnZhciBHcmlwSG9yaXpvbnRhbCA9IChwcm9wcykgPT4gPEljb24gey4uLnByb3BzfSBuYW1lPVwiR3JpcEhvcml6b250YWxcIiBpY29uTm9kZT17aWNvbk5vZGV9IC8+O1xudmFyIGdyaXBfaG9yaXpvbnRhbF9kZWZhdWx0ID0gR3JpcEhvcml6b250YWw7XG5leHBvcnQge1xuICBncmlwX2hvcml6b250YWxfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JpcC1ob3Jpem9udGFsLmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL2FsaWduLWxlZnQudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJsaW5lXCIsIHsgeDE6IFwiMjFcIiwgeDI6IFwiM1wiLCB5MTogXCI2XCIsIHkyOiBcIjZcIiwga2V5OiBcIjFmcDc3dFwiIH1dLFxuICBbXCJsaW5lXCIsIHsgeDE6IFwiMTVcIiwgeDI6IFwiM1wiLCB5MTogXCIxMlwiLCB5MjogXCIxMlwiLCBrZXk6IFwidjZncng4XCIgfV0sXG4gIFtcImxpbmVcIiwgeyB4MTogXCIxN1wiLCB4MjogXCIzXCIsIHkxOiBcIjE4XCIsIHkyOiBcIjE4XCIsIGtleTogXCIxYXdsc25cIiB9XVxuXTtcbnZhciBBbGlnbkxlZnQgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIkFsaWduTGVmdFwiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgYWxpZ25fbGVmdF9kZWZhdWx0ID0gQWxpZ25MZWZ0O1xuZXhwb3J0IHtcbiAgYWxpZ25fbGVmdF9kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGlnbi1sZWZ0LmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL3NxdWFyZS1jaGVjay1iaWcudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJwYXRoXCIsIHsgZDogXCJtOSAxMSAzIDNMMjIgNFwiLCBrZXk6IFwiMXBmbHpsXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0yMSAxMnY3YTIgMiAwIDAgMS0yIDJINWEyIDIgMCAwIDEtMi0yVjVhMiAyIDAgMCAxIDItMmgxMVwiLCBrZXk6IFwiMWpua240XCIgfV1cbl07XG52YXIgU3F1YXJlQ2hlY2tCaWcgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIlNxdWFyZUNoZWNrQmlnXCIgaWNvbk5vZGU9e2ljb25Ob2RlfSAvPjtcbnZhciBzcXVhcmVfY2hlY2tfYmlnX2RlZmF1bHQgPSBTcXVhcmVDaGVja0JpZztcbmV4cG9ydCB7XG4gIHNxdWFyZV9jaGVja19iaWdfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3F1YXJlLWNoZWNrLWJpZy5qc3gubWFwXG4iLCIvKipcbiogQGxpY2Vuc2UgbHVjaWRlLXNvbGlkIHYwLjQxMi4wIC0gSVNDXG4qXG4qIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiovXG5cbi8vIHNyYy9pY29ucy9saXN0LnRzeFxuaW1wb3J0IEljb24gZnJvbSBcIi4uL0ljb25cIjtcbnZhciBpY29uTm9kZSA9IFtcbiAgW1wibGluZVwiLCB7IHgxOiBcIjhcIiwgeDI6IFwiMjFcIiwgeTE6IFwiNlwiLCB5MjogXCI2XCIsIGtleTogXCI3ZXk4cGNcIiB9XSxcbiAgW1wibGluZVwiLCB7IHgxOiBcIjhcIiwgeDI6IFwiMjFcIiwgeTE6IFwiMTJcIiwgeTI6IFwiMTJcIiwga2V5OiBcInJqZmJsY1wiIH1dLFxuICBbXCJsaW5lXCIsIHsgeDE6IFwiOFwiLCB4MjogXCIyMVwiLCB5MTogXCIxOFwiLCB5MjogXCIxOFwiLCBrZXk6IFwiYzNiMW04XCIgfV0sXG4gIFtcImxpbmVcIiwgeyB4MTogXCIzXCIsIHgyOiBcIjMuMDFcIiwgeTE6IFwiNlwiLCB5MjogXCI2XCIsIGtleTogXCIxZzdncTNcIiB9XSxcbiAgW1wibGluZVwiLCB7IHgxOiBcIjNcIiwgeDI6IFwiMy4wMVwiLCB5MTogXCIxMlwiLCB5MjogXCIxMlwiLCBrZXk6IFwiMXBqbHZrXCIgfV0sXG4gIFtcImxpbmVcIiwgeyB4MTogXCIzXCIsIHgyOiBcIjMuMDFcIiwgeTE6IFwiMThcIiwgeTI6IFwiMThcIiwga2V5OiBcIjI4dDJtY1wiIH1dXG5dO1xudmFyIExpc3QgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIkxpc3RcIiBpY29uTm9kZT17aWNvbk5vZGV9IC8+O1xudmFyIGxpc3RfZGVmYXVsdCA9IExpc3Q7XG5leHBvcnQge1xuICBsaXN0X2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3QuanN4Lm1hcFxuIiwiLyoqXG4qIEBsaWNlbnNlIGx1Y2lkZS1zb2xpZCB2MC40MTIuMCAtIElTQ1xuKlxuKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4qL1xuXG4vLyBzcmMvaWNvbnMvY2xvY2sudHN4XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vSWNvblwiO1xudmFyIGljb25Ob2RlID0gW1xuICBbXCJjaXJjbGVcIiwgeyBjeDogXCIxMlwiLCBjeTogXCIxMlwiLCByOiBcIjEwXCIsIGtleTogXCIxbWdsYXlcIiB9XSxcbiAgW1wicG9seWxpbmVcIiwgeyBwb2ludHM6IFwiMTIgNiAxMiAxMiAxNiAxNFwiLCBrZXk6IFwiNjhlc2d2XCIgfV1cbl07XG52YXIgQ2xvY2sgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIkNsb2NrXCIgaWNvbk5vZGU9e2ljb25Ob2RlfSAvPjtcbnZhciBjbG9ja19kZWZhdWx0ID0gQ2xvY2s7XG5leHBvcnQge1xuICBjbG9ja19kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbG9jay5qc3gubWFwXG4iLCIvKipcbiogQGxpY2Vuc2UgbHVjaWRlLXNvbGlkIHYwLjQxMi4wIC0gSVNDXG4qXG4qIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiovXG5cbi8vIHNyYy9pY29ucy9jYWxlbmRhci50c3hcbmltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG52YXIgaWNvbk5vZGUgPSBbXG4gIFtcInBhdGhcIiwgeyBkOiBcIk04IDJ2NFwiLCBrZXk6IFwiMWNtcHltXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0xNiAydjRcIiwga2V5OiBcIjRtODF2a1wiIH1dLFxuICBbXCJyZWN0XCIsIHsgd2lkdGg6IFwiMThcIiwgaGVpZ2h0OiBcIjE4XCIsIHg6IFwiM1wiLCB5OiBcIjRcIiwgcng6IFwiMlwiLCBrZXk6IFwiMWhvcGN5XCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0zIDEwaDE4XCIsIGtleTogXCI4dG9lbjhcIiB9XVxuXTtcbnZhciBDYWxlbmRhciA9IChwcm9wcykgPT4gPEljb24gey4uLnByb3BzfSBuYW1lPVwiQ2FsZW5kYXJcIiBpY29uTm9kZT17aWNvbk5vZGV9IC8+O1xudmFyIGNhbGVuZGFyX2RlZmF1bHQgPSBDYWxlbmRhcjtcbmV4cG9ydCB7XG4gIGNhbGVuZGFyX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGVuZGFyLmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL2JpbmFyeS50c3hcbmltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG52YXIgaWNvbk5vZGUgPSBbXG4gIFtcInJlY3RcIiwgeyB4OiBcIjE0XCIsIHk6IFwiMTRcIiwgd2lkdGg6IFwiNFwiLCBoZWlnaHQ6IFwiNlwiLCByeDogXCIyXCIsIGtleTogXCJwMDJzdmxcIiB9XSxcbiAgW1wicmVjdFwiLCB7IHg6IFwiNlwiLCB5OiBcIjRcIiwgd2lkdGg6IFwiNFwiLCBoZWlnaHQ6IFwiNlwiLCByeDogXCIyXCIsIGtleTogXCJ4bTR4a2pcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTYgMjBoNFwiLCBrZXk6IFwiMWk2cTV0XCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0xNCAxMGg0XCIsIGtleTogXCJydTgxZTdcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTYgMTRoMnY2XCIsIGtleTogXCIxNno5d2dcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTE0IDRoMnY2XCIsIGtleTogXCIxaWRxOXVcIiB9XVxuXTtcbnZhciBCaW5hcnkgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIkJpbmFyeVwiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgYmluYXJ5X2RlZmF1bHQgPSBCaW5hcnk7XG5leHBvcnQge1xuICBiaW5hcnlfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluYXJ5LmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL3NwYXJrbGVzLnRzeFxuaW1wb3J0IEljb24gZnJvbSBcIi4uL0ljb25cIjtcbnZhciBpY29uTm9kZSA9IFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwiTTkuOTM3IDE1LjVBMiAyIDAgMCAwIDguNSAxNC4wNjNsLTYuMTM1LTEuNTgyYS41LjUgMCAwIDEgMC0uOTYyTDguNSA5LjkzNkEyIDIgMCAwIDAgOS45MzcgOC41bDEuNTgyLTYuMTM1YS41LjUgMCAwIDEgLjk2MyAwTDE0LjA2MyA4LjVBMiAyIDAgMCAwIDE1LjUgOS45MzdsNi4xMzUgMS41ODFhLjUuNSAwIDAgMSAwIC45NjRMMTUuNSAxNC4wNjNhMiAyIDAgMCAwLTEuNDM3IDEuNDM3bC0xLjU4MiA2LjEzNWEuNS41IDAgMCAxLS45NjMgMHpcIixcbiAgICAgIGtleTogXCI0cGoyeXhcIlxuICAgIH1cbiAgXSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTIwIDN2NFwiLCBrZXk6IFwiMW9sbGkxXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0yMiA1aC00XCIsIGtleTogXCIxZ3ZxYXVcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTQgMTd2MlwiLCBrZXk6IFwidnVtZ2h0XCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk01IDE4SDNcIiwga2V5OiBcInpjaHBoc1wiIH1dXG5dO1xudmFyIFNwYXJrbGVzID0gKHByb3BzKSA9PiA8SWNvbiB7Li4ucHJvcHN9IG5hbWU9XCJTcGFya2xlc1wiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgc3BhcmtsZXNfZGVmYXVsdCA9IFNwYXJrbGVzO1xuZXhwb3J0IHtcbiAgc3BhcmtsZXNfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhcmtsZXMuanN4Lm1hcFxuIiwiLyoqXG4qIEBsaWNlbnNlIGx1Y2lkZS1zb2xpZCB2MC40MTIuMCAtIElTQ1xuKlxuKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4qL1xuXG4vLyBzcmMvaWNvbnMvdGFncy50c3hcbmltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG52YXIgaWNvbk5vZGUgPSBbXG4gIFtcInBhdGhcIiwgeyBkOiBcIm0xNSA1IDYuMyA2LjNhMi40IDIuNCAwIDAgMSAwIDMuNEwxNyAxOVwiLCBrZXk6IFwiMWNiZnYxXCIgfV0sXG4gIFtcbiAgICBcInBhdGhcIixcbiAgICB7XG4gICAgICBkOiBcIk05LjU4NiA1LjU4NkEyIDIgMCAwIDAgOC4xNzIgNUgzYTEgMSAwIDAgMC0xIDF2NS4xNzJhMiAyIDAgMCAwIC41ODYgMS40MTRMOC4yOSAxOC4yOWEyLjQyNiAyLjQyNiAwIDAgMCAzLjQyIDBsMy41OC0zLjU4YTIuNDI2IDIuNDI2IDAgMCAwIDAtMy40MnpcIixcbiAgICAgIGtleTogXCIxMzVtZzdcIlxuICAgIH1cbiAgXSxcbiAgW1wiY2lyY2xlXCIsIHsgY3g6IFwiNi41XCIsIGN5OiBcIjkuNVwiLCByOiBcIi41XCIsIGZpbGw6IFwiY3VycmVudENvbG9yXCIsIGtleTogXCI1cG01eG5cIiB9XVxuXTtcbnZhciBUYWdzID0gKHByb3BzKSA9PiA8SWNvbiB7Li4ucHJvcHN9IG5hbWU9XCJUYWdzXCIgaWNvbk5vZGU9e2ljb25Ob2RlfSAvPjtcbnZhciB0YWdzX2RlZmF1bHQgPSBUYWdzO1xuZXhwb3J0IHtcbiAgdGFnc19kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWdzLmpzeC5tYXBcbiIsIi8qKlxuKiBAbGljZW5zZSBsdWNpZGUtc29saWQgdjAuNDEyLjAgLSBJU0NcbipcbiogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4qIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuKi9cblxuLy8gc3JjL2ljb25zL2Nvcm5lci11cC1yaWdodC50c3hcbmltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG52YXIgaWNvbk5vZGUgPSBbXG4gIFtcInBvbHlsaW5lXCIsIHsgcG9pbnRzOiBcIjE1IDE0IDIwIDkgMTUgNFwiLCBrZXk6IFwiMXRieDNzXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk00IDIwdi03YTQgNCAwIDAgMSA0LTRoMTJcIiwga2V5OiBcIjFsdTRmOFwiIH1dXG5dO1xudmFyIENvcm5lclVwUmlnaHQgPSAocHJvcHMpID0+IDxJY29uIHsuLi5wcm9wc30gbmFtZT1cIkNvcm5lclVwUmlnaHRcIiBpY29uTm9kZT17aWNvbk5vZGV9IC8+O1xudmFyIGNvcm5lcl91cF9yaWdodF9kZWZhdWx0ID0gQ29ybmVyVXBSaWdodDtcbmV4cG9ydCB7XG4gIGNvcm5lcl91cF9yaWdodF9kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JuZXItdXAtcmlnaHQuanN4Lm1hcFxuIiwiLyoqXG4qIEBsaWNlbnNlIGx1Y2lkZS1zb2xpZCB2MC40MTIuMCAtIElTQ1xuKlxuKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4qL1xuXG4vLyBzcmMvaWNvbnMvZmlsZS50c3hcbmltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG52YXIgaWNvbk5vZGUgPSBbXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0xNSAySDZhMiAyIDAgMCAwLTIgMnYxNmEyIDIgMCAwIDAgMiAyaDEyYTIgMiAwIDAgMCAyLTJWN1pcIiwga2V5OiBcIjFycWZ6N1wiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMTQgMnY0YTIgMiAwIDAgMCAyIDJoNFwiLCBrZXk6IFwidG5xcmxiXCIgfV1cbl07XG52YXIgRmlsZSA9IChwcm9wcykgPT4gPEljb24gey4uLnByb3BzfSBuYW1lPVwiRmlsZVwiIGljb25Ob2RlPXtpY29uTm9kZX0gLz47XG52YXIgZmlsZV9kZWZhdWx0ID0gRmlsZTtcbmV4cG9ydCB7XG4gIGZpbGVfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS5qc3gubWFwXG4iLCJpbXBvcnQgeyBQcm9wZXJ0eVR5cGUgfSBmcm9tIFwiQC9saWIvdHlwZXNcIjtcclxuaW1wb3J0IEFsaWduTGVmdCBmcm9tIFwibHVjaWRlLXNvbGlkL2ljb25zL0FsaWduLWxlZnRcIjtcclxuaW1wb3J0IFNxdWFyZUNoZWNrQmlnIGZyb20gXCJsdWNpZGUtc29saWQvaWNvbnMvU3F1YXJlLWNoZWNrLWJpZ1wiO1xyXG5pbXBvcnQgTGlzdCBmcm9tIFwibHVjaWRlLXNvbGlkL2ljb25zL0xpc3RcIjtcclxuaW1wb3J0IENsb2NrIGZyb20gXCJsdWNpZGUtc29saWQvaWNvbnMvQ2xvY2tcIjtcclxuaW1wb3J0IENhbGVuZGFyIGZyb20gXCJsdWNpZGUtc29saWQvaWNvbnMvQ2FsZW5kYXJcIjtcclxuaW1wb3J0IEJpbmFyeSBmcm9tIFwibHVjaWRlLXNvbGlkL2ljb25zL0JpbmFyeVwiO1xyXG5pbXBvcnQgU3BhcmtsZXMgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9TcGFya2xlc1wiO1xyXG5pbXBvcnQgVGFncyBmcm9tIFwibHVjaWRlLXNvbGlkL2ljb25zL1RhZ3NcIjtcclxuaW1wb3J0IENvcm5lclVwUmlnaHQgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9Db3JuZXItdXAtcmlnaHRcIjtcclxuaW1wb3J0IEZpbGUgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9GaWxlXCI7XHJcbmltcG9ydCB7IE1hdGNoLCBTaG93LCBTd2l0Y2ggfSBmcm9tIFwic29saWQtanNcIjtcclxuaW1wb3J0IHsgdXNlQ29kZUJsb2NrIH0gZnJvbSBcIkAvaG9va3MvdXNlRGF0YUVkaXRcIjtcclxuXHJcbi8vIFRPRE8gbWFrZSB0aGlzIHdvcmsgd2l0aCB0aGUgSWNvbmljIHBsdWdpblxyXG5leHBvcnQgY29uc3QgUHJvcGVydHlJY29uID0gKHByb3BzOiB7XHJcbiAgcHJvcGVydHk6IHN0cmluZztcclxuICB0eXBlOiBQcm9wZXJ0eVR5cGU7XHJcbn0pID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBkYXRhdmlld0FQSToge1xyXG4gICAgICBzZXR0aW5nczogeyB0YWJsZUlkQ29sdW1uTmFtZSB9LFxyXG4gICAgfSxcclxuICAgIGNvbmZpZzogeyBoZWFkZXJJY29ucyB9LFxyXG4gIH0gPSB1c2VDb2RlQmxvY2soKTtcclxuICByZXR1cm4gKFxyXG4gICAgLy8gPGRpdlxyXG4gICAgLy8gICBjbGFzcz1cIm1ldGFkYXRhLXByb3BlcnR5XCJcclxuICAgIC8vICAgZGF0YS1wcm9wZXJ0eS1rZXk9e3Byb3BzLnByb3BlcnR5fVxyXG4gICAgLy8gICBkYXRhLXByb3BlcnR5LXR5cGU9e3Byb3BzLnR5cGV9XHJcbiAgICAvLyA+XHJcbiAgICAvLyAgIDxzcGFuIGNsYXNzPVwibWV0YWRhdGEtcHJvcGVydHktaWNvblwiPlxyXG4gICAgPFNob3cgd2hlbj17aGVhZGVySWNvbnN9PlxyXG4gICAgICA8U3dpdGNoPlxyXG4gICAgICAgIDxNYXRjaFxyXG4gICAgICAgICAgd2hlbj17XHJcbiAgICAgICAgICAgIHByb3BzLnByb3BlcnR5ID09PSB0YWJsZUlkQ29sdW1uTmFtZSB8fFxyXG4gICAgICAgICAgICBwcm9wcy5wcm9wZXJ0eT8udG9Mb3dlckNhc2UoKSA9PT0gXCJmaWxlLmxpbmtcIlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxGaWxlIHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgICA8L01hdGNoPlxyXG4gICAgICAgIDxNYXRjaCB3aGVuPXtwcm9wcy50eXBlID09PSBcInRleHRcIn0+XHJcbiAgICAgICAgICA8QWxpZ25MZWZ0IHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgICA8L01hdGNoPlxyXG4gICAgICAgIDxNYXRjaCB3aGVuPXtwcm9wcy50eXBlID09PSBcIm11bHRpdGV4dFwifT5cclxuICAgICAgICAgIDxMaXN0IHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgICA8L01hdGNoPlxyXG4gICAgICAgIDxNYXRjaCB3aGVuPXtwcm9wcy50eXBlID09PSBcImNoZWNrYm94XCJ9PlxyXG4gICAgICAgICAgPFNxdWFyZUNoZWNrQmlnIHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgICA8L01hdGNoPlxyXG4gICAgICAgIDxNYXRjaCB3aGVuPXtwcm9wcy50eXBlID09PSBcIm51bWJlclwifT5cclxuICAgICAgICAgIDxCaW5hcnkgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cInN2Zy1pY29uIGx1Y2lkZS1iaW5hcnlcIiAvPlxyXG4gICAgICAgIDwvTWF0Y2g+XHJcbiAgICAgICAgPE1hdGNoIHdoZW49e3Byb3BzLnR5cGUgPT09IFwiZGF0ZVwifT5cclxuICAgICAgICAgIDxDYWxlbmRhciBzaXplPVwiMXJlbVwiIC8+XHJcbiAgICAgICAgPC9NYXRjaD5cclxuICAgICAgICA8TWF0Y2ggd2hlbj17cHJvcHMudHlwZSA9PT0gXCJkYXRldGltZVwifT5cclxuICAgICAgICAgIDxDbG9jayBzaXplPVwiMXJlbVwiIC8+XHJcbiAgICAgICAgPC9NYXRjaD5cclxuICAgICAgICA8TWF0Y2ggd2hlbj17cHJvcHMudHlwZSA9PT0gXCJ0YWdzXCJ9PlxyXG4gICAgICAgICAgPFRhZ3Mgc2l6ZT1cIjFyZW1cIiAvPlxyXG4gICAgICAgIDwvTWF0Y2g+XHJcbiAgICAgICAgPE1hdGNoIHdoZW49e3Byb3BzLnR5cGUgPT09IFwiYWxpYXNlc1wifT5cclxuICAgICAgICAgIDxDb3JuZXJVcFJpZ2h0IHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgICA8L01hdGNoPlxyXG4gICAgICAgIDxNYXRjaCB3aGVuPXtwcm9wcy50eXBlID09PSBcInVua25vd25cIn0+XHJcbiAgICAgICAgICA8U3BhcmtsZXMgc2l6ZT1cIjFyZW1cIiAvPlxyXG4gICAgICAgIDwvTWF0Y2g+XHJcbiAgICAgIDwvU3dpdGNoPlxyXG4gICAgPC9TaG93PlxyXG4gICAgLy8gICA8L3NwYW4+XHJcbiAgICAvLyA8L2Rpdj5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBNYXJrZG93biB9IGZyb20gXCJAL2NvbXBvbmVudHMvTWFya2Rvd25cIjtcclxuaW1wb3J0IHsgRGF0YXZpZXdRdWVyeVJlc3VsdEhlYWRlcnMgfSBmcm9tIFwiQC9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICBjcmVhdGVNZW1vLFxyXG4gIGNyZWF0ZVNpZ25hbCxcclxuICBGb3IsXHJcbiAgb25DbGVhbnVwLFxyXG4gIFNldHRlcixcclxuICBTaG93LFxyXG59IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgR3JpcEhvcml6b250YWwgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9HcmlwLWhvcml6b250YWxcIjtcclxuaW1wb3J0IHsgZHJhZ2dlZE92ZXJMZWZ0LCBkcmFnZ2VkT3ZlclJpZ2h0IH0gZnJvbSBcIi4uL1RhYmxlQm9keVwiO1xyXG5pbXBvcnQgeyBnZXRQcm9wZXJ0eVR5cGVzLCBnZXRUYWJsZUxpbmUsIFNjcm9sbEZpeGVyIH0gZnJvbSBcIkAvbGliL3V0aWxcIjtcclxuaW1wb3J0IHsgTWFya2Rvd25WaWV3IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IHVzZUNvZGVCbG9jayB9IGZyb20gXCJAL2hvb2tzL3VzZURhdGFFZGl0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSBcInNvbGlkLWpzL3N0b3JlXCI7XHJcbmltcG9ydCB7IFByb3BlcnR5SWNvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvUHJvcGVydHlJY29uXCI7XHJcblxyXG5leHBvcnQgdHlwZSBUYWJsZUhlYWRQcm9wcyA9IHtcclxuICBoZWFkZXJzOiBEYXRhdmlld1F1ZXJ5UmVzdWx0SGVhZGVycztcclxuICBwcm9wZXJ0aWVzOiBzdHJpbmdbXTtcclxuICBoaWdobGlnaHRJbmRleDogbnVtYmVyO1xyXG4gIHNldEhpZ2hsaWdodEluZGV4OiBTZXR0ZXI8bnVtYmVyPjtcclxuICBkcmFnZ2VkT3ZlckluZGV4OiBudW1iZXI7XHJcbiAgc2V0RHJhZ2dlZE92ZXJJbmRleDogU2V0dGVyPG51bWJlcj47XHJcbn07XHJcbmV4cG9ydCBjb25zdCBUYWJsZUhlYWQgPSAocHJvcHM6IFRhYmxlSGVhZFByb3BzKSA9PiB7XHJcbiAgY29uc3QgY29kZUJsb2NrSW5mbyA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIGNvbnN0IHtcclxuICAgIHBsdWdpbixcclxuICAgIGN0eCxcclxuICAgIGVsLFxyXG4gICAgcXVlcnksXHJcbiAgICBkYXRhdmlld0FQSToge1xyXG4gICAgICBzZXR0aW5nczogeyB0YWJsZUlkQ29sdW1uTmFtZSB9LFxyXG4gICAgfSxcclxuICAgIGhpZGVGaWxlQ29sLFxyXG4gIH0gPSBjb2RlQmxvY2tJbmZvO1xyXG4gIGNvbnN0IFt0cmFuc2xhdGVYLCBzZXRUcmFuc2xhdGVYXSA9IGNyZWF0ZVNpZ25hbCgwKTtcclxuICBjb25zdCBwcm9wZXJ0eVR5cGVzID0gY3JlYXRlTWVtbygoKSA9PlxyXG4gICAgZ2V0UHJvcGVydHlUeXBlcyhwcm9wcy5wcm9wZXJ0aWVzLCBwbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUpLFxyXG4gICk7XHJcbiAgbGV0IGxhc3RNb3VzZVBvcyA9IDA7XHJcblxyXG4gIGNvbnN0IG9uTW91c2VNb3ZlID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwibW91c2UgbW92ZSBjYWxsZWRcIik7XHJcbiAgICBpZiAocHJvcHMuaGlnaGxpZ2h0SW5kZXggPT09IC0xKSByZXR1cm47XHJcbiAgICBzZXRUcmFuc2xhdGVYKCgpID0+IGUuY2xpZW50WCAtIGxhc3RNb3VzZVBvcyk7XHJcbiAgfTtcclxuXHJcbiAgLy8gY29uc3Qgb25Nb3VzZVVwID0gYXN5bmMgKCkgPT4ge1xyXG4gIC8vICAgLy8gaWYgZHJhZ2dlZCBvdmVyIGEgY29sdW1uIG90aGVyIHRoYW4gdGhlIGhpZ2hsaWdodGVkIChkcmFnZ2luZykgb25lXHJcbiAgLy8gICBpZiAoXHJcbiAgLy8gICAgIHByb3BzLmRyYWdnZWRPdmVySW5kZXggIT09IC0xICYmXHJcbiAgLy8gICAgIHByb3BzLmRyYWdnZWRPdmVySW5kZXggIT09IHByb3BzLmhpZ2hsaWdodEluZGV4XHJcbiAgLy8gICApIHtcclxuICAvLyAgICAgY29uc3Qge1xyXG4gIC8vICAgICAgIHBsdWdpbixcclxuICAvLyAgICAgICBjdHgsXHJcbiAgLy8gICAgICAgZWwsXHJcbiAgLy8gICAgICAgcXVlcnksXHJcbiAgLy8gICAgICAgZGF0YXZpZXdBUEk6IHtcclxuICAvLyAgICAgICAgIHNldHRpbmdzOiB7IHRhYmxlSWRDb2x1bW5OYW1lIH0sXHJcbiAgLy8gICAgICAgfSxcclxuICAvLyAgICAgfSA9IHByb3BzLmNvZGVCbG9ja0luZm87XHJcbiAgLy8gICAgIGNvbnN0IHtcclxuICAvLyAgICAgICBhcHA6IHsgdmF1bHQsIHdvcmtzcGFjZSB9LFxyXG4gIC8vICAgICB9ID0gcGx1Z2luO1xyXG4gIC8vICAgICBjb25zdCB2aWV3ID0gd29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAvLyAgICAgY29uc3Qgc2VjdGlvbkluZm8gPSBjdHguZ2V0U2VjdGlvbkluZm8oZWwpO1xyXG4gIC8vICAgICAvLyB5b3Ugc2hvdWxkbid0IGJlIGFibGUgdG8gZ2V0IHRvIHRoaXMgcG9pbnQgaWYgaXQncyBudWxsXHJcbiAgLy8gICAgIGlmICghc2VjdGlvbkluZm8gfHwgIXZpZXcpIHtcclxuICAvLyAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNob3VsZCBiZSBpbXBvc3NpYmxlXCIpO1xyXG4gIC8vICAgICB9XHJcbiAgLy8gICAgIGNvbnN0IHsgbGluZVN0YXJ0LCB0ZXh0OiBjb250ZW50IH0gPSBzZWN0aW9uSW5mbztcclxuICAvLyAgICAgY29uc3QgZmlsZSA9IHZhdWx0LmdldEZpbGVCeVBhdGgoY3R4LnNvdXJjZVBhdGgpO1xyXG4gIC8vICAgICAvLyB5b3Ugc2hvdWxkbid0IGJlIGFibGUgdG8gZ2V0IHRvIHRoaXMgcG9pbnQgaWYgaXQncyBudWxsXHJcbiAgLy8gICAgIGlmICghZmlsZSkge1xyXG4gIC8vICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2hvdWxkIGJlIGltcG9zc2libGVcIik7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xyXG4gIC8vICAgICBjb25zdCB7IGxpbmU6IHByZVRhYmxlTGluZSwgaW5kZXggfSA9IGdldFRhYmxlTGluZShxdWVyeSk7XHJcbiAgLy8gICAgIC8vIGluZGV4IGlzIHJlbGF0aXZlIHRvIHRoZSBwcm92aWRlZCBzb3VyY2UsIHNvIHRoaXMgb2Zmc2V0cyB0byBhbiBpbmRleCBvZiB0aGUgd2hvbGUgbm90ZVxyXG4gIC8vICAgICAvLyBhZGQgb25lIGJlY2F1c2UgYHNvdXJjZWAgZG9lc24ndCBpbmNsdWRlIGJhY2t0aWNrcywgYnV0IGxpbmVTdGFydCBpcyB0aGUgZmlyc3QgYmFja3RpY2tzXHJcbiAgLy8gICAgIGNvbnN0IHRhYmxlTGluZUluZGV4ID0gbGluZVN0YXJ0ICsgaW5kZXggKyAxO1xyXG4gIC8vICAgICBjb25zdCBpc1dpdGhvdXRJZCA9IG5ldyBSZWdFeHAoL1RBQkxFXFxzK1dJVEhPVVRcXHMrSUQvZ2ltKS50ZXN0KFxyXG4gIC8vICAgICAgIHByZVRhYmxlTGluZSxcclxuICAvLyAgICAgKTtcclxuICAvLyAgICAgY29uc3QgaXNEcmFnZ2luZ0RlZmF1bHRJZCA9XHJcbiAgLy8gICAgICAgLy8gaWYgcXVlcnkgaGFzICdXSVRIT1VUIElEJyB3ZSBkb24ndCBjYXJlXHJcbiAgLy8gICAgICAgIWlzV2l0aG91dElkICYmXHJcbiAgLy8gICAgICAgLy8gZGVmYXVsdCBpZCBjb2wgaXMgYWx3YXlzIGZpcnN0XHJcbiAgLy8gICAgICAgcHJvcHMuaGlnaGxpZ2h0SW5kZXggPT09IDAgJiZcclxuICAvLyAgICAgICAvLyB0aGUgaGVhZGVyIHdpbGwgYWx3YXlzIGJlIHRoZSBuYW1lIGZyb20gZGF0YXZpZXcgc2V0dGluZ3NcclxuICAvLyAgICAgICBwcm9wcy5oZWFkZXJzW3Byb3BzLmhpZ2hsaWdodEluZGV4XSA9PT0gdGFibGVJZENvbHVtbk5hbWU7XHJcbiAgLy8gICAgIC8vIG5lZWQgdG8gY2hlY2sgc2VwYXJhdGVseSBmb3IgZHJhZ2dlZCBvdmVyIGJlY2F1c2UgaXQgd2lsbCBjaGFuZ2UgaG93IHdlIGFkanVzdCB0aGUgaGVhZGVyc1xyXG4gIC8vICAgICBjb25zdCBpc0RyYWdnZWRPdmVyRGVmYXVsdElkID1cclxuICAvLyAgICAgICAhaXNXaXRob3V0SWQgJiZcclxuICAvLyAgICAgICBwcm9wcy5kcmFnZ2VkT3ZlckluZGV4ID09PSAwICYmXHJcbiAgLy8gICAgICAgcHJvcHMuaGVhZGVyc1twcm9wcy5kcmFnZ2VkT3ZlckluZGV4XSA9PT0gdGFibGVJZENvbHVtbk5hbWU7XHJcbiAgLy8gICAgIGNvbnN0IGlzUmVsYXRpbmdUb0RlZmF1bHRJZCA9XHJcbiAgLy8gICAgICAgaXNEcmFnZ2luZ0RlZmF1bHRJZCB8fCBpc0RyYWdnZWRPdmVyRGVmYXVsdElkO1xyXG4gIC8vICAgICBjb25zdCB0YWJsZUxpbmUgPSBpc1JlbGF0aW5nVG9EZWZhdWx0SWRcclxuICAvLyAgICAgICA/IC8vIHRvICdtb3ZlJyB0aGUgZGVmYXVsdCBpZCBjb2wsIHdlIGhhdmUgdG8gbW9kaWZ5IHRoZSBxdWVyeSB0byBoYXZlIHRoaXMgYW5kIGEgZmlsZS5saW5rIGNvbFxyXG4gIC8vICAgICAgICAgcHJlVGFibGVMaW5lLnJlcGxhY2UoL3RhYmxlL2ksIFwiVEFCTEUgV0lUSE9VVCBJRFwiKVxyXG4gIC8vICAgICAgIDogcHJlVGFibGVMaW5lO1xyXG4gIC8vICAgICAvLyBUQUJMRSB2cyBUQUJMRSBXSVRIT1VUIElEXHJcbiAgLy8gICAgIGNvbnN0IHRhYmxlS2V5d29yZCA9IHRhYmxlTGluZVxyXG4gIC8vICAgICAgIC5zbGljZSgwLCBpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAxNiA6IDUpXHJcbiAgLy8gICAgICAgLnRyaW0oKTtcclxuICAvLyAgICAgY29uc3QgcHJlQ29scyA9IHRhYmxlTGluZVxyXG4gIC8vICAgICAgIC5zbGljZShpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAxNyA6IDYpXHJcbiAgLy8gICAgICAgLy8gc3BsaXQgb24gY29tbWEgdW5sZXNzIHN1cnJvdW5kZWQgYnkgZG91YmxlIHF1b3Rlc1xyXG4gIC8vICAgICAgIC5zcGxpdCgvLCg/PSg/Oig/OlteXCJdKlwiKXsyfSkqW15cIl0qJCkvKVxyXG4gIC8vICAgICAgIC5tYXAoKGMpID0+IGMudHJpbSgpKTtcclxuICAvLyAgICAgY29uc3QgY29scyA9IGlzUmVsYXRpbmdUb0RlZmF1bHRJZFxyXG4gIC8vICAgICAgID8gLy8gdGhpcyBpcyBob3cgd2UgYWxsb3cgdGhlIGRlZmF1bHQgaWQgY29sIHRvIGJlICdtb3ZlZCdcclxuICAvLyAgICAgICAgIFtcImZpbGUubGluayBBUyBcIiArIHRhYmxlSWRDb2x1bW5OYW1lLCAuLi5wcmVDb2xzXVxyXG4gIC8vICAgICAgIDogcHJlQ29scztcclxuICAvLyAgICAgLy8gbmVlZCB0byBvZmZzZXQgYm90aCBieSAxIGJlY2F1c2UgaWYgcXVlcnkgZG9lc24ndCBoYXZlICdXSVRIT1VUIElEJyB0aGVuIHRoZSBmaXJzdCBjb2x1bW4gaXMgdGhlIGRlZmF1bHQgaWQgY29sXHJcbiAgLy8gICAgIGNvbnN0IGhpZ2hsaWdodEluZGV4ID1cclxuICAvLyAgICAgICBwcm9wcy5oaWdobGlnaHRJbmRleCAtIChpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAwIDogMSk7XHJcbiAgLy8gICAgIGNvbnN0IGRyYWdnZWRJbmRleCA9XHJcbiAgLy8gICAgICAgcHJvcHMuZHJhZ2dlZE92ZXJJbmRleCAtIChpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAwIDogMSk7XHJcbiAgLy8gICAgIGNvbnN0IGNvbHNXaXRob3V0SGlnaGxpZ2h0ID0gY29scy50b1NwbGljZWQoaGlnaGxpZ2h0SW5kZXgsIDEpO1xyXG4gIC8vICAgICAvLyBpbnNlcnQgdGhlIGhpZ2hsaWdodCBjb2wgd2hlcmUgdGhlIGluZGljYXRvciBpc1xyXG4gIC8vICAgICBjb25zdCBuZXdDb2xzID0gY29sc1dpdGhvdXRIaWdobGlnaHQudG9TcGxpY2VkKFxyXG4gIC8vICAgICAgIGRyYWdnZWRJbmRleCxcclxuICAvLyAgICAgICAwLFxyXG4gIC8vICAgICAgIGNvbHNbaGlnaGxpZ2h0SW5kZXhdLFxyXG4gIC8vICAgICApO1xyXG4gIC8vICAgICAvLyByZWNvbnN0cnVjdCB0aGUgcXVlcnkgbGluZVxyXG4gIC8vICAgICBsaW5lc1t0YWJsZUxpbmVJbmRleF0gPSB0YWJsZUtleXdvcmQgKyBcIiBcIiArIG5ld0NvbHMuam9pbihcIiwgXCIpO1xyXG4gIC8vICAgICBjb25zdCBuZXdDb250ZW50ID0gbGluZXMuam9pbihcIlxcblwiKTtcclxuICAvLyAgICAgLy8gdXBkYXRlIHRoZSBmaWxlIHdpdGggbmV3IGxpbmVcclxuICAvLyAgICAgYXdhaXQgdmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQpO1xyXG4gIC8vICAgfVxyXG5cclxuICAvLyAgIHByb3BzLnNldEhpZ2hsaWdodEluZGV4KC0xKTtcclxuICAvLyAgIHByb3BzLnNldERyYWdnZWRPdmVySW5kZXgoLTEpO1xyXG4gIC8vICAgc2V0VHJhbnNsYXRlWCgwKTtcclxuICAvLyAgIGxhc3RNb3VzZVBvcyA9IDA7XHJcbiAgLy8gICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZSk7XHJcbiAgLy8gfTtcclxuXHJcbiAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZU1vdmUpO1xyXG5cclxuICBjb25zdCBvbk1vdXNlVXAgPSAoKSA9PiB7XHJcbiAgICAvLyBpZiBkcmFnZ2VkIG92ZXIgYSBjb2x1bW4gb3RoZXIgdGhhbiB0aGUgaGlnaGxpZ2h0ZWQgKGRyYWdnaW5nKSBvbmVcclxuICAgIGlmIChcclxuICAgICAgcHJvcHMuZHJhZ2dlZE92ZXJJbmRleCAhPT0gLTEgJiZcclxuICAgICAgcHJvcHMuZHJhZ2dlZE92ZXJJbmRleCAhPT0gcHJvcHMuaGlnaGxpZ2h0SW5kZXhcclxuICAgICkge1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgYXBwOiB7IHdvcmtzcGFjZSB9LFxyXG4gICAgICB9ID0gcGx1Z2luO1xyXG4gICAgICBjb25zdCB2aWV3ID0gd29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAgICAgY29uc3Qgc2VjdGlvbkluZm8gPSBjdHguZ2V0U2VjdGlvbkluZm8oZWwpO1xyXG4gICAgICAvLyB5b3Ugc2hvdWxkbid0IGJlIGFibGUgdG8gZ2V0IHRvIHRoaXMgcG9pbnQgaWYgaXQncyBudWxsXHJcbiAgICAgIGlmICghc2VjdGlvbkluZm8gfHwgIXZpZXcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNob3VsZCBiZSBpbXBvc3NpYmxlXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHsgbGluZVN0YXJ0IH0gPSBzZWN0aW9uSW5mbztcclxuICAgICAgY29uc3QgeyBsaW5lOiBwcmVQcmVUYWJsZUxpbmUsIGluZGV4IH0gPSBnZXRUYWJsZUxpbmUocXVlcnkpO1xyXG4gICAgICAvLyByZW1vdmUgaGlkZGVuIGNvbHVtbiBpZiBuZWVkZWRcclxuICAgICAgY29uc3QgcHJlVGFibGVMaW5lID0gaGlkZUZpbGVDb2xcclxuICAgICAgICA/IHByZVByZVRhYmxlTGluZS5zbGljZSgwLCAtMTEpXHJcbiAgICAgICAgOiBwcmVQcmVUYWJsZUxpbmU7XHJcbiAgICAgIC8vIGluZGV4IGlzIHJlbGF0aXZlIHRvIHRoZSBwcm92aWRlZCBzb3VyY2UsIHNvIHRoaXMgb2Zmc2V0cyB0byBhbiBpbmRleCBvZiB0aGUgd2hvbGUgbm90ZVxyXG4gICAgICAvLyBhZGQgb25lIGJlY2F1c2UgYHNvdXJjZWAgZG9lc24ndCBpbmNsdWRlIGJhY2t0aWNrcywgYnV0IGxpbmVTdGFydCBpcyB0aGUgZmlyc3QgYmFja3RpY2tzXHJcbiAgICAgIGNvbnN0IHRhYmxlTGluZUluZGV4ID0gbGluZVN0YXJ0ICsgaW5kZXggKyAxO1xyXG4gICAgICBjb25zdCBpc1dpdGhvdXRJZCA9IG5ldyBSZWdFeHAoL1RBQkxFXFxzK1dJVEhPVVRcXHMrSUQvZ2ltKS50ZXN0KFxyXG4gICAgICAgIHByZVRhYmxlTGluZSxcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgaXNEcmFnZ2luZ0RlZmF1bHRJZCA9XHJcbiAgICAgICAgLy8gaWYgcXVlcnkgaGFzICdXSVRIT1VUIElEJyB3ZSBkb24ndCBjYXJlXHJcbiAgICAgICAgIWlzV2l0aG91dElkICYmXHJcbiAgICAgICAgLy8gZGVmYXVsdCBpZCBjb2wgaXMgYWx3YXlzIGZpcnN0XHJcbiAgICAgICAgcHJvcHMuaGlnaGxpZ2h0SW5kZXggPT09IDAgJiZcclxuICAgICAgICAvLyB0aGUgaGVhZGVyIHdpbGwgYWx3YXlzIGJlIHRoZSBuYW1lIGZyb20gZGF0YXZpZXcgc2V0dGluZ3NcclxuICAgICAgICBwcm9wcy5oZWFkZXJzW3Byb3BzLmhpZ2hsaWdodEluZGV4XSA9PT0gdGFibGVJZENvbHVtbk5hbWU7XHJcbiAgICAgIC8vIG5lZWQgdG8gY2hlY2sgc2VwYXJhdGVseSBmb3IgZHJhZ2dlZCBvdmVyIGJlY2F1c2UgaXQgd2lsbCBjaGFuZ2UgaG93IHdlIGFkanVzdCB0aGUgaGVhZGVyc1xyXG4gICAgICBjb25zdCBpc0RyYWdnZWRPdmVyRGVmYXVsdElkID1cclxuICAgICAgICAhaXNXaXRob3V0SWQgJiZcclxuICAgICAgICBwcm9wcy5kcmFnZ2VkT3ZlckluZGV4ID09PSAwICYmXHJcbiAgICAgICAgcHJvcHMuaGVhZGVyc1twcm9wcy5kcmFnZ2VkT3ZlckluZGV4XSA9PT0gdGFibGVJZENvbHVtbk5hbWU7XHJcbiAgICAgIGNvbnN0IGlzUmVsYXRpbmdUb0RlZmF1bHRJZCA9XHJcbiAgICAgICAgaXNEcmFnZ2luZ0RlZmF1bHRJZCB8fCBpc0RyYWdnZWRPdmVyRGVmYXVsdElkO1xyXG4gICAgICBjb25zdCB0YWJsZUxpbmUgPSBpc1JlbGF0aW5nVG9EZWZhdWx0SWRcclxuICAgICAgICA/IC8vIHRvICdtb3ZlJyB0aGUgZGVmYXVsdCBpZCBjb2wsIHdlIGhhdmUgdG8gbW9kaWZ5IHRoZSBxdWVyeSB0byBoYXZlIHRoaXMgYW5kIGEgZmlsZS5saW5rIGNvbFxyXG4gICAgICAgICAgcHJlVGFibGVMaW5lLnJlcGxhY2UoL3RhYmxlL2ksIFwiVEFCTEUgV0lUSE9VVCBJRFwiKVxyXG4gICAgICAgIDogcHJlVGFibGVMaW5lO1xyXG4gICAgICAvLyBUQUJMRSB2cyBUQUJMRSBXSVRIT1VUIElEXHJcbiAgICAgIGNvbnN0IHRhYmxlS2V5d29yZCA9IHRhYmxlTGluZVxyXG4gICAgICAgIC5zbGljZSgwLCBpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAxNiA6IDUpXHJcbiAgICAgICAgLnRyaW0oKTtcclxuICAgICAgY29uc3QgcHJlQ29scyA9IHRhYmxlTGluZVxyXG4gICAgICAgIC5zbGljZShpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAxNyA6IDYpXHJcbiAgICAgICAgLy8gc3BsaXQgb24gY29tbWEgdW5sZXNzIHN1cnJvdW5kZWQgYnkgZG91YmxlIHF1b3Rlc1xyXG4gICAgICAgIC5zcGxpdCgvLCg/PSg/Oig/OlteXCJdKlwiKXsyfSkqW15cIl0qJCkvKVxyXG4gICAgICAgIC5tYXAoKGMpID0+IGMudHJpbSgpKTtcclxuICAgICAgY29uc3QgY29scyA9IGlzUmVsYXRpbmdUb0RlZmF1bHRJZFxyXG4gICAgICAgID8gLy8gdGhpcyBpcyBob3cgd2UgYWxsb3cgdGhlIGRlZmF1bHQgaWQgY29sIHRvIGJlICdtb3ZlZCdcclxuICAgICAgICAgIFtcImZpbGUubGluayBBUyBcIiArIHRhYmxlSWRDb2x1bW5OYW1lLCAuLi5wcmVDb2xzXVxyXG4gICAgICAgIDogcHJlQ29scztcclxuICAgICAgLy8gbmVlZCB0byBvZmZzZXQgYm90aCBieSAxIGJlY2F1c2UgaWYgcXVlcnkgZG9lc24ndCBoYXZlICdXSVRIT1VUIElEJyB0aGVuIHRoZSBmaXJzdCBjb2x1bW4gaXMgdGhlIGRlZmF1bHQgaWQgY29sXHJcbiAgICAgIGNvbnN0IGhpZ2hsaWdodEluZGV4ID1cclxuICAgICAgICBwcm9wcy5oaWdobGlnaHRJbmRleCAtIChpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAwIDogMSk7XHJcbiAgICAgIGNvbnN0IGRyYWdnZWRJbmRleCA9XHJcbiAgICAgICAgcHJvcHMuZHJhZ2dlZE92ZXJJbmRleCAtIChpc1dpdGhvdXRJZCB8fCBpc1JlbGF0aW5nVG9EZWZhdWx0SWQgPyAwIDogMSk7XHJcbiAgICAgIGNvbnN0IGNvbHNXaXRob3V0SGlnaGxpZ2h0ID0gY29scy50b1NwbGljZWQoaGlnaGxpZ2h0SW5kZXgsIDEpO1xyXG4gICAgICAvLyBpbnNlcnQgdGhlIGhpZ2hsaWdodCBjb2wgd2hlcmUgdGhlIGluZGljYXRvciBpc1xyXG4gICAgICBjb25zdCBuZXdDb2xzID0gY29sc1dpdGhvdXRIaWdobGlnaHQudG9TcGxpY2VkKFxyXG4gICAgICAgIGRyYWdnZWRJbmRleCxcclxuICAgICAgICAwLFxyXG4gICAgICAgIGNvbHNbaGlnaGxpZ2h0SW5kZXhdLFxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3Qgc2Nyb2xsRml4ZXIgPSBuZXcgU2Nyb2xsRml4ZXIoZWwpO1xyXG4gICAgICB2aWV3LmVkaXRvci5zZXRMaW5lKFxyXG4gICAgICAgIHRhYmxlTGluZUluZGV4LFxyXG4gICAgICAgIHRhYmxlS2V5d29yZCArIFwiIFwiICsgbmV3Q29scy5qb2luKFwiLCBcIiksXHJcbiAgICAgICk7XHJcbiAgICAgIHNjcm9sbEZpeGVyLmZpeCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3BzLnNldEhpZ2hsaWdodEluZGV4KC0xKTtcclxuICAgIHByb3BzLnNldERyYWdnZWRPdmVySW5kZXgoLTEpO1xyXG4gICAgc2V0VHJhbnNsYXRlWCgwKTtcclxuICAgIGxhc3RNb3VzZVBvcyA9IDA7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZSk7XHJcbiAgfTtcclxuXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG9uTW91c2VVcCk7XHJcblxyXG4gIG9uQ2xlYW51cCgoKSA9PiB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZSk7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgb25Nb3VzZVVwKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDx0aGVhZD5cclxuICAgICAgPFNob3cgd2hlbj17IWNvZGVCbG9ja0luZm8uY29uZmlnLmxvY2tFZGl0aW5nfT5cclxuICAgICAgICA8dHI+XHJcbiAgICAgICAgICA8Rm9yIGVhY2g9e3Byb3BzLmhlYWRlcnN9PlxyXG4gICAgICAgICAgICB7KF8sIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgPFNob3dcclxuICAgICAgICAgICAgICAgIHdoZW49e1xyXG4gICAgICAgICAgICAgICAgICAhKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvZGVCbG9ja0luZm8uaGlkZUZpbGVDb2wgJiZcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCgpID09PSBwcm9wcy5oZWFkZXJzLmxlbmd0aCAtIDFcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDx0aFxyXG4gICAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5zZXRIaWdobGlnaHRJbmRleChpbmRleCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2xhdGVYKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNb3VzZVBvcyA9IGUuY2xpZW50WDtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgIG9uTW91c2VNb3ZlPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmhpZ2hsaWdodEluZGV4ID09PSAtMSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnNldERyYWdnZWRPdmVySW5kZXgoaW5kZXgoKSk7XHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgIC8vIG9uTW91c2VVcD17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAvLyAgIHByb3BzLnNldEhpZ2hsaWdodEluZGV4KC0xKTtcclxuICAgICAgICAgICAgICAgICAgLy8gICBzZXRUcmFuc2xhdGVYKDApO1xyXG4gICAgICAgICAgICAgICAgICAvLyAgIGxhc3RNb3VzZVBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIC8vIH19XHJcbiAgICAgICAgICAgICAgICAgIC8vIG9uTW91c2VNb3ZlPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAvLyAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgLy8gICBzZXRUcmFuc2xhdGVYKCgpID0+IGUuY2xpZW50WCAtIGxhc3RNb3VzZVBvcyk7XHJcbiAgICAgICAgICAgICAgICAgIC8vIH19XHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPXtgcmVsYXRpdmUgbS0wIGN1cnNvci1ncmFiIG92ZXJmbG93LXZpc2libGUgYm9yZGVyLXgtdHJhbnNwYXJlbnQgYm9yZGVyLXQtdHJhbnNwYXJlbnQgcC0wIHRleHQtbXV0ZWQgYWN0aXZlOmN1cnNvci1ncmFiYmluZyAke2luZGV4KCkgPT09IHByb3BzLmhpZ2hsaWdodEluZGV4ID8gXCJvcGFjaXR5LTEwMFwiIDogXCJvcGFjaXR5LTBcIn0gJHtwcm9wcy5oaWdobGlnaHRJbmRleCA9PT0gLTEgPyBcImhvdmVyOm9wYWNpdHktMTAwXCIgOiBcIlwifWB9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj1cImNvbHVtbi1kcmFnLWhhbmRsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9e2BmbGV4IHNpemUtZnVsbCBpdGVtcy1lbmQganVzdGlmeS1jZW50ZXJgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtcclxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4KCkgPT09IHByb3BzLmhpZ2hsaWdodEluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoc2wodmFyKC0tYWNjZW50LWgpIHZhcigtLWFjY2VudC1zKSB2YXIoLS1hY2NlbnQtbCkpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1yYWRpdXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YXIoLS1yYWRpdXMtcykgdmFyKC0tcmFkaXVzLXMpIDAgMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlOiB0cmFuc2xhdGVYKCkgKyBcInB4IDBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicG9pbnRlci1ldmVudHNcIjogXCJub25lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHByb3BzLmhpZ2hsaWdodEluZGV4ICE9PSAtMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IFwiZ3JhYmJpbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaXBIb3Jpem9udGFsIHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgICAgIDwvU2hvdz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvRm9yPlxyXG4gICAgICAgIDwvdHI+XHJcbiAgICAgIDwvU2hvdz5cclxuICAgICAgPHRyPlxyXG4gICAgICAgIDxGb3IgZWFjaD17cHJvcHMuaGVhZGVyc30+XHJcbiAgICAgICAgICB7KGgsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgIDxTaG93XHJcbiAgICAgICAgICAgICAgd2hlbj17XHJcbiAgICAgICAgICAgICAgICAhKFxyXG4gICAgICAgICAgICAgICAgICBjb2RlQmxvY2tJbmZvLmhpZGVGaWxlQ29sICYmXHJcbiAgICAgICAgICAgICAgICAgIGluZGV4KCkgPT09IHByb3BzLmhlYWRlcnMubGVuZ3RoIC0gMVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDx0aFxyXG4gICAgICAgICAgICAgICAgb25Nb3VzZU1vdmU9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmhpZ2hsaWdodEluZGV4ID09PSAtMSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICBwcm9wcy5zZXREcmFnZ2VkT3ZlckluZGV4KGluZGV4KCkpO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIGNsYXNzPVwicmVsYXRpdmUgdGV4dC1ub3dyYXBcIlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e1xyXG4gICAgICAgICAgICAgICAgICBpbmRleCgpID09PSBwcm9wcy5oaWdobGlnaHRJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci10b3Atd2lkdGhcIjogXCIycHhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItbGVmdC13aWR0aFwiOiBcIjJweFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1yaWdodC13aWR0aFwiOiBcIjJweFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci10b3AtY29sb3JcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImhzbCh2YXIoLS1hY2NlbnQtaCkgdmFyKC0tYWNjZW50LXMpIHZhcigtLWFjY2VudC1sKSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItbGVmdC1jb2xvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaHNsKHZhcigtLWFjY2VudC1oKSB2YXIoLS1hY2NlbnQtcykgdmFyKC0tYWNjZW50LWwpKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1yaWdodC1jb2xvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaHNsKHZhcigtLWFjY2VudC1oKSB2YXIoLS1hY2NlbnQtcykgdmFyKC0tYWNjZW50LWwpKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogYGhzbCh2YXIoLS1hY2NlbnQtaCkgdmFyKC0tYWNjZW50LXMpIHZhcigtLWFjY2VudC1sKSAvIDEwJSlgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogcHJvcHMuaGlnaGxpZ2h0SW5kZXggIT09IC0xICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4KCkgPT09IHByb3BzLmRyYWdnZWRPdmVySW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHMuaGlnaGxpZ2h0SW5kZXggPCBpbmRleCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZHJhZ2dlZE92ZXJSaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGRyYWdnZWRPdmVyTGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICAgOiB7fVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICA8TWFya2Rvd25cclxuICAgICAgICAgICAgICAgICAgICBhcHA9e3BsdWdpbi5hcHB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2Rvd249e2h9XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aD17Y3R4LnNvdXJjZVBhdGh9XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICA8UHJvcGVydHlJY29uXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BzLnByb3BlcnRpZXNbaW5kZXgoKV19XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT17cHJvcGVydHlUeXBlcygpW2luZGV4KCldfVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgPC9TaG93PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L0Zvcj5cclxuICAgICAgPC90cj5cclxuICAgIDwvdGhlYWQ+XHJcbiAgKTtcclxufTtcclxuIiwiaW1wb3J0IHtcclxuICBNb2RpZmllZERhdGF2aWV3UXVlcnlSZXN1bHQsXHJcbiAgRGF0YXZpZXdRdWVyeVJlc3VsdFN1Y2Nlc3MsXHJcbiAgRGF0YXZpZXdRdWVyeVJlc3VsdCxcclxuICBEYXRhdmlld1F1ZXJ5UmVzdWx0RmFpbCxcclxufSBmcm9tIFwiQC9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCBGb3IsIFNob3csIGNyZWF0ZU1lbW8sIFNldHRlciB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyBUYWJsZUJvZHkgfSBmcm9tIFwiLi9UYWJsZUJvZHlcIjtcclxuaW1wb3J0IHsgVGFibGVIZWFkIH0gZnJvbSBcIi4vVGFibGVIZWFkXCI7XHJcbmltcG9ydCBQbHVzIGZyb20gXCJsdWNpZGUtc29saWQvaWNvbnMvUGx1c1wiO1xyXG5pbXBvcnQgeyBhdXRvZm9jdXMgfSBmcm9tIFwiQHNvbGlkLXByaW1pdGl2ZXMvYXV0b2ZvY3VzXCI7XHJcbmltcG9ydCB7XHJcbiAgRGlhbG9nLFxyXG4gIERpYWxvZ0NvbnRlbnQsXHJcbiAgRGlhbG9nVGl0bGUsXHJcbiAgRGlhbG9nVHJpZ2dlcixcclxufSBmcm9tIFwiLi4vdWkvZGlhbG9nXCI7XHJcbmltcG9ydCB7XHJcbiAgZ2V0RXhpc3RpbmdQcm9wZXJ0aWVzLFxyXG4gIGdldFRhYmxlTGluZSxcclxuICBnZXRUZW1wbGF0ZUZpbGVzLFxyXG4gIHVwZGF0ZUJsb2NrQ29uZmlnLFxyXG59IGZyb20gXCJAL2xpYi91dGlsXCI7XHJcbmltcG9ydCB7IE1hcmtkb3duIH0gZnJvbSBcIi4uL01hcmtkb3duXCI7XHJcbmltcG9ydCB7IE1hcmtkb3duVmlldywgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IHVzZUNvZGVCbG9jayB9IGZyb20gXCJAL2hvb2tzL3VzZURhdGFFZGl0XCI7XHJcbi8vIHByZXZlbnRzIGZyb20gYmVpbmcgdHJlZS1zaGFrZW4gYnkgVFNcclxuYXV0b2ZvY3VzO1xyXG5cclxudHlwZSBUYWJsZVByb3BzID0ge1xyXG4gIHF1ZXJ5UmVzdWx0czogTW9kaWZpZWREYXRhdmlld1F1ZXJ5UmVzdWx0O1xyXG4gIGhpZGVGaWxlQ29sOiBib29sZWFuO1xyXG59O1xyXG5leHBvcnQgY29uc3QgVGFibGUgPSAocHJvcHM6IFRhYmxlUHJvcHMpID0+IHtcclxuICBjb25zdCBjb2RlQmxvY2tJbmZvID0gdXNlQ29kZUJsb2NrKCk7XHJcbiAgY29uc3Qge1xyXG4gICAgY29uZmlnOiB7IHRhYmxlQ2xhc3NOYW1lIH0sXHJcbiAgfSA9IGNvZGVCbG9ja0luZm87XHJcbiAgY29uc3QgW2hpZ2hsaWdodEluZGV4LCBzZXRIaWdobGlnaHRJbmRleF0gPSBjcmVhdGVTaWduYWwoLTEpO1xyXG4gIGNvbnN0IFtkcmFnZ2VkT3ZlckluZGV4LCBzZXREcmFnZ2VkT3ZlckluZGV4XSA9IGNyZWF0ZVNpZ25hbCgtMSk7XHJcbiAgY29uc3QgW2lzQWRkQ29sdW1uRGlhbG9nT3Blbiwgc2V0QWRkQ29sdW1uRGlhbG9nT3Blbl0gPSBjcmVhdGVTaWduYWwoZmFsc2UpO1xyXG4gIGNvbnN0IFtpc0FkZFJvd0RpYWxvZ09wZW4sIHNldEFkZFJvd0RpYWxvZ09wZW5dID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcclxuICByZXR1cm4gKFxyXG4gICAgPFNob3dcclxuICAgICAgd2hlbj17cHJvcHMucXVlcnlSZXN1bHRzLnN1Y2Nlc3NmdWx9XHJcbiAgICAgIGZhbGxiYWNrPXs8VGFibGVGYWxsYmFjayBxdWVyeVJlc3VsdHM9e3Byb3BzLnF1ZXJ5UmVzdWx0c30gLz59XHJcbiAgICA+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzcz1cInJlbGF0aXZlIG1iLTQgbXItNCBoLWZpdCB3LWZpdFwiXHJcbiAgICAgICAgLy8gc3R5bGU9e3sgXCJvdmVyZmxvdy15XCI6IFwidmlzaWJsZVwiIH19XHJcbiAgICAgID5cclxuICAgICAgICA8dGFibGVcclxuICAgICAgICAgIGNsYXNzPXt0YWJsZUNsYXNzTmFtZX1cclxuICAgICAgICAgIHN0eWxlPXtcclxuICAgICAgICAgICAgaGlnaGxpZ2h0SW5kZXgoKSAhPT0gLTFcclxuICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgXCJ1c2VyLXNlbGVjdFwiOiBcIm5vbmVcIixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA6IHt9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFRhYmxlSGVhZFxyXG4gICAgICAgICAgICBoZWFkZXJzPXtcclxuICAgICAgICAgICAgICAocHJvcHMucXVlcnlSZXN1bHRzIGFzIERhdGF2aWV3UXVlcnlSZXN1bHRTdWNjZXNzKS52YWx1ZS5oZWFkZXJzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvcGVydGllcz17cHJvcHMucXVlcnlSZXN1bHRzLnRydWVQcm9wZXJ0eU5hbWVzfVxyXG4gICAgICAgICAgICBoaWdobGlnaHRJbmRleD17aGlnaGxpZ2h0SW5kZXgoKX1cclxuICAgICAgICAgICAgc2V0SGlnaGxpZ2h0SW5kZXg9e3NldEhpZ2hsaWdodEluZGV4fVxyXG4gICAgICAgICAgICBkcmFnZ2VkT3ZlckluZGV4PXtkcmFnZ2VkT3ZlckluZGV4KCl9XHJcbiAgICAgICAgICAgIHNldERyYWdnZWRPdmVySW5kZXg9e3NldERyYWdnZWRPdmVySW5kZXh9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFRhYmxlQm9keVxyXG4gICAgICAgICAgICBoZWFkZXJzPXtcclxuICAgICAgICAgICAgICAocHJvcHMucXVlcnlSZXN1bHRzIGFzIERhdGF2aWV3UXVlcnlSZXN1bHRTdWNjZXNzKS52YWx1ZS5oZWFkZXJzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvcGVydGllcz17cHJvcHMucXVlcnlSZXN1bHRzLnRydWVQcm9wZXJ0eU5hbWVzfVxyXG4gICAgICAgICAgICByb3dzPXtcclxuICAgICAgICAgICAgICAocHJvcHMucXVlcnlSZXN1bHRzIGFzIERhdGF2aWV3UXVlcnlSZXN1bHRTdWNjZXNzKS52YWx1ZS52YWx1ZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBoaWdobGlnaHRJbmRleD17aGlnaGxpZ2h0SW5kZXgoKX1cclxuICAgICAgICAgICAgc2V0SGlnaGxpZ2h0SW5kZXg9e3NldEhpZ2hsaWdodEluZGV4fVxyXG4gICAgICAgICAgICBkcmFnZ2VkT3ZlckluZGV4PXtkcmFnZ2VkT3ZlckluZGV4KCl9XHJcbiAgICAgICAgICAgIHNldERyYWdnZWRPdmVySW5kZXg9e3NldERyYWdnZWRPdmVySW5kZXh9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgPFNob3cgd2hlbj17IWNvZGVCbG9ja0luZm8uY29uZmlnLmxvY2tFZGl0aW5nfT5cclxuICAgICAgICAgIDxBZGRDb2x1bW5CdXR0b25cclxuICAgICAgICAgICAgb3Blbj17aXNBZGRDb2x1bW5EaWFsb2dPcGVuKCl9XHJcbiAgICAgICAgICAgIHNldE9wZW49e3NldEFkZENvbHVtbkRpYWxvZ09wZW59XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0QWRkUm93RGlhbG9nT3Blbih0cnVlKX1cclxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkFkZCByb3cgYWZ0ZXJcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImFic29sdXRlIGJvdHRvbS1bLTFyZW1dIGxlZnQtMCBmbGV4IHctZnVsbCBjdXJzb3ItbnMtcmVzaXplIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLVsxcHhdIGJvcmRlciBib3JkZXItdC0wIGJvcmRlci1zb2xpZCBib3JkZXItYm9yZGVyIG9wYWNpdHktMCBob3ZlcjpvcGFjaXR5LTUwXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFBsdXMgc2l6ZT1cIjFyZW1cIiAvPlxyXG4gICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPEFkZFJvd0J1dHRvblxyXG4gICAgICAgICAgICBvcGVuPXtpc0FkZFJvd0RpYWxvZ09wZW4oKX1cclxuICAgICAgICAgICAgc2V0T3Blbj17c2V0QWRkUm93RGlhbG9nT3Blbn1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9TaG93PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvU2hvdz5cclxuICApO1xyXG59O1xyXG5cclxudHlwZSBUYWJsZUZhbGxiYWNrUHJvcHMgPSB7IHF1ZXJ5UmVzdWx0czogRGF0YXZpZXdRdWVyeVJlc3VsdCB9O1xyXG5jb25zdCBUYWJsZUZhbGxiYWNrID0gKHByb3BzOiBUYWJsZUZhbGxiYWNrUHJvcHMpID0+IHtcclxuICAvL1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8aDI+RGF0YXZpZXcgZXJyb3I8L2gyPlxyXG4gICAgICA8cD57KHByb3BzLnF1ZXJ5UmVzdWx0cyBhcyBEYXRhdmlld1F1ZXJ5UmVzdWx0RmFpbCkuZXJyb3J9PC9wPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IEFkZENvbHVtbkJ1dHRvbiA9IChwcm9wczoge1xyXG4gIG9wZW46IGJvb2xlYW47XHJcbiAgc2V0T3BlbjogU2V0dGVyPGJvb2xlYW4+O1xyXG59KSA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcGx1Z2luOiB7IGFwcCB9LFxyXG4gICAgY3R4LFxyXG4gICAgZWwsXHJcbiAgICBxdWVyeSxcclxuICB9ID0gdXNlQ29kZUJsb2NrKCk7XHJcblxyXG4gIGNvbnN0IHZpZXcgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHJcbiAgaWYgKCF2aWV3KSB7XHJcbiAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNob3VsZCBiZSBpbXBvc3NpYmxlXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2VjdGlvbkluZm8gPSBjdHguZ2V0U2VjdGlvbkluZm8oZWwpO1xyXG4gIGlmICghc2VjdGlvbkluZm8pIHtcclxuICAgIC8vIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2hvdWxkIGJlIGltcG9zc2libGVcIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnN0IHsgbGluZVN0YXJ0IH0gPSBzZWN0aW9uSW5mbztcclxuXHJcbiAgY29uc3QgW3Byb3BlcnR5VmFsdWUsIHNldFByb3BlcnR5VmFsdWVdID0gY3JlYXRlU2lnbmFsKFwiXCIpO1xyXG4gIGNvbnN0IFthbGlhc1ZhbHVlLCBzZXRBbGlhc1ZhbHVlXSA9IGNyZWF0ZVNpZ25hbChcIlwiKTtcclxuXHJcbiAgY29uc3QgbWFya2Rvd24gPSBjcmVhdGVNZW1vKCgpID0+IHtcclxuICAgIGNvbnN0IHByb3AgPSBwcm9wZXJ0eVZhbHVlKCkudHJpbSgpO1xyXG4gICAgY29uc3QgbGluZXMgPSAoXCJgYGBkYXRhdmlld1xcblwiICsgcXVlcnkgKyBcIlxcbmBgYFwiKS5zcGxpdChcIlxcblwiKTtcclxuICAgIGlmICghcHJvcCkgcmV0dXJuIGxpbmVzLmpvaW4oXCJcXG5cIik7XHJcbiAgICBjb25zdCBhbGlhcyA9IGFsaWFzVmFsdWUoKTtcclxuICAgIGNvbnN0IGFsaWFzU3RyID0gYWxpYXNcclxuICAgICAgPyBcIiBBUyBcIiArIChhbGlhcy5pbmNsdWRlcyhcIiBcIikgPyAnXCInICsgYWxpYXMgKyAnXCInIDogYWxpYXMpXHJcbiAgICAgIDogXCJcIjtcclxuICAgIGNvbnN0IHsgaW5kZXggfSA9IGdldFRhYmxlTGluZShxdWVyeSk7XHJcbiAgICAvLyBvZmZzZXQgYnkgMSBzaW5jZSBzb3VyY2UgZG9lc24ndCBpbmNsdWRlIGJhY2t0aWNrcyB3ZSBhZGRlZCB0byBsaW5lc1xyXG4gICAgbGluZXNbaW5kZXggKyAxXSArPSBcIiwgXCIgKyBwcm9wICsgYWxpYXNTdHI7XHJcbiAgICByZXR1cm4gbGluZXMuam9pbihcIlxcblwiKTtcclxuICB9KTtcclxuXHJcbiAgY29uc3QgYWRkQ29sID0gKCkgPT4ge1xyXG4gICAgY29uc3QgcHJvcCA9IHByb3BlcnR5VmFsdWUoKS50cmltKCk7XHJcbiAgICBjb25zdCBhbGlhcyA9IGFsaWFzVmFsdWUoKTtcclxuICAgIGNvbnN0IGFsaWFzU3RyID0gYWxpYXNcclxuICAgICAgPyBcIiBBUyBcIiArIChhbGlhcy5pbmNsdWRlcyhcIiBcIikgPyAnXCInICsgYWxpYXMgKyAnXCInIDogYWxpYXMpXHJcbiAgICAgIDogXCJcIjtcclxuICAgIGNvbnN0IHsgbGluZSwgaW5kZXggfSA9IGdldFRhYmxlTGluZShxdWVyeSk7XHJcbiAgICAvLyBvZmZzZXQgYnkgMSBzaW5jZSBsaW5lU3RhcnQgaXMgd2l0aCBiYWNrdGlja3MgYnV0IHF1ZXJ5IGlzIHdpdGhvdXRcclxuICAgIGNvbnN0IHJlbGF0aXZlSW5kZXggPSBsaW5lU3RhcnQgKyBpbmRleCArIDE7XHJcbiAgICB2aWV3LmVkaXRvci5zZXRMaW5lKHJlbGF0aXZlSW5kZXgsIGxpbmUgKyBcIiwgXCIgKyBwcm9wICsgYWxpYXNTdHIpO1xyXG4gICAgLy8gbGluZXNbaW5kZXggKyAxXSArPSBcIiwgXCIgKyBwcm9wICsgYWxpYXNTdHI7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcHJvcGVydGllcyA9IGdldEV4aXN0aW5nUHJvcGVydGllcyhhcHApO1xyXG4gIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5zb3J0KCk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxEaWFsb2cgb3Blbj17cHJvcHMub3Blbn0gb25PcGVuQ2hhbmdlPXsoYikgPT4gcHJvcHMuc2V0T3BlbihiKX0+XHJcbiAgICAgIDxEaWFsb2dUcmlnZ2VyXHJcbiAgICAgICAgYXJpYS1sYWJlbD1cIkFkZCBjb2x1bW4gYWZ0ZXJcIlxyXG4gICAgICAgIGNsYXNzPVwiYWJzb2x1dGUgcmlnaHQtWy0xcmVtXSB0b3AtW2NhbGMoMXJlbSt2YXIoLS1ib3JkZXItd2lkdGgpKV0gbS0wIGZsZXggc2l6ZS1maXQgaC1bY2FsYygxMDAlLTFyZW0tdmFyKC0tYm9yZGVyLXdpZHRoKSldIGN1cnNvci1ldy1yZXNpemUgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJvdW5kZWQtbm9uZSBib3JkZXIgYm9yZGVyLWwtMCBib3JkZXItc29saWQgYm9yZGVyLWJvcmRlciBiZy10cmFuc3BhcmVudCBwLTAgb3BhY2l0eS0wIHNoYWRvdy1ub25lIGhvdmVyOm9wYWNpdHktNTBcIlxyXG4gICAgICA+XHJcbiAgICAgICAgey8qIDxzcGFuXHJcbiAgICAgICAgICBjbGFzcz1cImFic29sdXRlIHJpZ2h0LVstMXJlbV0gdG9wLVtjYWxjKDFyZW0rdmFyKC0tYm9yZGVyLXdpZHRoKSldIGZsZXggaC1bY2FsYygxMDAlLTFyZW0tdmFyKC0tYm9yZGVyLXdpZHRoKSldIGN1cnNvci1ldy1yZXNpemUgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGJvcmRlciBib3JkZXItbC0wIGJvcmRlci1ib3JkZXIgb3BhY2l0eS0wIGhvdmVyOm9wYWNpdHktNTBcIlxyXG4gICAgICAgID4gKi99XHJcbiAgICAgICAgPFBsdXMgc2l6ZT1cIjFyZW1cIiAvPlxyXG4gICAgICAgIHsvKiA8L3NwYW4+ICovfVxyXG4gICAgICA8L0RpYWxvZ1RyaWdnZXI+XHJcbiAgICAgIDxEaWFsb2dDb250ZW50PlxyXG4gICAgICAgIDxEaWFsb2dUaXRsZT5BZGQgY29sdW1uPC9EaWFsb2dUaXRsZT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCB3LWZ1bGwgZmxleC13cmFwIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW5cIj5cclxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJwcm9wZXJ0eS1pbnB1dFwiPlByb3BlcnR5OiA8L2xhYmVsPlxyXG4gICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIHVzZTphdXRvZm9jdXNcclxuICAgICAgICAgICAgYXV0b2ZvY3VzXHJcbiAgICAgICAgICAgIG5hbWU9XCJwcm9wZXJ0eS1pbnB1dFwiXHJcbiAgICAgICAgICAgIGlkPVwicHJvcGVydHktaW5wdXRcIlxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgIGxpc3Q9XCJwcm9wZXJ0aWVzLWRhdGFsaXN0XCJcclxuICAgICAgICAgICAgdmFsdWU9e3Byb3BlcnR5VmFsdWUoKX1cclxuICAgICAgICAgICAgb25JbnB1dD17KGUpID0+IHNldFByb3BlcnR5VmFsdWUoZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxkYXRhbGlzdCBpZD1cInByb3BlcnRpZXMtZGF0YWxpc3RcIj5cclxuICAgICAgICAgICAgPEZvciBlYWNoPXtwcm9wZXJ0eU5hbWVzfT5cclxuICAgICAgICAgICAgICB7KHByb3ApID0+IDxvcHRpb24gdmFsdWU9e3Byb3B9Pntwcm9wZXJ0aWVzW3Byb3BdLnR5cGV9PC9vcHRpb24+fVxyXG4gICAgICAgICAgICA8L0Zvcj5cclxuICAgICAgICAgIDwvZGF0YWxpc3Q+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggdy1mdWxsIGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XHJcbiAgICAgICAgICA8bGFiZWwgZm9yPVwiYWxpYXMtaW5wdXRcIj5BbGlhcyAob3B0aW9uYWwpOiA8L2xhYmVsPlxyXG4gICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIG5hbWU9XCJhbGlhcy1pbnB1dFwiXHJcbiAgICAgICAgICAgIGlkPVwiYWxpYXMtaW5wdXRcIlxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgIHZhbHVlPXthbGlhc1ZhbHVlKCl9XHJcbiAgICAgICAgICAgIG9uSW5wdXQ9eyhlKSA9PiBzZXRBbGlhc1ZhbHVlKGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPE1hcmtkb3duXHJcbiAgICAgICAgICBhcHA9e2FwcH1cclxuICAgICAgICAgIG1hcmtkb3duPXttYXJrZG93bigpfVxyXG4gICAgICAgICAgc291cmNlUGF0aD17Y3R4LnNvdXJjZVBhdGh9XHJcbiAgICAgICAgICBjbGFzcz1cIm1heC1oLVs1MCVdIG92ZXJmbG93LXktYXV0b1wiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsXCI+XHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIGRpc2FibGVkPXshcHJvcGVydHlWYWx1ZSgpfVxyXG4gICAgICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgYWRkQ29sKCk7XHJcbiAgICAgICAgICAgICAgcHJvcHMuc2V0T3BlbihmYWxzZSk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIGNsYXNzPVwiZmxvYXQtcmlnaHQgYmctaW50ZXJhY3RpdmUtYWNjZW50IHAtYnV0dG9uIHRleHQtb24tYWNjZW50IGhvdmVyOmJnLWludGVyYWN0aXZlLWFjY2VudC1ob3ZlciBob3Zlcjp0ZXh0LWFjY2VudC1ob3ZlciBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWRcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBhZGRcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0RpYWxvZ0NvbnRlbnQ+XHJcbiAgICA8L0RpYWxvZz5cclxuICApO1xyXG59O1xyXG5cclxuY29uc3QgQWRkUm93QnV0dG9uID0gKHByb3BzOiB7IG9wZW46IGJvb2xlYW47IHNldE9wZW46IFNldHRlcjxib29sZWFuPiB9KSA9PiB7XHJcbiAgY29uc3QgY29kZUJsb2NrSW5mbyA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIGNvbnN0IHtcclxuICAgIHBsdWdpbjogeyBhcHAgfSxcclxuICAgIGNvbmZpZyxcclxuICB9ID0gY29kZUJsb2NrSW5mbztcclxuXHJcbiAgY29uc3QgW3RpdGxlVmFsdWUsIHNldFRpdGxlVmFsdWVdID0gY3JlYXRlU2lnbmFsKFwiXCIpO1xyXG4gIGNvbnN0IFt0ZW1wbGF0ZVZhbHVlLCBzZXRUZW1wbGF0ZVZhbHVlXSA9IGNyZWF0ZVNpZ25hbChcIlwiKTtcclxuICBjb25zdCBbaXNTYXZlRGVmYXVsdCwgc2V0U2F2ZURlZmF1bHRdID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcclxuICBjb25zdCB0ZW1wbGF0ZXMgPSBnZXRUZW1wbGF0ZUZpbGVzKGFwcCk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUhhc0RlZmF1bHQgPSAoKSA9PiB7XHJcbiAgICBpZiAoIWNvbmZpZy5uZXdOb3RlVGVtcGxhdGVQYXRoKSByZXR1cm47XHJcbiAgICBjb25zdCBmb3VuZCA9IHRlbXBsYXRlcz8uZmluZCgoZikgPT4gZi5wYXRoID09PSBjb25maWcubmV3Tm90ZVRlbXBsYXRlUGF0aCk7XHJcbiAgICBpZiAoIWZvdW5kKSByZXR1cm47XHJcbiAgICBzZXRUZW1wbGF0ZVZhbHVlKGZvdW5kLm5hbWUuc2xpY2UoMCwgLTMpKTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVIYXNEZWZhdWx0KCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8RGlhbG9nIG9wZW49e3Byb3BzLm9wZW59IG9uT3BlbkNoYW5nZT17KGIpID0+IHByb3BzLnNldE9wZW4oYil9PlxyXG4gICAgICA8RGlhbG9nQ29udGVudD5cclxuICAgICAgICA8RGlhbG9nVGl0bGU+Q3JlYXRlIG5ldyBub3RlPC9EaWFsb2dUaXRsZT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCB3LWZ1bGwgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cInRpdGxlLWlucHV0XCI+VGl0bGU6IDwvbGFiZWw+XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgdXNlOmF1dG9mb2N1c1xyXG4gICAgICAgICAgICBhdXRvZm9jdXNcclxuICAgICAgICAgICAgbmFtZT1cInRpdGxlLWlucHV0XCJcclxuICAgICAgICAgICAgaWQ9XCJ0aXRsZS1pbnB1dFwiXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgdmFsdWU9e3RpdGxlVmFsdWUoKX1cclxuICAgICAgICAgICAgb25JbnB1dD17KGUpID0+IHNldFRpdGxlVmFsdWUoZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCB3LWZ1bGwgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cInRlbXBsYXRlLWlucHV0XCI+VGVtcGxhdGUgKG9wdGlvbmFsKTogPC9sYWJlbD5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICBkaXNhYmxlZD17IXRlbXBsYXRlc31cclxuICAgICAgICAgICAgbmFtZT1cInRlbXBsYXRlLWlucHV0XCJcclxuICAgICAgICAgICAgaWQ9XCJ0ZW1wbGF0ZS1pbnB1dFwiXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgbGlzdD1cInRlbXBsYXRlLWRhdGFsaXN0XCJcclxuICAgICAgICAgICAgdmFsdWU9e3RlbXBsYXRlVmFsdWUoKX1cclxuICAgICAgICAgICAgb25JbnB1dD17KGUpID0+IHNldFRlbXBsYXRlVmFsdWUoZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxTaG93IHdoZW49e3RlbXBsYXRlc30+XHJcbiAgICAgICAgICAgIDxkYXRhbGlzdCBpZD1cInRlbXBsYXRlLWRhdGFsaXN0XCI+XHJcbiAgICAgICAgICAgICAgPEZvciBlYWNoPXt0ZW1wbGF0ZXN9PlxyXG4gICAgICAgICAgICAgICAgeyhmaWxlKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9e2ZpbGUubmFtZS5zbGljZSgwLCAtMyl9PntmaWxlLnBhdGh9PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgIDwvRm9yPlxyXG4gICAgICAgICAgICA8L2RhdGFsaXN0PlxyXG4gICAgICAgICAgPC9TaG93PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMVwiPlxyXG4gICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgIGlkPVwic2F2ZS1hcy1kZWZhdWx0LXRlbXBsYXRlXCJcclxuICAgICAgICAgICAgbmFtZT1cInNhdmUtYXMtZGVmYXVsdC10ZW1wbGF0ZVwiXHJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2lzU2F2ZURlZmF1bHQoKX1cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2F2ZURlZmF1bHQoKHByZXYpID0+ICFwcmV2KX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8bGFiZWwgZm9yPVwic2F2ZS1hcy1kZWZhdWx0LXRlbXBsYXRlXCI+XHJcbiAgICAgICAgICAgIFNhdmUgYXMgZGVmYXVsdCBmb3IgdGhpcyBibG9ja1xyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsXCI+XHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIGRpc2FibGVkPXshdGl0bGVWYWx1ZSgpfVxyXG4gICAgICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gdG9kbyB0ZWNobmljYWxseSB5b3UgY291bGQgaGF2ZSBzb21ldGhpbmcgbGlrZSAnTm90ZS5tZC5zZGZsa2ouc2RmJ1xyXG4gICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVWYWx1ZSgpLmluY2x1ZGVzKFwiLm1kXCIpXHJcbiAgICAgICAgICAgICAgICA/IHRpdGxlVmFsdWUoKVxyXG4gICAgICAgICAgICAgICAgOiB0aXRsZVZhbHVlKCkgKyBcIi5tZFwiO1xyXG4gICAgICAgICAgICAgIGlmICghdGVtcGxhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuY3JlYXRlKHRpdGxlLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0T3BlbihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcclxuICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vdGUgYWxyZWFkeSBleGlzdHMsIGNob29zZSBhIGRpZmZlcmVudCBuYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlRmlsZSA9IHRlbXBsYXRlcy5maW5kKFxyXG4gICAgICAgICAgICAgICAgKHQpID0+IHQubmFtZSA9PT0gdGVtcGxhdGVWYWx1ZSgpICsgXCIubWRcIixcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZCh0ZW1wbGF0ZUZpbGUhKTtcclxuICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZSh0aXRsZSwgY29udGVudCk7XHJcbiAgICAgICAgICAgICAgfSBjYXRjaCAoXykge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vdGUgYWxyZWFkeSBleGlzdHMsIGNob29zZSBhIGRpZmZlcmVudCBuYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgaWYgKGlzU2F2ZURlZmF1bHQoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHRlbXBsYXRlcy5maW5kKFxyXG4gICAgICAgICAgICAgICAgICAoZikgPT4gZi5uYW1lID09PSB0ZW1wbGF0ZVZhbHVlKCkgKyBcIi5tZFwiLFxyXG4gICAgICAgICAgICAgICAgKSEucGF0aDtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUJsb2NrQ29uZmlnKFwibmV3Tm90ZVRlbXBsYXRlUGF0aFwiLCBwYXRoLCBjb2RlQmxvY2tJbmZvKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHByb3BzLnNldE9wZW4oZmFsc2UpO1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICBjbGFzcz1cImZsb2F0LXJpZ2h0IGJnLWludGVyYWN0aXZlLWFjY2VudCBwLWJ1dHRvbiB0ZXh0LW9uLWFjY2VudCBob3ZlcjpiZy1pbnRlcmFjdGl2ZS1hY2NlbnQtaG92ZXIgaG92ZXI6dGV4dC1hY2NlbnQtaG92ZXIgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgYWRkXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9EaWFsb2dDb250ZW50PlxyXG4gICAgPC9EaWFsb2c+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIFRPRE8gZml4IG5lc3RlZFxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRQcm9wcywgY3JlYXRlU2lnbmFsLCBzcGxpdFByb3BzIH0gZnJvbSBcInNvbGlkLWpzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBUb2dnbGVQcm9wcyA9IE9taXQ8XHJcbiAgQ29tcG9uZW50UHJvcHM8XCJpbnB1dFwiPixcclxuICBcIm9uQ2xpY2tcIiB8IFwidHlwZVwiIHwgXCJ2YWx1ZVwiXHJcbj4gJiB7XHJcbiAgb25DaGVja2VkQ2hhbmdlPzogKGI6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgY29udGFpbmVyQ2xhc3M/OiBzdHJpbmc7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBUb2dnbGUgPSAocHJvcHM6IFRvZ2dsZVByb3BzKSA9PiB7XHJcbiAgY29uc3QgW2xvY2FsLCByZXN0XSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcclxuICAgIFwiY29udGFpbmVyQ2xhc3NcIixcclxuICAgIFwib25DaGVja2VkQ2hhbmdlXCIsXHJcbiAgXSk7XHJcbiAgY29uc3QgW2lzQ2hlY2tlZCwgc2V0Q2hlY2tlZF0gPSBjcmVhdGVTaWduYWwoISFyZXN0LmNoZWNrZWQpO1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzPXtgY2hlY2tib3gtY29udGFpbmVyICR7aXNDaGVja2VkKCkgPyBcImlzLWVuYWJsZWRcIiA6IFwiIFwifWB9XHJcbiAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICBzZXRDaGVja2VkKChwcmV2KSA9PiB7XHJcbiAgICAgICAgICBpZiAobG9jYWwub25DaGVja2VkQ2hhbmdlKSBsb2NhbC5vbkNoZWNrZWRDaGFuZ2UoIXByZXYpO1xyXG4gICAgICAgICAgcmV0dXJuICFwcmV2O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgey4uLnJlc3R9IGNoZWNrZWQ9e2lzQ2hlY2tlZCgpfSAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuIiwiaW1wb3J0IHtcbiAgY3JlYXRlUmVnaXN0ZXJJZFxufSBmcm9tIFwiLi9KTkNDRjZNUC5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVRhZ05hbWVcbn0gZnJvbSBcIi4vQ1dDQjQ0N0YuanN4XCI7XG5pbXBvcnQge1xuICBQb2x5bW9ycGhpY1xufSBmcm9tIFwiLi9FNzNQS0ZCMy5qc3hcIjtcblxuLy8gc3JjL2Zvcm0tY29udHJvbC9jcmVhdGUtZm9ybS1jb250cm9sLnRzeFxuaW1wb3J0IHtcbiAgYWNjZXNzLFxuICBjcmVhdGVHZW5lcmF0ZUlkLFxuICBtZXJnZURlZmF1bHRQcm9wc1xufSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW8sIGNyZWF0ZVNpZ25hbCwgY3JlYXRlVW5pcXVlSWQgfSBmcm9tIFwic29saWQtanNcIjtcbnZhciBGT1JNX0NPTlRST0xfUFJPUF9OQU1FUyA9IFtcbiAgXCJpZFwiLFxuICBcIm5hbWVcIixcbiAgXCJ2YWxpZGF0aW9uU3RhdGVcIixcbiAgXCJyZXF1aXJlZFwiLFxuICBcImRpc2FibGVkXCIsXG4gIFwicmVhZE9ubHlcIlxuXTtcbmZ1bmN0aW9uIGNyZWF0ZUZvcm1Db250cm9sKHByb3BzKSB7XG4gIGNvbnN0IGRlZmF1bHRJZCA9IGBmb3JtLWNvbnRyb2wtJHtjcmVhdGVVbmlxdWVJZCgpfWA7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoeyBpZDogZGVmYXVsdElkIH0sIHByb3BzKTtcbiAgY29uc3QgW2xhYmVsSWQsIHNldExhYmVsSWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtmaWVsZElkLCBzZXRGaWVsZElkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbZGVzY3JpcHRpb25JZCwgc2V0RGVzY3JpcHRpb25JZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2Vycm9yTWVzc2FnZUlkLCBzZXRFcnJvck1lc3NhZ2VJZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgZ2V0QXJpYUxhYmVsbGVkQnkgPSAoZmllbGRJZDIsIGZpZWxkQXJpYUxhYmVsLCBmaWVsZEFyaWFMYWJlbGxlZEJ5KSA9PiB7XG4gICAgY29uc3QgaGFzQXJpYUxhYmVsbGVkQnkgPSBmaWVsZEFyaWFMYWJlbGxlZEJ5ICE9IG51bGwgfHwgbGFiZWxJZCgpICE9IG51bGw7XG4gICAgcmV0dXJuIFtcbiAgICAgIGZpZWxkQXJpYUxhYmVsbGVkQnksXG4gICAgICBsYWJlbElkKCksXG4gICAgICAvLyBJZiB0aGVyZSBpcyBib3RoIGFuIGFyaWEtbGFiZWwgYW5kIGFyaWEtbGFiZWxsZWRieSwgYWRkIHRoZSBmaWVsZCBpdHNlbGYgaGFzIGFuIGFyaWEtbGFiZWxsZWRieVxuICAgICAgaGFzQXJpYUxhYmVsbGVkQnkgJiYgZmllbGRBcmlhTGFiZWwgIT0gbnVsbCA/IGZpZWxkSWQyIDogdm9pZCAwXG4gICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikgfHwgdm9pZCAwO1xuICB9O1xuICBjb25zdCBnZXRBcmlhRGVzY3JpYmVkQnkgPSAoZmllbGRBcmlhRGVzY3JpYmVkQnkpID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAgZGVzY3JpcHRpb25JZCgpLFxuICAgICAgLy8gVXNlIGFyaWEtZGVzY3JpYmVkYnkgZm9yIGVycm9yIG1lc3NhZ2UgYmVjYXVzZSBhcmlhLWVycm9ybWVzc2FnZSBpcyB1bnN1cHBvcnRlZCB1c2luZyBWb2ljZU92ZXIgb3IgTlZEQS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vaXNzdWVzLzEzNDYjaXNzdWVjb21tZW50LTc0MDEzNjI2OFxuICAgICAgZXJyb3JNZXNzYWdlSWQoKSxcbiAgICAgIGZpZWxkQXJpYURlc2NyaWJlZEJ5XG4gICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikgfHwgdm9pZCAwO1xuICB9O1xuICBjb25zdCBkYXRhc2V0ID0gY3JlYXRlTWVtbygoKSA9PiAoe1xuICAgIFwiZGF0YS12YWxpZFwiOiBhY2Nlc3MobWVyZ2VkUHJvcHMudmFsaWRhdGlvblN0YXRlKSA9PT0gXCJ2YWxpZFwiID8gXCJcIiA6IHZvaWQgMCxcbiAgICBcImRhdGEtaW52YWxpZFwiOiBhY2Nlc3MobWVyZ2VkUHJvcHMudmFsaWRhdGlvblN0YXRlKSA9PT0gXCJpbnZhbGlkXCIgPyBcIlwiIDogdm9pZCAwLFxuICAgIFwiZGF0YS1yZXF1aXJlZFwiOiBhY2Nlc3MobWVyZ2VkUHJvcHMucmVxdWlyZWQpID8gXCJcIiA6IHZvaWQgMCxcbiAgICBcImRhdGEtZGlzYWJsZWRcIjogYWNjZXNzKG1lcmdlZFByb3BzLmRpc2FibGVkKSA/IFwiXCIgOiB2b2lkIDAsXG4gICAgXCJkYXRhLXJlYWRvbmx5XCI6IGFjY2VzcyhtZXJnZWRQcm9wcy5yZWFkT25seSkgPyBcIlwiIDogdm9pZCAwXG4gIH0pKTtcbiAgY29uc3QgZm9ybUNvbnRyb2xDb250ZXh0ID0ge1xuICAgIG5hbWU6ICgpID0+IGFjY2VzcyhtZXJnZWRQcm9wcy5uYW1lKSA/PyBhY2Nlc3MobWVyZ2VkUHJvcHMuaWQpLFxuICAgIGRhdGFzZXQsXG4gICAgdmFsaWRhdGlvblN0YXRlOiAoKSA9PiBhY2Nlc3MobWVyZ2VkUHJvcHMudmFsaWRhdGlvblN0YXRlKSxcbiAgICBpc1JlcXVpcmVkOiAoKSA9PiBhY2Nlc3MobWVyZ2VkUHJvcHMucmVxdWlyZWQpLFxuICAgIGlzRGlzYWJsZWQ6ICgpID0+IGFjY2VzcyhtZXJnZWRQcm9wcy5kaXNhYmxlZCksXG4gICAgaXNSZWFkT25seTogKCkgPT4gYWNjZXNzKG1lcmdlZFByb3BzLnJlYWRPbmx5KSxcbiAgICBsYWJlbElkLFxuICAgIGZpZWxkSWQsXG4gICAgZGVzY3JpcHRpb25JZCxcbiAgICBlcnJvck1lc3NhZ2VJZCxcbiAgICBnZXRBcmlhTGFiZWxsZWRCeSxcbiAgICBnZXRBcmlhRGVzY3JpYmVkQnksXG4gICAgZ2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCgoKSA9PiBhY2Nlc3MobWVyZ2VkUHJvcHMuaWQpKSxcbiAgICByZWdpc3RlckxhYmVsOiBjcmVhdGVSZWdpc3RlcklkKHNldExhYmVsSWQpLFxuICAgIHJlZ2lzdGVyRmllbGQ6IGNyZWF0ZVJlZ2lzdGVySWQoc2V0RmllbGRJZCksXG4gICAgcmVnaXN0ZXJEZXNjcmlwdGlvbjogY3JlYXRlUmVnaXN0ZXJJZChzZXREZXNjcmlwdGlvbklkKSxcbiAgICByZWdpc3RlckVycm9yTWVzc2FnZTogY3JlYXRlUmVnaXN0ZXJJZChzZXRFcnJvck1lc3NhZ2VJZClcbiAgfTtcbiAgcmV0dXJuIHsgZm9ybUNvbnRyb2xDb250ZXh0IH07XG59XG5cbi8vIHNyYy9mb3JtLWNvbnRyb2wvZm9ybS1jb250cm9sLWNvbnRleHQudHN4XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSBcInNvbGlkLWpzXCI7XG52YXIgRm9ybUNvbnRyb2xDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2xDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJba29iYWx0ZV06IGB1c2VGb3JtQ29udHJvbENvbnRleHRgIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBgRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyYCBjb21wb25lbnRcIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbi8vIHNyYy9mb3JtLWNvbnRyb2wvZm9ybS1jb250cm9sLWRlc2NyaXB0aW9uLnRzeFxuaW1wb3J0IHsgbWVyZ2VEZWZhdWx0UHJvcHMgYXMgbWVyZ2VEZWZhdWx0UHJvcHMyIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIG9uQ2xlYW51cCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gRm9ybUNvbnRyb2xEZXNjcmlwdGlvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlRm9ybUNvbnRyb2xDb250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMyKFxuICAgIHtcbiAgICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJkZXNjcmlwdGlvblwiKVxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IG9uQ2xlYW51cChjb250ZXh0LnJlZ2lzdGVyRGVzY3JpcHRpb24obWVyZ2VkUHJvcHMuaWQpKSk7XG4gIHJldHVybiA8UG9seW1vcnBoaWNcbiAgICBhcz1cImRpdlwiXG4gICAgey4uLmNvbnRleHQuZGF0YXNldCgpfVxuICAgIHsuLi5tZXJnZWRQcm9wc31cbiAgLz47XG59XG5cbi8vIHNyYy9mb3JtLWNvbnRyb2wvZm9ybS1jb250cm9sLWVycm9yLW1lc3NhZ2UudHN4XG5pbXBvcnQgeyBtZXJnZURlZmF1bHRQcm9wcyBhcyBtZXJnZURlZmF1bHRQcm9wczMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7XG4gIFNob3csXG4gIGNyZWF0ZUVmZmVjdCBhcyBjcmVhdGVFZmZlY3QyLFxuICBvbkNsZWFudXAgYXMgb25DbGVhbnVwMixcbiAgc3BsaXRQcm9wc1xufSBmcm9tIFwic29saWQtanNcIjtcbmZ1bmN0aW9uIEZvcm1Db250cm9sRXJyb3JNZXNzYWdlKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VGb3JtQ29udHJvbENvbnRleHQoKTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wczMoXG4gICAge1xuICAgICAgaWQ6IGNvbnRleHQuZ2VuZXJhdGVJZChcImVycm9yLW1lc3NhZ2VcIilcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMobWVyZ2VkUHJvcHMsIFtcImZvcmNlTW91bnRcIl0pO1xuICBjb25zdCBpc0ludmFsaWQgPSAoKSA9PiBjb250ZXh0LnZhbGlkYXRpb25TdGF0ZSgpID09PSBcImludmFsaWRcIjtcbiAgY3JlYXRlRWZmZWN0MigoKSA9PiB7XG4gICAgaWYgKCFpc0ludmFsaWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbkNsZWFudXAyKGNvbnRleHQucmVnaXN0ZXJFcnJvck1lc3NhZ2Uob3RoZXJzLmlkKSk7XG4gIH0pO1xuICByZXR1cm4gPFNob3cgd2hlbj17bG9jYWwuZm9yY2VNb3VudCB8fCBpc0ludmFsaWQoKX0+PFBvbHltb3JwaGljXG4gICAgYXM9XCJkaXZcIlxuICAgIHsuLi5jb250ZXh0LmRhdGFzZXQoKX1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjwvU2hvdz47XG59XG5cbi8vIHNyYy9mb3JtLWNvbnRyb2wvZm9ybS1jb250cm9sLWxhYmVsLnRzeFxuaW1wb3J0IHtcbiAgbWVyZ2VEZWZhdWx0UHJvcHMgYXMgbWVyZ2VEZWZhdWx0UHJvcHM0LFxuICBtZXJnZVJlZnNcbn0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QgYXMgY3JlYXRlRWZmZWN0Mywgb25DbGVhbnVwIGFzIG9uQ2xlYW51cDMsIHNwbGl0UHJvcHMgYXMgc3BsaXRQcm9wczIgfSBmcm9tIFwic29saWQtanNcIjtcbmZ1bmN0aW9uIEZvcm1Db250cm9sTGFiZWwocHJvcHMpIHtcbiAgbGV0IHJlZjtcbiAgY29uc3QgY29udGV4dCA9IHVzZUZvcm1Db250cm9sQ29udGV4dCgpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzNChcbiAgICB7XG4gICAgICBpZDogY29udGV4dC5nZW5lcmF0ZUlkKFwibGFiZWxcIilcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMyKG1lcmdlZFByb3BzLCBbXCJyZWZcIl0pO1xuICBjb25zdCB0YWdOYW1lID0gY3JlYXRlVGFnTmFtZShcbiAgICAoKSA9PiByZWYsXG4gICAgKCkgPT4gXCJsYWJlbFwiXG4gICk7XG4gIGNyZWF0ZUVmZmVjdDMoKCkgPT4gb25DbGVhbnVwMyhjb250ZXh0LnJlZ2lzdGVyTGFiZWwob3RoZXJzLmlkKSkpO1xuICByZXR1cm4gPFBvbHltb3JwaGljXG4gICAgYXM9XCJsYWJlbFwiXG4gICAgcmVmPXttZXJnZVJlZnMoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKX1cbiAgICBmb3I9e3RhZ05hbWUoKSA9PT0gXCJsYWJlbFwiID8gY29udGV4dC5maWVsZElkKCkgOiB2b2lkIDB9XG4gICAgey4uLmNvbnRleHQuZGF0YXNldCgpfVxuICAgIHsuLi5vdGhlcnN9XG4gIC8+O1xufVxuXG5leHBvcnQge1xuICBGT1JNX0NPTlRST0xfUFJPUF9OQU1FUyxcbiAgY3JlYXRlRm9ybUNvbnRyb2wsXG4gIEZvcm1Db250cm9sQ29udGV4dCxcbiAgdXNlRm9ybUNvbnRyb2xDb250ZXh0LFxuICBGb3JtQ29udHJvbERlc2NyaXB0aW9uLFxuICBGb3JtQ29udHJvbEVycm9yTWVzc2FnZSxcbiAgRm9ybUNvbnRyb2xMYWJlbFxufTtcbiIsImltcG9ydCB7XG4gIHVzZUZvcm1Db250cm9sQ29udGV4dFxufSBmcm9tIFwiLi9QRkNYS1FQVi5qc3hcIjtcblxuLy8gc3JjL2Zvcm0tY29udHJvbC9jcmVhdGUtZm9ybS1jb250cm9sLWZpZWxkLnRzeFxuaW1wb3J0IHsgYWNjZXNzLCBtZXJnZURlZmF1bHRQcm9wcyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWZmZWN0LCBvbkNsZWFudXAgfSBmcm9tIFwic29saWQtanNcIjtcbnZhciBGT1JNX0NPTlRST0xfRklFTERfUFJPUF9OQU1FUyA9IFtcbiAgXCJpZFwiLFxuICBcImFyaWEtbGFiZWxcIixcbiAgXCJhcmlhLWxhYmVsbGVkYnlcIixcbiAgXCJhcmlhLWRlc2NyaWJlZGJ5XCJcbl07XG5mdW5jdGlvbiBjcmVhdGVGb3JtQ29udHJvbEZpZWxkKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VGb3JtQ29udHJvbENvbnRleHQoKTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyhcbiAgICB7IGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJmaWVsZFwiKSB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlckZpZWxkKGFjY2VzcyhtZXJnZWRQcm9wcy5pZCkpKSk7XG4gIHJldHVybiB7XG4gICAgZmllbGRQcm9wczoge1xuICAgICAgaWQ6ICgpID0+IGFjY2VzcyhtZXJnZWRQcm9wcy5pZCksXG4gICAgICBhcmlhTGFiZWw6ICgpID0+IGFjY2VzcyhtZXJnZWRQcm9wc1tcImFyaWEtbGFiZWxcIl0pLFxuICAgICAgYXJpYUxhYmVsbGVkQnk6ICgpID0+IGNvbnRleHQuZ2V0QXJpYUxhYmVsbGVkQnkoXG4gICAgICAgIGFjY2VzcyhtZXJnZWRQcm9wcy5pZCksXG4gICAgICAgIGFjY2VzcyhtZXJnZWRQcm9wc1tcImFyaWEtbGFiZWxcIl0pLFxuICAgICAgICBhY2Nlc3MobWVyZ2VkUHJvcHNbXCJhcmlhLWxhYmVsbGVkYnlcIl0pXG4gICAgICApLFxuICAgICAgYXJpYURlc2NyaWJlZEJ5OiAoKSA9PiBjb250ZXh0LmdldEFyaWFEZXNjcmliZWRCeShhY2Nlc3MobWVyZ2VkUHJvcHNbXCJhcmlhLWRlc2NyaWJlZGJ5XCJdKSlcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7XG4gIEZPUk1fQ09OVFJPTF9GSUVMRF9QUk9QX05BTUVTLFxuICBjcmVhdGVGb3JtQ29udHJvbEZpZWxkXG59O1xuIiwiLy8gc3JjL3ByaW1pdGl2ZXMvY3JlYXRlLWZvcm0tcmVzZXQtbGlzdGVuZXIvY3JlYXRlLWZvcm0tcmVzZXQtbGlzdGVuZXIudHNcbmltcG9ydCB7IGNyZWF0ZUVmZmVjdCwgb24sIG9uQ2xlYW51cCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gY3JlYXRlRm9ybVJlc2V0TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xuICBjcmVhdGVFZmZlY3QoXG4gICAgb24oZWxlbWVudCwgKGVsZW1lbnQyKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudDIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBmb3JtID0gZ2V0Q2xvc2VzdEZvcm0oZWxlbWVudDIpO1xuICAgICAgaWYgKGZvcm0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNldFwiLCBoYW5kbGVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICBmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNldFwiLCBoYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICk7XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0Rm9ybShlbGVtZW50KSB7XG4gIHJldHVybiBpc0Zvcm1FbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5mb3JtIDogZWxlbWVudC5jbG9zZXN0KFwiZm9ybVwiKTtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5tYXRjaGVzKFwidGV4dGFyZWEsIGlucHV0LCBzZWxlY3QsIGJ1dHRvblwiKTtcbn1cblxuZXhwb3J0IHtcbiAgY3JlYXRlRm9ybVJlc2V0TGlzdGVuZXJcbn07XG4iLCIvLyBzcmMvcHJpbWl0aXZlcy9jcmVhdGUtY29sbGVjdGlvbi9jcmVhdGUtY29sbGVjdGlvbi50c1xuaW1wb3J0IHsgYWNjZXNzIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5cbi8vIHNyYy9wcmltaXRpdmVzL2NyZWF0ZS1jb2xsZWN0aW9uL3V0aWxzLnRzXG5pbXBvcnQgeyBpc051bWJlciwgaXNTdHJpbmcgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmZ1bmN0aW9uIGJ1aWxkTm9kZXMocGFyYW1zKSB7XG4gIGxldCBpbmRleCA9IHBhcmFtcy5zdGFydEluZGV4ID8/IDA7XG4gIGNvbnN0IGxldmVsID0gcGFyYW1zLnN0YXJ0TGV2ZWwgPz8gMDtcbiAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgY29uc3QgZ2V0S2V5ID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY29uc3QgX2dldEtleSA9IHBhcmFtcy5nZXRLZXkgPz8gXCJrZXlcIjtcbiAgICBjb25zdCBkYXRhS2V5ID0gaXNTdHJpbmcoX2dldEtleSkgPyBkYXRhW19nZXRLZXldIDogX2dldEtleShkYXRhKTtcbiAgICByZXR1cm4gZGF0YUtleSAhPSBudWxsID8gU3RyaW5nKGRhdGFLZXkpIDogXCJcIjtcbiAgfTtcbiAgY29uc3QgZ2V0VGV4dFZhbHVlID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY29uc3QgX2dldFRleHRWYWx1ZSA9IHBhcmFtcy5nZXRUZXh0VmFsdWUgPz8gXCJ0ZXh0VmFsdWVcIjtcbiAgICBjb25zdCBkYXRhVGV4dFZhbHVlID0gaXNTdHJpbmcoX2dldFRleHRWYWx1ZSkgPyBkYXRhW19nZXRUZXh0VmFsdWVdIDogX2dldFRleHRWYWx1ZShkYXRhKTtcbiAgICByZXR1cm4gZGF0YVRleHRWYWx1ZSAhPSBudWxsID8gU3RyaW5nKGRhdGFUZXh0VmFsdWUpIDogXCJcIjtcbiAgfTtcbiAgY29uc3QgZ2V0RGlzYWJsZWQgPSAoZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgX2dldERpc2FibGVkID0gcGFyYW1zLmdldERpc2FibGVkID8/IFwiZGlzYWJsZWRcIjtcbiAgICByZXR1cm4gKGlzU3RyaW5nKF9nZXREaXNhYmxlZCkgPyBkYXRhW19nZXREaXNhYmxlZF0gOiBfZ2V0RGlzYWJsZWQoZGF0YSkpID8/IGZhbHNlO1xuICB9O1xuICBjb25zdCBnZXRTZWN0aW9uQ2hpbGRyZW4gPSAoZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhwYXJhbXMuZ2V0U2VjdGlvbkNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIGRhdGFbcGFyYW1zLmdldFNlY3Rpb25DaGlsZHJlbl07XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXMuZ2V0U2VjdGlvbkNoaWxkcmVuPy4oZGF0YSk7XG4gIH07XG4gIGZvciAoY29uc3QgZGF0YSBvZiBwYXJhbXMuZGF0YVNvdXJjZSkge1xuICAgIGlmIChpc1N0cmluZyhkYXRhKSB8fCBpc051bWJlcihkYXRhKSkge1xuICAgICAgbm9kZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbVwiLFxuICAgICAgICByYXdWYWx1ZTogZGF0YSxcbiAgICAgICAga2V5OiBTdHJpbmcoZGF0YSksXG4gICAgICAgIHRleHRWYWx1ZTogU3RyaW5nKGRhdGEpLFxuICAgICAgICBkaXNhYmxlZDogZ2V0RGlzYWJsZWQoZGF0YSksXG4gICAgICAgIGxldmVsLFxuICAgICAgICBpbmRleFxuICAgICAgfSk7XG4gICAgICBpbmRleCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChnZXRTZWN0aW9uQ2hpbGRyZW4oZGF0YSkgIT0gbnVsbCkge1xuICAgICAgbm9kZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IFwic2VjdGlvblwiLFxuICAgICAgICByYXdWYWx1ZTogZGF0YSxcbiAgICAgICAga2V5OiBcIlwiLFxuICAgICAgICAvLyBub3QgYXBwbGljYWJsZSBoZXJlXG4gICAgICAgIHRleHRWYWx1ZTogXCJcIixcbiAgICAgICAgLy8gbm90IGFwcGxpY2FibGUgaGVyZVxuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIC8vIG5vdCBhcHBsaWNhYmxlIGhlcmVcbiAgICAgICAgbGV2ZWwsXG4gICAgICAgIGluZGV4XG4gICAgICB9KTtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjb25zdCBzZWN0aW9uQ2hpbGRyZW4gPSBnZXRTZWN0aW9uQ2hpbGRyZW4oZGF0YSkgPz8gW107XG4gICAgICBpZiAoc2VjdGlvbkNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGJ1aWxkTm9kZXMoe1xuICAgICAgICAgIGRhdGFTb3VyY2U6IHNlY3Rpb25DaGlsZHJlbixcbiAgICAgICAgICBnZXRLZXk6IHBhcmFtcy5nZXRLZXksXG4gICAgICAgICAgZ2V0VGV4dFZhbHVlOiBwYXJhbXMuZ2V0VGV4dFZhbHVlLFxuICAgICAgICAgIGdldERpc2FibGVkOiBwYXJhbXMuZ2V0RGlzYWJsZWQsXG4gICAgICAgICAgZ2V0U2VjdGlvbkNoaWxkcmVuOiBwYXJhbXMuZ2V0U2VjdGlvbkNoaWxkcmVuLFxuICAgICAgICAgIHN0YXJ0SW5kZXg6IGluZGV4LFxuICAgICAgICAgIHN0YXJ0TGV2ZWw6IGxldmVsICsgMVxuICAgICAgICB9KTtcbiAgICAgICAgbm9kZXMucHVzaCguLi5jaGlsZE5vZGVzKTtcbiAgICAgICAgaW5kZXggKz0gY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVzLnB1c2goe1xuICAgICAgICB0eXBlOiBcIml0ZW1cIixcbiAgICAgICAgcmF3VmFsdWU6IGRhdGEsXG4gICAgICAgIGtleTogZ2V0S2V5KGRhdGEpLFxuICAgICAgICB0ZXh0VmFsdWU6IGdldFRleHRWYWx1ZShkYXRhKSxcbiAgICAgICAgZGlzYWJsZWQ6IGdldERpc2FibGVkKGRhdGEpLFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBzcmMvcHJpbWl0aXZlcy9jcmVhdGUtY29sbGVjdGlvbi9jcmVhdGUtY29sbGVjdGlvbi50c1xuZnVuY3Rpb24gY3JlYXRlQ29sbGVjdGlvbihwcm9wcywgZGVwcyA9IFtdKSB7XG4gIHJldHVybiBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBub2RlcyA9IGJ1aWxkTm9kZXMoe1xuICAgICAgZGF0YVNvdXJjZTogYWNjZXNzKHByb3BzLmRhdGFTb3VyY2UpLFxuICAgICAgZ2V0S2V5OiBhY2Nlc3MocHJvcHMuZ2V0S2V5KSxcbiAgICAgIGdldFRleHRWYWx1ZTogYWNjZXNzKHByb3BzLmdldFRleHRWYWx1ZSksXG4gICAgICBnZXREaXNhYmxlZDogYWNjZXNzKHByb3BzLmdldERpc2FibGVkKSxcbiAgICAgIGdldFNlY3Rpb25DaGlsZHJlbjogYWNjZXNzKHByb3BzLmdldFNlY3Rpb25DaGlsZHJlbilcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspXG4gICAgICBkZXBzW2ldKCk7XG4gICAgcmV0dXJuIHByb3BzLmZhY3Rvcnkobm9kZXMpO1xuICB9KTtcbn1cblxuZXhwb3J0IHtcbiAgY3JlYXRlQ29sbGVjdGlvblxufTtcbiIsIi8vIHNyYy9pMThuL2NyZWF0ZS1jb2xsYXRvci50c1xuaW1wb3J0IHsgY3JlYXRlTWVtbyBhcyBjcmVhdGVNZW1vMiB9IGZyb20gXCJzb2xpZC1qc1wiO1xuXG4vLyBzcmMvaTE4bi9pMThuLXByb3ZpZGVyLnRzeFxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuXG4vLyBzcmMvaTE4bi9jcmVhdGUtZGVmYXVsdC1sb2NhbGUudHNcbmltcG9ydCB7IGNyZWF0ZU1lbW8sIGNyZWF0ZVNpZ25hbCwgb25DbGVhbnVwLCBvbk1vdW50IH0gZnJvbSBcInNvbGlkLWpzXCI7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gXCJzb2xpZC1qcy93ZWJcIjtcblxuLy8gc3JjL2kxOG4vdXRpbHMudHNcbnZhciBSVExfU0NSSVBUUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgXCJBdnN0XCIsXG4gIFwiQXJhYlwiLFxuICBcIkFybWlcIixcbiAgXCJTeXJjXCIsXG4gIFwiU2FtclwiLFxuICBcIk1hbmRcIixcbiAgXCJUaGFhXCIsXG4gIFwiTWVuZFwiLFxuICBcIk5rb29cIixcbiAgXCJBZGxtXCIsXG4gIFwiUm9oZ1wiLFxuICBcIkhlYnJcIlxuXSk7XG52YXIgUlRMX0xBTkdTID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICBcImFlXCIsXG4gIFwiYXJcIixcbiAgXCJhcmNcIixcbiAgXCJiY2NcIixcbiAgXCJicWlcIixcbiAgXCJja2JcIixcbiAgXCJkdlwiLFxuICBcImZhXCIsXG4gIFwiZ2xrXCIsXG4gIFwiaGVcIixcbiAgXCJrdVwiLFxuICBcIm16blwiLFxuICBcIm5xb1wiLFxuICBcInBuYlwiLFxuICBcInBzXCIsXG4gIFwic2RcIixcbiAgXCJ1Z1wiLFxuICBcInVyXCIsXG4gIFwieWlcIlxuXSk7XG5mdW5jdGlvbiBpc1JUTChsb2NhbGUpIHtcbiAgaWYgKEludGwuTG9jYWxlKSB7XG4gICAgY29uc3Qgc2NyaXB0ID0gbmV3IEludGwuTG9jYWxlKGxvY2FsZSkubWF4aW1pemUoKS5zY3JpcHQgPz8gXCJcIjtcbiAgICByZXR1cm4gUlRMX1NDUklQVFMuaGFzKHNjcmlwdCk7XG4gIH1cbiAgY29uc3QgbGFuZyA9IGxvY2FsZS5zcGxpdChcIi1cIilbMF07XG4gIHJldHVybiBSVExfTEFOR1MuaGFzKGxhbmcpO1xufVxuZnVuY3Rpb24gZ2V0UmVhZGluZ0RpcmVjdGlvbihsb2NhbGUpIHtcbiAgcmV0dXJuIGlzUlRMKGxvY2FsZSkgPyBcInJ0bFwiIDogXCJsdHJcIjtcbn1cblxuLy8gc3JjL2kxOG4vY3JlYXRlLWRlZmF1bHQtbG9jYWxlLnRzXG5mdW5jdGlvbiBnZXREZWZhdWx0TG9jYWxlKCkge1xuICBsZXQgbG9jYWxlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAvLyBAdHMtaWdub3JlXG4gIChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSkgfHwgXCJlbi1VU1wiO1xuICB0cnkge1xuICAgIEludGwuRGF0ZVRpbWVGb3JtYXQuc3VwcG9ydGVkTG9jYWxlc09mKFtsb2NhbGVdKTtcbiAgfSBjYXRjaCAoX2Vycikge1xuICAgIGxvY2FsZSA9IFwiZW4tVVNcIjtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxvY2FsZSxcbiAgICBkaXJlY3Rpb246IGdldFJlYWRpbmdEaXJlY3Rpb24obG9jYWxlKVxuICB9O1xufVxudmFyIGN1cnJlbnRMb2NhbGUgPSBnZXREZWZhdWx0TG9jYWxlKCk7XG52YXIgbGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHVwZGF0ZUxvY2FsZSgpIHtcbiAgY3VycmVudExvY2FsZSA9IGdldERlZmF1bHRMb2NhbGUoKTtcbiAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICBsaXN0ZW5lcihjdXJyZW50TG9jYWxlKTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdExvY2FsZSgpIHtcbiAgY29uc3QgZGVmYXVsdFNTUkxvY2FsZSA9IHtcbiAgICBsb2NhbGU6IFwiZW4tVVNcIixcbiAgICBkaXJlY3Rpb246IFwibHRyXCJcbiAgfTtcbiAgY29uc3QgW2RlZmF1bHRDbGllbnRMb2NhbGUsIHNldERlZmF1bHRDbGllbnRMb2NhbGVdID0gY3JlYXRlU2lnbmFsKGN1cnJlbnRMb2NhbGUpO1xuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gY3JlYXRlTWVtbyhcbiAgICAoKSA9PiBpc1NlcnZlciA/IGRlZmF1bHRTU1JMb2NhbGUgOiBkZWZhdWx0Q2xpZW50TG9jYWxlKClcbiAgKTtcbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgaWYgKGxpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxhbmd1YWdlY2hhbmdlXCIsIHVwZGF0ZUxvY2FsZSk7XG4gICAgfVxuICAgIGxpc3RlbmVycy5hZGQoc2V0RGVmYXVsdENsaWVudExvY2FsZSk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGxpc3RlbmVycy5kZWxldGUoc2V0RGVmYXVsdENsaWVudExvY2FsZSk7XG4gICAgICBpZiAobGlzdGVuZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsYW5ndWFnZWNoYW5nZVwiLCB1cGRhdGVMb2NhbGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBsb2NhbGU6ICgpID0+IGRlZmF1bHRMb2NhbGUoKS5sb2NhbGUsXG4gICAgZGlyZWN0aW9uOiAoKSA9PiBkZWZhdWx0TG9jYWxlKCkuZGlyZWN0aW9uXG4gIH07XG59XG5cbi8vIHNyYy9pMThuL2kxOG4tcHJvdmlkZXIudHN4XG52YXIgSTE4bkNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5mdW5jdGlvbiBJMThuUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3QgZGVmYXVsdExvY2FsZSA9IGNyZWF0ZURlZmF1bHRMb2NhbGUoKTtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICBsb2NhbGU6ICgpID0+IHByb3BzLmxvY2FsZSA/PyBkZWZhdWx0TG9jYWxlLmxvY2FsZSgpLFxuICAgIGRpcmVjdGlvbjogKCkgPT4gcHJvcHMubG9jYWxlID8gZ2V0UmVhZGluZ0RpcmVjdGlvbihwcm9wcy5sb2NhbGUpIDogZGVmYXVsdExvY2FsZS5kaXJlY3Rpb24oKVxuICB9O1xuICByZXR1cm4gPEkxOG5Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT57cHJvcHMuY2hpbGRyZW59PC9JMThuQ29udGV4dC5Qcm92aWRlcj47XG59XG5mdW5jdGlvbiB1c2VMb2NhbGUoKSB7XG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBjcmVhdGVEZWZhdWx0TG9jYWxlKCk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcbiAgcmV0dXJuIGNvbnRleHQgfHwgZGVmYXVsdExvY2FsZTtcbn1cblxuLy8gc3JjL2kxOG4vY3JlYXRlLWNvbGxhdG9yLnRzXG52YXIgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gY3JlYXRlQ29sbGF0b3Iob3B0aW9ucykge1xuICBjb25zdCB7IGxvY2FsZSB9ID0gdXNlTG9jYWxlKCk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gY3JlYXRlTWVtbzIoKCkgPT4ge1xuICAgIHJldHVybiBsb2NhbGUoKSArIChvcHRpb25zID8gT2JqZWN0LmVudHJpZXMob3B0aW9ucykuc29ydCgoYSwgYikgPT4gYVswXSA8IGJbMF0gPyAtMSA6IDEpLmpvaW4oKSA6IFwiXCIpO1xuICB9KTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8yKCgpID0+IHtcbiAgICBjb25zdCBrZXkgPSBjYWNoZUtleSgpO1xuICAgIGxldCBjb2xsYXRvcjtcbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIGNvbGxhdG9yID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIGlmICghY29sbGF0b3IpIHtcbiAgICAgIGNvbGxhdG9yID0gbmV3IEludGwuQ29sbGF0b3IobG9jYWxlKCksIG9wdGlvbnMpO1xuICAgICAgY2FjaGUuc2V0KGtleSwgY29sbGF0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGF0b3I7XG4gIH0pO1xufVxuXG4vLyBzcmMvaTE4bi9jcmVhdGUtZGF0ZS1mb3JtYXR0ZXIudHNcbmltcG9ydCB7IERhdGVGb3JtYXR0ZXIgfSBmcm9tIFwiQGludGVybmF0aW9uYWxpemVkL2RhdGVcIjtcbmltcG9ydCB7IGFjY2VzcyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlTWVtbyBhcyBjcmVhdGVNZW1vMyB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gY3JlYXRlRGF0ZUZvcm1hdHRlcihvcHRpb25zKSB7XG4gIGNvbnN0IHsgbG9jYWxlIH0gPSB1c2VMb2NhbGUoKTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8zKCgpID0+IG5ldyBEYXRlRm9ybWF0dGVyKGxvY2FsZSgpLCBhY2Nlc3Mob3B0aW9ucykpKTtcbn1cblxuLy8gc3JjL2kxOG4vY3JlYXRlLWZpbHRlci50c1xuZnVuY3Rpb24gY3JlYXRlRmlsdGVyKG9wdGlvbnMpIHtcbiAgY29uc3QgY29sbGF0b3IgPSBjcmVhdGVDb2xsYXRvcih7XG4gICAgdXNhZ2U6IFwic2VhcmNoXCIsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbiAgY29uc3Qgc3RhcnRzV2l0aCA9IChzdHIsIHN1YnN0cikgPT4ge1xuICAgIGlmIChzdWJzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZFN0ciA9IHN0ci5ub3JtYWxpemUoXCJORkNcIik7XG4gICAgY29uc3Qgbm9ybWFsaXplZFN1YnN0ciA9IHN1YnN0ci5ub3JtYWxpemUoXCJORkNcIik7XG4gICAgcmV0dXJuIGNvbGxhdG9yKCkuY29tcGFyZShcbiAgICAgIG5vcm1hbGl6ZWRTdHIuc2xpY2UoMCwgbm9ybWFsaXplZFN1YnN0ci5sZW5ndGgpLFxuICAgICAgbm9ybWFsaXplZFN1YnN0clxuICAgICkgPT09IDA7XG4gIH07XG4gIGNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc3Vic3RyKSA9PiB7XG4gICAgaWYgKHN1YnN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkU3RyID0gc3RyLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICBjb25zdCBub3JtYWxpemVkU3Vic3RyID0gc3Vic3RyLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICByZXR1cm4gY29sbGF0b3IoKS5jb21wYXJlKFxuICAgICAgbm9ybWFsaXplZFN0ci5zbGljZSgtbm9ybWFsaXplZFN1YnN0ci5sZW5ndGgpLFxuICAgICAgbm9ybWFsaXplZFN1YnN0clxuICAgICkgPT09IDA7XG4gIH07XG4gIGNvbnN0IGNvbnRhaW5zID0gKHN0ciwgc3Vic3RyKSA9PiB7XG4gICAgaWYgKHN1YnN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkU3RyID0gc3RyLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICBjb25zdCBub3JtYWxpemVkU3Vic3RyID0gc3Vic3RyLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICBsZXQgc2NhbiA9IDA7XG4gICAgY29uc3Qgc2xpY2VMZW4gPSBzdWJzdHIubGVuZ3RoO1xuICAgIGZvciAoOyBzY2FuICsgc2xpY2VMZW4gPD0gbm9ybWFsaXplZFN0ci5sZW5ndGg7IHNjYW4rKykge1xuICAgICAgY29uc3Qgc2xpY2UgPSBub3JtYWxpemVkU3RyLnNsaWNlKHNjYW4sIHNjYW4gKyBzbGljZUxlbik7XG4gICAgICBpZiAoY29sbGF0b3IoKS5jb21wYXJlKG5vcm1hbGl6ZWRTdWJzdHIsIHNsaWNlKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICByZXR1cm4ge1xuICAgIHN0YXJ0c1dpdGgsXG4gICAgZW5kc1dpdGgsXG4gICAgY29udGFpbnNcbiAgfTtcbn1cblxuLy8gc3JjL2kxOG4vY3JlYXRlLW51bWJlci1mb3JtYXR0ZXIudHNcbmltcG9ydCB7XG4gIE51bWJlckZvcm1hdHRlclxufSBmcm9tIFwiQGludGVybmF0aW9uYWxpemVkL251bWJlclwiO1xuaW1wb3J0IHsgYWNjZXNzIGFzIGFjY2VzczIgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW8gYXMgY3JlYXRlTWVtbzQgfSBmcm9tIFwic29saWQtanNcIjtcbmZ1bmN0aW9uIGNyZWF0ZU51bWJlckZvcm1hdHRlcihvcHRpb25zKSB7XG4gIGNvbnN0IHsgbG9jYWxlIH0gPSB1c2VMb2NhbGUoKTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW80KCgpID0+IG5ldyBOdW1iZXJGb3JtYXR0ZXIobG9jYWxlKCksIGFjY2VzczIob3B0aW9ucykpKTtcbn1cblxuZXhwb3J0IHtcbiAgUlRMX0xBTkdTLFxuICBpc1JUTCxcbiAgZ2V0UmVhZGluZ0RpcmVjdGlvbixcbiAgZ2V0RGVmYXVsdExvY2FsZSxcbiAgY3JlYXRlRGVmYXVsdExvY2FsZSxcbiAgSTE4blByb3ZpZGVyLFxuICB1c2VMb2NhbGUsXG4gIGNyZWF0ZUNvbGxhdG9yLFxuICBjcmVhdGVEYXRlRm9ybWF0dGVyLFxuICBjcmVhdGVGaWx0ZXIsXG4gIGNyZWF0ZU51bWJlckZvcm1hdHRlclxufTtcbiIsImltcG9ydCB7XG4gIGNyZWF0ZUNvbGxlY3Rpb25cbn0gZnJvbSBcIi4vRktVRlBDUTYuanN4XCI7XG5pbXBvcnQge1xuICB1c2VMb2NhbGVcbn0gZnJvbSBcIi4vTFI3TEJKTjMuanN4XCI7XG5pbXBvcnQge1xuICBjcmVhdGVDb250cm9sbGFibGVTaWduYWxcbn0gZnJvbSBcIi4vRk42RUlDR08uanN4XCI7XG5cbi8vIHNyYy9zZWxlY3Rpb24vdHlwZXMudHNcbnZhciBTZWxlY3Rpb24gPSBjbGFzcyBfU2VsZWN0aW9uIGV4dGVuZHMgU2V0IHtcbiAgYW5jaG9yS2V5O1xuICBjdXJyZW50S2V5O1xuICBjb25zdHJ1Y3RvcihrZXlzLCBhbmNob3JLZXksIGN1cnJlbnRLZXkpIHtcbiAgICBzdXBlcihrZXlzKTtcbiAgICBpZiAoa2V5cyBpbnN0YW5jZW9mIF9TZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuYW5jaG9yS2V5ID0gYW5jaG9yS2V5IHx8IGtleXMuYW5jaG9yS2V5O1xuICAgICAgdGhpcy5jdXJyZW50S2V5ID0gY3VycmVudEtleSB8fCBrZXlzLmN1cnJlbnRLZXk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW5jaG9yS2V5ID0gYW5jaG9yS2V5O1xuICAgICAgdGhpcy5jdXJyZW50S2V5ID0gY3VycmVudEtleTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHNyYy9zZWxlY3Rpb24vY3JlYXRlLW11bHRpcGxlLXNlbGVjdGlvbi1zdGF0ZS50c1xuaW1wb3J0IHsgYWNjZXNzLCBtZXJnZURlZmF1bHRQcm9wcyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWZmZWN0LCBjcmVhdGVNZW1vLCBjcmVhdGVTaWduYWwgfSBmcm9tIFwic29saWQtanNcIjtcblxuLy8gc3JjL3NlbGVjdGlvbi9jcmVhdGUtY29udHJvbGxhYmxlLXNlbGVjdGlvbi1zaWduYWwudHNcbmZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsYWJsZVNlbGVjdGlvblNpZ25hbChwcm9wcykge1xuICBjb25zdCBbX3ZhbHVlLCBzZXRWYWx1ZV0gPSBjcmVhdGVDb250cm9sbGFibGVTaWduYWwocHJvcHMpO1xuICBjb25zdCB2YWx1ZSA9ICgpID0+IF92YWx1ZSgpID8/IG5ldyBTZWxlY3Rpb24oKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVdO1xufVxuXG4vLyBzcmMvc2VsZWN0aW9uL3V0aWxzLnRzXG5pbXBvcnQgeyBpc0FwcGxlRGV2aWNlLCBpc01hYyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuZnVuY3Rpb24gaXNOb25Db250aWd1b3VzU2VsZWN0aW9uTW9kaWZpZXIoZSkge1xuICByZXR1cm4gaXNBcHBsZURldmljZSgpID8gZS5hbHRLZXkgOiBlLmN0cmxLZXk7XG59XG5mdW5jdGlvbiBpc0N0cmxLZXlQcmVzc2VkKGUpIHtcbiAgaWYgKGlzTWFjKCkpIHtcbiAgICByZXR1cm4gZS5tZXRhS2V5O1xuICB9XG4gIHJldHVybiBlLmN0cmxLZXk7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VsZWN0aW9uKHNlbGVjdGlvbikge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzZWxlY3Rpb24pO1xufVxuZnVuY3Rpb24gaXNTYW1lU2VsZWN0aW9uKHNldEEsIHNldEIpIHtcbiAgaWYgKHNldEEuc2l6ZSAhPT0gc2V0Qi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgaXRlbSBvZiBzZXRBKSB7XG4gICAgaWYgKCFzZXRCLmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gc3JjL3NlbGVjdGlvbi9jcmVhdGUtbXVsdGlwbGUtc2VsZWN0aW9uLXN0YXRlLnRzXG5mdW5jdGlvbiBjcmVhdGVNdWx0aXBsZVNlbGVjdGlvblN0YXRlKHByb3BzKSB7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoXG4gICAge1xuICAgICAgc2VsZWN0aW9uTW9kZTogXCJub25lXCIsXG4gICAgICBzZWxlY3Rpb25CZWhhdmlvcjogXCJ0b2dnbGVcIlxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY29uc3QgW2lzRm9jdXNlZCwgc2V0Rm9jdXNlZF0gPSBjcmVhdGVTaWduYWwoZmFsc2UpO1xuICBjb25zdCBbZm9jdXNlZEtleSwgc2V0Rm9jdXNlZEtleV0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3Qgc2VsZWN0ZWRLZXlzUHJvcCA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGFjY2VzcyhtZXJnZWRQcm9wcy5zZWxlY3RlZEtleXMpO1xuICAgIGlmIChzZWxlY3Rpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbnZlcnRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfSk7XG4gIGNvbnN0IGRlZmF1bHRTZWxlY3RlZEtleXMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0U2VsZWN0aW9uID0gYWNjZXNzKG1lcmdlZFByb3BzLmRlZmF1bHRTZWxlY3RlZEtleXMpO1xuICAgIGlmIChkZWZhdWx0U2VsZWN0aW9uICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0U2VsZWN0aW9uKGRlZmF1bHRTZWxlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbigpO1xuICB9KTtcbiAgY29uc3QgW3NlbGVjdGVkS2V5cywgX3NldFNlbGVjdGVkS2V5c10gPSBjcmVhdGVDb250cm9sbGFibGVTZWxlY3Rpb25TaWduYWwoe1xuICAgIHZhbHVlOiBzZWxlY3RlZEtleXNQcm9wLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFNlbGVjdGVkS2V5cyxcbiAgICBvbkNoYW5nZTogKHZhbHVlKSA9PiBtZXJnZWRQcm9wcy5vblNlbGVjdGlvbkNoYW5nZT8uKHZhbHVlKVxuICB9KTtcbiAgY29uc3QgW3NlbGVjdGlvbkJlaGF2aW9yLCBzZXRTZWxlY3Rpb25CZWhhdmlvcl0gPSBjcmVhdGVTaWduYWwoYWNjZXNzKG1lcmdlZFByb3BzLnNlbGVjdGlvbkJlaGF2aW9yKSk7XG4gIGNvbnN0IHNlbGVjdGlvbk1vZGUgPSAoKSA9PiBhY2Nlc3MobWVyZ2VkUHJvcHMuc2VsZWN0aW9uTW9kZSk7XG4gIGNvbnN0IGRpc2FsbG93RW1wdHlTZWxlY3Rpb24gPSAoKSA9PiBhY2Nlc3MobWVyZ2VkUHJvcHMuZGlzYWxsb3dFbXB0eVNlbGVjdGlvbikgPz8gZmFsc2U7XG4gIGNvbnN0IHNldFNlbGVjdGVkS2V5cyA9IChrZXlzKSA9PiB7XG4gICAgaWYgKGFjY2VzcyhtZXJnZWRQcm9wcy5hbGxvd0R1cGxpY2F0ZVNlbGVjdGlvbkV2ZW50cykgfHwgIWlzU2FtZVNlbGVjdGlvbihrZXlzLCBzZWxlY3RlZEtleXMoKSkpIHtcbiAgICAgIF9zZXRTZWxlY3RlZEtleXMoa2V5cyk7XG4gICAgfVxuICB9O1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNlbGVjdGVkS2V5cygpO1xuICAgIGlmIChhY2Nlc3MobWVyZ2VkUHJvcHMuc2VsZWN0aW9uQmVoYXZpb3IpID09PSBcInJlcGxhY2VcIiAmJiBzZWxlY3Rpb25CZWhhdmlvcigpID09PSBcInRvZ2dsZVwiICYmIHR5cGVvZiBzZWxlY3Rpb24gPT09IFwib2JqZWN0XCIgJiYgc2VsZWN0aW9uLnNpemUgPT09IDApIHtcbiAgICAgIHNldFNlbGVjdGlvbkJlaGF2aW9yKFwicmVwbGFjZVwiKTtcbiAgICB9XG4gIH0pO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIHNldFNlbGVjdGlvbkJlaGF2aW9yKGFjY2VzcyhtZXJnZWRQcm9wcy5zZWxlY3Rpb25CZWhhdmlvcikgPz8gXCJ0b2dnbGVcIik7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHNlbGVjdGlvbk1vZGUsXG4gICAgZGlzYWxsb3dFbXB0eVNlbGVjdGlvbixcbiAgICBzZWxlY3Rpb25CZWhhdmlvcixcbiAgICBzZXRTZWxlY3Rpb25CZWhhdmlvcixcbiAgICBpc0ZvY3VzZWQsXG4gICAgc2V0Rm9jdXNlZCxcbiAgICBmb2N1c2VkS2V5LFxuICAgIHNldEZvY3VzZWRLZXksXG4gICAgc2VsZWN0ZWRLZXlzLFxuICAgIHNldFNlbGVjdGVkS2V5c1xuICB9O1xufVxuXG4vLyBzcmMvc2VsZWN0aW9uL2NyZWF0ZS10eXBlLXNlbGVjdC50c1xuaW1wb3J0IHsgYWNjZXNzIGFzIGFjY2VzczIgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZVNpZ25hbCBhcyBjcmVhdGVTaWduYWwyIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5mdW5jdGlvbiBjcmVhdGVUeXBlU2VsZWN0KHByb3BzKSB7XG4gIGNvbnN0IFtzZWFyY2gsIHNldFNlYXJjaF0gPSBjcmVhdGVTaWduYWwyKFwiXCIpO1xuICBjb25zdCBbdGltZW91dElkLCBzZXRUaW1lb3V0SWRdID0gY3JlYXRlU2lnbmFsMigtMSk7XG4gIGNvbnN0IG9uS2V5RG93biA9IChlKSA9PiB7XG4gICAgaWYgKGFjY2VzczIocHJvcHMuaXNEaXNhYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGVsZWdhdGUgPSBhY2Nlc3MyKHByb3BzLmtleWJvYXJkRGVsZWdhdGUpO1xuICAgIGNvbnN0IG1hbmFnZXIgPSBhY2Nlc3MyKHByb3BzLnNlbGVjdGlvbk1hbmFnZXIpO1xuICAgIGlmICghZGVsZWdhdGUuZ2V0S2V5Rm9yU2VhcmNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYXJhY3RlciA9IGdldFN0cmluZ0ZvcktleShlLmtleSk7XG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2hhcmFjdGVyID09PSBcIiBcIiAmJiBzZWFyY2goKS50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gICAgbGV0IG5ld1NlYXJjaCA9IHNldFNlYXJjaCgocHJldikgPT4gcHJldiArIGNoYXJhY3Rlcik7XG4gICAgbGV0IGtleSA9IGRlbGVnYXRlLmdldEtleUZvclNlYXJjaChuZXdTZWFyY2gsIG1hbmFnZXIuZm9jdXNlZEtleSgpKSA/PyBkZWxlZ2F0ZS5nZXRLZXlGb3JTZWFyY2gobmV3U2VhcmNoKTtcbiAgICBpZiAoa2V5ID09IG51bGwgJiYgaXNBbGxTYW1lTGV0dGVyKG5ld1NlYXJjaCkpIHtcbiAgICAgIG5ld1NlYXJjaCA9IG5ld1NlYXJjaFswXTtcbiAgICAgIGtleSA9IGRlbGVnYXRlLmdldEtleUZvclNlYXJjaChuZXdTZWFyY2gsIG1hbmFnZXIuZm9jdXNlZEtleSgpKSA/PyBkZWxlZ2F0ZS5nZXRLZXlGb3JTZWFyY2gobmV3U2VhcmNoKTtcbiAgICB9XG4gICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICBtYW5hZ2VyLnNldEZvY3VzZWRLZXkoa2V5KTtcbiAgICAgIHByb3BzLm9uVHlwZVNlbGVjdD8uKGtleSk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQoKSk7XG4gICAgc2V0VGltZW91dElkKHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHNldFNlYXJjaChcIlwiKSwgNTAwKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgdHlwZVNlbGVjdEhhbmRsZXJzOiB7XG4gICAgICBvbktleURvd25cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBnZXRTdHJpbmdGb3JLZXkoa2V5KSB7XG4gIGlmIChrZXkubGVuZ3RoID09PSAxIHx8ICEvXltBLVpdL2kudGVzdChrZXkpKSB7XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gXCJcIjtcbn1cbmZ1bmN0aW9uIGlzQWxsU2FtZUxldHRlcihzZWFyY2gpIHtcbiAgcmV0dXJuIHNlYXJjaC5zcGxpdChcIlwiKS5ldmVyeSgobGV0dGVyKSA9PiBsZXR0ZXIgPT09IHNlYXJjaFswXSk7XG59XG5cbi8vIHNyYy9zZWxlY3Rpb24vY3JlYXRlLXNlbGVjdGFibGUtY29sbGVjdGlvbi50c1xuaW1wb3J0IHtcbiAgYWNjZXNzIGFzIGFjY2VzczMsXG4gIGNhbGxIYW5kbGVyLFxuICBjcmVhdGVFdmVudExpc3RlbmVyLFxuICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcsXG4gIGdldEZvY3VzYWJsZVRyZWVXYWxrZXIsXG4gIHNjcm9sbEludG9WaWV3XG59IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRlRWZmZWN0IGFzIGNyZWF0ZUVmZmVjdDIsXG4gIGNyZWF0ZU1lbW8gYXMgY3JlYXRlTWVtbzIsXG4gIG1lcmdlUHJvcHMsXG4gIG9uLFxuICBvbk1vdW50XG59IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gY3JlYXRlU2VsZWN0YWJsZUNvbGxlY3Rpb24ocHJvcHMsIHJlZiwgc2Nyb2xsUmVmKSB7XG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBzZWxlY3RPbkZvY3VzOiAoKSA9PiBhY2Nlc3MzKHByb3BzLnNlbGVjdGlvbk1hbmFnZXIpLnNlbGVjdGlvbkJlaGF2aW9yKCkgPT09IFwicmVwbGFjZVwiXG4gIH07XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKTtcbiAgY29uc3QgZmluYWxTY3JvbGxSZWYgPSAoKSA9PiBzY3JvbGxSZWY/LigpID8/IHJlZigpO1xuICBjb25zdCB7IGRpcmVjdGlvbiB9ID0gdXNlTG9jYWxlKCk7XG4gIGxldCBzY3JvbGxQb3MgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICBjcmVhdGVFdmVudExpc3RlbmVyKFxuICAgICgpID0+ICFhY2Nlc3MzKG1lcmdlZFByb3BzLmlzVmlydHVhbGl6ZWQpID8gZmluYWxTY3JvbGxSZWYoKSA6IHZvaWQgMCxcbiAgICBcInNjcm9sbFwiLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IHNjcm9sbEVsID0gZmluYWxTY3JvbGxSZWYoKTtcbiAgICAgIGlmICghc2Nyb2xsRWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2Nyb2xsUG9zID0ge1xuICAgICAgICB0b3A6IHNjcm9sbEVsLnNjcm9sbFRvcCxcbiAgICAgICAgbGVmdDogc2Nyb2xsRWwuc2Nyb2xsTGVmdFxuICAgICAgfTtcbiAgICB9XG4gICk7XG4gIGNvbnN0IHsgdHlwZVNlbGVjdEhhbmRsZXJzIH0gPSBjcmVhdGVUeXBlU2VsZWN0KHtcbiAgICBpc0Rpc2FibGVkOiAoKSA9PiBhY2Nlc3MzKG1lcmdlZFByb3BzLmRpc2FsbG93VHlwZUFoZWFkKSxcbiAgICBrZXlib2FyZERlbGVnYXRlOiAoKSA9PiBhY2Nlc3MzKG1lcmdlZFByb3BzLmtleWJvYXJkRGVsZWdhdGUpLFxuICAgIHNlbGVjdGlvbk1hbmFnZXI6ICgpID0+IGFjY2VzczMobWVyZ2VkUHJvcHMuc2VsZWN0aW9uTWFuYWdlcilcbiAgfSk7XG4gIGNvbnN0IG9yaWVudGF0aW9uID0gKCkgPT4gYWNjZXNzMyhtZXJnZWRQcm9wcy5vcmllbnRhdGlvbikgPz8gXCJ2ZXJ0aWNhbFwiO1xuICBjb25zdCBvbktleURvd24gPSAoZSkgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUsIHR5cGVTZWxlY3RIYW5kbGVycy5vbktleURvd24pO1xuICAgIGlmIChlLmFsdEtleSAmJiBlLmtleSA9PT0gXCJUYWJcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBjb25zdCByZWZFbCA9IHJlZigpO1xuICAgIGlmICghcmVmRWw/LmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYW5hZ2VyID0gYWNjZXNzMyhtZXJnZWRQcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKTtcbiAgICBjb25zdCBzZWxlY3RPbkZvY3VzID0gYWNjZXNzMyhtZXJnZWRQcm9wcy5zZWxlY3RPbkZvY3VzKTtcbiAgICBjb25zdCBuYXZpZ2F0ZVRvS2V5ID0gKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICAgIG1hbmFnZXIuc2V0Rm9jdXNlZEtleShrZXkpO1xuICAgICAgICBpZiAoZS5zaGlmdEtleSAmJiBtYW5hZ2VyLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgbWFuYWdlci5leHRlbmRTZWxlY3Rpb24oa2V5KTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RPbkZvY3VzICYmICFpc05vbkNvbnRpZ3VvdXNTZWxlY3Rpb25Nb2RpZmllcihlKSkge1xuICAgICAgICAgIG1hbmFnZXIucmVwbGFjZVNlbGVjdGlvbihrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBkZWxlZ2F0ZSA9IGFjY2VzczMobWVyZ2VkUHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgY29uc3Qgc2hvdWxkRm9jdXNXcmFwID0gYWNjZXNzMyhtZXJnZWRQcm9wcy5zaG91bGRGb2N1c1dyYXApO1xuICAgIGNvbnN0IGZvY3VzZWRLZXkgPSBtYW5hZ2VyLmZvY3VzZWRLZXkoKTtcbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICBjYXNlIChvcmllbnRhdGlvbigpID09PSBcInZlcnRpY2FsXCIgPyBcIkFycm93RG93blwiIDogXCJBcnJvd1JpZ2h0XCIpOiB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5nZXRLZXlCZWxvdykge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBsZXQgbmV4dEtleTtcbiAgICAgICAgICBpZiAoZm9jdXNlZEtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBuZXh0S2V5ID0gZGVsZWdhdGUuZ2V0S2V5QmVsb3coZm9jdXNlZEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRGaXJzdEtleT8uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuZXh0S2V5ID09IG51bGwgJiYgc2hvdWxkRm9jdXNXcmFwKSB7XG4gICAgICAgICAgICBuZXh0S2V5ID0gZGVsZWdhdGUuZ2V0Rmlyc3RLZXk/Lihmb2N1c2VkS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmF2aWdhdGVUb0tleShuZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgKG9yaWVudGF0aW9uKCkgPT09IFwidmVydGljYWxcIiA/IFwiQXJyb3dVcFwiIDogXCJBcnJvd0xlZnRcIik6IHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldEtleUFib3ZlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGxldCBuZXh0S2V5O1xuICAgICAgICAgIGlmIChmb2N1c2VkS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRLZXlBYm92ZShmb2N1c2VkS2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dEtleSA9IGRlbGVnYXRlLmdldExhc3RLZXk/LigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobmV4dEtleSA9PSBudWxsICYmIHNob3VsZEZvY3VzV3JhcCkge1xuICAgICAgICAgICAgbmV4dEtleSA9IGRlbGVnYXRlLmdldExhc3RLZXk/Lihmb2N1c2VkS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmF2aWdhdGVUb0tleShuZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgKG9yaWVudGF0aW9uKCkgPT09IFwidmVydGljYWxcIiA/IFwiQXJyb3dMZWZ0XCIgOiBcIkFycm93VXBcIik6IHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldEtleUxlZnRPZikge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBpc1JUTCA9IGRpcmVjdGlvbigpID09PSBcInJ0bFwiO1xuICAgICAgICAgIGxldCBuZXh0S2V5O1xuICAgICAgICAgIGlmIChmb2N1c2VkS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRLZXlMZWZ0T2YoZm9jdXNlZEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBpc1JUTCA/IGRlbGVnYXRlLmdldEZpcnN0S2V5Py4oKSA6IGRlbGVnYXRlLmdldExhc3RLZXk/LigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuYXZpZ2F0ZVRvS2V5KG5leHRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAob3JpZW50YXRpb24oKSA9PT0gXCJ2ZXJ0aWNhbFwiID8gXCJBcnJvd1JpZ2h0XCIgOiBcIkFycm93RG93blwiKToge1xuICAgICAgICBpZiAoZGVsZWdhdGUuZ2V0S2V5UmlnaHRPZikge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBpc1JUTCA9IGRpcmVjdGlvbigpID09PSBcInJ0bFwiO1xuICAgICAgICAgIGxldCBuZXh0S2V5O1xuICAgICAgICAgIGlmIChmb2N1c2VkS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRLZXlSaWdodE9mKGZvY3VzZWRLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0S2V5ID0gaXNSVEwgPyBkZWxlZ2F0ZS5nZXRMYXN0S2V5Py4oKSA6IGRlbGVnYXRlLmdldEZpcnN0S2V5Py4oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmF2aWdhdGVUb0tleShuZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJIb21lXCI6XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5nZXRGaXJzdEtleSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBmaXJzdEtleSA9IGRlbGVnYXRlLmdldEZpcnN0S2V5KFxuICAgICAgICAgICAgZm9jdXNlZEtleSxcbiAgICAgICAgICAgIGlzQ3RybEtleVByZXNzZWQoZSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChmaXJzdEtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYW5hZ2VyLnNldEZvY3VzZWRLZXkoZmlyc3RLZXkpO1xuICAgICAgICAgICAgaWYgKGlzQ3RybEtleVByZXNzZWQoZSkgJiYgZS5zaGlmdEtleSAmJiBtYW5hZ2VyLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgICAgIG1hbmFnZXIuZXh0ZW5kU2VsZWN0aW9uKGZpcnN0S2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0T25Gb2N1cykge1xuICAgICAgICAgICAgICBtYW5hZ2VyLnJlcGxhY2VTZWxlY3Rpb24oZmlyc3RLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJFbmRcIjpcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldExhc3RLZXkpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgbGFzdEtleSA9IGRlbGVnYXRlLmdldExhc3RLZXkoZm9jdXNlZEtleSwgaXNDdHJsS2V5UHJlc3NlZChlKSk7XG4gICAgICAgICAgaWYgKGxhc3RLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFuYWdlci5zZXRGb2N1c2VkS2V5KGxhc3RLZXkpO1xuICAgICAgICAgICAgaWYgKGlzQ3RybEtleVByZXNzZWQoZSkgJiYgZS5zaGlmdEtleSAmJiBtYW5hZ2VyLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgICAgIG1hbmFnZXIuZXh0ZW5kU2VsZWN0aW9uKGxhc3RLZXkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RPbkZvY3VzKSB7XG4gICAgICAgICAgICAgIG1hbmFnZXIucmVwbGFjZVNlbGVjdGlvbihsYXN0S2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiUGFnZURvd25cIjpcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldEtleVBhZ2VCZWxvdyAmJiBmb2N1c2VkS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGRlbGVnYXRlLmdldEtleVBhZ2VCZWxvdyhmb2N1c2VkS2V5KTtcbiAgICAgICAgICBuYXZpZ2F0ZVRvS2V5KG5leHRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlBhZ2VVcFwiOlxuICAgICAgICBpZiAoZGVsZWdhdGUuZ2V0S2V5UGFnZUFib3ZlICYmIGZvY3VzZWRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBuZXh0S2V5ID0gZGVsZWdhdGUuZ2V0S2V5UGFnZUFib3ZlKGZvY3VzZWRLZXkpO1xuICAgICAgICAgIG5hdmlnYXRlVG9LZXkobmV4dEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYVwiOlxuICAgICAgICBpZiAoaXNDdHJsS2V5UHJlc3NlZChlKSAmJiBtYW5hZ2VyLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiICYmIGFjY2VzczMobWVyZ2VkUHJvcHMuZGlzYWxsb3dTZWxlY3RBbGwpICE9PSB0cnVlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG1hbmFnZXIuc2VsZWN0QWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICAgIGlmICghZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmICghYWNjZXNzMyhtZXJnZWRQcm9wcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgbWFuYWdlci5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJUYWJcIjoge1xuICAgICAgICBpZiAoIWFjY2VzczMobWVyZ2VkUHJvcHMuYWxsb3dzVGFiTmF2aWdhdGlvbikpIHtcbiAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgcmVmRWwuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgd2Fsa2VyID0gZ2V0Rm9jdXNhYmxlVHJlZVdhbGtlcihyZWZFbCwgeyB0YWJiYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGxldCBuZXh0O1xuICAgICAgICAgICAgbGV0IGxhc3Q7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGxhc3QgPSB3YWxrZXIubGFzdENoaWxkKCk7XG4gICAgICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IGxhc3Q7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGxhc3QpO1xuICAgICAgICAgICAgaWYgKG5leHQgJiYgIW5leHQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKG5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Gb2N1c0luID0gKGUpID0+IHtcbiAgICBjb25zdCBtYW5hZ2VyID0gYWNjZXNzMyhtZXJnZWRQcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKTtcbiAgICBjb25zdCBkZWxlZ2F0ZSA9IGFjY2VzczMobWVyZ2VkUHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgY29uc3Qgc2VsZWN0T25Gb2N1cyA9IGFjY2VzczMobWVyZ2VkUHJvcHMuc2VsZWN0T25Gb2N1cyk7XG4gICAgaWYgKG1hbmFnZXIuaXNGb2N1c2VkKCkpIHtcbiAgICAgIGlmICghZS5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICBtYW5hZ2VyLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWUuY3VycmVudFRhcmdldC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWFuYWdlci5zZXRGb2N1c2VkKHRydWUpO1xuICAgIGlmIChtYW5hZ2VyLmZvY3VzZWRLZXkoKSA9PSBudWxsKSB7XG4gICAgICBjb25zdCBuYXZpZ2F0ZVRvRmlyc3RLZXkgPSAoa2V5KSA9PiB7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtYW5hZ2VyLnNldEZvY3VzZWRLZXkoa2V5KTtcbiAgICAgICAgaWYgKHNlbGVjdE9uRm9jdXMpIHtcbiAgICAgICAgICBtYW5hZ2VyLnJlcGxhY2VTZWxlY3Rpb24oa2V5KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSBlLnJlbGF0ZWRUYXJnZXQ7XG4gICAgICBpZiAocmVsYXRlZFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocmVsYXRlZFRhcmdldCkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORykge1xuICAgICAgICBuYXZpZ2F0ZVRvRmlyc3RLZXkoXG4gICAgICAgICAgbWFuYWdlci5sYXN0U2VsZWN0ZWRLZXkoKSA/PyBkZWxlZ2F0ZS5nZXRMYXN0S2V5Py4oKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmF2aWdhdGVUb0ZpcnN0S2V5KFxuICAgICAgICAgIG1hbmFnZXIuZmlyc3RTZWxlY3RlZEtleSgpID8/IGRlbGVnYXRlLmdldEZpcnN0S2V5Py4oKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFjY2VzczMobWVyZ2VkUHJvcHMuaXNWaXJ0dWFsaXplZCkpIHtcbiAgICAgIGNvbnN0IHNjcm9sbEVsID0gZmluYWxTY3JvbGxSZWYoKTtcbiAgICAgIGlmIChzY3JvbGxFbCkge1xuICAgICAgICBzY3JvbGxFbC5zY3JvbGxUb3AgPSBzY3JvbGxQb3MudG9wO1xuICAgICAgICBzY3JvbGxFbC5zY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zLmxlZnQ7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBzY3JvbGxFbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGBbZGF0YS1rZXk9XCIke21hbmFnZXIuZm9jdXNlZEtleSgpfVwiXWBcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoZWxlbWVudCk7XG4gICAgICAgICAgc2Nyb2xsSW50b1ZpZXcoc2Nyb2xsRWwsIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkZvY3VzT3V0ID0gKGUpID0+IHtcbiAgICBjb25zdCBtYW5hZ2VyID0gYWNjZXNzMyhtZXJnZWRQcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKTtcbiAgICBpZiAoIWUuY3VycmVudFRhcmdldC5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICBtYW5hZ2VyLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Nb3VzZURvd24gPSAoZSkgPT4ge1xuICAgIGlmIChmaW5hbFNjcm9sbFJlZigpID09PSBlLnRhcmdldCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdHJ5QXV0b0ZvY3VzID0gKCkgPT4ge1xuICAgIGNvbnN0IGF1dG9Gb2N1cyA9IGFjY2VzczMobWVyZ2VkUHJvcHMuYXV0b0ZvY3VzKTtcbiAgICBpZiAoIWF1dG9Gb2N1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYW5hZ2VyID0gYWNjZXNzMyhtZXJnZWRQcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKTtcbiAgICBjb25zdCBkZWxlZ2F0ZSA9IGFjY2VzczMobWVyZ2VkUHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgbGV0IGZvY3VzZWRLZXk7XG4gICAgaWYgKGF1dG9Gb2N1cyA9PT0gXCJmaXJzdFwiKSB7XG4gICAgICBmb2N1c2VkS2V5ID0gZGVsZWdhdGUuZ2V0Rmlyc3RLZXk/LigpO1xuICAgIH1cbiAgICBpZiAoYXV0b0ZvY3VzID09PSBcImxhc3RcIikge1xuICAgICAgZm9jdXNlZEtleSA9IGRlbGVnYXRlLmdldExhc3RLZXk/LigpO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSBtYW5hZ2VyLnNlbGVjdGVkS2V5cygpO1xuICAgIGlmIChzZWxlY3RlZEtleXMuc2l6ZSkge1xuICAgICAgZm9jdXNlZEtleSA9IHNlbGVjdGVkS2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWU7XG4gICAgfVxuICAgIG1hbmFnZXIuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICBtYW5hZ2VyLnNldEZvY3VzZWRLZXkoZm9jdXNlZEtleSk7XG4gICAgY29uc3QgcmVmRWwgPSByZWYoKTtcbiAgICBpZiAocmVmRWwgJiYgZm9jdXNlZEtleSA9PSBudWxsICYmICFhY2Nlc3MzKG1lcmdlZFByb3BzLnNob3VsZFVzZVZpcnR1YWxGb2N1cykpIHtcbiAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhyZWZFbCk7XG4gICAgfVxuICB9O1xuICBvbk1vdW50KCgpID0+IHtcbiAgICBpZiAobWVyZ2VkUHJvcHMuZGVmZXJBdXRvRm9jdXMpIHtcbiAgICAgIHNldFRpbWVvdXQodHJ5QXV0b0ZvY3VzLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5QXV0b0ZvY3VzKCk7XG4gICAgfVxuICB9KTtcbiAgY3JlYXRlRWZmZWN0MihcbiAgICBvbihcbiAgICAgIFtcbiAgICAgICAgZmluYWxTY3JvbGxSZWYsXG4gICAgICAgICgpID0+IGFjY2VzczMobWVyZ2VkUHJvcHMuaXNWaXJ0dWFsaXplZCksXG4gICAgICAgICgpID0+IGFjY2VzczMobWVyZ2VkUHJvcHMuc2VsZWN0aW9uTWFuYWdlcikuZm9jdXNlZEtleSgpXG4gICAgICBdLFxuICAgICAgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IFtzY3JvbGxFbCwgaXNWaXJ0dWFsaXplZCwgZm9jdXNlZEtleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgaWYgKGlzVmlydHVhbGl6ZWQpIHtcbiAgICAgICAgICBmb2N1c2VkS2V5ICYmIG1lcmdlZFByb3BzLnNjcm9sbFRvS2V5Py4oZm9jdXNlZEtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGZvY3VzZWRLZXkgJiYgc2Nyb2xsRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBzY3JvbGxFbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICBgW2RhdGEta2V5PVwiJHtmb2N1c2VkS2V5fVwiXWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICBzY3JvbGxJbnRvVmlldyhzY3JvbGxFbCwgZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICApO1xuICBjb25zdCB0YWJJbmRleCA9IGNyZWF0ZU1lbW8yKCgpID0+IHtcbiAgICBpZiAoYWNjZXNzMyhtZXJnZWRQcm9wcy5zaG91bGRVc2VWaXJ0dWFsRm9jdXMpKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gYWNjZXNzMyhtZXJnZWRQcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKS5mb2N1c2VkS2V5KCkgPT0gbnVsbCA/IDAgOiAtMTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdGFiSW5kZXgsXG4gICAgb25LZXlEb3duLFxuICAgIG9uTW91c2VEb3duLFxuICAgIG9uRm9jdXNJbixcbiAgICBvbkZvY3VzT3V0XG4gIH07XG59XG5cbi8vIHNyYy9zZWxlY3Rpb24vY3JlYXRlLXNlbGVjdGFibGUtaXRlbS50c1xuaW1wb3J0IHsgYWNjZXNzIGFzIGFjY2VzczQsIGZvY3VzV2l0aG91dFNjcm9sbGluZyBhcyBmb2N1c1dpdGhvdXRTY3JvbGxpbmcyIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QgYXMgY3JlYXRlRWZmZWN0MywgY3JlYXRlTWVtbyBhcyBjcmVhdGVNZW1vMywgb24gYXMgb24yIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RhYmxlSXRlbShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IG1hbmFnZXIgPSAoKSA9PiBhY2Nlc3M0KHByb3BzLnNlbGVjdGlvbk1hbmFnZXIpO1xuICBjb25zdCBrZXkgPSAoKSA9PiBhY2Nlc3M0KHByb3BzLmtleSk7XG4gIGNvbnN0IHNob3VsZFVzZVZpcnR1YWxGb2N1cyA9ICgpID0+IGFjY2VzczQocHJvcHMuc2hvdWxkVXNlVmlydHVhbEZvY3VzKTtcbiAgY29uc3Qgb25TZWxlY3QgPSAoZSkgPT4ge1xuICAgIGlmIChtYW5hZ2VyKCkuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWFuYWdlcigpLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJzaW5nbGVcIikge1xuICAgICAgaWYgKG1hbmFnZXIoKS5pc1NlbGVjdGVkKGtleSgpKSAmJiAhbWFuYWdlcigpLmRpc2FsbG93RW1wdHlTZWxlY3Rpb24oKSkge1xuICAgICAgICBtYW5hZ2VyKCkudG9nZ2xlU2VsZWN0aW9uKGtleSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hbmFnZXIoKS5yZXBsYWNlU2VsZWN0aW9uKGtleSgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGU/LnNoaWZ0S2V5KSB7XG4gICAgICBtYW5hZ2VyKCkuZXh0ZW5kU2VsZWN0aW9uKGtleSgpKTtcbiAgICB9IGVsc2UgaWYgKG1hbmFnZXIoKS5zZWxlY3Rpb25CZWhhdmlvcigpID09PSBcInRvZ2dsZVwiIHx8IGlzQ3RybEtleVByZXNzZWQoZSkgfHwgXCJwb2ludGVyVHlwZVwiIGluIGUgJiYgZS5wb2ludGVyVHlwZSA9PT0gXCJ0b3VjaFwiKSB7XG4gICAgICBtYW5hZ2VyKCkudG9nZ2xlU2VsZWN0aW9uKGtleSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFuYWdlcigpLnJlcGxhY2VTZWxlY3Rpb24oa2V5KCkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaXNTZWxlY3RlZCA9ICgpID0+IG1hbmFnZXIoKS5pc1NlbGVjdGVkKGtleSgpKTtcbiAgY29uc3QgaXNEaXNhYmxlZCA9ICgpID0+IGFjY2VzczQocHJvcHMuZGlzYWJsZWQpIHx8IG1hbmFnZXIoKS5pc0Rpc2FibGVkKGtleSgpKTtcbiAgY29uc3QgYWxsb3dzU2VsZWN0aW9uID0gKCkgPT4gIWlzRGlzYWJsZWQoKSAmJiBtYW5hZ2VyKCkuY2FuU2VsZWN0SXRlbShrZXkoKSk7XG4gIGxldCBwb2ludGVyRG93blR5cGUgPSBudWxsO1xuICBjb25zdCBvblBvaW50ZXJEb3duID0gKGUpID0+IHtcbiAgICBpZiAoIWFsbG93c1NlbGVjdGlvbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBvaW50ZXJEb3duVHlwZSA9IGUucG9pbnRlclR5cGU7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09IFwibW91c2VcIiAmJiBlLmJ1dHRvbiA9PT0gMCAmJiAhYWNjZXNzNChwcm9wcy5zaG91bGRTZWxlY3RPblByZXNzVXApKSB7XG4gICAgICBvblNlbGVjdChlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uUG9pbnRlclVwID0gKGUpID0+IHtcbiAgICBpZiAoIWFsbG93c1NlbGVjdGlvbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlLnBvaW50ZXJUeXBlID09PSBcIm1vdXNlXCIgJiYgZS5idXR0b24gPT09IDAgJiYgYWNjZXNzNChwcm9wcy5zaG91bGRTZWxlY3RPblByZXNzVXApICYmIGFjY2VzczQocHJvcHMuYWxsb3dzRGlmZmVyZW50UHJlc3NPcmlnaW4pKSB7XG4gICAgICBvblNlbGVjdChlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4ge1xuICAgIGlmICghYWxsb3dzU2VsZWN0aW9uKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFjY2VzczQocHJvcHMuc2hvdWxkU2VsZWN0T25QcmVzc1VwKSAmJiAhYWNjZXNzNChwcm9wcy5hbGxvd3NEaWZmZXJlbnRQcmVzc09yaWdpbikgfHwgcG9pbnRlckRvd25UeXBlICE9PSBcIm1vdXNlXCIpIHtcbiAgICAgIG9uU2VsZWN0KGUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25LZXlEb3duID0gKGUpID0+IHtcbiAgICBpZiAoIWFsbG93c1NlbGVjdGlvbigpIHx8ICFbXCJFbnRlclwiLCBcIiBcIl0uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc05vbkNvbnRpZ3VvdXNTZWxlY3Rpb25Nb2RpZmllcihlKSkge1xuICAgICAgbWFuYWdlcigpLnRvZ2dsZVNlbGVjdGlvbihrZXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uU2VsZWN0KGUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Nb3VzZURvd24gPSAoZSkgPT4ge1xuICAgIGlmIChpc0Rpc2FibGVkKCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uRm9jdXMgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHJlZkVsID0gcmVmKCk7XG4gICAgaWYgKHNob3VsZFVzZVZpcnR1YWxGb2N1cygpIHx8IGlzRGlzYWJsZWQoKSB8fCAhcmVmRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUudGFyZ2V0ID09PSByZWZFbCkge1xuICAgICAgbWFuYWdlcigpLnNldEZvY3VzZWRLZXkoa2V5KCkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdGFiSW5kZXggPSBjcmVhdGVNZW1vMygoKSA9PiB7XG4gICAgaWYgKHNob3VsZFVzZVZpcnR1YWxGb2N1cygpIHx8IGlzRGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIGtleSgpID09PSBtYW5hZ2VyKCkuZm9jdXNlZEtleSgpID8gMCA6IC0xO1xuICB9KTtcbiAgY29uc3QgZGF0YUtleSA9IGNyZWF0ZU1lbW8zKCgpID0+IHtcbiAgICByZXR1cm4gYWNjZXNzNChwcm9wcy52aXJ0dWFsaXplZCkgPyB2b2lkIDAgOiBrZXkoKTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdDMoXG4gICAgb24yKFxuICAgICAgW1xuICAgICAgICByZWYsXG4gICAgICAgIGtleSxcbiAgICAgICAgc2hvdWxkVXNlVmlydHVhbEZvY3VzLFxuICAgICAgICAoKSA9PiBtYW5hZ2VyKCkuZm9jdXNlZEtleSgpLFxuICAgICAgICAoKSA9PiBtYW5hZ2VyKCkuaXNGb2N1c2VkKClcbiAgICAgIF0sXG4gICAgICAoW3JlZkVsLCBrZXkyLCBzaG91bGRVc2VWaXJ0dWFsRm9jdXMyLCBmb2N1c2VkS2V5LCBpc0ZvY3VzZWRdKSA9PiB7XG4gICAgICAgIGlmIChyZWZFbCAmJiBrZXkyID09PSBmb2N1c2VkS2V5ICYmIGlzRm9jdXNlZCAmJiAhc2hvdWxkVXNlVmlydHVhbEZvY3VzMiAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSByZWZFbCkge1xuICAgICAgICAgIGlmIChwcm9wcy5mb2N1cykge1xuICAgICAgICAgICAgcHJvcHMuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nMihyZWZFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICApO1xuICByZXR1cm4ge1xuICAgIGlzU2VsZWN0ZWQsXG4gICAgaXNEaXNhYmxlZCxcbiAgICBhbGxvd3NTZWxlY3Rpb24sXG4gICAgdGFiSW5kZXgsXG4gICAgZGF0YUtleSxcbiAgICBvblBvaW50ZXJEb3duLFxuICAgIG9uUG9pbnRlclVwLFxuICAgIG9uQ2xpY2ssXG4gICAgb25LZXlEb3duLFxuICAgIG9uTW91c2VEb3duLFxuICAgIG9uRm9jdXNcbiAgfTtcbn1cblxuLy8gc3JjL3NlbGVjdGlvbi9zZWxlY3Rpb24tbWFuYWdlci50c1xudmFyIFNlbGVjdGlvbk1hbmFnZXIgPSBjbGFzcyB7XG4gIGNvbGxlY3Rpb247XG4gIHN0YXRlO1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBzdGF0ZSkge1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICB9XG4gIC8qKiBUaGUgdHlwZSBvZiBzZWxlY3Rpb24gdGhhdCBpcyBhbGxvd2VkIGluIHRoZSBjb2xsZWN0aW9uLiAqL1xuICBzZWxlY3Rpb25Nb2RlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnNlbGVjdGlvbk1vZGUoKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgY29sbGVjdGlvbiBhbGxvd3MgZW1wdHkgc2VsZWN0aW9uLiAqL1xuICBkaXNhbGxvd0VtcHR5U2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmRpc2FsbG93RW1wdHlTZWxlY3Rpb24oKTtcbiAgfVxuICAvKiogVGhlIHNlbGVjdGlvbiBiZWhhdmlvciBmb3IgdGhlIGNvbGxlY3Rpb24uICovXG4gIHNlbGVjdGlvbkJlaGF2aW9yKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnNlbGVjdGlvbkJlaGF2aW9yKCk7XG4gIH1cbiAgLyoqIFNldHMgdGhlIHNlbGVjdGlvbiBiZWhhdmlvciBmb3IgdGhlIGNvbGxlY3Rpb24uICovXG4gIHNldFNlbGVjdGlvbkJlaGF2aW9yKHNlbGVjdGlvbkJlaGF2aW9yKSB7XG4gICAgdGhpcy5zdGF0ZS5zZXRTZWxlY3Rpb25CZWhhdmlvcihzZWxlY3Rpb25CZWhhdmlvcik7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIGNvbGxlY3Rpb24gaXMgY3VycmVudGx5IGZvY3VzZWQuICovXG4gIGlzRm9jdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ZvY3VzZWQoKTtcbiAgfVxuICAvKiogU2V0cyB3aGV0aGVyIHRoZSBjb2xsZWN0aW9uIGlzIGZvY3VzZWQuICovXG4gIHNldEZvY3VzZWQoaXNGb2N1c2VkKSB7XG4gICAgdGhpcy5zdGF0ZS5zZXRGb2N1c2VkKGlzRm9jdXNlZCk7XG4gIH1cbiAgLyoqIFRoZSBjdXJyZW50IGZvY3VzZWQga2V5IGluIHRoZSBjb2xsZWN0aW9uLiAqL1xuICBmb2N1c2VkS2V5KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmZvY3VzZWRLZXkoKTtcbiAgfVxuICAvKiogU2V0cyB0aGUgZm9jdXNlZCBrZXkuICovXG4gIHNldEZvY3VzZWRLZXkoa2V5KSB7XG4gICAgaWYgKGtleSA9PSBudWxsIHx8IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KSkge1xuICAgICAgdGhpcy5zdGF0ZS5zZXRGb2N1c2VkS2V5KGtleSk7XG4gICAgfVxuICB9XG4gIC8qKiBUaGUgY3VycmVudGx5IHNlbGVjdGVkIGtleXMgaW4gdGhlIGNvbGxlY3Rpb24uICovXG4gIHNlbGVjdGVkS2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZEtleXMoKTtcbiAgfVxuICAvKiogUmV0dXJucyB3aGV0aGVyIGEga2V5IGlzIHNlbGVjdGVkLiAqL1xuICBpc1NlbGVjdGVkKGtleSkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcmV0cmlldmVkS2V5ID0gdGhpcy5nZXRLZXkoa2V5KTtcbiAgICBpZiAocmV0cmlldmVkS2V5ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCkuaGFzKHJldHJpZXZlZEtleSk7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBlbXB0eS4gKi9cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZEtleXMoKS5zaXplID09PSAwO1xuICB9XG4gIC8qKiBXaGV0aGVyIGFsbCBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbiBhcmUgc2VsZWN0ZWQuICovXG4gIGlzU2VsZWN0QWxsKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpO1xuICAgIHJldHVybiB0aGlzLmdldEFsbFNlbGVjdGFibGVLZXlzKCkuZXZlcnkoKGspID0+IHNlbGVjdGVkS2V5cy5oYXMoaykpO1xuICB9XG4gIGZpcnN0U2VsZWN0ZWRLZXkoKSB7XG4gICAgbGV0IGZpcnN0O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCkpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGtleSk7XG4gICAgICBjb25zdCBpc0l0ZW1CZWZvcmVGaXJzdCA9IGl0ZW0/LmluZGV4ICE9IG51bGwgJiYgZmlyc3Q/LmluZGV4ICE9IG51bGwgJiYgaXRlbS5pbmRleCA8IGZpcnN0LmluZGV4O1xuICAgICAgaWYgKCFmaXJzdCB8fCBpc0l0ZW1CZWZvcmVGaXJzdCkge1xuICAgICAgICBmaXJzdCA9IGl0ZW07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaXJzdD8ua2V5O1xuICB9XG4gIGxhc3RTZWxlY3RlZEtleSgpIHtcbiAgICBsZXQgbGFzdDtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgY29uc3QgaXNJdGVtQWZ0ZXJMYXN0ID0gaXRlbT8uaW5kZXggIT0gbnVsbCAmJiBsYXN0Py5pbmRleCAhPSBudWxsICYmIGl0ZW0uaW5kZXggPiBsYXN0LmluZGV4O1xuICAgICAgaWYgKCFsYXN0IHx8IGlzSXRlbUFmdGVyTGFzdCkge1xuICAgICAgICBsYXN0ID0gaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxhc3Q/LmtleTtcbiAgfVxuICAvKiogRXh0ZW5kcyB0aGUgc2VsZWN0aW9uIHRvIHRoZSBnaXZlbiBrZXkuICovXG4gIGV4dGVuZFNlbGVjdGlvbih0b0tleSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTW9kZSgpID09PSBcInNpbmdsZVwiKSB7XG4gICAgICB0aGlzLnJlcGxhY2VTZWxlY3Rpb24odG9LZXkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXRyaWV2ZWRUb0tleSA9IHRoaXMuZ2V0S2V5KHRvS2V5KTtcbiAgICBpZiAocmV0cmlldmVkVG9LZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpO1xuICAgIGNvbnN0IGFuY2hvcktleSA9IHNlbGVjdGVkS2V5cy5hbmNob3JLZXkgfHwgcmV0cmlldmVkVG9LZXk7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbihzZWxlY3RlZEtleXMsIGFuY2hvcktleSwgcmV0cmlldmVkVG9LZXkpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZ2V0S2V5UmFuZ2UoXG4gICAgICBhbmNob3JLZXksXG4gICAgICBzZWxlY3RlZEtleXMuY3VycmVudEtleSB8fCByZXRyaWV2ZWRUb0tleVxuICAgICkpIHtcbiAgICAgIHNlbGVjdGlvbi5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5nZXRLZXlSYW5nZShyZXRyaWV2ZWRUb0tleSwgYW5jaG9yS2V5KSkge1xuICAgICAgaWYgKHRoaXMuY2FuU2VsZWN0SXRlbShrZXkpKSB7XG4gICAgICAgIHNlbGVjdGlvbi5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zdGF0ZS5zZXRTZWxlY3RlZEtleXMoc2VsZWN0aW9uKTtcbiAgfVxuICBnZXRLZXlSYW5nZShmcm9tLCB0bykge1xuICAgIGNvbnN0IGZyb21JdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShmcm9tKTtcbiAgICBjb25zdCB0b0l0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKHRvKTtcbiAgICBpZiAoZnJvbUl0ZW0gJiYgdG9JdGVtKSB7XG4gICAgICBpZiAoZnJvbUl0ZW0uaW5kZXggIT0gbnVsbCAmJiB0b0l0ZW0uaW5kZXggIT0gbnVsbCAmJiBmcm9tSXRlbS5pbmRleCA8PSB0b0l0ZW0uaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5UmFuZ2VJbnRlcm5hbChmcm9tLCB0byk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5nZXRLZXlSYW5nZUludGVybmFsKHRvLCBmcm9tKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGdldEtleVJhbmdlSW50ZXJuYWwoZnJvbSwgdG8pIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgbGV0IGtleSA9IGZyb207XG4gICAgd2hpbGUgKGtleSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS50eXBlID09PSBcIml0ZW1cIikge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09IHRvKSB7XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgfVxuICAgICAga2V5ID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0S2V5QWZ0ZXIoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGdldEtleShrZXkpIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgaWYgKCFpdGVtIHx8IGl0ZW0udHlwZSAhPT0gXCJpdGVtXCIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbS5rZXk7XG4gIH1cbiAgLyoqIFRvZ2dsZXMgd2hldGhlciB0aGUgZ2l2ZW4ga2V5IGlzIHNlbGVjdGVkLiAqL1xuICB0b2dnbGVTZWxlY3Rpb24oa2V5KSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwic2luZ2xlXCIgJiYgIXRoaXMuaXNTZWxlY3RlZChrZXkpKSB7XG4gICAgICB0aGlzLnJlcGxhY2VTZWxlY3Rpb24oa2V5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmV0cmlldmVkS2V5ID0gdGhpcy5nZXRLZXkoa2V5KTtcbiAgICBpZiAocmV0cmlldmVkS2V5ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IG5ldyBTZWxlY3Rpb24odGhpcy5zdGF0ZS5zZWxlY3RlZEtleXMoKSk7XG4gICAgaWYgKGtleXMuaGFzKHJldHJpZXZlZEtleSkpIHtcbiAgICAgIGtleXMuZGVsZXRlKHJldHJpZXZlZEtleSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNhblNlbGVjdEl0ZW0ocmV0cmlldmVkS2V5KSkge1xuICAgICAga2V5cy5hZGQocmV0cmlldmVkS2V5KTtcbiAgICAgIGtleXMuYW5jaG9yS2V5ID0gcmV0cmlldmVkS2V5O1xuICAgICAga2V5cy5jdXJyZW50S2V5ID0gcmV0cmlldmVkS2V5O1xuICAgIH1cbiAgICBpZiAodGhpcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKCkgJiYga2V5cy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhdGUuc2V0U2VsZWN0ZWRLZXlzKGtleXMpO1xuICB9XG4gIC8qKiBSZXBsYWNlcyB0aGUgc2VsZWN0aW9uIHdpdGggb25seSB0aGUgZ2l2ZW4ga2V5LiAqL1xuICByZXBsYWNlU2VsZWN0aW9uKGtleSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmV0cmlldmVkS2V5ID0gdGhpcy5nZXRLZXkoa2V5KTtcbiAgICBpZiAocmV0cmlldmVkS2V5ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5jYW5TZWxlY3RJdGVtKHJldHJpZXZlZEtleSkgPyBuZXcgU2VsZWN0aW9uKFtyZXRyaWV2ZWRLZXldLCByZXRyaWV2ZWRLZXksIHJldHJpZXZlZEtleSkgOiBuZXcgU2VsZWN0aW9uKCk7XG4gICAgdGhpcy5zdGF0ZS5zZXRTZWxlY3RlZEtleXMoc2VsZWN0aW9uKTtcbiAgfVxuICAvKiogUmVwbGFjZXMgdGhlIHNlbGVjdGlvbiB3aXRoIHRoZSBnaXZlbiBrZXlzLiAqL1xuICBzZXRTZWxlY3RlZEtleXMoa2V5cykge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbigpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGNvbnN0IHJldHJpZXZlZEtleSA9IHRoaXMuZ2V0S2V5KGtleSk7XG4gICAgICBpZiAocmV0cmlldmVkS2V5ICE9IG51bGwpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZChyZXRyaWV2ZWRLZXkpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwic2luZ2xlXCIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhzZWxlY3Rpb24pO1xuICB9XG4gIC8qKiBTZWxlY3RzIGFsbCBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi4gKi9cbiAgc2VsZWN0QWxsKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhuZXcgU2V0KHRoaXMuZ2V0QWxsU2VsZWN0YWJsZUtleXMoKSkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwga2V5cyBmcm9tIHRoZSBzZWxlY3Rpb24uXG4gICAqL1xuICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpO1xuICAgIGlmICghdGhpcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKCkgJiYgc2VsZWN0ZWRLZXlzLnNpemUgPiAwKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhuZXcgU2VsZWN0aW9uKCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBiZXR3ZWVuIHNlbGVjdCBhbGwgYW5kIGFuIGVtcHR5IHNlbGVjdGlvbi5cbiAgICovXG4gIHRvZ2dsZVNlbGVjdEFsbCgpIHtcbiAgICBpZiAodGhpcy5pc1NlbGVjdEFsbCgpKSB7XG4gICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0QWxsKCk7XG4gICAgfVxuICB9XG4gIHNlbGVjdChrZXksIGUpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwibm9uZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJzaW5nbGVcIikge1xuICAgICAgaWYgKHRoaXMuaXNTZWxlY3RlZChrZXkpICYmICF0aGlzLmRpc2FsbG93RW1wdHlTZWxlY3Rpb24oKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZVNlbGVjdGlvbihrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlU2VsZWN0aW9uKGtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGlvbkJlaGF2aW9yKCkgPT09IFwidG9nZ2xlXCIgfHwgZSAmJiBlLnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcbiAgICAgIHRoaXMudG9nZ2xlU2VsZWN0aW9uKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVwbGFjZVNlbGVjdGlvbihrZXkpO1xuICAgIH1cbiAgfVxuICAvKiogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBpcyBlcXVhbCB0byB0aGUgZ2l2ZW4gc2VsZWN0aW9uLiAqL1xuICBpc1NlbGVjdGlvbkVxdWFsKHNlbGVjdGlvbikge1xuICAgIGlmIChzZWxlY3Rpb24gPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSB0aGlzLnNlbGVjdGVkS2V5cygpO1xuICAgIGlmIChzZWxlY3Rpb24uc2l6ZSAhPT0gc2VsZWN0ZWRLZXlzLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2Ygc2VsZWN0aW9uKSB7XG4gICAgICBpZiAoIXNlbGVjdGVkS2V5cy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIHNlbGVjdGVkS2V5cykge1xuICAgICAgaWYgKCFzZWxlY3Rpb24uaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYW5TZWxlY3RJdGVtKGtleSkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICByZXR1cm4gaXRlbSAhPSBudWxsICYmICFpdGVtLmRpc2FibGVkO1xuICB9XG4gIGlzRGlzYWJsZWQoa2V5KSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICByZXR1cm4gIWl0ZW0gfHwgaXRlbS5kaXNhYmxlZDtcbiAgfVxuICBnZXRBbGxTZWxlY3RhYmxlS2V5cygpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgYWRkS2V5cyA9IChrZXkpID0+IHtcbiAgICAgIHdoaWxlIChrZXkgIT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5jYW5TZWxlY3RJdGVtKGtleSkpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09IFwiaXRlbVwiKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0S2V5QWZ0ZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGFkZEtleXModGhpcy5jb2xsZWN0aW9uKCkuZ2V0Rmlyc3RLZXkoKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH1cbn07XG5cbi8vIHNyYy9saXN0L2xpc3QtY29sbGVjdGlvbi50c1xudmFyIExpc3RDb2xsZWN0aW9uID0gY2xhc3Mge1xuICBrZXlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBpdGVyYWJsZTtcbiAgZmlyc3RLZXk7XG4gIGxhc3RLZXk7XG4gIGNvbnN0cnVjdG9yKG5vZGVzKSB7XG4gICAgdGhpcy5pdGVyYWJsZSA9IG5vZGVzO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgdGhpcy5rZXlNYXAuc2V0KG5vZGUua2V5LCBub2RlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMua2V5TWFwLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxhc3Q7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IFtrZXksIG5vZGVdIG9mIHRoaXMua2V5TWFwKSB7XG4gICAgICBpZiAobGFzdCkge1xuICAgICAgICBsYXN0Lm5leHRLZXkgPSBrZXk7XG4gICAgICAgIG5vZGUucHJldktleSA9IGxhc3Qua2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5maXJzdEtleSA9IGtleTtcbiAgICAgICAgbm9kZS5wcmV2S2V5ID0gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJpdGVtXCIpIHtcbiAgICAgICAgbm9kZS5pbmRleCA9IGluZGV4Kys7XG4gICAgICB9XG4gICAgICBsYXN0ID0gbm9kZTtcbiAgICAgIGxhc3QubmV4dEtleSA9IHZvaWQgMDtcbiAgICB9XG4gICAgdGhpcy5sYXN0S2V5ID0gbGFzdC5rZXk7XG4gIH1cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHlpZWxkKiB0aGlzLml0ZXJhYmxlO1xuICB9XG4gIGdldFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMua2V5TWFwLnNpemU7XG4gIH1cbiAgZ2V0S2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5rZXlNYXAua2V5cygpO1xuICB9XG4gIGdldEtleUJlZm9yZShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5rZXlNYXAuZ2V0KGtleSk/LnByZXZLZXk7XG4gIH1cbiAgZ2V0S2V5QWZ0ZXIoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMua2V5TWFwLmdldChrZXkpPy5uZXh0S2V5O1xuICB9XG4gIGdldEZpcnN0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLmZpcnN0S2V5O1xuICB9XG4gIGdldExhc3RLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFzdEtleTtcbiAgfVxuICBnZXRJdGVtKGtleSkge1xuICAgIHJldHVybiB0aGlzLmtleU1hcC5nZXQoa2V5KTtcbiAgfVxuICBhdChpZHgpIHtcbiAgICBjb25zdCBrZXlzID0gWy4uLnRoaXMuZ2V0S2V5cygpXTtcbiAgICByZXR1cm4gdGhpcy5nZXRJdGVtKGtleXNbaWR4XSk7XG4gIH1cbn07XG5cbi8vIHNyYy9saXN0L2NyZWF0ZS1saXN0LXN0YXRlLnRzXG5pbXBvcnQgeyBhY2Nlc3MgYXMgYWNjZXNzNSB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlQ29tcHV0ZWQgfSBmcm9tIFwic29saWQtanNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUxpc3RTdGF0ZShwcm9wcykge1xuICBjb25zdCBzZWxlY3Rpb25TdGF0ZSA9IGNyZWF0ZU11bHRpcGxlU2VsZWN0aW9uU3RhdGUocHJvcHMpO1xuICBjb25zdCBmYWN0b3J5ID0gKG5vZGVzKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLmZpbHRlciA/IG5ldyBMaXN0Q29sbGVjdGlvbihwcm9wcy5maWx0ZXIobm9kZXMpKSA6IG5ldyBMaXN0Q29sbGVjdGlvbihub2Rlcyk7XG4gIH07XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBjcmVhdGVDb2xsZWN0aW9uKFxuICAgIHtcbiAgICAgIGRhdGFTb3VyY2U6ICgpID0+IGFjY2VzczUocHJvcHMuZGF0YVNvdXJjZSksXG4gICAgICBnZXRLZXk6ICgpID0+IGFjY2VzczUocHJvcHMuZ2V0S2V5KSxcbiAgICAgIGdldFRleHRWYWx1ZTogKCkgPT4gYWNjZXNzNShwcm9wcy5nZXRUZXh0VmFsdWUpLFxuICAgICAgZ2V0RGlzYWJsZWQ6ICgpID0+IGFjY2VzczUocHJvcHMuZ2V0RGlzYWJsZWQpLFxuICAgICAgZ2V0U2VjdGlvbkNoaWxkcmVuOiAoKSA9PiBhY2Nlc3M1KHByb3BzLmdldFNlY3Rpb25DaGlsZHJlbiksXG4gICAgICBmYWN0b3J5XG4gICAgfSxcbiAgICBbKCkgPT4gcHJvcHMuZmlsdGVyXVxuICApO1xuICBjb25zdCBzZWxlY3Rpb25NYW5hZ2VyID0gbmV3IFNlbGVjdGlvbk1hbmFnZXIoY29sbGVjdGlvbiwgc2VsZWN0aW9uU3RhdGUpO1xuICBjcmVhdGVDb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgZm9jdXNlZEtleSA9IHNlbGVjdGlvblN0YXRlLmZvY3VzZWRLZXkoKTtcbiAgICBpZiAoZm9jdXNlZEtleSAhPSBudWxsICYmICFjb2xsZWN0aW9uKCkuZ2V0SXRlbShmb2N1c2VkS2V5KSkge1xuICAgICAgc2VsZWN0aW9uU3RhdGUuc2V0Rm9jdXNlZEtleSh2b2lkIDApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY29sbGVjdGlvbixcbiAgICBzZWxlY3Rpb25NYW5hZ2VyOiAoKSA9PiBzZWxlY3Rpb25NYW5hZ2VyXG4gIH07XG59XG5cbmV4cG9ydCB7XG4gIFNlbGVjdGlvbixcbiAgaXNTYW1lU2VsZWN0aW9uLFxuICBjcmVhdGVNdWx0aXBsZVNlbGVjdGlvblN0YXRlLFxuICBjcmVhdGVUeXBlU2VsZWN0LFxuICBjcmVhdGVTZWxlY3RhYmxlQ29sbGVjdGlvbixcbiAgY3JlYXRlU2VsZWN0YWJsZUl0ZW0sXG4gIFNlbGVjdGlvbk1hbmFnZXIsXG4gIExpc3RDb2xsZWN0aW9uLFxuICBjcmVhdGVMaXN0U3RhdGVcbn07XG4iLCIvKipcbiAqIEN1c3RvbSBwb3NpdGlvbmluZyByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy92aXJ0dWFsLWVsZW1lbnRzXG4gKi9cblxuY29uc3Qgc2lkZXMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddO1xuY29uc3QgYWxpZ25tZW50cyA9IFsnc3RhcnQnLCAnZW5kJ107XG5jb25zdCBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL3NpZGVzLnJlZHVjZSgoYWNjLCBzaWRlKSA9PiBhY2MuY29uY2F0KHNpZGUsIHNpZGUgKyBcIi1cIiArIGFsaWdubWVudHNbMF0sIHNpZGUgKyBcIi1cIiArIGFsaWdubWVudHNbMV0pLCBbXSk7XG5jb25zdCBtaW4gPSBNYXRoLm1pbjtcbmNvbnN0IG1heCA9IE1hdGgubWF4O1xuY29uc3Qgcm91bmQgPSBNYXRoLnJvdW5kO1xuY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuY29uc3QgY3JlYXRlQ29vcmRzID0gdiA9PiAoe1xuICB4OiB2LFxuICB5OiB2XG59KTtcbmNvbnN0IG9wcG9zaXRlU2lkZU1hcCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmNvbnN0IG9wcG9zaXRlQWxpZ25tZW50TWFwID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmZ1bmN0aW9uIGNsYW1wKHN0YXJ0LCB2YWx1ZSwgZW5kKSB7XG4gIHJldHVybiBtYXgoc3RhcnQsIG1pbih2YWx1ZSwgZW5kKSk7XG59XG5mdW5jdGlvbiBldmFsdWF0ZSh2YWx1ZSwgcGFyYW0pIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlKHBhcmFtKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZ2V0U2lkZShwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZUF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0xlbmd0aChheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG59XG5mdW5jdGlvbiBnZXRTaWRlQXhpcyhwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSkgPyAneScgOiAneCc7XG59XG5mdW5jdGlvbiBnZXRBbGlnbm1lbnRBeGlzKHBsYWNlbWVudCkge1xuICByZXR1cm4gZ2V0T3Bwb3NpdGVBeGlzKGdldFNpZGVBeGlzKHBsYWNlbWVudCkpO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50U2lkZXMocGxhY2VtZW50LCByZWN0cywgcnRsKSB7XG4gIGlmIChydGwgPT09IHZvaWQgMCkge1xuICAgIHJ0bCA9IGZhbHNlO1xuICB9XG4gIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChwbGFjZW1lbnQpO1xuICBjb25zdCBhbGlnbm1lbnRBeGlzID0gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpO1xuICBjb25zdCBsZW5ndGggPSBnZXRBeGlzTGVuZ3RoKGFsaWdubWVudEF4aXMpO1xuICBsZXQgbWFpbkFsaWdubWVudFNpZGUgPSBhbGlnbm1lbnRBeGlzID09PSAneCcgPyBhbGlnbm1lbnQgPT09IChydGwgPyAnZW5kJyA6ICdzdGFydCcpID8gJ3JpZ2h0JyA6ICdsZWZ0JyA6IGFsaWdubWVudCA9PT0gJ3N0YXJ0JyA/ICdib3R0b20nIDogJ3RvcCc7XG4gIGlmIChyZWN0cy5yZWZlcmVuY2VbbGVuZ3RoXSA+IHJlY3RzLmZsb2F0aW5nW2xlbmd0aF0pIHtcbiAgICBtYWluQWxpZ25tZW50U2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5BbGlnbm1lbnRTaWRlKTtcbiAgfVxuICByZXR1cm4gW21haW5BbGlnbm1lbnRTaWRlLCBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluQWxpZ25tZW50U2lkZSldO1xufVxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBjb25zdCBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgYWxpZ25tZW50ID0+IG9wcG9zaXRlQWxpZ25tZW50TWFwW2FsaWdubWVudF0pO1xufVxuZnVuY3Rpb24gZ2V0U2lkZUxpc3Qoc2lkZSwgaXNTdGFydCwgcnRsKSB7XG4gIGNvbnN0IGxyID0gWydsZWZ0JywgJ3JpZ2h0J107XG4gIGNvbnN0IHJsID0gWydyaWdodCcsICdsZWZ0J107XG4gIGNvbnN0IHRiID0gWyd0b3AnLCAnYm90dG9tJ107XG4gIGNvbnN0IGJ0ID0gWydib3R0b20nLCAndG9wJ107XG4gIHN3aXRjaCAoc2lkZSkge1xuICAgIGNhc2UgJ3RvcCc6XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIGlmIChydGwpIHJldHVybiBpc1N0YXJ0ID8gcmwgOiBscjtcbiAgICAgIHJldHVybiBpc1N0YXJ0ID8gbHIgOiBybDtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4gaXNTdGFydCA/IHRiIDogYnQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBbXTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBeGlzUGxhY2VtZW50cyhwbGFjZW1lbnQsIGZsaXBBbGlnbm1lbnQsIGRpcmVjdGlvbiwgcnRsKSB7XG4gIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChwbGFjZW1lbnQpO1xuICBsZXQgbGlzdCA9IGdldFNpZGVMaXN0KGdldFNpZGUocGxhY2VtZW50KSwgZGlyZWN0aW9uID09PSAnc3RhcnQnLCBydGwpO1xuICBpZiAoYWxpZ25tZW50KSB7XG4gICAgbGlzdCA9IGxpc3QubWFwKHNpZGUgPT4gc2lkZSArIFwiLVwiICsgYWxpZ25tZW50KTtcbiAgICBpZiAoZmxpcEFsaWdubWVudCkge1xuICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KGxpc3QubWFwKGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0O1xufVxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIHNpZGUgPT4gb3Bwb3NpdGVTaWRlTWFwW3NpZGVdKTtcbn1cbmZ1bmN0aW9uIGV4cGFuZFBhZGRpbmdPYmplY3QocGFkZGluZykge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMCxcbiAgICAuLi5wYWRkaW5nXG4gIH07XG59XG5mdW5jdGlvbiBnZXRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IGV4cGFuZFBhZGRpbmdPYmplY3QocGFkZGluZykgOiB7XG4gICAgdG9wOiBwYWRkaW5nLFxuICAgIHJpZ2h0OiBwYWRkaW5nLFxuICAgIGJvdHRvbTogcGFkZGluZyxcbiAgICBsZWZ0OiBwYWRkaW5nXG4gIH07XG59XG5mdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgY29uc3Qge1xuICAgIHgsXG4gICAgeSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfSA9IHJlY3Q7XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHRvcDogeSxcbiAgICBsZWZ0OiB4LFxuICAgIHJpZ2h0OiB4ICsgd2lkdGgsXG4gICAgYm90dG9tOiB5ICsgaGVpZ2h0LFxuICAgIHgsXG4gICAgeVxuICB9O1xufVxuXG5leHBvcnQgeyBhbGlnbm1lbnRzLCBjbGFtcCwgY3JlYXRlQ29vcmRzLCBldmFsdWF0ZSwgZXhwYW5kUGFkZGluZ09iamVjdCwgZmxvb3IsIGdldEFsaWdubWVudCwgZ2V0QWxpZ25tZW50QXhpcywgZ2V0QWxpZ25tZW50U2lkZXMsIGdldEF4aXNMZW5ndGgsIGdldEV4cGFuZGVkUGxhY2VtZW50cywgZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQsIGdldE9wcG9zaXRlQXhpcywgZ2V0T3Bwb3NpdGVBeGlzUGxhY2VtZW50cywgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQsIGdldFBhZGRpbmdPYmplY3QsIGdldFNpZGUsIGdldFNpZGVBeGlzLCBtYXgsIG1pbiwgcGxhY2VtZW50cywgcmVjdFRvQ2xpZW50UmVjdCwgcm91bmQsIHNpZGVzIH07XG4iLCJpbXBvcnQgeyBnZXRTaWRlQXhpcywgZ2V0QWxpZ25tZW50QXhpcywgZ2V0QXhpc0xlbmd0aCwgZ2V0U2lkZSwgZ2V0QWxpZ25tZW50LCBldmFsdWF0ZSwgZ2V0UGFkZGluZ09iamVjdCwgcmVjdFRvQ2xpZW50UmVjdCwgbWluLCBjbGFtcCwgcGxhY2VtZW50cywgZ2V0QWxpZ25tZW50U2lkZXMsIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50LCBnZXRPcHBvc2l0ZVBsYWNlbWVudCwgZ2V0RXhwYW5kZWRQbGFjZW1lbnRzLCBnZXRPcHBvc2l0ZUF4aXNQbGFjZW1lbnRzLCBzaWRlcywgbWF4LCBnZXRPcHBvc2l0ZUF4aXMgfSBmcm9tICdAZmxvYXRpbmctdWkvdXRpbHMnO1xuZXhwb3J0IHsgcmVjdFRvQ2xpZW50UmVjdCB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscyc7XG5cbmZ1bmN0aW9uIGNvbXB1dGVDb29yZHNGcm9tUGxhY2VtZW50KF9yZWYsIHBsYWNlbWVudCwgcnRsKSB7XG4gIGxldCB7XG4gICAgcmVmZXJlbmNlLFxuICAgIGZsb2F0aW5nXG4gIH0gPSBfcmVmO1xuICBjb25zdCBzaWRlQXhpcyA9IGdldFNpZGVBeGlzKHBsYWNlbWVudCk7XG4gIGNvbnN0IGFsaWdubWVudEF4aXMgPSBnZXRBbGlnbm1lbnRBeGlzKHBsYWNlbWVudCk7XG4gIGNvbnN0IGFsaWduTGVuZ3RoID0gZ2V0QXhpc0xlbmd0aChhbGlnbm1lbnRBeGlzKTtcbiAgY29uc3Qgc2lkZSA9IGdldFNpZGUocGxhY2VtZW50KTtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9IHNpZGVBeGlzID09PSAneSc7XG4gIGNvbnN0IGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBmbG9hdGluZy53aWR0aCAvIDI7XG4gIGNvbnN0IGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZmxvYXRpbmcuaGVpZ2h0IC8gMjtcbiAgY29uc3QgY29tbW9uQWxpZ24gPSByZWZlcmVuY2VbYWxpZ25MZW5ndGhdIC8gMiAtIGZsb2F0aW5nW2FsaWduTGVuZ3RoXSAvIDI7XG4gIGxldCBjb29yZHM7XG4gIHN3aXRjaCAoc2lkZSkge1xuICAgIGNhc2UgJ3RvcCc6XG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZmxvYXRpbmcuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIGNvb3JkcyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGZsb2F0aW5nLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvb3JkcyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG4gIHN3aXRjaCAoZ2V0QWxpZ25tZW50KHBsYWNlbWVudCkpIHtcbiAgICBjYXNlICdzdGFydCc6XG4gICAgICBjb29yZHNbYWxpZ25tZW50QXhpc10gLT0gY29tbW9uQWxpZ24gKiAocnRsICYmIGlzVmVydGljYWwgPyAtMSA6IDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZW5kJzpcbiAgICAgIGNvb3Jkc1thbGlnbm1lbnRBeGlzXSArPSBjb21tb25BbGlnbiAqIChydGwgJiYgaXNWZXJ0aWNhbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gY29vcmRzO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBgeGAgYW5kIGB5YCBjb29yZGluYXRlcyB0aGF0IHdpbGwgcGxhY2UgdGhlIGZsb2F0aW5nIGVsZW1lbnRcbiAqIG5leHQgdG8gYSBnaXZlbiByZWZlcmVuY2UgZWxlbWVudC5cbiAqXG4gKiBUaGlzIGV4cG9ydCBkb2VzIG5vdCBoYXZlIGFueSBgcGxhdGZvcm1gIGludGVyZmFjZSBsb2dpYy4gWW91IHdpbGwgbmVlZCB0b1xuICogd3JpdGUgb25lIGZvciB0aGUgcGxhdGZvcm0geW91IGFyZSB1c2luZyBGbG9hdGluZyBVSSB3aXRoLlxuICovXG5jb25zdCBjb21wdXRlUG9zaXRpb24gPSBhc3luYyAocmVmZXJlbmNlLCBmbG9hdGluZywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBwbGFjZW1lbnQgPSAnYm90dG9tJyxcbiAgICBzdHJhdGVneSA9ICdhYnNvbHV0ZScsXG4gICAgbWlkZGxld2FyZSA9IFtdLFxuICAgIHBsYXRmb3JtXG4gIH0gPSBjb25maWc7XG4gIGNvbnN0IHZhbGlkTWlkZGxld2FyZSA9IG1pZGRsZXdhcmUuZmlsdGVyKEJvb2xlYW4pO1xuICBjb25zdCBydGwgPSBhd2FpdCAocGxhdGZvcm0uaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzUlRMKGZsb2F0aW5nKSk7XG4gIGxldCByZWN0cyA9IGF3YWl0IHBsYXRmb3JtLmdldEVsZW1lbnRSZWN0cyh7XG4gICAgcmVmZXJlbmNlLFxuICAgIGZsb2F0aW5nLFxuICAgIHN0cmF0ZWd5XG4gIH0pO1xuICBsZXQge1xuICAgIHgsXG4gICAgeVxuICB9ID0gY29tcHV0ZUNvb3Jkc0Zyb21QbGFjZW1lbnQocmVjdHMsIHBsYWNlbWVudCwgcnRsKTtcbiAgbGV0IHN0YXRlZnVsUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICBsZXQgbWlkZGxld2FyZURhdGEgPSB7fTtcbiAgbGV0IHJlc2V0Q291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkTWlkZGxld2FyZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWUsXG4gICAgICBmblxuICAgIH0gPSB2YWxpZE1pZGRsZXdhcmVbaV07XG4gICAgY29uc3Qge1xuICAgICAgeDogbmV4dFgsXG4gICAgICB5OiBuZXh0WSxcbiAgICAgIGRhdGEsXG4gICAgICByZXNldFxuICAgIH0gPSBhd2FpdCBmbih7XG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGluaXRpYWxQbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudDogc3RhdGVmdWxQbGFjZW1lbnQsXG4gICAgICBzdHJhdGVneSxcbiAgICAgIG1pZGRsZXdhcmVEYXRhLFxuICAgICAgcmVjdHMsXG4gICAgICBwbGF0Zm9ybSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZSxcbiAgICAgICAgZmxvYXRpbmdcbiAgICAgIH1cbiAgICB9KTtcbiAgICB4ID0gbmV4dFggIT0gbnVsbCA/IG5leHRYIDogeDtcbiAgICB5ID0gbmV4dFkgIT0gbnVsbCA/IG5leHRZIDogeTtcbiAgICBtaWRkbGV3YXJlRGF0YSA9IHtcbiAgICAgIC4uLm1pZGRsZXdhcmVEYXRhLFxuICAgICAgW25hbWVdOiB7XG4gICAgICAgIC4uLm1pZGRsZXdhcmVEYXRhW25hbWVdLFxuICAgICAgICAuLi5kYXRhXG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAocmVzZXQgJiYgcmVzZXRDb3VudCA8PSA1MCkge1xuICAgICAgcmVzZXRDb3VudCsrO1xuICAgICAgaWYgKHR5cGVvZiByZXNldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlc2V0LnBsYWNlbWVudCkge1xuICAgICAgICAgIHN0YXRlZnVsUGxhY2VtZW50ID0gcmVzZXQucGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNldC5yZWN0cykge1xuICAgICAgICAgIHJlY3RzID0gcmVzZXQucmVjdHMgPT09IHRydWUgPyBhd2FpdCBwbGF0Zm9ybS5nZXRFbGVtZW50UmVjdHMoe1xuICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAgZmxvYXRpbmcsXG4gICAgICAgICAgICBzdHJhdGVneVxuICAgICAgICAgIH0pIDogcmVzZXQucmVjdHM7XG4gICAgICAgIH1cbiAgICAgICAgKHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHlcbiAgICAgICAgfSA9IGNvbXB1dGVDb29yZHNGcm9tUGxhY2VtZW50KHJlY3RzLCBzdGF0ZWZ1bFBsYWNlbWVudCwgcnRsKSk7XG4gICAgICB9XG4gICAgICBpID0gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgeCxcbiAgICB5LFxuICAgIHBsYWNlbWVudDogc3RhdGVmdWxQbGFjZW1lbnQsXG4gICAgc3RyYXRlZ3ksXG4gICAgbWlkZGxld2FyZURhdGFcbiAgfTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgd2l0aCBhbiBvYmplY3Qgb2Ygb3ZlcmZsb3cgc2lkZSBvZmZzZXRzIHRoYXQgZGV0ZXJtaW5lIGhvdyBtdWNoIHRoZVxuICogZWxlbWVudCBpcyBvdmVyZmxvd2luZyBhIGdpdmVuIGNsaXBwaW5nIGJvdW5kYXJ5IG9uIGVhY2ggc2lkZS5cbiAqIC0gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgYm91bmRhcnkgYnkgdGhhdCBudW1iZXIgb2YgcGl4ZWxzXG4gKiAtIG5lZ2F0aXZlID0gaG93IG1hbnkgcGl4ZWxzIGxlZnQgYmVmb3JlIGl0IHdpbGwgb3ZlcmZsb3dcbiAqIC0gMCA9IGxpZXMgZmx1c2ggd2l0aCB0aGUgYm91bmRhcnlcbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9kZXRlY3RPdmVyZmxvd1xuICovXG5hc3luYyBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX2F3YWl0JHBsYXRmb3JtJGlzRWxlO1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGNvbnN0IHtcbiAgICB4LFxuICAgIHksXG4gICAgcGxhdGZvcm0sXG4gICAgcmVjdHMsXG4gICAgZWxlbWVudHMsXG4gICAgc3RyYXRlZ3lcbiAgfSA9IHN0YXRlO1xuICBjb25zdCB7XG4gICAgYm91bmRhcnkgPSAnY2xpcHBpbmdBbmNlc3RvcnMnLFxuICAgIHJvb3RCb3VuZGFyeSA9ICd2aWV3cG9ydCcsXG4gICAgZWxlbWVudENvbnRleHQgPSAnZmxvYXRpbmcnLFxuICAgIGFsdEJvdW5kYXJ5ID0gZmFsc2UsXG4gICAgcGFkZGluZyA9IDBcbiAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgY29uc3QgcGFkZGluZ09iamVjdCA9IGdldFBhZGRpbmdPYmplY3QocGFkZGluZyk7XG4gIGNvbnN0IGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gJ2Zsb2F0aW5nJyA/ICdyZWZlcmVuY2UnIDogJ2Zsb2F0aW5nJztcbiAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgY29uc3QgY2xpcHBpbmdDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChhd2FpdCBwbGF0Zm9ybS5nZXRDbGlwcGluZ1JlY3Qoe1xuICAgIGVsZW1lbnQ6ICgoX2F3YWl0JHBsYXRmb3JtJGlzRWxlID0gYXdhaXQgKHBsYXRmb3JtLmlzRWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uaXNFbGVtZW50KGVsZW1lbnQpKSkgIT0gbnVsbCA/IF9hd2FpdCRwbGF0Zm9ybSRpc0VsZSA6IHRydWUpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgKGF3YWl0IChwbGF0Zm9ybS5nZXREb2N1bWVudEVsZW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmdldERvY3VtZW50RWxlbWVudChlbGVtZW50cy5mbG9hdGluZykpKSxcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgc3RyYXRlZ3lcbiAgfSkpO1xuICBjb25zdCByZWN0ID0gZWxlbWVudENvbnRleHQgPT09ICdmbG9hdGluZycgPyB7XG4gICAgeCxcbiAgICB5LFxuICAgIHdpZHRoOiByZWN0cy5mbG9hdGluZy53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3RzLmZsb2F0aW5nLmhlaWdodFxuICB9IDogcmVjdHMucmVmZXJlbmNlO1xuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBhd2FpdCAocGxhdGZvcm0uZ2V0T2Zmc2V0UGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybS5nZXRPZmZzZXRQYXJlbnQoZWxlbWVudHMuZmxvYXRpbmcpKTtcbiAgY29uc3Qgb2Zmc2V0U2NhbGUgPSAoYXdhaXQgKHBsYXRmb3JtLmlzRWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uaXNFbGVtZW50KG9mZnNldFBhcmVudCkpKSA/IChhd2FpdCAocGxhdGZvcm0uZ2V0U2NhbGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmdldFNjYWxlKG9mZnNldFBhcmVudCkpKSB8fCB7XG4gICAgeDogMSxcbiAgICB5OiAxXG4gIH0gOiB7XG4gICAgeDogMSxcbiAgICB5OiAxXG4gIH07XG4gIGNvbnN0IGVsZW1lbnRDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChwbGF0Zm9ybS5jb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCA/IGF3YWl0IHBsYXRmb3JtLmNvbnZlcnRPZmZzZXRQYXJlbnRSZWxhdGl2ZVJlY3RUb1ZpZXdwb3J0UmVsYXRpdmVSZWN0KHtcbiAgICBlbGVtZW50cyxcbiAgICByZWN0LFxuICAgIG9mZnNldFBhcmVudCxcbiAgICBzdHJhdGVneVxuICB9KSA6IHJlY3QpO1xuICByZXR1cm4ge1xuICAgIHRvcDogKGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCkgLyBvZmZzZXRTY2FsZS55LFxuICAgIGJvdHRvbTogKGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSkgLyBvZmZzZXRTY2FsZS55LFxuICAgIGxlZnQ6IChjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQpIC8gb2Zmc2V0U2NhbGUueCxcbiAgICByaWdodDogKGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodCkgLyBvZmZzZXRTY2FsZS54XG4gIH07XG59XG5cbi8qKlxuICogUHJvdmlkZXMgZGF0YSB0byBwb3NpdGlvbiBhbiBpbm5lciBlbGVtZW50IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IHNvIHRoYXQgaXRcbiAqIGFwcGVhcnMgY2VudGVyZWQgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2Fycm93XG4gKi9cbmNvbnN0IGFycm93ID0gb3B0aW9ucyA9PiAoe1xuICBuYW1lOiAnYXJyb3cnLFxuICBvcHRpb25zLFxuICBhc3luYyBmbihzdGF0ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgcGxhY2VtZW50LFxuICAgICAgcmVjdHMsXG4gICAgICBwbGF0Zm9ybSxcbiAgICAgIGVsZW1lbnRzLFxuICAgICAgbWlkZGxld2FyZURhdGFcbiAgICB9ID0gc3RhdGU7XG4gICAgLy8gU2luY2UgYGVsZW1lbnRgIGlzIHJlcXVpcmVkLCB3ZSBkb24ndCBQYXJ0aWFsPD4gdGhlIHR5cGUuXG4gICAgY29uc3Qge1xuICAgICAgZWxlbWVudCxcbiAgICAgIHBhZGRpbmcgPSAwXG4gICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKSB8fCB7fTtcbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHBhZGRpbmdPYmplY3QgPSBnZXRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpO1xuICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfTtcbiAgICBjb25zdCBheGlzID0gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpO1xuICAgIGNvbnN0IGxlbmd0aCA9IGdldEF4aXNMZW5ndGgoYXhpcyk7XG4gICAgY29uc3QgYXJyb3dEaW1lbnNpb25zID0gYXdhaXQgcGxhdGZvcm0uZ2V0RGltZW5zaW9ucyhlbGVtZW50KTtcbiAgICBjb25zdCBpc1lBeGlzID0gYXhpcyA9PT0gJ3knO1xuICAgIGNvbnN0IG1pblByb3AgPSBpc1lBeGlzID8gJ3RvcCcgOiAnbGVmdCc7XG4gICAgY29uc3QgbWF4UHJvcCA9IGlzWUF4aXMgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gICAgY29uc3QgY2xpZW50UHJvcCA9IGlzWUF4aXMgPyAnY2xpZW50SGVpZ2h0JyA6ICdjbGllbnRXaWR0aCc7XG4gICAgY29uc3QgZW5kRGlmZiA9IHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdICsgcmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gY29vcmRzW2F4aXNdIC0gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXTtcbiAgICBjb25zdCBzdGFydERpZmYgPSBjb29yZHNbYXhpc10gLSByZWN0cy5yZWZlcmVuY2VbYXhpc107XG4gICAgY29uc3QgYXJyb3dPZmZzZXRQYXJlbnQgPSBhd2FpdCAocGxhdGZvcm0uZ2V0T2Zmc2V0UGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybS5nZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkpO1xuICAgIGxldCBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBhcnJvd09mZnNldFBhcmVudFtjbGllbnRQcm9wXSA6IDA7XG5cbiAgICAvLyBET00gcGxhdGZvcm0gY2FuIHJldHVybiBgd2luZG93YCBhcyB0aGUgYG9mZnNldFBhcmVudGAuXG4gICAgaWYgKCFjbGllbnRTaXplIHx8ICEoYXdhaXQgKHBsYXRmb3JtLmlzRWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uaXNFbGVtZW50KGFycm93T2Zmc2V0UGFyZW50KSkpKSB7XG4gICAgICBjbGllbnRTaXplID0gZWxlbWVudHMuZmxvYXRpbmdbY2xpZW50UHJvcF0gfHwgcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXTtcbiAgICB9XG4gICAgY29uc3QgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7XG5cbiAgICAvLyBJZiB0aGUgcGFkZGluZyBpcyBsYXJnZSBlbm91Z2ggdGhhdCBpdCBjYXVzZXMgdGhlIGFycm93IHRvIG5vIGxvbmdlciBiZVxuICAgIC8vIGNlbnRlcmVkLCBtb2RpZnkgdGhlIHBhZGRpbmcgc28gdGhhdCBpdCBpcyBjZW50ZXJlZC5cbiAgICBjb25zdCBsYXJnZXN0UG9zc2libGVQYWRkaW5nID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd0RpbWVuc2lvbnNbbGVuZ3RoXSAvIDIgLSAxO1xuICAgIGNvbnN0IG1pblBhZGRpbmcgPSBtaW4ocGFkZGluZ09iamVjdFttaW5Qcm9wXSwgbGFyZ2VzdFBvc3NpYmxlUGFkZGluZyk7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IG1pbihwYWRkaW5nT2JqZWN0W21heFByb3BdLCBsYXJnZXN0UG9zc2libGVQYWRkaW5nKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgZmxvYXRpbmcgZWxlbWVudCBpZiB0aGUgY2VudGVyXG4gICAgLy8gcG9pbnQgaXMgb3V0c2lkZSB0aGUgZmxvYXRpbmcgZWxlbWVudCdzIGJvdW5kcy5cbiAgICBjb25zdCBtaW4kMSA9IG1pblBhZGRpbmc7XG4gICAgY29uc3QgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93RGltZW5zaW9uc1tsZW5ndGhdIC0gbWF4UGFkZGluZztcbiAgICBjb25zdCBjZW50ZXIgPSBjbGllbnRTaXplIC8gMiAtIGFycm93RGltZW5zaW9uc1tsZW5ndGhdIC8gMiArIGNlbnRlclRvUmVmZXJlbmNlO1xuICAgIGNvbnN0IG9mZnNldCA9IGNsYW1wKG1pbiQxLCBjZW50ZXIsIG1heCk7XG5cbiAgICAvLyBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsIGVub3VnaCB0aGF0IHRoZSBhcnJvdydzIHBhZGRpbmcgY2F1c2VzIGl0IHRvXG4gICAgLy8gdG8gcG9pbnQgdG8gbm90aGluZyBmb3IgYW4gYWxpZ25lZCBwbGFjZW1lbnQsIGFkanVzdCB0aGUgb2Zmc2V0IG9mIHRoZVxuICAgIC8vIGZsb2F0aW5nIGVsZW1lbnQgaXRzZWxmLiBUbyBlbnN1cmUgYHNoaWZ0KClgIGNvbnRpbnVlcyB0byB0YWtlIGFjdGlvbixcbiAgICAvLyBhIHNpbmdsZSByZXNldCBpcyBwZXJmb3JtZWQgd2hlbiB0aGlzIGlzIHRydWUuXG4gICAgY29uc3Qgc2hvdWxkQWRkT2Zmc2V0ID0gIW1pZGRsZXdhcmVEYXRhLmFycm93ICYmIGdldEFsaWdubWVudChwbGFjZW1lbnQpICE9IG51bGwgJiYgY2VudGVyICE9PSBvZmZzZXQgJiYgcmVjdHMucmVmZXJlbmNlW2xlbmd0aF0gLyAyIC0gKGNlbnRlciA8IG1pbiQxID8gbWluUGFkZGluZyA6IG1heFBhZGRpbmcpIC0gYXJyb3dEaW1lbnNpb25zW2xlbmd0aF0gLyAyIDwgMDtcbiAgICBjb25zdCBhbGlnbm1lbnRPZmZzZXQgPSBzaG91bGRBZGRPZmZzZXQgPyBjZW50ZXIgPCBtaW4kMSA/IGNlbnRlciAtIG1pbiQxIDogY2VudGVyIC0gbWF4IDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgW2F4aXNdOiBjb29yZHNbYXhpc10gKyBhbGlnbm1lbnRPZmZzZXQsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFtheGlzXTogb2Zmc2V0LFxuICAgICAgICBjZW50ZXJPZmZzZXQ6IGNlbnRlciAtIG9mZnNldCAtIGFsaWdubWVudE9mZnNldCxcbiAgICAgICAgLi4uKHNob3VsZEFkZE9mZnNldCAmJiB7XG4gICAgICAgICAgYWxpZ25tZW50T2Zmc2V0XG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVzZXQ6IHNob3VsZEFkZE9mZnNldFxuICAgIH07XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBnZXRQbGFjZW1lbnRMaXN0KGFsaWdubWVudCwgYXV0b0FsaWdubWVudCwgYWxsb3dlZFBsYWNlbWVudHMpIHtcbiAgY29uc3QgYWxsb3dlZFBsYWNlbWVudHNTb3J0ZWRCeUFsaWdubWVudCA9IGFsaWdubWVudCA/IFsuLi5hbGxvd2VkUGxhY2VtZW50cy5maWx0ZXIocGxhY2VtZW50ID0+IGdldEFsaWdubWVudChwbGFjZW1lbnQpID09PSBhbGlnbm1lbnQpLCAuLi5hbGxvd2VkUGxhY2VtZW50cy5maWx0ZXIocGxhY2VtZW50ID0+IGdldEFsaWdubWVudChwbGFjZW1lbnQpICE9PSBhbGlnbm1lbnQpXSA6IGFsbG93ZWRQbGFjZW1lbnRzLmZpbHRlcihwbGFjZW1lbnQgPT4gZ2V0U2lkZShwbGFjZW1lbnQpID09PSBwbGFjZW1lbnQpO1xuICByZXR1cm4gYWxsb3dlZFBsYWNlbWVudHNTb3J0ZWRCeUFsaWdubWVudC5maWx0ZXIocGxhY2VtZW50ID0+IHtcbiAgICBpZiAoYWxpZ25tZW50KSB7XG4gICAgICByZXR1cm4gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCkgPT09IGFsaWdubWVudCB8fCAoYXV0b0FsaWdubWVudCA/IGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCkgIT09IHBsYWNlbWVudCA6IGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufVxuLyoqXG4gKiBPcHRpbWl6ZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYnkgY2hvb3NpbmcgdGhlIHBsYWNlbWVudFxuICogdGhhdCBoYXMgdGhlIG1vc3Qgc3BhY2UgYXZhaWxhYmxlIGF1dG9tYXRpY2FsbHksIHdpdGhvdXQgbmVlZGluZyB0byBzcGVjaWZ5IGFcbiAqIHByZWZlcnJlZCBwbGFjZW1lbnQuIEFsdGVybmF0aXZlIHRvIGBmbGlwYC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9hdXRvUGxhY2VtZW50XG4gKi9cbmNvbnN0IGF1dG9QbGFjZW1lbnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ2F1dG9QbGFjZW1lbnQnLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIHZhciBfbWlkZGxld2FyZURhdGEkYXV0b1AsIF9taWRkbGV3YXJlRGF0YSRhdXRvUDIsIF9wbGFjZW1lbnRzVGhhdEZpdE9uRTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVjdHMsXG4gICAgICAgIG1pZGRsZXdhcmVEYXRhLFxuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIHBsYXRmb3JtLFxuICAgICAgICBlbGVtZW50c1xuICAgICAgfSA9IHN0YXRlO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjcm9zc0F4aXMgPSBmYWxzZSxcbiAgICAgICAgYWxpZ25tZW50LFxuICAgICAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMsXG4gICAgICAgIGF1dG9BbGlnbm1lbnQgPSB0cnVlLFxuICAgICAgICAuLi5kZXRlY3RPdmVyZmxvd09wdGlvbnNcbiAgICAgIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZSk7XG4gICAgICBjb25zdCBwbGFjZW1lbnRzJDEgPSBhbGlnbm1lbnQgIT09IHVuZGVmaW5lZCB8fCBhbGxvd2VkUGxhY2VtZW50cyA9PT0gcGxhY2VtZW50cyA/IGdldFBsYWNlbWVudExpc3QoYWxpZ25tZW50IHx8IG51bGwsIGF1dG9BbGlnbm1lbnQsIGFsbG93ZWRQbGFjZW1lbnRzKSA6IGFsbG93ZWRQbGFjZW1lbnRzO1xuICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBhd2FpdCBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgZGV0ZWN0T3ZlcmZsb3dPcHRpb25zKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9ICgoX21pZGRsZXdhcmVEYXRhJGF1dG9QID0gbWlkZGxld2FyZURhdGEuYXV0b1BsYWNlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRhdXRvUC5pbmRleCkgfHwgMDtcbiAgICAgIGNvbnN0IGN1cnJlbnRQbGFjZW1lbnQgPSBwbGFjZW1lbnRzJDFbY3VycmVudEluZGV4XTtcbiAgICAgIGlmIChjdXJyZW50UGxhY2VtZW50ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgY29uc3QgYWxpZ25tZW50U2lkZXMgPSBnZXRBbGlnbm1lbnRTaWRlcyhjdXJyZW50UGxhY2VtZW50LCByZWN0cywgYXdhaXQgKHBsYXRmb3JtLmlzUlRMID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybS5pc1JUTChlbGVtZW50cy5mbG9hdGluZykpKTtcblxuICAgICAgLy8gTWFrZSBgY29tcHV0ZUNvb3Jkc2Agc3RhcnQgZnJvbSB0aGUgcmlnaHQgcGxhY2UuXG4gICAgICBpZiAocGxhY2VtZW50ICE9PSBjdXJyZW50UGxhY2VtZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50cyQxWzBdXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgY3VycmVudE92ZXJmbG93cyA9IFtvdmVyZmxvd1tnZXRTaWRlKGN1cnJlbnRQbGFjZW1lbnQpXSwgb3ZlcmZsb3dbYWxpZ25tZW50U2lkZXNbMF1dLCBvdmVyZmxvd1thbGlnbm1lbnRTaWRlc1sxXV1dO1xuICAgICAgY29uc3QgYWxsT3ZlcmZsb3dzID0gWy4uLigoKF9taWRkbGV3YXJlRGF0YSRhdXRvUDIgPSBtaWRkbGV3YXJlRGF0YS5hdXRvUGxhY2VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX21pZGRsZXdhcmVEYXRhJGF1dG9QMi5vdmVyZmxvd3MpIHx8IFtdKSwge1xuICAgICAgICBwbGFjZW1lbnQ6IGN1cnJlbnRQbGFjZW1lbnQsXG4gICAgICAgIG92ZXJmbG93czogY3VycmVudE92ZXJmbG93c1xuICAgICAgfV07XG4gICAgICBjb25zdCBuZXh0UGxhY2VtZW50ID0gcGxhY2VtZW50cyQxW2N1cnJlbnRJbmRleCArIDFdO1xuXG4gICAgICAvLyBUaGVyZSBhcmUgbW9yZSBwbGFjZW1lbnRzIHRvIGNoZWNrLlxuICAgICAgaWYgKG5leHRQbGFjZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBpbmRleDogY3VycmVudEluZGV4ICsgMSxcbiAgICAgICAgICAgIG92ZXJmbG93czogYWxsT3ZlcmZsb3dzXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldDoge1xuICAgICAgICAgICAgcGxhY2VtZW50OiBuZXh0UGxhY2VtZW50XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgcGxhY2VtZW50c1NvcnRlZEJ5TW9zdFNwYWNlID0gYWxsT3ZlcmZsb3dzLm1hcChkID0+IHtcbiAgICAgICAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KGQucGxhY2VtZW50KTtcbiAgICAgICAgcmV0dXJuIFtkLnBsYWNlbWVudCwgYWxpZ25tZW50ICYmIGNyb3NzQXhpcyA/XG4gICAgICAgIC8vIENoZWNrIGFsb25nIHRoZSBtYWluQXhpcyBhbmQgbWFpbiBjcm9zc0F4aXMgc2lkZS5cbiAgICAgICAgZC5vdmVyZmxvd3Muc2xpY2UoMCwgMikucmVkdWNlKChhY2MsIHYpID0+IGFjYyArIHYsIDApIDpcbiAgICAgICAgLy8gQ2hlY2sgb25seSB0aGUgbWFpbkF4aXMuXG4gICAgICAgIGQub3ZlcmZsb3dzWzBdLCBkLm92ZXJmbG93c107XG4gICAgICB9KS5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSk7XG4gICAgICBjb25zdCBwbGFjZW1lbnRzVGhhdEZpdE9uRWFjaFNpZGUgPSBwbGFjZW1lbnRzU29ydGVkQnlNb3N0U3BhY2UuZmlsdGVyKGQgPT4gZFsyXS5zbGljZSgwLFxuICAgICAgLy8gQWxpZ25lZCBwbGFjZW1lbnRzIHNob3VsZCBub3QgY2hlY2sgdGhlaXIgb3Bwb3NpdGUgY3Jvc3NBeGlzXG4gICAgICAvLyBzaWRlLlxuICAgICAgZ2V0QWxpZ25tZW50KGRbMF0pID8gMiA6IDMpLmV2ZXJ5KHYgPT4gdiA8PSAwKSk7XG4gICAgICBjb25zdCByZXNldFBsYWNlbWVudCA9ICgoX3BsYWNlbWVudHNUaGF0Rml0T25FID0gcGxhY2VtZW50c1RoYXRGaXRPbkVhY2hTaWRlWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX3BsYWNlbWVudHNUaGF0Rml0T25FWzBdKSB8fCBwbGFjZW1lbnRzU29ydGVkQnlNb3N0U3BhY2VbMF1bMF07XG4gICAgICBpZiAocmVzZXRQbGFjZW1lbnQgIT09IHBsYWNlbWVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGluZGV4OiBjdXJyZW50SW5kZXggKyAxLFxuICAgICAgICAgICAgb3ZlcmZsb3dzOiBhbGxPdmVyZmxvd3NcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IHJlc2V0UGxhY2VtZW50XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IGZsaXBwaW5nIHRoZSBgcGxhY2VtZW50YFxuICogaW4gb3JkZXIgdG8ga2VlcCBpdCBpbiB2aWV3IHdoZW4gdGhlIHByZWZlcnJlZCBwbGFjZW1lbnQocykgd2lsbCBvdmVyZmxvdyB0aGVcbiAqIGNsaXBwaW5nIGJvdW5kYXJ5LiBBbHRlcm5hdGl2ZSB0byBgYXV0b1BsYWNlbWVudGAuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvZmxpcFxuICovXG5jb25zdCBmbGlwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdmbGlwJyxcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlKSB7XG4gICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJGFycm93LCBfbWlkZGxld2FyZURhdGEkZmxpcDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBtaWRkbGV3YXJlRGF0YSxcbiAgICAgICAgcmVjdHMsXG4gICAgICAgIGluaXRpYWxQbGFjZW1lbnQsXG4gICAgICAgIHBsYXRmb3JtLFxuICAgICAgICBlbGVtZW50c1xuICAgICAgfSA9IHN0YXRlO1xuICAgICAgY29uc3Qge1xuICAgICAgICBtYWluQXhpczogY2hlY2tNYWluQXhpcyA9IHRydWUsXG4gICAgICAgIGNyb3NzQXhpczogY2hlY2tDcm9zc0F4aXMgPSB0cnVlLFxuICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgICAgZmFsbGJhY2tTdHJhdGVneSA9ICdiZXN0Rml0JyxcbiAgICAgICAgZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiA9ICdub25lJyxcbiAgICAgICAgZmxpcEFsaWdubWVudCA9IHRydWUsXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcblxuICAgICAgLy8gSWYgYSByZXNldCBieSB0aGUgYXJyb3cgd2FzIGNhdXNlZCBkdWUgdG8gYW4gYWxpZ25tZW50IG9mZnNldCBiZWluZ1xuICAgICAgLy8gYWRkZWQsIHdlIHNob3VsZCBza2lwIGFueSBsb2dpYyBub3cgc2luY2UgYGZsaXAoKWAgaGFzIGFscmVhZHkgZG9uZSBpdHNcbiAgICAgIC8vIHdvcmsuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmxvYXRpbmctdWkvZmxvYXRpbmctdWkvaXNzdWVzLzI1NDkjaXNzdWVjb21tZW50LTE3MTk2MDE2NDNcbiAgICAgIGlmICgoX21pZGRsZXdhcmVEYXRhJGFycm93ID0gbWlkZGxld2FyZURhdGEuYXJyb3cpICE9IG51bGwgJiYgX21pZGRsZXdhcmVEYXRhJGFycm93LmFsaWdubWVudE9mZnNldCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICAgICAgY29uc3QgaW5pdGlhbFNpZGVBeGlzID0gZ2V0U2lkZUF4aXMoaW5pdGlhbFBsYWNlbWVudCk7XG4gICAgICBjb25zdCBpc0Jhc2VQbGFjZW1lbnQgPSBnZXRTaWRlKGluaXRpYWxQbGFjZW1lbnQpID09PSBpbml0aWFsUGxhY2VtZW50O1xuICAgICAgY29uc3QgcnRsID0gYXdhaXQgKHBsYXRmb3JtLmlzUlRMID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybS5pc1JUTChlbGVtZW50cy5mbG9hdGluZykpO1xuICAgICAgY29uc3QgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBBbGlnbm1lbnQgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoaW5pdGlhbFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRQbGFjZW1lbnRzKGluaXRpYWxQbGFjZW1lbnQpKTtcbiAgICAgIGNvbnN0IGhhc0ZhbGxiYWNrQXhpc1NpZGVEaXJlY3Rpb24gPSBmYWxsYmFja0F4aXNTaWRlRGlyZWN0aW9uICE9PSAnbm9uZSc7XG4gICAgICBpZiAoIXNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyAmJiBoYXNGYWxsYmFja0F4aXNTaWRlRGlyZWN0aW9uKSB7XG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50cy5wdXNoKC4uLmdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMoaW5pdGlhbFBsYWNlbWVudCwgZmxpcEFsaWdubWVudCwgZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiwgcnRsKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwbGFjZW1lbnRzID0gW2luaXRpYWxQbGFjZW1lbnQsIC4uLmZhbGxiYWNrUGxhY2VtZW50c107XG4gICAgICBjb25zdCBvdmVyZmxvdyA9IGF3YWl0IGRldGVjdE92ZXJmbG93KHN0YXRlLCBkZXRlY3RPdmVyZmxvd09wdGlvbnMpO1xuICAgICAgY29uc3Qgb3ZlcmZsb3dzID0gW107XG4gICAgICBsZXQgb3ZlcmZsb3dzRGF0YSA9ICgoX21pZGRsZXdhcmVEYXRhJGZsaXAgPSBtaWRkbGV3YXJlRGF0YS5mbGlwKSA9PSBudWxsID8gdm9pZCAwIDogX21pZGRsZXdhcmVEYXRhJGZsaXAub3ZlcmZsb3dzKSB8fCBbXTtcbiAgICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICAgIG92ZXJmbG93cy5wdXNoKG92ZXJmbG93W3NpZGVdKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGVja0Nyb3NzQXhpcykge1xuICAgICAgICBjb25zdCBzaWRlcyA9IGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCk7XG4gICAgICAgIG92ZXJmbG93cy5wdXNoKG92ZXJmbG93W3NpZGVzWzBdXSwgb3ZlcmZsb3dbc2lkZXNbMV1dKTtcbiAgICAgIH1cbiAgICAgIG92ZXJmbG93c0RhdGEgPSBbLi4ub3ZlcmZsb3dzRGF0YSwge1xuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIG92ZXJmbG93c1xuICAgICAgfV07XG5cbiAgICAgIC8vIE9uZSBvciBtb3JlIHNpZGVzIGlzIG92ZXJmbG93aW5nLlxuICAgICAgaWYgKCFvdmVyZmxvd3MuZXZlcnkoc2lkZSA9PiBzaWRlIDw9IDApKSB7XG4gICAgICAgIHZhciBfbWlkZGxld2FyZURhdGEkZmxpcDIsIF9vdmVyZmxvd3NEYXRhJGZpbHRlcjtcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKCgoX21pZGRsZXdhcmVEYXRhJGZsaXAyID0gbWlkZGxld2FyZURhdGEuZmxpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRmbGlwMi5pbmRleCkgfHwgMCkgKyAxO1xuICAgICAgICBjb25zdCBuZXh0UGxhY2VtZW50ID0gcGxhY2VtZW50c1tuZXh0SW5kZXhdO1xuICAgICAgICBpZiAobmV4dFBsYWNlbWVudCkge1xuICAgICAgICAgIC8vIFRyeSBuZXh0IHBsYWNlbWVudCBhbmQgcmUtcnVuIHRoZSBsaWZlY3ljbGUuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgICAgICAgb3ZlcmZsb3dzOiBvdmVyZmxvd3NEYXRhXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiBuZXh0UGxhY2VtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcnN0LCBmaW5kIHRoZSBjYW5kaWRhdGVzIHRoYXQgZml0IG9uIHRoZSBtYWluQXhpcyBzaWRlIG9mIG92ZXJmbG93LFxuICAgICAgICAvLyB0aGVuIGZpbmQgdGhlIHBsYWNlbWVudCB0aGF0IGZpdHMgdGhlIGJlc3Qgb24gdGhlIG1haW4gY3Jvc3NBeGlzIHNpZGUuXG4gICAgICAgIGxldCByZXNldFBsYWNlbWVudCA9IChfb3ZlcmZsb3dzRGF0YSRmaWx0ZXIgPSBvdmVyZmxvd3NEYXRhLmZpbHRlcihkID0+IGQub3ZlcmZsb3dzWzBdIDw9IDApLnNvcnQoKGEsIGIpID0+IGEub3ZlcmZsb3dzWzFdIC0gYi5vdmVyZmxvd3NbMV0pWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX292ZXJmbG93c0RhdGEkZmlsdGVyLnBsYWNlbWVudDtcblxuICAgICAgICAvLyBPdGhlcndpc2UgZmFsbGJhY2suXG4gICAgICAgIGlmICghcmVzZXRQbGFjZW1lbnQpIHtcbiAgICAgICAgICBzd2l0Y2ggKGZhbGxiYWNrU3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIGNhc2UgJ2Jlc3RGaXQnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIF9vdmVyZmxvd3NEYXRhJGZpbHRlcjI7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2VtZW50ID0gKF9vdmVyZmxvd3NEYXRhJGZpbHRlcjIgPSBvdmVyZmxvd3NEYXRhLmZpbHRlcihkID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChoYXNGYWxsYmFja0F4aXNTaWRlRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTaWRlQXhpcyA9IGdldFNpZGVBeGlzKGQucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRTaWRlQXhpcyA9PT0gaW5pdGlhbFNpZGVBeGlzIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGJpYXMgdG8gdGhlIGB5YCBzaWRlIGF4aXMgZHVlIHRvIGhvcml6b250YWxcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVhZGluZyBkaXJlY3Rpb25zIGZhdm9yaW5nIGdyZWF0ZXIgd2lkdGguXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTaWRlQXhpcyA9PT0gJ3knO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSkubWFwKGQgPT4gW2QucGxhY2VtZW50LCBkLm92ZXJmbG93cy5maWx0ZXIob3ZlcmZsb3cgPT4gb3ZlcmZsb3cgPiAwKS5yZWR1Y2UoKGFjYywgb3ZlcmZsb3cpID0+IGFjYyArIG92ZXJmbG93LCAwKV0pLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdKVswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdmVyZmxvd3NEYXRhJGZpbHRlcjJbMF07XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgcmVzZXRQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdpbml0aWFsUGxhY2VtZW50JzpcbiAgICAgICAgICAgICAgcmVzZXRQbGFjZW1lbnQgPSBpbml0aWFsUGxhY2VtZW50O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYWNlbWVudCAhPT0gcmVzZXRQbGFjZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiByZXNldFBsYWNlbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQsXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoXG4gIH07XG59XG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIHNpZGVzLnNvbWUoc2lkZSA9PiBvdmVyZmxvd1tzaWRlXSA+PSAwKTtcbn1cbi8qKlxuICogUHJvdmlkZXMgZGF0YSB0byBoaWRlIHRoZSBmbG9hdGluZyBlbGVtZW50IGluIGFwcGxpY2FibGUgc2l0dWF0aW9ucywgc3VjaCBhc1xuICogd2hlbiBpdCBpcyBub3QgaW4gdGhlIHNhbWUgY2xpcHBpbmcgY29udGV4dCBhcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvaGlkZVxuICovXG5jb25zdCBoaWRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdoaWRlJyxcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHJlY3RzXG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHN0cmF0ZWd5ID0gJ3JlZmVyZW5jZUhpZGRlbicsXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICAgICAgY2FzZSAncmVmZXJlbmNlSGlkZGVuJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBvdmVyZmxvdyA9IGF3YWl0IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICAgICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9ucyxcbiAgICAgICAgICAgICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdHMucmVmZXJlbmNlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VIaWRkZW5PZmZzZXRzOiBvZmZzZXRzLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUhpZGRlbjogaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG9mZnNldHMpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICdlc2NhcGVkJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBvdmVyZmxvdyA9IGF3YWl0IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICAgICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9ucyxcbiAgICAgICAgICAgICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0cy5mbG9hdGluZyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZXNjYXBlZE9mZnNldHM6IG9mZnNldHMsXG4gICAgICAgICAgICAgICAgZXNjYXBlZDogaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG9mZnNldHMpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdSZWN0KHJlY3RzKSB7XG4gIGNvbnN0IG1pblggPSBtaW4oLi4ucmVjdHMubWFwKHJlY3QgPT4gcmVjdC5sZWZ0KSk7XG4gIGNvbnN0IG1pblkgPSBtaW4oLi4ucmVjdHMubWFwKHJlY3QgPT4gcmVjdC50b3ApKTtcbiAgY29uc3QgbWF4WCA9IG1heCguLi5yZWN0cy5tYXAocmVjdCA9PiByZWN0LnJpZ2h0KSk7XG4gIGNvbnN0IG1heFkgPSBtYXgoLi4ucmVjdHMubWFwKHJlY3QgPT4gcmVjdC5ib3R0b20pKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBtaW5YLFxuICAgIHk6IG1pblksXG4gICAgd2lkdGg6IG1heFggLSBtaW5YLFxuICAgIGhlaWdodDogbWF4WSAtIG1pbllcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFJlY3RzQnlMaW5lKHJlY3RzKSB7XG4gIGNvbnN0IHNvcnRlZFJlY3RzID0gcmVjdHMuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiBhLnkgLSBiLnkpO1xuICBjb25zdCBncm91cHMgPSBbXTtcbiAgbGV0IHByZXZSZWN0ID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3J0ZWRSZWN0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJlY3QgPSBzb3J0ZWRSZWN0c1tpXTtcbiAgICBpZiAoIXByZXZSZWN0IHx8IHJlY3QueSAtIHByZXZSZWN0LnkgPiBwcmV2UmVjdC5oZWlnaHQgLyAyKSB7XG4gICAgICBncm91cHMucHVzaChbcmVjdF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cHNbZ3JvdXBzLmxlbmd0aCAtIDFdLnB1c2gocmVjdCk7XG4gICAgfVxuICAgIHByZXZSZWN0ID0gcmVjdDtcbiAgfVxuICByZXR1cm4gZ3JvdXBzLm1hcChyZWN0ID0+IHJlY3RUb0NsaWVudFJlY3QoZ2V0Qm91bmRpbmdSZWN0KHJlY3QpKSk7XG59XG4vKipcbiAqIFByb3ZpZGVzIGltcHJvdmVkIHBvc2l0aW9uaW5nIGZvciBpbmxpbmUgcmVmZXJlbmNlIGVsZW1lbnRzIHRoYXQgY2FuIHNwYW5cbiAqIG92ZXIgbXVsdGlwbGUgbGluZXMsIHN1Y2ggYXMgaHlwZXJsaW5rcyBvciByYW5nZSBzZWxlY3Rpb25zLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2lubGluZVxuICovXG5jb25zdCBpbmxpbmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ2lubGluZScsXG4gICAgb3B0aW9ucyxcbiAgICBhc3luYyBmbihzdGF0ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIGVsZW1lbnRzLFxuICAgICAgICByZWN0cyxcbiAgICAgICAgcGxhdGZvcm0sXG4gICAgICAgIHN0cmF0ZWd5XG4gICAgICB9ID0gc3RhdGU7XG4gICAgICAvLyBBIE1vdXNlRXZlbnQncyBjbGllbnR7WCxZfSBjb29yZHMgY2FuIGJlIHVwIHRvIDIgcGl4ZWxzIG9mZiBhXG4gICAgICAvLyBDbGllbnRSZWN0J3MgYm91bmRzLCBkZXNwaXRlIHRoZSBldmVudCBsaXN0ZW5lciBiZWluZyB0cmlnZ2VyZWQuIEFcbiAgICAgIC8vIHBhZGRpbmcgb2YgMiBzZWVtcyB0byBoYW5kbGUgdGhpcyBpc3N1ZS5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGFkZGluZyA9IDIsXG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZSk7XG4gICAgICBjb25zdCBuYXRpdmVDbGllbnRSZWN0cyA9IEFycmF5LmZyb20oKGF3YWl0IChwbGF0Zm9ybS5nZXRDbGllbnRSZWN0cyA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uZ2V0Q2xpZW50UmVjdHMoZWxlbWVudHMucmVmZXJlbmNlKSkpIHx8IFtdKTtcbiAgICAgIGNvbnN0IGNsaWVudFJlY3RzID0gZ2V0UmVjdHNCeUxpbmUobmF0aXZlQ2xpZW50UmVjdHMpO1xuICAgICAgY29uc3QgZmFsbGJhY2sgPSByZWN0VG9DbGllbnRSZWN0KGdldEJvdW5kaW5nUmVjdChuYXRpdmVDbGllbnRSZWN0cykpO1xuICAgICAgY29uc3QgcGFkZGluZ09iamVjdCA9IGdldFBhZGRpbmdPYmplY3QocGFkZGluZyk7XG4gICAgICBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSB0d28gcmVjdHMgYW5kIHRoZXkgYXJlIGRpc2pvaW5lZC5cbiAgICAgICAgaWYgKGNsaWVudFJlY3RzLmxlbmd0aCA9PT0gMiAmJiBjbGllbnRSZWN0c1swXS5sZWZ0ID4gY2xpZW50UmVjdHNbMV0ucmlnaHQgJiYgeCAhPSBudWxsICYmIHkgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IHJlY3QgaW4gd2hpY2ggdGhlIHBvaW50IGlzIGZ1bGx5IGluc2lkZS5cbiAgICAgICAgICByZXR1cm4gY2xpZW50UmVjdHMuZmluZChyZWN0ID0+IHggPiByZWN0LmxlZnQgLSBwYWRkaW5nT2JqZWN0LmxlZnQgJiYgeCA8IHJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0ICYmIHkgPiByZWN0LnRvcCAtIHBhZGRpbmdPYmplY3QudG9wICYmIHkgPCByZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tKSB8fCBmYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXJlIGFyZSAyIG9yIG1vcmUgY29ubmVjdGVkIHJlY3RzLlxuICAgICAgICBpZiAoY2xpZW50UmVjdHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICBpZiAoZ2V0U2lkZUF4aXMocGxhY2VtZW50KSA9PT0gJ3knKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFJlY3QgPSBjbGllbnRSZWN0c1swXTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RSZWN0ID0gY2xpZW50UmVjdHNbY2xpZW50UmVjdHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBjb25zdCBpc1RvcCA9IGdldFNpZGUocGxhY2VtZW50KSA9PT0gJ3RvcCc7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSBmaXJzdFJlY3QudG9wO1xuICAgICAgICAgICAgY29uc3QgYm90dG9tID0gbGFzdFJlY3QuYm90dG9tO1xuICAgICAgICAgICAgY29uc3QgbGVmdCA9IGlzVG9wID8gZmlyc3RSZWN0LmxlZnQgOiBsYXN0UmVjdC5sZWZ0O1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBpc1RvcCA/IGZpcnN0UmVjdC5yaWdodCA6IGxhc3RSZWN0LnJpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgIHg6IGxlZnQsXG4gICAgICAgICAgICAgIHk6IHRvcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaXNMZWZ0U2lkZSA9IGdldFNpZGUocGxhY2VtZW50KSA9PT0gJ2xlZnQnO1xuICAgICAgICAgIGNvbnN0IG1heFJpZ2h0ID0gbWF4KC4uLmNsaWVudFJlY3RzLm1hcChyZWN0ID0+IHJlY3QucmlnaHQpKTtcbiAgICAgICAgICBjb25zdCBtaW5MZWZ0ID0gbWluKC4uLmNsaWVudFJlY3RzLm1hcChyZWN0ID0+IHJlY3QubGVmdCkpO1xuICAgICAgICAgIGNvbnN0IG1lYXN1cmVSZWN0cyA9IGNsaWVudFJlY3RzLmZpbHRlcihyZWN0ID0+IGlzTGVmdFNpZGUgPyByZWN0LmxlZnQgPT09IG1pbkxlZnQgOiByZWN0LnJpZ2h0ID09PSBtYXhSaWdodCk7XG4gICAgICAgICAgY29uc3QgdG9wID0gbWVhc3VyZVJlY3RzWzBdLnRvcDtcbiAgICAgICAgICBjb25zdCBib3R0b20gPSBtZWFzdXJlUmVjdHNbbWVhc3VyZVJlY3RzLmxlbmd0aCAtIDFdLmJvdHRvbTtcbiAgICAgICAgICBjb25zdCBsZWZ0ID0gbWluTGVmdDtcbiAgICAgICAgICBjb25zdCByaWdodCA9IG1heFJpZ2h0O1xuICAgICAgICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgYm90dG9tLFxuICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICB4OiBsZWZ0LFxuICAgICAgICAgICAgeTogdG9wXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9XG4gICAgICBjb25zdCByZXNldFJlY3RzID0gYXdhaXQgcGxhdGZvcm0uZ2V0RWxlbWVudFJlY3RzKHtcbiAgICAgICAgcmVmZXJlbmNlOiB7XG4gICAgICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gICAgICAgIH0sXG4gICAgICAgIGZsb2F0aW5nOiBlbGVtZW50cy5mbG9hdGluZyxcbiAgICAgICAgc3RyYXRlZ3lcbiAgICAgIH0pO1xuICAgICAgaWYgKHJlY3RzLnJlZmVyZW5jZS54ICE9PSByZXNldFJlY3RzLnJlZmVyZW5jZS54IHx8IHJlY3RzLnJlZmVyZW5jZS55ICE9PSByZXNldFJlY3RzLnJlZmVyZW5jZS55IHx8IHJlY3RzLnJlZmVyZW5jZS53aWR0aCAhPT0gcmVzZXRSZWN0cy5yZWZlcmVuY2Uud2lkdGggfHwgcmVjdHMucmVmZXJlbmNlLmhlaWdodCAhPT0gcmVzZXRSZWN0cy5yZWZlcmVuY2UuaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgIHJlY3RzOiByZXNldFJlY3RzXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8vIEZvciB0eXBlIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LCB0aGUgYE9mZnNldE9wdGlvbnNgIHR5cGUgd2FzIGFsc29cbi8vIERlcml2YWJsZS5cblxuYXN5bmMgZnVuY3Rpb24gY29udmVydFZhbHVlVG9Db29yZHMoc3RhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudCxcbiAgICBwbGF0Zm9ybSxcbiAgICBlbGVtZW50c1xuICB9ID0gc3RhdGU7XG4gIGNvbnN0IHJ0bCA9IGF3YWl0IChwbGF0Zm9ybS5pc1JUTCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uaXNSVEwoZWxlbWVudHMuZmxvYXRpbmcpKTtcbiAgY29uc3Qgc2lkZSA9IGdldFNpZGUocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBnZXRTaWRlQXhpcyhwbGFjZW1lbnQpID09PSAneSc7XG4gIGNvbnN0IG1haW5BeGlzTXVsdGkgPSBbJ2xlZnQnLCAndG9wJ10uaW5jbHVkZXMoc2lkZSkgPyAtMSA6IDE7XG4gIGNvbnN0IGNyb3NzQXhpc011bHRpID0gcnRsICYmIGlzVmVydGljYWwgPyAtMSA6IDE7XG4gIGNvbnN0IHJhd1ZhbHVlID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgbGV0IHtcbiAgICBtYWluQXhpcyxcbiAgICBjcm9zc0F4aXMsXG4gICAgYWxpZ25tZW50QXhpc1xuICB9ID0gdHlwZW9mIHJhd1ZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogcmF3VmFsdWUsXG4gICAgY3Jvc3NBeGlzOiAwLFxuICAgIGFsaWdubWVudEF4aXM6IG51bGxcbiAgfSA6IHtcbiAgICBtYWluQXhpczogMCxcbiAgICBjcm9zc0F4aXM6IDAsXG4gICAgYWxpZ25tZW50QXhpczogbnVsbCxcbiAgICAuLi5yYXdWYWx1ZVxuICB9O1xuICBpZiAoYWxpZ25tZW50ICYmIHR5cGVvZiBhbGlnbm1lbnRBeGlzID09PSAnbnVtYmVyJykge1xuICAgIGNyb3NzQXhpcyA9IGFsaWdubWVudCA9PT0gJ2VuZCcgPyBhbGlnbm1lbnRBeGlzICogLTEgOiBhbGlnbm1lbnRBeGlzO1xuICB9XG4gIHJldHVybiBpc1ZlcnRpY2FsID8ge1xuICAgIHg6IGNyb3NzQXhpcyAqIGNyb3NzQXhpc011bHRpLFxuICAgIHk6IG1haW5BeGlzICogbWFpbkF4aXNNdWx0aVxuICB9IDoge1xuICAgIHg6IG1haW5BeGlzICogbWFpbkF4aXNNdWx0aSxcbiAgICB5OiBjcm9zc0F4aXMgKiBjcm9zc0F4aXNNdWx0aVxuICB9O1xufVxuXG4vKipcbiAqIE1vZGlmaWVzIHRoZSBwbGFjZW1lbnQgYnkgdHJhbnNsYXRpbmcgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYWxvbmcgdGhlXG4gKiBzcGVjaWZpZWQgYXhlcy5cbiAqIEEgbnVtYmVyIChzaG9ydGhhbmQgZm9yIGBtYWluQXhpc2Agb3IgZGlzdGFuY2UpLCBvciBhbiBheGVzIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdCBtYXkgYmUgcGFzc2VkLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL29mZnNldFxuICovXG5jb25zdCBvZmZzZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IDA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlKSB7XG4gICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJG9mZnNlLCBfbWlkZGxld2FyZURhdGEkYXJyb3c7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgbWlkZGxld2FyZURhdGFcbiAgICAgIH0gPSBzdGF0ZTtcbiAgICAgIGNvbnN0IGRpZmZDb29yZHMgPSBhd2FpdCBjb252ZXJ0VmFsdWVUb0Nvb3JkcyhzdGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAgIC8vIElmIHRoZSBwbGFjZW1lbnQgaXMgdGhlIHNhbWUgYW5kIHRoZSBhcnJvdyBjYXVzZWQgYW4gYWxpZ25tZW50IG9mZnNldFxuICAgICAgLy8gdGhlbiB3ZSBkb24ndCBuZWVkIHRvIGNoYW5nZSB0aGUgcG9zaXRpb25pbmcgY29vcmRpbmF0ZXMuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAoKF9taWRkbGV3YXJlRGF0YSRvZmZzZSA9IG1pZGRsZXdhcmVEYXRhLm9mZnNldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRvZmZzZS5wbGFjZW1lbnQpICYmIChfbWlkZGxld2FyZURhdGEkYXJyb3cgPSBtaWRkbGV3YXJlRGF0YS5hcnJvdykgIT0gbnVsbCAmJiBfbWlkZGxld2FyZURhdGEkYXJyb3cuYWxpZ25tZW50T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggKyBkaWZmQ29vcmRzLngsXG4gICAgICAgIHk6IHkgKyBkaWZmQ29vcmRzLnksXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAuLi5kaWZmQ29vcmRzLFxuICAgICAgICAgIHBsYWNlbWVudFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IHNoaWZ0aW5nIGl0IGluIG9yZGVyIHRvXG4gKiBrZWVwIGl0IGluIHZpZXcgd2hlbiBpdCB3aWxsIG92ZXJmbG93IHRoZSBjbGlwcGluZyBib3VuZGFyeS5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9zaGlmdFxuICovXG5jb25zdCBzaGlmdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnc2hpZnQnLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgcGxhY2VtZW50XG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICAgICAgY3Jvc3NBeGlzOiBjaGVja0Nyb3NzQXhpcyA9IGZhbHNlLFxuICAgICAgICBsaW1pdGVyID0ge1xuICAgICAgICAgIGZuOiBfcmVmID0+IHtcbiAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIHlcbiAgICAgICAgICAgIH0gPSBfcmVmO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIGRldGVjdE92ZXJmbG93T3B0aW9ucyk7XG4gICAgICBjb25zdCBjcm9zc0F4aXMgPSBnZXRTaWRlQXhpcyhnZXRTaWRlKHBsYWNlbWVudCkpO1xuICAgICAgY29uc3QgbWFpbkF4aXMgPSBnZXRPcHBvc2l0ZUF4aXMoY3Jvc3NBeGlzKTtcbiAgICAgIGxldCBtYWluQXhpc0Nvb3JkID0gY29vcmRzW21haW5BeGlzXTtcbiAgICAgIGxldCBjcm9zc0F4aXNDb29yZCA9IGNvb3Jkc1tjcm9zc0F4aXNdO1xuICAgICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgICAgY29uc3QgbWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyAndG9wJyA6ICdsZWZ0JztcbiAgICAgICAgY29uc3QgbWF4U2lkZSA9IG1haW5BeGlzID09PSAneScgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IG1pbiA9IG1haW5BeGlzQ29vcmQgKyBvdmVyZmxvd1ttaW5TaWRlXTtcbiAgICAgICAgY29uc3QgbWF4ID0gbWFpbkF4aXNDb29yZCAtIG92ZXJmbG93W21heFNpZGVdO1xuICAgICAgICBtYWluQXhpc0Nvb3JkID0gY2xhbXAobWluLCBtYWluQXhpc0Nvb3JkLCBtYXgpO1xuICAgICAgfVxuICAgICAgaWYgKGNoZWNrQ3Jvc3NBeGlzKSB7XG4gICAgICAgIGNvbnN0IG1pblNpZGUgPSBjcm9zc0F4aXMgPT09ICd5JyA/ICd0b3AnIDogJ2xlZnQnO1xuICAgICAgICBjb25zdCBtYXhTaWRlID0gY3Jvc3NBeGlzID09PSAneScgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IG1pbiA9IGNyb3NzQXhpc0Nvb3JkICsgb3ZlcmZsb3dbbWluU2lkZV07XG4gICAgICAgIGNvbnN0IG1heCA9IGNyb3NzQXhpc0Nvb3JkIC0gb3ZlcmZsb3dbbWF4U2lkZV07XG4gICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gY2xhbXAobWluLCBjcm9zc0F4aXNDb29yZCwgbWF4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpbWl0ZWRDb29yZHMgPSBsaW1pdGVyLmZuKHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIFttYWluQXhpc106IG1haW5BeGlzQ29vcmQsXG4gICAgICAgIFtjcm9zc0F4aXNdOiBjcm9zc0F4aXNDb29yZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5saW1pdGVkQ29vcmRzLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgeDogbGltaXRlZENvb3Jkcy54IC0geCxcbiAgICAgICAgICB5OiBsaW1pdGVkQ29vcmRzLnkgLSB5XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQnVpbHQtaW4gYGxpbWl0ZXJgIHRoYXQgd2lsbCBzdG9wIGBzaGlmdCgpYCBhdCBhIGNlcnRhaW4gcG9pbnQuXG4gKi9cbmNvbnN0IGxpbWl0U2hpZnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgb3B0aW9ucyxcbiAgICBmbihzdGF0ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIHJlY3RzLFxuICAgICAgICBtaWRkbGV3YXJlRGF0YVxuICAgICAgfSA9IHN0YXRlO1xuICAgICAgY29uc3Qge1xuICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICBtYWluQXhpczogY2hlY2tNYWluQXhpcyA9IHRydWUsXG4gICAgICAgIGNyb3NzQXhpczogY2hlY2tDcm9zc0F4aXMgPSB0cnVlXG4gICAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuICAgICAgY29uc3QgY29vcmRzID0ge1xuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9O1xuICAgICAgY29uc3QgY3Jvc3NBeGlzID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KTtcbiAgICAgIGNvbnN0IG1haW5BeGlzID0gZ2V0T3Bwb3NpdGVBeGlzKGNyb3NzQXhpcyk7XG4gICAgICBsZXQgbWFpbkF4aXNDb29yZCA9IGNvb3Jkc1ttYWluQXhpc107XG4gICAgICBsZXQgY3Jvc3NBeGlzQ29vcmQgPSBjb29yZHNbY3Jvc3NBeGlzXTtcbiAgICAgIGNvbnN0IHJhd09mZnNldCA9IGV2YWx1YXRlKG9mZnNldCwgc3RhdGUpO1xuICAgICAgY29uc3QgY29tcHV0ZWRPZmZzZXQgPSB0eXBlb2YgcmF3T2Zmc2V0ID09PSAnbnVtYmVyJyA/IHtcbiAgICAgICAgbWFpbkF4aXM6IHJhd09mZnNldCxcbiAgICAgICAgY3Jvc3NBeGlzOiAwXG4gICAgICB9IDoge1xuICAgICAgICBtYWluQXhpczogMCxcbiAgICAgICAgY3Jvc3NBeGlzOiAwLFxuICAgICAgICAuLi5yYXdPZmZzZXRcbiAgICAgIH07XG4gICAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgICBjb25zdCBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgICAgICBjb25zdCBsaW1pdE1pbiA9IHJlY3RzLnJlZmVyZW5jZVttYWluQXhpc10gLSByZWN0cy5mbG9hdGluZ1tsZW5dICsgY29tcHV0ZWRPZmZzZXQubWFpbkF4aXM7XG4gICAgICAgIGNvbnN0IGxpbWl0TWF4ID0gcmVjdHMucmVmZXJlbmNlW21haW5BeGlzXSArIHJlY3RzLnJlZmVyZW5jZVtsZW5dIC0gY29tcHV0ZWRPZmZzZXQubWFpbkF4aXM7XG4gICAgICAgIGlmIChtYWluQXhpc0Nvb3JkIDwgbGltaXRNaW4pIHtcbiAgICAgICAgICBtYWluQXhpc0Nvb3JkID0gbGltaXRNaW47XG4gICAgICAgIH0gZWxzZSBpZiAobWFpbkF4aXNDb29yZCA+IGxpbWl0TWF4KSB7XG4gICAgICAgICAgbWFpbkF4aXNDb29yZCA9IGxpbWl0TWF4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2hlY2tDcm9zc0F4aXMpIHtcbiAgICAgICAgdmFyIF9taWRkbGV3YXJlRGF0YSRvZmZzZSwgX21pZGRsZXdhcmVEYXRhJG9mZnNlMjtcbiAgICAgICAgY29uc3QgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICAgICAgY29uc3QgaXNPcmlnaW5TaWRlID0gWyd0b3AnLCAnbGVmdCddLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSk7XG4gICAgICAgIGNvbnN0IGxpbWl0TWluID0gcmVjdHMucmVmZXJlbmNlW2Nyb3NzQXhpc10gLSByZWN0cy5mbG9hdGluZ1tsZW5dICsgKGlzT3JpZ2luU2lkZSA/ICgoX21pZGRsZXdhcmVEYXRhJG9mZnNlID0gbWlkZGxld2FyZURhdGEub2Zmc2V0KSA9PSBudWxsID8gdm9pZCAwIDogX21pZGRsZXdhcmVEYXRhJG9mZnNlW2Nyb3NzQXhpc10pIHx8IDAgOiAwKSArIChpc09yaWdpblNpZGUgPyAwIDogY29tcHV0ZWRPZmZzZXQuY3Jvc3NBeGlzKTtcbiAgICAgICAgY29uc3QgbGltaXRNYXggPSByZWN0cy5yZWZlcmVuY2VbY3Jvc3NBeGlzXSArIHJlY3RzLnJlZmVyZW5jZVtsZW5dICsgKGlzT3JpZ2luU2lkZSA/IDAgOiAoKF9taWRkbGV3YXJlRGF0YSRvZmZzZTIgPSBtaWRkbGV3YXJlRGF0YS5vZmZzZXQpID09IG51bGwgPyB2b2lkIDAgOiBfbWlkZGxld2FyZURhdGEkb2Zmc2UyW2Nyb3NzQXhpc10pIHx8IDApIC0gKGlzT3JpZ2luU2lkZSA/IGNvbXB1dGVkT2Zmc2V0LmNyb3NzQXhpcyA6IDApO1xuICAgICAgICBpZiAoY3Jvc3NBeGlzQ29vcmQgPCBsaW1pdE1pbikge1xuICAgICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gbGltaXRNaW47XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBeGlzQ29vcmQgPiBsaW1pdE1heCkge1xuICAgICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gbGltaXRNYXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFttYWluQXhpc106IG1haW5BeGlzQ29vcmQsXG4gICAgICAgIFtjcm9zc0F4aXNdOiBjcm9zc0F4aXNDb29yZFxuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgdGhhdCBhbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCDigJRcbiAqIGZvciBpbnN0YW5jZSwgcHJldmVudCBpdCBmcm9tIG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyBib3VuZGFyeSBvciBtYXRjaCB0aGVcbiAqIHdpZHRoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9zaXplXG4gKi9cbmNvbnN0IHNpemUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3NpemUnLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICByZWN0cyxcbiAgICAgICAgcGxhdGZvcm0sXG4gICAgICAgIGVsZW1lbnRzXG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFwcGx5ID0gKCkgPT4ge30sXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIGRldGVjdE92ZXJmbG93T3B0aW9ucyk7XG4gICAgICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XG4gICAgICBjb25zdCBpc1lBeGlzID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KSA9PT0gJ3knO1xuICAgICAgY29uc3Qge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gcmVjdHMuZmxvYXRpbmc7XG4gICAgICBsZXQgaGVpZ2h0U2lkZTtcbiAgICAgIGxldCB3aWR0aFNpZGU7XG4gICAgICBpZiAoc2lkZSA9PT0gJ3RvcCcgfHwgc2lkZSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgaGVpZ2h0U2lkZSA9IHNpZGU7XG4gICAgICAgIHdpZHRoU2lkZSA9IGFsaWdubWVudCA9PT0gKChhd2FpdCAocGxhdGZvcm0uaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzUlRMKGVsZW1lbnRzLmZsb2F0aW5nKSkpID8gJ3N0YXJ0JyA6ICdlbmQnKSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aFNpZGUgPSBzaWRlO1xuICAgICAgICBoZWlnaHRTaWRlID0gYWxpZ25tZW50ID09PSAnZW5kJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgICBjb25zdCBtYXhpbXVtQ2xpcHBpbmdIZWlnaHQgPSBoZWlnaHQgLSBvdmVyZmxvdy50b3AgLSBvdmVyZmxvdy5ib3R0b207XG4gICAgICBjb25zdCBtYXhpbXVtQ2xpcHBpbmdXaWR0aCA9IHdpZHRoIC0gb3ZlcmZsb3cubGVmdCAtIG92ZXJmbG93LnJpZ2h0O1xuICAgICAgY29uc3Qgb3ZlcmZsb3dBdmFpbGFibGVIZWlnaHQgPSBtaW4oaGVpZ2h0IC0gb3ZlcmZsb3dbaGVpZ2h0U2lkZV0sIG1heGltdW1DbGlwcGluZ0hlaWdodCk7XG4gICAgICBjb25zdCBvdmVyZmxvd0F2YWlsYWJsZVdpZHRoID0gbWluKHdpZHRoIC0gb3ZlcmZsb3dbd2lkdGhTaWRlXSwgbWF4aW11bUNsaXBwaW5nV2lkdGgpO1xuICAgICAgY29uc3Qgbm9TaGlmdCA9ICFzdGF0ZS5taWRkbGV3YXJlRGF0YS5zaGlmdDtcbiAgICAgIGxldCBhdmFpbGFibGVIZWlnaHQgPSBvdmVyZmxvd0F2YWlsYWJsZUhlaWdodDtcbiAgICAgIGxldCBhdmFpbGFibGVXaWR0aCA9IG92ZXJmbG93QXZhaWxhYmxlV2lkdGg7XG4gICAgICBpZiAoaXNZQXhpcykge1xuICAgICAgICBhdmFpbGFibGVXaWR0aCA9IGFsaWdubWVudCB8fCBub1NoaWZ0ID8gbWluKG92ZXJmbG93QXZhaWxhYmxlV2lkdGgsIG1heGltdW1DbGlwcGluZ1dpZHRoKSA6IG1heGltdW1DbGlwcGluZ1dpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXZhaWxhYmxlSGVpZ2h0ID0gYWxpZ25tZW50IHx8IG5vU2hpZnQgPyBtaW4ob3ZlcmZsb3dBdmFpbGFibGVIZWlnaHQsIG1heGltdW1DbGlwcGluZ0hlaWdodCkgOiBtYXhpbXVtQ2xpcHBpbmdIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAobm9TaGlmdCAmJiAhYWxpZ25tZW50KSB7XG4gICAgICAgIGNvbnN0IHhNaW4gPSBtYXgob3ZlcmZsb3cubGVmdCwgMCk7XG4gICAgICAgIGNvbnN0IHhNYXggPSBtYXgob3ZlcmZsb3cucmlnaHQsIDApO1xuICAgICAgICBjb25zdCB5TWluID0gbWF4KG92ZXJmbG93LnRvcCwgMCk7XG4gICAgICAgIGNvbnN0IHlNYXggPSBtYXgob3ZlcmZsb3cuYm90dG9tLCAwKTtcbiAgICAgICAgaWYgKGlzWUF4aXMpIHtcbiAgICAgICAgICBhdmFpbGFibGVXaWR0aCA9IHdpZHRoIC0gMiAqICh4TWluICE9PSAwIHx8IHhNYXggIT09IDAgPyB4TWluICsgeE1heCA6IG1heChvdmVyZmxvdy5sZWZ0LCBvdmVyZmxvdy5yaWdodCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF2YWlsYWJsZUhlaWdodCA9IGhlaWdodCAtIDIgKiAoeU1pbiAhPT0gMCB8fCB5TWF4ICE9PSAwID8geU1pbiArIHlNYXggOiBtYXgob3ZlcmZsb3cudG9wLCBvdmVyZmxvdy5ib3R0b20pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXdhaXQgYXBwbHkoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgIGF2YWlsYWJsZUhlaWdodFxuICAgICAgfSk7XG4gICAgICBjb25zdCBuZXh0RGltZW5zaW9ucyA9IGF3YWl0IHBsYXRmb3JtLmdldERpbWVuc2lvbnMoZWxlbWVudHMuZmxvYXRpbmcpO1xuICAgICAgaWYgKHdpZHRoICE9PSBuZXh0RGltZW5zaW9ucy53aWR0aCB8fCBoZWlnaHQgIT09IG5leHREaW1lbnNpb25zLmhlaWdodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICByZWN0czogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgeyBhcnJvdywgYXV0b1BsYWNlbWVudCwgY29tcHV0ZVBvc2l0aW9uLCBkZXRlY3RPdmVyZmxvdywgZmxpcCwgaGlkZSwgaW5saW5lLCBsaW1pdFNoaWZ0LCBvZmZzZXQsIHNoaWZ0LCBzaXplIH07XG4iLCJmdW5jdGlvbiBnZXROb2RlTmFtZShub2RlKSB7XG4gIGlmIChpc05vZGUobm9kZSkpIHtcbiAgICByZXR1cm4gKG5vZGUubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgLy8gTW9ja2VkIG5vZGVzIGluIHRlc3RpbmcgZW52aXJvbm1lbnRzIG1heSBub3QgYmUgaW5zdGFuY2VzIG9mIE5vZGUuIEJ5XG4gIC8vIHJldHVybmluZyBgI2RvY3VtZW50YCBhbiBpbmZpbml0ZSBsb29wIHdvbid0IG9jY3VyLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmxvYXRpbmctdWkvZmxvYXRpbmctdWkvaXNzdWVzLzIzMTdcbiAgcmV0dXJuICcjZG9jdW1lbnQnO1xufVxuZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgdmFyIF9ub2RlJG93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiAobm9kZSA9PSBudWxsIHx8IChfbm9kZSRvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX25vZGUkb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgfHwgd2luZG93O1xufVxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KG5vZGUpIHtcbiAgdmFyIF9yZWY7XG4gIHJldHVybiAoX3JlZiA9IChpc05vZGUobm9kZSkgPyBub2RlLm93bmVyRG9jdW1lbnQgOiBub2RlLmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVmLmRvY3VtZW50RWxlbWVudDtcbn1cbmZ1bmN0aW9uIGlzTm9kZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBOb2RlIHx8IHZhbHVlIGluc3RhbmNlb2YgZ2V0V2luZG93KHZhbHVlKS5Ob2RlO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLkVsZW1lbnQ7XG59XG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IHZhbHVlIGluc3RhbmNlb2YgZ2V0V2luZG93KHZhbHVlKS5IVE1MRWxlbWVudDtcbn1cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdCh2YWx1ZSkge1xuICAvLyBCcm93c2VycyB3aXRob3V0IGBTaGFkb3dSb290YCBzdXBwb3J0LlxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLlNoYWRvd1Jvb3Q7XG59XG5mdW5jdGlvbiBpc092ZXJmbG93RWxlbWVudChlbGVtZW50KSB7XG4gIGNvbnN0IHtcbiAgICBvdmVyZmxvdyxcbiAgICBvdmVyZmxvd1gsXG4gICAgb3ZlcmZsb3dZLFxuICAgIGRpc3BsYXlcbiAgfSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW58Y2xpcC8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkgJiYgIVsnaW5saW5lJywgJ2NvbnRlbnRzJ10uaW5jbHVkZXMoZGlzcGxheSk7XG59XG5mdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5jbHVkZXMoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpO1xufVxuZnVuY3Rpb24gaXNUb3BMYXllcihlbGVtZW50KSB7XG4gIHJldHVybiBbJzpwb3BvdmVyLW9wZW4nLCAnOm1vZGFsJ10uc29tZShzZWxlY3RvciA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNDb250YWluaW5nQmxvY2soZWxlbWVudCkge1xuICBjb25zdCB3ZWJraXQgPSBpc1dlYktpdCgpO1xuICBjb25zdCBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG4gIHJldHVybiBjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgKGNzcy5jb250YWluZXJUeXBlID8gY3NzLmNvbnRhaW5lclR5cGUgIT09ICdub3JtYWwnIDogZmFsc2UpIHx8ICF3ZWJraXQgJiYgKGNzcy5iYWNrZHJvcEZpbHRlciA/IGNzcy5iYWNrZHJvcEZpbHRlciAhPT0gJ25vbmUnIDogZmFsc2UpIHx8ICF3ZWJraXQgJiYgKGNzcy5maWx0ZXIgPyBjc3MuZmlsdGVyICE9PSAnbm9uZScgOiBmYWxzZSkgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnLCAnZmlsdGVyJ10uc29tZSh2YWx1ZSA9PiAoY3NzLndpbGxDaGFuZ2UgfHwgJycpLmluY2x1ZGVzKHZhbHVlKSkgfHwgWydwYWludCcsICdsYXlvdXQnLCAnc3RyaWN0JywgJ2NvbnRlbnQnXS5zb21lKHZhbHVlID0+IChjc3MuY29udGFpbiB8fCAnJykuaW5jbHVkZXModmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIGxldCBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhaXNMYXN0VHJhdmVyc2FibGVOb2RlKGN1cnJlbnROb2RlKSkge1xuICAgIGlmIChpc1RvcExheWVyKGN1cnJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0NvbnRhaW5pbmdCbG9jayhjdXJyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9XG4gICAgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGN1cnJlbnROb2RlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzV2ViS2l0KCkge1xuICBpZiAodHlwZW9mIENTUyA9PT0gJ3VuZGVmaW5lZCcgfHwgIUNTUy5zdXBwb3J0cykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gQ1NTLnN1cHBvcnRzKCctd2Via2l0LWJhY2tkcm9wLWZpbHRlcicsICdub25lJyk7XG59XG5mdW5jdGlvbiBpc0xhc3RUcmF2ZXJzYWJsZU5vZGUobm9kZSkge1xuICByZXR1cm4gWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5jbHVkZXMoZ2V0Tm9kZU5hbWUobm9kZSkpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVTY3JvbGwoZWxlbWVudCkge1xuICBpZiAoaXNFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxYLFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxZXG4gIH07XG59XG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKG5vZGUpIHtcbiAgaWYgKGdldE5vZGVOYW1lKG5vZGUpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPVxuICAvLyBTdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZS5cbiAgbm9kZS5hc3NpZ25lZFNsb3QgfHxcbiAgLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWQuXG4gIG5vZGUucGFyZW50Tm9kZSB8fFxuICAvLyBTaGFkb3dSb290IGRldGVjdGVkLlxuICBpc1NoYWRvd1Jvb3Qobm9kZSkgJiYgbm9kZS5ob3N0IHx8XG4gIC8vIEZhbGxiYWNrLlxuICBnZXREb2N1bWVudEVsZW1lbnQobm9kZSk7XG4gIHJldHVybiBpc1NoYWRvd1Jvb3QocmVzdWx0KSA/IHJlc3VsdC5ob3N0IDogcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdE92ZXJmbG93QW5jZXN0b3Iobm9kZSkge1xuICBjb25zdCBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgaWYgKGlzTGFzdFRyYXZlcnNhYmxlTm9kZShwYXJlbnROb2RlKSkge1xuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQgPyBub2RlLm93bmVyRG9jdW1lbnQuYm9keSA6IG5vZGUuYm9keTtcbiAgfVxuICBpZiAoaXNIVE1MRWxlbWVudChwYXJlbnROb2RlKSAmJiBpc092ZXJmbG93RWxlbWVudChwYXJlbnROb2RlKSkge1xuICAgIHJldHVybiBwYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3RvcihwYXJlbnROb2RlKTtcbn1cbmZ1bmN0aW9uIGdldE92ZXJmbG93QW5jZXN0b3JzKG5vZGUsIGxpc3QsIHRyYXZlcnNlSWZyYW1lcykge1xuICB2YXIgX25vZGUkb3duZXJEb2N1bWVudDI7XG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cbiAgaWYgKHRyYXZlcnNlSWZyYW1lcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhdmVyc2VJZnJhbWVzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzY3JvbGxhYmxlQW5jZXN0b3IgPSBnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3Rvcihub2RlKTtcbiAgY29uc3QgaXNCb2R5ID0gc2Nyb2xsYWJsZUFuY2VzdG9yID09PSAoKF9ub2RlJG93bmVyRG9jdW1lbnQyID0gbm9kZS5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX25vZGUkb3duZXJEb2N1bWVudDIuYm9keSk7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhzY3JvbGxhYmxlQW5jZXN0b3IpO1xuICBpZiAoaXNCb2R5KSB7XG4gICAgcmV0dXJuIGxpc3QuY29uY2F0KHdpbiwgd2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc092ZXJmbG93RWxlbWVudChzY3JvbGxhYmxlQW5jZXN0b3IpID8gc2Nyb2xsYWJsZUFuY2VzdG9yIDogW10sIHdpbi5mcmFtZUVsZW1lbnQgJiYgdHJhdmVyc2VJZnJhbWVzID8gZ2V0T3ZlcmZsb3dBbmNlc3RvcnMod2luLmZyYW1lRWxlbWVudCkgOiBbXSk7XG4gIH1cbiAgcmV0dXJuIGxpc3QuY29uY2F0KHNjcm9sbGFibGVBbmNlc3RvciwgZ2V0T3ZlcmZsb3dBbmNlc3RvcnMoc2Nyb2xsYWJsZUFuY2VzdG9yLCBbXSwgdHJhdmVyc2VJZnJhbWVzKSk7XG59XG5cbmV4cG9ydCB7IGdldENvbXB1dGVkU3R5bGUsIGdldENvbnRhaW5pbmdCbG9jaywgZ2V0RG9jdW1lbnRFbGVtZW50LCBnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3RvciwgZ2V0Tm9kZU5hbWUsIGdldE5vZGVTY3JvbGwsIGdldE92ZXJmbG93QW5jZXN0b3JzLCBnZXRQYXJlbnROb2RlLCBnZXRXaW5kb3csIGlzQ29udGFpbmluZ0Jsb2NrLCBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzTGFzdFRyYXZlcnNhYmxlTm9kZSwgaXNOb2RlLCBpc092ZXJmbG93RWxlbWVudCwgaXNTaGFkb3dSb290LCBpc1RhYmxlRWxlbWVudCwgaXNUb3BMYXllciwgaXNXZWJLaXQgfTtcbiIsImltcG9ydCB7IHJlY3RUb0NsaWVudFJlY3QsIGRldGVjdE92ZXJmbG93IGFzIGRldGVjdE92ZXJmbG93JDEsIG9mZnNldCBhcyBvZmZzZXQkMSwgYXV0b1BsYWNlbWVudCBhcyBhdXRvUGxhY2VtZW50JDEsIHNoaWZ0IGFzIHNoaWZ0JDEsIGZsaXAgYXMgZmxpcCQxLCBzaXplIGFzIHNpemUkMSwgaGlkZSBhcyBoaWRlJDEsIGFycm93IGFzIGFycm93JDEsIGlubGluZSBhcyBpbmxpbmUkMSwgbGltaXRTaGlmdCBhcyBsaW1pdFNoaWZ0JDEsIGNvbXB1dGVQb3NpdGlvbiBhcyBjb21wdXRlUG9zaXRpb24kMSB9IGZyb20gJ0BmbG9hdGluZy11aS9jb3JlJztcbmltcG9ydCB7IHJvdW5kLCBjcmVhdGVDb29yZHMsIG1heCwgbWluLCBmbG9vciB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscyc7XG5pbXBvcnQgeyBnZXRDb21wdXRlZFN0eWxlLCBpc0hUTUxFbGVtZW50LCBpc0VsZW1lbnQsIGdldFdpbmRvdywgaXNXZWJLaXQsIGdldERvY3VtZW50RWxlbWVudCwgaXNUb3BMYXllciwgZ2V0Tm9kZU5hbWUsIGlzT3ZlcmZsb3dFbGVtZW50LCBnZXROb2RlU2Nyb2xsLCBnZXRPdmVyZmxvd0FuY2VzdG9ycywgZ2V0UGFyZW50Tm9kZSwgaXNMYXN0VHJhdmVyc2FibGVOb2RlLCBpc0NvbnRhaW5pbmdCbG9jaywgaXNUYWJsZUVsZW1lbnQsIGdldENvbnRhaW5pbmdCbG9jayB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscy9kb20nO1xuZXhwb3J0IHsgZ2V0T3ZlcmZsb3dBbmNlc3RvcnMgfSBmcm9tICdAZmxvYXRpbmctdWkvdXRpbHMvZG9tJztcblxuZnVuY3Rpb24gZ2V0Q3NzRGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIGNvbnN0IGNzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIC8vIEluIHRlc3RpbmcgZW52aXJvbm1lbnRzLCB0aGUgYHdpZHRoYCBhbmQgYGhlaWdodGAgcHJvcGVydGllcyBhcmUgZW1wdHlcbiAgLy8gc3RyaW5ncyBmb3IgU1ZHIGVsZW1lbnRzLCByZXR1cm5pbmcgTmFOLiBGYWxsYmFjayB0byBgMGAgaW4gdGhpcyBjYXNlLlxuICBsZXQgd2lkdGggPSBwYXJzZUZsb2F0KGNzcy53aWR0aCkgfHwgMDtcbiAgbGV0IGhlaWdodCA9IHBhcnNlRmxvYXQoY3NzLmhlaWdodCkgfHwgMDtcbiAgY29uc3QgaGFzT2Zmc2V0ID0gaXNIVE1MRWxlbWVudChlbGVtZW50KTtcbiAgY29uc3Qgb2Zmc2V0V2lkdGggPSBoYXNPZmZzZXQgPyBlbGVtZW50Lm9mZnNldFdpZHRoIDogd2lkdGg7XG4gIGNvbnN0IG9mZnNldEhlaWdodCA9IGhhc09mZnNldCA/IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IDogaGVpZ2h0O1xuICBjb25zdCBzaG91bGRGYWxsYmFjayA9IHJvdW5kKHdpZHRoKSAhPT0gb2Zmc2V0V2lkdGggfHwgcm91bmQoaGVpZ2h0KSAhPT0gb2Zmc2V0SGVpZ2h0O1xuICBpZiAoc2hvdWxkRmFsbGJhY2spIHtcbiAgICB3aWR0aCA9IG9mZnNldFdpZHRoO1xuICAgIGhlaWdodCA9IG9mZnNldEhlaWdodDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICAkOiBzaG91bGRGYWxsYmFja1xuICB9O1xufVxuXG5mdW5jdGlvbiB1bndyYXBFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICFpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50LmNvbnRleHRFbGVtZW50IDogZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0U2NhbGUoZWxlbWVudCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gdW53cmFwRWxlbWVudChlbGVtZW50KTtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGRvbUVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvb3JkcygxKTtcbiAgfVxuICBjb25zdCByZWN0ID0gZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3Qge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICAkXG4gIH0gPSBnZXRDc3NEaW1lbnNpb25zKGRvbUVsZW1lbnQpO1xuICBsZXQgeCA9ICgkID8gcm91bmQocmVjdC53aWR0aCkgOiByZWN0LndpZHRoKSAvIHdpZHRoO1xuICBsZXQgeSA9ICgkID8gcm91bmQocmVjdC5oZWlnaHQpIDogcmVjdC5oZWlnaHQpIC8gaGVpZ2h0O1xuXG4gIC8vIDAsIE5hTiwgb3IgSW5maW5pdHkgc2hvdWxkIGFsd2F5cyBmYWxsYmFjayB0byAxLlxuXG4gIGlmICgheCB8fCAhTnVtYmVyLmlzRmluaXRlKHgpKSB7XG4gICAgeCA9IDE7XG4gIH1cbiAgaWYgKCF5IHx8ICFOdW1iZXIuaXNGaW5pdGUoeSkpIHtcbiAgICB5ID0gMTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHgsXG4gICAgeVxuICB9O1xufVxuXG5jb25zdCBub09mZnNldHMgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29vcmRzKDApO1xuZnVuY3Rpb24gZ2V0VmlzdWFsT2Zmc2V0cyhlbGVtZW50KSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgaWYgKCFpc1dlYktpdCgpIHx8ICF3aW4udmlzdWFsVmlld3BvcnQpIHtcbiAgICByZXR1cm4gbm9PZmZzZXRzO1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQsXG4gICAgeTogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcFxuICB9O1xufVxuZnVuY3Rpb24gc2hvdWxkQWRkVmlzdWFsT2Zmc2V0cyhlbGVtZW50LCBpc0ZpeGVkLCBmbG9hdGluZ09mZnNldFBhcmVudCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG4gIGlmICghZmxvYXRpbmdPZmZzZXRQYXJlbnQgfHwgaXNGaXhlZCAmJiBmbG9hdGluZ09mZnNldFBhcmVudCAhPT0gZ2V0V2luZG93KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkO1xufVxuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgaW5jbHVkZVNjYWxlLCBpc0ZpeGVkU3RyYXRlZ3ksIG9mZnNldFBhcmVudCkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNGaXhlZFN0cmF0ZWd5ID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkU3RyYXRlZ3kgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgZG9tRWxlbWVudCA9IHVud3JhcEVsZW1lbnQoZWxlbWVudCk7XG4gIGxldCBzY2FsZSA9IGNyZWF0ZUNvb3JkcygxKTtcbiAgaWYgKGluY2x1ZGVTY2FsZSkge1xuICAgIGlmIChvZmZzZXRQYXJlbnQpIHtcbiAgICAgIGlmIChpc0VsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgICBzY2FsZSA9IGdldFNjYWxlKG9mZnNldFBhcmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlID0gZ2V0U2NhbGUoZWxlbWVudCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHZpc3VhbE9mZnNldHMgPSBzaG91bGRBZGRWaXN1YWxPZmZzZXRzKGRvbUVsZW1lbnQsIGlzRml4ZWRTdHJhdGVneSwgb2Zmc2V0UGFyZW50KSA/IGdldFZpc3VhbE9mZnNldHMoZG9tRWxlbWVudCkgOiBjcmVhdGVDb29yZHMoMCk7XG4gIGxldCB4ID0gKGNsaWVudFJlY3QubGVmdCArIHZpc3VhbE9mZnNldHMueCkgLyBzY2FsZS54O1xuICBsZXQgeSA9IChjbGllbnRSZWN0LnRvcCArIHZpc3VhbE9mZnNldHMueSkgLyBzY2FsZS55O1xuICBsZXQgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoIC8gc2NhbGUueDtcbiAgbGV0IGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGUueTtcbiAgaWYgKGRvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB3aW4gPSBnZXRXaW5kb3coZG9tRWxlbWVudCk7XG4gICAgY29uc3Qgb2Zmc2V0V2luID0gb2Zmc2V0UGFyZW50ICYmIGlzRWxlbWVudChvZmZzZXRQYXJlbnQpID8gZ2V0V2luZG93KG9mZnNldFBhcmVudCkgOiBvZmZzZXRQYXJlbnQ7XG4gICAgbGV0IGN1cnJlbnRXaW4gPSB3aW47XG4gICAgbGV0IGN1cnJlbnRJRnJhbWUgPSBjdXJyZW50V2luLmZyYW1lRWxlbWVudDtcbiAgICB3aGlsZSAoY3VycmVudElGcmFtZSAmJiBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0V2luICE9PSBjdXJyZW50V2luKSB7XG4gICAgICBjb25zdCBpZnJhbWVTY2FsZSA9IGdldFNjYWxlKGN1cnJlbnRJRnJhbWUpO1xuICAgICAgY29uc3QgaWZyYW1lUmVjdCA9IGN1cnJlbnRJRnJhbWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnRJRnJhbWUpO1xuICAgICAgY29uc3QgbGVmdCA9IGlmcmFtZVJlY3QubGVmdCArIChjdXJyZW50SUZyYW1lLmNsaWVudExlZnQgKyBwYXJzZUZsb2F0KGNzcy5wYWRkaW5nTGVmdCkpICogaWZyYW1lU2NhbGUueDtcbiAgICAgIGNvbnN0IHRvcCA9IGlmcmFtZVJlY3QudG9wICsgKGN1cnJlbnRJRnJhbWUuY2xpZW50VG9wICsgcGFyc2VGbG9hdChjc3MucGFkZGluZ1RvcCkpICogaWZyYW1lU2NhbGUueTtcbiAgICAgIHggKj0gaWZyYW1lU2NhbGUueDtcbiAgICAgIHkgKj0gaWZyYW1lU2NhbGUueTtcbiAgICAgIHdpZHRoICo9IGlmcmFtZVNjYWxlLng7XG4gICAgICBoZWlnaHQgKj0gaWZyYW1lU2NhbGUueTtcbiAgICAgIHggKz0gbGVmdDtcbiAgICAgIHkgKz0gdG9wO1xuICAgICAgY3VycmVudFdpbiA9IGdldFdpbmRvdyhjdXJyZW50SUZyYW1lKTtcbiAgICAgIGN1cnJlbnRJRnJhbWUgPSBjdXJyZW50V2luLmZyYW1lRWxlbWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY3RUb0NsaWVudFJlY3Qoe1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRPZmZzZXRQYXJlbnRSZWxhdGl2ZVJlY3RUb1ZpZXdwb3J0UmVsYXRpdmVSZWN0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBlbGVtZW50cyxcbiAgICByZWN0LFxuICAgIG9mZnNldFBhcmVudCxcbiAgICBzdHJhdGVneVxuICB9ID0gX3JlZjtcbiAgY29uc3QgaXNGaXhlZCA9IHN0cmF0ZWd5ID09PSAnZml4ZWQnO1xuICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgdG9wTGF5ZXIgPSBlbGVtZW50cyA/IGlzVG9wTGF5ZXIoZWxlbWVudHMuZmxvYXRpbmcpIDogZmFsc2U7XG4gIGlmIChvZmZzZXRQYXJlbnQgPT09IGRvY3VtZW50RWxlbWVudCB8fCB0b3BMYXllciAmJiBpc0ZpeGVkKSB7XG4gICAgcmV0dXJuIHJlY3Q7XG4gIH1cbiAgbGV0IHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICBsZXQgc2NhbGUgPSBjcmVhdGVDb29yZHMoMSk7XG4gIGNvbnN0IG9mZnNldHMgPSBjcmVhdGVDb29yZHMoMCk7XG4gIGNvbnN0IGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCBpc092ZXJmbG93RWxlbWVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIGNvbnN0IG9mZnNldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcbiAgICAgIHNjYWxlID0gZ2V0U2NhbGUob2Zmc2V0UGFyZW50KTtcbiAgICAgIG9mZnNldHMueCA9IG9mZnNldFJlY3QueCArIG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ID0gb2Zmc2V0UmVjdC55ICsgb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCAqIHNjYWxlLngsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCAqIHNjYWxlLnksXG4gICAgeDogcmVjdC54ICogc2NhbGUueCAtIHNjcm9sbC5zY3JvbGxMZWZ0ICogc2NhbGUueCArIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnkgKiBzY2FsZS55IC0gc2Nyb2xsLnNjcm9sbFRvcCAqIHNjYWxlLnkgKyBvZmZzZXRzLnlcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdHMoZWxlbWVudCkge1xuICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmdldENsaWVudFJlY3RzKCkpO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59XG5cbi8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGUuXG5mdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICBjb25zdCBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICBjb25zdCBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpO1xuICBjb25zdCBib2R5ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkuc2Nyb2xsV2lkdGgsIGJvZHkuY2xpZW50V2lkdGgpO1xuICBjb25zdCBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5LnNjcm9sbEhlaWdodCwgYm9keS5jbGllbnRIZWlnaHQpO1xuICBsZXQgeCA9IC1zY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIGNvbnN0IHkgPSAtc2Nyb2xsLnNjcm9sbFRvcDtcbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkuY2xpZW50V2lkdGgpIC0gd2lkdGg7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIGNvbnN0IGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGNvbnN0IHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICBsZXQgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICBsZXQgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgICBjb25zdCB2aXN1YWxWaWV3cG9ydEJhc2VkID0gaXNXZWJLaXQoKTtcbiAgICBpZiAoIXZpc3VhbFZpZXdwb3J0QmFzZWQgfHwgdmlzdWFsVmlld3BvcnRCYXNlZCAmJiBzdHJhdGVneSA9PT0gJ2ZpeGVkJykge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfTtcbn1cblxuLy8gUmV0dXJucyB0aGUgaW5uZXIgY2xpZW50IHJlY3QsIHN1YnRyYWN0aW5nIHNjcm9sbGJhcnMgaWYgcHJlc2VudC5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIGNvbnN0IGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgdHJ1ZSwgc3RyYXRlZ3kgPT09ICdmaXhlZCcpO1xuICBjb25zdCB0b3AgPSBjbGllbnRSZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICBjb25zdCBsZWZ0ID0gY2xpZW50UmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICBjb25zdCBzY2FsZSA9IGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRTY2FsZShlbGVtZW50KSA6IGNyZWF0ZUNvb3JkcygxKTtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoICogc2NhbGUueDtcbiAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQgKiBzY2FsZS55O1xuICBjb25zdCB4ID0gbGVmdCAqIHNjYWxlLng7XG4gIGNvbnN0IHkgPSB0b3AgKiBzY2FsZS55O1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tQ2xpcHBpbmdBbmNlc3RvcihlbGVtZW50LCBjbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSkge1xuICBsZXQgcmVjdDtcbiAgaWYgKGNsaXBwaW5nQW5jZXN0b3IgPT09ICd2aWV3cG9ydCcpIHtcbiAgICByZWN0ID0gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KTtcbiAgfSBlbHNlIGlmIChjbGlwcGluZ0FuY2VzdG9yID09PSAnZG9jdW1lbnQnKSB7XG4gICAgcmVjdCA9IGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpO1xuICB9IGVsc2UgaWYgKGlzRWxlbWVudChjbGlwcGluZ0FuY2VzdG9yKSkge1xuICAgIHJlY3QgPSBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdmlzdWFsT2Zmc2V0cyA9IGdldFZpc3VhbE9mZnNldHMoZWxlbWVudCk7XG4gICAgcmVjdCA9IHtcbiAgICAgIC4uLmNsaXBwaW5nQW5jZXN0b3IsXG4gICAgICB4OiBjbGlwcGluZ0FuY2VzdG9yLnggLSB2aXN1YWxPZmZzZXRzLngsXG4gICAgICB5OiBjbGlwcGluZ0FuY2VzdG9yLnkgLSB2aXN1YWxPZmZzZXRzLnlcbiAgICB9O1xuICB9XG4gIHJldHVybiByZWN0VG9DbGllbnRSZWN0KHJlY3QpO1xufVxuZnVuY3Rpb24gaGFzRml4ZWRQb3NpdGlvbkFuY2VzdG9yKGVsZW1lbnQsIHN0b3BOb2RlKSB7XG4gIGNvbnN0IHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAocGFyZW50Tm9kZSA9PT0gc3RvcE5vZGUgfHwgIWlzRWxlbWVudChwYXJlbnROb2RlKSB8fCBpc0xhc3RUcmF2ZXJzYWJsZU5vZGUocGFyZW50Tm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUocGFyZW50Tm9kZSkucG9zaXRpb24gPT09ICdmaXhlZCcgfHwgaGFzRml4ZWRQb3NpdGlvbkFuY2VzdG9yKHBhcmVudE5vZGUsIHN0b3BOb2RlKTtcbn1cblxuLy8gQSBcImNsaXBwaW5nIGFuY2VzdG9yXCIgaXMgYW4gYG92ZXJmbG93YCBlbGVtZW50IHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBjaGlsZCBlbGVtZW50cy4gVGhpcyByZXR1cm5zIGFsbCBjbGlwcGluZyBhbmNlc3RvcnNcbi8vIG9mIHRoZSBnaXZlbiBlbGVtZW50IHVwIHRoZSB0cmVlLlxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdFbGVtZW50QW5jZXN0b3JzKGVsZW1lbnQsIGNhY2hlKSB7XG4gIGNvbnN0IGNhY2hlZFJlc3VsdCA9IGNhY2hlLmdldChlbGVtZW50KTtcbiAgaWYgKGNhY2hlZFJlc3VsdCkge1xuICAgIHJldHVybiBjYWNoZWRSZXN1bHQ7XG4gIH1cbiAgbGV0IHJlc3VsdCA9IGdldE92ZXJmbG93QW5jZXN0b3JzKGVsZW1lbnQsIFtdLCBmYWxzZSkuZmlsdGVyKGVsID0+IGlzRWxlbWVudChlbCkgJiYgZ2V0Tm9kZU5hbWUoZWwpICE9PSAnYm9keScpO1xuICBsZXQgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBudWxsO1xuICBjb25zdCBlbGVtZW50SXNGaXhlZCA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCc7XG4gIGxldCBjdXJyZW50Tm9kZSA9IGVsZW1lbnRJc0ZpeGVkID8gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcbiAgd2hpbGUgKGlzRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgIWlzTGFzdFRyYXZlcnNhYmxlTm9kZShjdXJyZW50Tm9kZSkpIHtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7XG4gICAgY29uc3QgY3VycmVudE5vZGVJc0NvbnRhaW5pbmcgPSBpc0NvbnRhaW5pbmdCbG9jayhjdXJyZW50Tm9kZSk7XG4gICAgaWYgKCFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiBjb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICBjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHNob3VsZERyb3BDdXJyZW50Tm9kZSA9IGVsZW1lbnRJc0ZpeGVkID8gIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmICFjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSA6ICFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiBjb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJyAmJiAhIWN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlICYmIFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmNsdWRlcyhjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZS5wb3NpdGlvbikgfHwgaXNPdmVyZmxvd0VsZW1lbnQoY3VycmVudE5vZGUpICYmICFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiBoYXNGaXhlZFBvc2l0aW9uQW5jZXN0b3IoZWxlbWVudCwgY3VycmVudE5vZGUpO1xuICAgIGlmIChzaG91bGREcm9wQ3VycmVudE5vZGUpIHtcbiAgICAgIC8vIERyb3Agbm9uLWNvbnRhaW5pbmcgYmxvY2tzLlxuICAgICAgcmVzdWx0ID0gcmVzdWx0LmZpbHRlcihhbmNlc3RvciA9PiBhbmNlc3RvciAhPT0gY3VycmVudE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZWNvcmQgbGFzdCBjb250YWluaW5nIGJsb2NrIGZvciBuZXh0IGl0ZXJhdGlvbi5cbiAgICAgIGN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZTtcbiAgICB9XG4gICAgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGN1cnJlbnROb2RlKTtcbiAgfVxuICBjYWNoZS5zZXQoZWxlbWVudCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgYW5jZXN0b3JzLlxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBlbGVtZW50LFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICB9ID0gX3JlZjtcbiAgY29uc3QgZWxlbWVudENsaXBwaW5nQW5jZXN0b3JzID0gYm91bmRhcnkgPT09ICdjbGlwcGluZ0FuY2VzdG9ycycgPyBpc1RvcExheWVyKGVsZW1lbnQpID8gW10gOiBnZXRDbGlwcGluZ0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCwgdGhpcy5fYykgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICBjb25zdCBjbGlwcGluZ0FuY2VzdG9ycyA9IFsuLi5lbGVtZW50Q2xpcHBpbmdBbmNlc3RvcnMsIHJvb3RCb3VuZGFyeV07XG4gIGNvbnN0IGZpcnN0Q2xpcHBpbmdBbmNlc3RvciA9IGNsaXBwaW5nQW5jZXN0b3JzWzBdO1xuICBjb25zdCBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ0FuY2VzdG9ycy5yZWR1Y2UoKGFjY1JlY3QsIGNsaXBwaW5nQW5jZXN0b3IpID0+IHtcbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21DbGlwcGluZ0FuY2VzdG9yKGVsZW1lbnQsIGNsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KTtcbiAgICBhY2NSZWN0LnRvcCA9IG1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBtaW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBtYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbUNsaXBwaW5nQW5jZXN0b3IoZWxlbWVudCwgZmlyc3RDbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSkpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdCxcbiAgICBoZWlnaHQ6IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wLFxuICAgIHg6IGNsaXBwaW5nUmVjdC5sZWZ0LFxuICAgIHk6IGNsaXBwaW5nUmVjdC50b3BcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIGNvbnN0IHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfSA9IGdldENzc0RpbWVuc2lvbnMoZWxlbWVudCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFJlY3RSZWxhdGl2ZVRvT2Zmc2V0UGFyZW50KGVsZW1lbnQsIG9mZnNldFBhcmVudCwgc3RyYXRlZ3kpIHtcbiAgY29uc3QgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCBpc0ZpeGVkID0gc3RyYXRlZ3kgPT09ICdmaXhlZCc7XG4gIGNvbnN0IHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgdHJ1ZSwgaXNGaXhlZCwgb2Zmc2V0UGFyZW50KTtcbiAgbGV0IHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICBjb25zdCBvZmZzZXRzID0gY3JlYXRlQ29vcmRzKDApO1xuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCBpc092ZXJmbG93RWxlbWVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuICAgIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCkge1xuICAgICAgY29uc3Qgb2Zmc2V0UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUsIGlzRml4ZWQsIG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggPSBvZmZzZXRSZWN0LnggKyBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSA9IG9mZnNldFJlY3QueSArIG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgY29uc3QgeCA9IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54O1xuICBjb25zdCB5ID0gcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55O1xuICByZXR1cm4ge1xuICAgIHgsXG4gICAgeSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljUG9zaXRpb25lZChlbGVtZW50KSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJztcbn1cblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChwb2x5ZmlsbCkge1xuICAgIHJldHVybiBwb2x5ZmlsbChlbGVtZW50KTtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59XG5cbi8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCwgcG9seWZpbGwpIHtcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICBpZiAoaXNUb3BMYXllcihlbGVtZW50KSkge1xuICAgIHJldHVybiB3aW47XG4gIH1cbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgbGV0IHN2Z09mZnNldFBhcmVudCA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gICAgd2hpbGUgKHN2Z09mZnNldFBhcmVudCAmJiAhaXNMYXN0VHJhdmVyc2FibGVOb2RlKHN2Z09mZnNldFBhcmVudCkpIHtcbiAgICAgIGlmIChpc0VsZW1lbnQoc3ZnT2Zmc2V0UGFyZW50KSAmJiAhaXNTdGF0aWNQb3NpdGlvbmVkKHN2Z09mZnNldFBhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHN2Z09mZnNldFBhcmVudDtcbiAgICAgIH1cbiAgICAgIHN2Z09mZnNldFBhcmVudCA9IGdldFBhcmVudE5vZGUoc3ZnT2Zmc2V0UGFyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbjtcbiAgfVxuICBsZXQgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCk7XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc1N0YXRpY1Bvc2l0aW9uZWQob2Zmc2V0UGFyZW50KSkge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50LCBwb2x5ZmlsbCk7XG4gIH1cbiAgaWYgKG9mZnNldFBhcmVudCAmJiBpc0xhc3RUcmF2ZXJzYWJsZU5vZGUob2Zmc2V0UGFyZW50KSAmJiBpc1N0YXRpY1Bvc2l0aW9uZWQob2Zmc2V0UGFyZW50KSAmJiAhaXNDb250YWluaW5nQmxvY2sob2Zmc2V0UGFyZW50KSkge1xuICAgIHJldHVybiB3aW47XG4gIH1cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luO1xufVxuXG5jb25zdCBnZXRFbGVtZW50UmVjdHMgPSBhc3luYyBmdW5jdGlvbiAoZGF0YSkge1xuICBjb25zdCBnZXRPZmZzZXRQYXJlbnRGbiA9IHRoaXMuZ2V0T2Zmc2V0UGFyZW50IHx8IGdldE9mZnNldFBhcmVudDtcbiAgY29uc3QgZ2V0RGltZW5zaW9uc0ZuID0gdGhpcy5nZXREaW1lbnNpb25zO1xuICBjb25zdCBmbG9hdGluZ0RpbWVuc2lvbnMgPSBhd2FpdCBnZXREaW1lbnNpb25zRm4oZGF0YS5mbG9hdGluZyk7XG4gIHJldHVybiB7XG4gICAgcmVmZXJlbmNlOiBnZXRSZWN0UmVsYXRpdmVUb09mZnNldFBhcmVudChkYXRhLnJlZmVyZW5jZSwgYXdhaXQgZ2V0T2Zmc2V0UGFyZW50Rm4oZGF0YS5mbG9hdGluZyksIGRhdGEuc3RyYXRlZ3kpLFxuICAgIGZsb2F0aW5nOiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHdpZHRoOiBmbG9hdGluZ0RpbWVuc2lvbnMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGZsb2F0aW5nRGltZW5zaW9ucy5oZWlnaHRcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBpc1JUTChlbGVtZW50KSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG59XG5cbmNvbnN0IHBsYXRmb3JtID0ge1xuICBjb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCxcbiAgZ2V0RG9jdW1lbnRFbGVtZW50LFxuICBnZXRDbGlwcGluZ1JlY3QsXG4gIGdldE9mZnNldFBhcmVudCxcbiAgZ2V0RWxlbWVudFJlY3RzLFxuICBnZXRDbGllbnRSZWN0cyxcbiAgZ2V0RGltZW5zaW9ucyxcbiAgZ2V0U2NhbGUsXG4gIGlzRWxlbWVudCxcbiAgaXNSVExcbn07XG5cbi8vIGh0dHBzOi8vc2FtdGhvci5hdS8yMDIxL29ic2VydmluZy1kb20vXG5mdW5jdGlvbiBvYnNlcnZlTW92ZShlbGVtZW50LCBvbk1vdmUpIHtcbiAgbGV0IGlvID0gbnVsbDtcbiAgbGV0IHRpbWVvdXRJZDtcbiAgY29uc3Qgcm9vdCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICB2YXIgX2lvO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIChfaW8gPSBpbykgPT0gbnVsbCB8fCBfaW8uZGlzY29ubmVjdCgpO1xuICAgIGlvID0gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWZyZXNoKHNraXAsIHRocmVzaG9sZCkge1xuICAgIGlmIChza2lwID09PSB2b2lkIDApIHtcbiAgICAgIHNraXAgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSAxO1xuICAgIH1cbiAgICBjbGVhbnVwKCk7XG4gICAgY29uc3Qge1xuICAgICAgbGVmdCxcbiAgICAgIHRvcCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKCFza2lwKSB7XG4gICAgICBvbk1vdmUoKTtcbiAgICB9XG4gICAgaWYgKCF3aWR0aCB8fCAhaGVpZ2h0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluc2V0VG9wID0gZmxvb3IodG9wKTtcbiAgICBjb25zdCBpbnNldFJpZ2h0ID0gZmxvb3Iocm9vdC5jbGllbnRXaWR0aCAtIChsZWZ0ICsgd2lkdGgpKTtcbiAgICBjb25zdCBpbnNldEJvdHRvbSA9IGZsb29yKHJvb3QuY2xpZW50SGVpZ2h0IC0gKHRvcCArIGhlaWdodCkpO1xuICAgIGNvbnN0IGluc2V0TGVmdCA9IGZsb29yKGxlZnQpO1xuICAgIGNvbnN0IHJvb3RNYXJnaW4gPSAtaW5zZXRUb3AgKyBcInB4IFwiICsgLWluc2V0UmlnaHQgKyBcInB4IFwiICsgLWluc2V0Qm90dG9tICsgXCJweCBcIiArIC1pbnNldExlZnQgKyBcInB4XCI7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHJvb3RNYXJnaW4sXG4gICAgICB0aHJlc2hvbGQ6IG1heCgwLCBtaW4oMSwgdGhyZXNob2xkKSkgfHwgMVxuICAgIH07XG4gICAgbGV0IGlzRmlyc3RVcGRhdGUgPSB0cnVlO1xuICAgIGZ1bmN0aW9uIGhhbmRsZU9ic2VydmUoZW50cmllcykge1xuICAgICAgY29uc3QgcmF0aW8gPSBlbnRyaWVzWzBdLmludGVyc2VjdGlvblJhdGlvO1xuICAgICAgaWYgKHJhdGlvICE9PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgaWYgKCFpc0ZpcnN0VXBkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJhdGlvKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHJlZmVyZW5jZSBpcyBjbGlwcGVkLCB0aGUgcmF0aW8gaXMgMC4gVGhyb3R0bGUgdGhlIHJlZnJlc2hcbiAgICAgICAgICAvLyB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3Agb2YgdXBkYXRlcy5cbiAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlZnJlc2goZmFsc2UsIDFlLTcpO1xuICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnJlc2goZmFsc2UsIHJhdGlvKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXNGaXJzdFVwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIE9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgYSBgZG9jdW1lbnRgIGFzIHRoZSByb290IGFuZCB3aWxsIHRocm93IGFuXG4gICAgLy8gZXJyb3IuXG4gICAgdHJ5IHtcbiAgICAgIGlvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZU9ic2VydmUsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgLy8gSGFuZGxlIDxpZnJhbWU+c1xuICAgICAgICByb290OiByb290Lm93bmVyRG9jdW1lbnRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZU9ic2VydmUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpby5vYnNlcnZlKGVsZW1lbnQpO1xuICB9XG4gIHJlZnJlc2godHJ1ZSk7XG4gIHJldHVybiBjbGVhbnVwO1xufVxuXG4vKipcbiAqIEF1dG9tYXRpY2FsbHkgdXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgd2hlbiBuZWNlc3NhcnkuXG4gKiBTaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiB0aGUgZmxvYXRpbmcgZWxlbWVudCBpcyBtb3VudGVkIG9uIHRoZSBET00gb3JcbiAqIHZpc2libGUgb24gdGhlIHNjcmVlbi5cbiAqIEByZXR1cm5zIGNsZWFudXAgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgaW52b2tlZCB3aGVuIHRoZSBmbG9hdGluZyBlbGVtZW50IGlzXG4gKiByZW1vdmVkIGZyb20gdGhlIERPTSBvciBoaWRkZW4gZnJvbSB0aGUgc2NyZWVuLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2F1dG9VcGRhdGVcbiAqL1xuZnVuY3Rpb24gYXV0b1VwZGF0ZShyZWZlcmVuY2UsIGZsb2F0aW5nLCB1cGRhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBjb25zdCB7XG4gICAgYW5jZXN0b3JTY3JvbGwgPSB0cnVlLFxuICAgIGFuY2VzdG9yUmVzaXplID0gdHJ1ZSxcbiAgICBlbGVtZW50UmVzaXplID0gdHlwZW9mIFJlc2l6ZU9ic2VydmVyID09PSAnZnVuY3Rpb24nLFxuICAgIGxheW91dFNoaWZ0ID0gdHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09PSAnZnVuY3Rpb24nLFxuICAgIGFuaW1hdGlvbkZyYW1lID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHJlZmVyZW5jZUVsID0gdW53cmFwRWxlbWVudChyZWZlcmVuY2UpO1xuICBjb25zdCBhbmNlc3RvcnMgPSBhbmNlc3RvclNjcm9sbCB8fCBhbmNlc3RvclJlc2l6ZSA/IFsuLi4ocmVmZXJlbmNlRWwgPyBnZXRPdmVyZmxvd0FuY2VzdG9ycyhyZWZlcmVuY2VFbCkgOiBbXSksIC4uLmdldE92ZXJmbG93QW5jZXN0b3JzKGZsb2F0aW5nKV0gOiBbXTtcbiAgYW5jZXN0b3JzLmZvckVhY2goYW5jZXN0b3IgPT4ge1xuICAgIGFuY2VzdG9yU2Nyb2xsICYmIGFuY2VzdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGFuY2VzdG9yUmVzaXplICYmIGFuY2VzdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZSk7XG4gIH0pO1xuICBjb25zdCBjbGVhbnVwSW8gPSByZWZlcmVuY2VFbCAmJiBsYXlvdXRTaGlmdCA/IG9ic2VydmVNb3ZlKHJlZmVyZW5jZUVsLCB1cGRhdGUpIDogbnVsbDtcbiAgbGV0IHJlb2JzZXJ2ZUZyYW1lID0gLTE7XG4gIGxldCByZXNpemVPYnNlcnZlciA9IG51bGw7XG4gIGlmIChlbGVtZW50UmVzaXplKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoX3JlZiA9PiB7XG4gICAgICBsZXQgW2ZpcnN0RW50cnldID0gX3JlZjtcbiAgICAgIGlmIChmaXJzdEVudHJ5ICYmIGZpcnN0RW50cnkudGFyZ2V0ID09PSByZWZlcmVuY2VFbCAmJiByZXNpemVPYnNlcnZlcikge1xuICAgICAgICAvLyBQcmV2ZW50IHVwZGF0ZSBsb29wcyB3aGVuIHVzaW5nIHRoZSBgc2l6ZWAgbWlkZGxld2FyZS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5nLXVpL2Zsb2F0aW5nLXVpL2lzc3Vlcy8xNzQwXG4gICAgICAgIHJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZShmbG9hdGluZyk7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJlb2JzZXJ2ZUZyYW1lKTtcbiAgICAgICAgcmVvYnNlcnZlRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHZhciBfcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgICAgKF9yZXNpemVPYnNlcnZlciA9IHJlc2l6ZU9ic2VydmVyKSA9PSBudWxsIHx8IF9yZXNpemVPYnNlcnZlci5vYnNlcnZlKGZsb2F0aW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB1cGRhdGUoKTtcbiAgICB9KTtcbiAgICBpZiAocmVmZXJlbmNlRWwgJiYgIWFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKHJlZmVyZW5jZUVsKTtcbiAgICB9XG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShmbG9hdGluZyk7XG4gIH1cbiAgbGV0IGZyYW1lSWQ7XG4gIGxldCBwcmV2UmVmUmVjdCA9IGFuaW1hdGlvbkZyYW1lID8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZSkgOiBudWxsO1xuICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICBmcmFtZUxvb3AoKTtcbiAgfVxuICBmdW5jdGlvbiBmcmFtZUxvb3AoKSB7XG4gICAgY29uc3QgbmV4dFJlZlJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocmVmZXJlbmNlKTtcbiAgICBpZiAocHJldlJlZlJlY3QgJiYgKG5leHRSZWZSZWN0LnggIT09IHByZXZSZWZSZWN0LnggfHwgbmV4dFJlZlJlY3QueSAhPT0gcHJldlJlZlJlY3QueSB8fCBuZXh0UmVmUmVjdC53aWR0aCAhPT0gcHJldlJlZlJlY3Qud2lkdGggfHwgbmV4dFJlZlJlY3QuaGVpZ2h0ICE9PSBwcmV2UmVmUmVjdC5oZWlnaHQpKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gICAgcHJldlJlZlJlY3QgPSBuZXh0UmVmUmVjdDtcbiAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lTG9vcCk7XG4gIH1cbiAgdXBkYXRlKCk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgdmFyIF9yZXNpemVPYnNlcnZlcjI7XG4gICAgYW5jZXN0b3JzLmZvckVhY2goYW5jZXN0b3IgPT4ge1xuICAgICAgYW5jZXN0b3JTY3JvbGwgJiYgYW5jZXN0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlKTtcbiAgICAgIGFuY2VzdG9yUmVzaXplICYmIGFuY2VzdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZSk7XG4gICAgfSk7XG4gICAgY2xlYW51cElvID09IG51bGwgfHwgY2xlYW51cElvKCk7XG4gICAgKF9yZXNpemVPYnNlcnZlcjIgPSByZXNpemVPYnNlcnZlcikgPT0gbnVsbCB8fCBfcmVzaXplT2JzZXJ2ZXIyLmRpc2Nvbm5lY3QoKTtcbiAgICByZXNpemVPYnNlcnZlciA9IG51bGw7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgd2l0aCBhbiBvYmplY3Qgb2Ygb3ZlcmZsb3cgc2lkZSBvZmZzZXRzIHRoYXQgZGV0ZXJtaW5lIGhvdyBtdWNoIHRoZVxuICogZWxlbWVudCBpcyBvdmVyZmxvd2luZyBhIGdpdmVuIGNsaXBwaW5nIGJvdW5kYXJ5IG9uIGVhY2ggc2lkZS5cbiAqIC0gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgYm91bmRhcnkgYnkgdGhhdCBudW1iZXIgb2YgcGl4ZWxzXG4gKiAtIG5lZ2F0aXZlID0gaG93IG1hbnkgcGl4ZWxzIGxlZnQgYmVmb3JlIGl0IHdpbGwgb3ZlcmZsb3dcbiAqIC0gMCA9IGxpZXMgZmx1c2ggd2l0aCB0aGUgYm91bmRhcnlcbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9kZXRlY3RPdmVyZmxvd1xuICovXG5jb25zdCBkZXRlY3RPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93JDE7XG5cbi8qKlxuICogTW9kaWZpZXMgdGhlIHBsYWNlbWVudCBieSB0cmFuc2xhdGluZyB0aGUgZmxvYXRpbmcgZWxlbWVudCBhbG9uZyB0aGVcbiAqIHNwZWNpZmllZCBheGVzLlxuICogQSBudW1iZXIgKHNob3J0aGFuZCBmb3IgYG1haW5BeGlzYCBvciBkaXN0YW5jZSksIG9yIGFuIGF4ZXMgY29uZmlndXJhdGlvblxuICogb2JqZWN0IG1heSBiZSBwYXNzZWQuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3Mvb2Zmc2V0XG4gKi9cbmNvbnN0IG9mZnNldCA9IG9mZnNldCQxO1xuXG4vKipcbiAqIE9wdGltaXplcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCBieSBjaG9vc2luZyB0aGUgcGxhY2VtZW50XG4gKiB0aGF0IGhhcyB0aGUgbW9zdCBzcGFjZSBhdmFpbGFibGUgYXV0b21hdGljYWxseSwgd2l0aG91dCBuZWVkaW5nIHRvIHNwZWNpZnkgYVxuICogcHJlZmVycmVkIHBsYWNlbWVudC4gQWx0ZXJuYXRpdmUgdG8gYGZsaXBgLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2F1dG9QbGFjZW1lbnRcbiAqL1xuY29uc3QgYXV0b1BsYWNlbWVudCA9IGF1dG9QbGFjZW1lbnQkMTtcblxuLyoqXG4gKiBPcHRpbWl6ZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYnkgc2hpZnRpbmcgaXQgaW4gb3JkZXIgdG9cbiAqIGtlZXAgaXQgaW4gdmlldyB3aGVuIGl0IHdpbGwgb3ZlcmZsb3cgdGhlIGNsaXBwaW5nIGJvdW5kYXJ5LlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL3NoaWZ0XG4gKi9cbmNvbnN0IHNoaWZ0ID0gc2hpZnQkMTtcblxuLyoqXG4gKiBPcHRpbWl6ZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYnkgZmxpcHBpbmcgdGhlIGBwbGFjZW1lbnRgXG4gKiBpbiBvcmRlciB0byBrZWVwIGl0IGluIHZpZXcgd2hlbiB0aGUgcHJlZmVycmVkIHBsYWNlbWVudChzKSB3aWxsIG92ZXJmbG93IHRoZVxuICogY2xpcHBpbmcgYm91bmRhcnkuIEFsdGVybmF0aXZlIHRvIGBhdXRvUGxhY2VtZW50YC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9mbGlwXG4gKi9cbmNvbnN0IGZsaXAgPSBmbGlwJDE7XG5cbi8qKlxuICogUHJvdmlkZXMgZGF0YSB0aGF0IGFsbG93cyB5b3UgdG8gY2hhbmdlIHRoZSBzaXplIG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IOKAlFxuICogZm9yIGluc3RhbmNlLCBwcmV2ZW50IGl0IGZyb20gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIGJvdW5kYXJ5IG9yIG1hdGNoIHRoZVxuICogd2lkdGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL3NpemVcbiAqL1xuY29uc3Qgc2l6ZSA9IHNpemUkMTtcblxuLyoqXG4gKiBQcm92aWRlcyBkYXRhIHRvIGhpZGUgdGhlIGZsb2F0aW5nIGVsZW1lbnQgaW4gYXBwbGljYWJsZSBzaXR1YXRpb25zLCBzdWNoIGFzXG4gKiB3aGVuIGl0IGlzIG5vdCBpbiB0aGUgc2FtZSBjbGlwcGluZyBjb250ZXh0IGFzIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9oaWRlXG4gKi9cbmNvbnN0IGhpZGUgPSBoaWRlJDE7XG5cbi8qKlxuICogUHJvdmlkZXMgZGF0YSB0byBwb3NpdGlvbiBhbiBpbm5lciBlbGVtZW50IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IHNvIHRoYXQgaXRcbiAqIGFwcGVhcnMgY2VudGVyZWQgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2Fycm93XG4gKi9cbmNvbnN0IGFycm93ID0gYXJyb3ckMTtcblxuLyoqXG4gKiBQcm92aWRlcyBpbXByb3ZlZCBwb3NpdGlvbmluZyBmb3IgaW5saW5lIHJlZmVyZW5jZSBlbGVtZW50cyB0aGF0IGNhbiBzcGFuXG4gKiBvdmVyIG11bHRpcGxlIGxpbmVzLCBzdWNoIGFzIGh5cGVybGlua3Mgb3IgcmFuZ2Ugc2VsZWN0aW9ucy5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9pbmxpbmVcbiAqL1xuY29uc3QgaW5saW5lID0gaW5saW5lJDE7XG5cbi8qKlxuICogQnVpbHQtaW4gYGxpbWl0ZXJgIHRoYXQgd2lsbCBzdG9wIGBzaGlmdCgpYCBhdCBhIGNlcnRhaW4gcG9pbnQuXG4gKi9cbmNvbnN0IGxpbWl0U2hpZnQgPSBsaW1pdFNoaWZ0JDE7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGB4YCBhbmQgYHlgIGNvb3JkaW5hdGVzIHRoYXQgd2lsbCBwbGFjZSB0aGUgZmxvYXRpbmcgZWxlbWVudFxuICogbmV4dCB0byBhIGdpdmVuIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5jb25zdCBjb21wdXRlUG9zaXRpb24gPSAocmVmZXJlbmNlLCBmbG9hdGluZywgb3B0aW9ucykgPT4ge1xuICAvLyBUaGlzIGNhY2hlcyB0aGUgZXhwZW5zaXZlIGBnZXRDbGlwcGluZ0VsZW1lbnRBbmNlc3RvcnNgIGZ1bmN0aW9uIHNvIHRoYXRcbiAgLy8gbXVsdGlwbGUgbGlmZWN5Y2xlIHJlc2V0cyByZS11c2UgdGhlIHNhbWUgcmVzdWx0LiBJdCBvbmx5IGxpdmVzIGZvciBhXG4gIC8vIHNpbmdsZSBjYWxsLiBJZiBvdGhlciBmdW5jdGlvbnMgYmVjb21lIGV4cGVuc2l2ZSwgd2UgY2FuIGFkZCB0aGVtIGFzIHdlbGwuXG4gIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuICBjb25zdCBtZXJnZWRPcHRpb25zID0ge1xuICAgIHBsYXRmb3JtLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgY29uc3QgcGxhdGZvcm1XaXRoQ2FjaGUgPSB7XG4gICAgLi4ubWVyZ2VkT3B0aW9ucy5wbGF0Zm9ybSxcbiAgICBfYzogY2FjaGVcbiAgfTtcbiAgcmV0dXJuIGNvbXB1dGVQb3NpdGlvbiQxKHJlZmVyZW5jZSwgZmxvYXRpbmcsIHtcbiAgICAuLi5tZXJnZWRPcHRpb25zLFxuICAgIHBsYXRmb3JtOiBwbGF0Zm9ybVdpdGhDYWNoZVxuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFycm93LCBhdXRvUGxhY2VtZW50LCBhdXRvVXBkYXRlLCBjb21wdXRlUG9zaXRpb24sIGRldGVjdE92ZXJmbG93LCBmbGlwLCBoaWRlLCBpbmxpbmUsIGxpbWl0U2hpZnQsIG9mZnNldCwgcGxhdGZvcm0sIHNoaWZ0LCBzaXplIH07XG4iLCJpbXBvcnQge1xuICB1c2VMb2NhbGVcbn0gZnJvbSBcIi4vTFI3TEJKTjMuanN4XCI7XG5pbXBvcnQge1xuICBQb2x5bW9ycGhpY1xufSBmcm9tIFwiLi9FNzNQS0ZCMy5qc3hcIjtcblxuLy8gc3JjL3BvcHBlci9wb3BwZXItYXJyb3cudHN4XG5pbXBvcnQgeyBnZXRXaW5kb3csIG1lcmdlRGVmYXVsdFByb3BzLCBtZXJnZVJlZnMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUVmZmVjdCxcbiAgY3JlYXRlU2lnbmFsLFxuICBzcGxpdFByb3BzXG59IGZyb20gXCJzb2xpZC1qc1wiO1xuXG4vLyBzcmMvcG9wcGVyL3BvcHBlci1jb250ZXh0LnRzeFxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gXCJzb2xpZC1qc1wiO1xudmFyIFBvcHBlckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5mdW5jdGlvbiB1c2VQb3BwZXJDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChQb3BwZXJDb250ZXh0KTtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW2tvYmFsdGVdOiBgdXNlUG9wcGVyQ29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBQb3BwZXJgIGNvbXBvbmVudFwiXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cblxuLy8gc3JjL3BvcHBlci9wb3BwZXItYXJyb3cudHN4XG52YXIgREVGQVVMVF9TSVpFID0gMzA7XG52YXIgSEFMRl9ERUZBVUxUX1NJWkUgPSBERUZBVUxUX1NJWkUgLyAyO1xudmFyIFJPVEFUSU9OX0RFRyA9IHtcbiAgdG9wOiAxODAsXG4gIHJpZ2h0OiAtOTAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogOTBcbn07XG52YXIgQVJST1dfUEFUSCA9IFwiTTIzLDI3LjhjMS4xLDEuMiwzLjQsMi4yLDUsMi4yaDJIMGgyYzEuNywwLDMuOS0xLDUtMi4ybDYuNi03LjJjMC43LTAuOCwyLTAuOCwyLjcsMEwyMywyNy44TDIzLDI3Ljh6XCI7XG5mdW5jdGlvbiBQb3BwZXJBcnJvdyhwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlUG9wcGVyQ29udGV4dCgpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKFxuICAgIHtcbiAgICAgIHNpemU6IERFRkFVTFRfU0laRVxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhtZXJnZWRQcm9wcywgW1wicmVmXCIsIFwic3R5bGVcIiwgXCJzaXplXCJdKTtcbiAgY29uc3QgZGlyID0gKCkgPT4gY29udGV4dC5jdXJyZW50UGxhY2VtZW50KCkuc3BsaXQoXCItXCIpWzBdO1xuICBjb25zdCBjb250ZW50U3R5bGUgPSBjcmVhdGVDb21wdXRlZFN0eWxlKGNvbnRleHQuY29udGVudFJlZik7XG4gIGNvbnN0IGZpbGwgPSAoKSA9PiBjb250ZW50U3R5bGUoKT8uZ2V0UHJvcGVydHlWYWx1ZShcImJhY2tncm91bmQtY29sb3JcIikgfHwgXCJub25lXCI7XG4gIGNvbnN0IHN0cm9rZSA9ICgpID0+IGNvbnRlbnRTdHlsZSgpPy5nZXRQcm9wZXJ0eVZhbHVlKGBib3JkZXItJHtkaXIoKX0tY29sb3JgKSB8fCBcIm5vbmVcIjtcbiAgY29uc3QgYm9yZGVyV2lkdGggPSAoKSA9PiBjb250ZW50U3R5bGUoKT8uZ2V0UHJvcGVydHlWYWx1ZShgYm9yZGVyLSR7ZGlyKCl9LXdpZHRoYCkgfHwgXCIwcHhcIjtcbiAgY29uc3Qgc3Ryb2tlV2lkdGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGJvcmRlcldpZHRoKCkpICogMiAqIChERUZBVUxUX1NJWkUgLyBsb2NhbC5zaXplKTtcbiAgfTtcbiAgY29uc3Qgcm90YXRlID0gKCkgPT4ge1xuICAgIHJldHVybiBgcm90YXRlKCR7Uk9UQVRJT05fREVHW2RpcigpXX0gJHtIQUxGX0RFRkFVTFRfU0laRX0gJHtIQUxGX0RFRkFVTFRfU0laRX0pIHRyYW5zbGF0ZSgwIDIpYDtcbiAgfTtcbiAgcmV0dXJuIDxQb2x5bW9ycGhpY1xuICAgIGFzPVwiZGl2XCJcbiAgICByZWY9e21lcmdlUmVmcyhjb250ZXh0LnNldEFycm93UmVmLCBsb2NhbC5yZWYpfVxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgc3R5bGU9e3tcbiAgICAgIC8vIHNlcnZlciBzaWRlIHJlbmRlcmluZ1xuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgIFwiZm9udC1zaXplXCI6IGAke2xvY2FsLnNpemV9cHhgLFxuICAgICAgd2lkdGg6IFwiMWVtXCIsXG4gICAgICBoZWlnaHQ6IFwiMWVtXCIsXG4gICAgICBcInBvaW50ZXItZXZlbnRzXCI6IFwibm9uZVwiLFxuICAgICAgZmlsbDogZmlsbCgpLFxuICAgICAgc3Ryb2tlOiBzdHJva2UoKSxcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IHN0cm9rZVdpZHRoKCksXG4gICAgICAuLi5sb2NhbC5zdHlsZVxuICAgIH19XG4gICAgey4uLm90aGVyc31cbiAgPlxuICAgIHtcbiAgICAgIC8qIGJpb21lLWlnbm9yZSBsaW50L2ExMXkvbm9TdmdXaXRob3V0VGl0bGU6IGFyaWEgaGlkZGVuICovXG4gICAgfVxuICAgIDxzdmdcbiAgICAgIGRpc3BsYXk9XCJibG9ja1wiXG4gICAgICB2aWV3Qm94PXtgMCAwICR7REVGQVVMVF9TSVpFfSAke0RFRkFVTFRfU0laRX1gfVxuICAgICAgc3R5bGU9XCJ0cmFuc2Zvcm06c2NhbGUoMS4wMilcIlxuICAgID48ZyB0cmFuc2Zvcm09e3JvdGF0ZSgpfT5cbiAgICAgIDxwYXRoIGZpbGw9XCJub25lXCIgZD17QVJST1dfUEFUSH0gLz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIm5vbmVcIiBkPXtBUlJPV19QQVRIfSAvPlxuICAgIDwvZz48L3N2Zz5cbiAgPC9Qb2x5bW9ycGhpYz47XG59XG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgY29uc3QgW3N0eWxlLCBzZXRTdHlsZV0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbCA9IGVsZW1lbnQoKTtcbiAgICBlbCAmJiBzZXRTdHlsZShnZXRXaW5kb3coZWwpLmdldENvbXB1dGVkU3R5bGUoZWwpKTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxuLy8gc3JjL3BvcHBlci9wb3BwZXItcG9zaXRpb25lci50c3hcbmltcG9ydCB7IG1lcmdlUmVmcyBhcyBtZXJnZVJlZnMyIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHMyIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5mdW5jdGlvbiBQb3BwZXJQb3NpdGlvbmVyKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VQb3BwZXJDb250ZXh0KCk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMyKHByb3BzLCBbXG4gICAgXCJyZWZcIixcbiAgICBcInN0eWxlXCJcbiAgXSk7XG4gIHJldHVybiA8UG9seW1vcnBoaWNcbiAgICBhcz1cImRpdlwiXG4gICAgcmVmPXttZXJnZVJlZnMyKGNvbnRleHQuc2V0UG9zaXRpb25lclJlZiwgbG9jYWwucmVmKX1cbiAgICBkYXRhLXBvcHBlci1wb3NpdGlvbmVyPVwiXCJcbiAgICBzdHlsZT17e1xuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBcIm1pbi13aWR0aFwiOiBcIm1heC1jb250ZW50XCIsXG4gICAgICAuLi5sb2NhbC5zdHlsZVxuICAgIH19XG4gICAgey4uLm90aGVyc31cbiAgLz47XG59XG5cbi8vIHNyYy9wb3BwZXIvcG9wcGVyLXJvb3QudHN4XG5pbXBvcnQge1xuICBhcnJvdyxcbiAgYXV0b1VwZGF0ZSxcbiAgY29tcHV0ZVBvc2l0aW9uLFxuICBmbGlwLFxuICBoaWRlLFxuICBvZmZzZXQsXG4gIHBsYXRmb3JtLFxuICBzaGlmdCxcbiAgc2l6ZVxufSBmcm9tIFwiQGZsb2F0aW5nLXVpL2RvbVwiO1xuaW1wb3J0IHsgbWVyZ2VEZWZhdWx0UHJvcHMgYXMgbWVyZ2VEZWZhdWx0UHJvcHMyIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQge1xuICBjcmVhdGVFZmZlY3QgYXMgY3JlYXRlRWZmZWN0MixcbiAgY3JlYXRlU2lnbmFsIGFzIGNyZWF0ZVNpZ25hbDIsXG4gIG9uQ2xlYW51cFxufSBmcm9tIFwic29saWQtanNcIjtcblxuLy8gc3JjL3BvcHBlci91dGlscy50c1xuZnVuY3Rpb24gY3JlYXRlRE9NUmVjdChhbmNob3JSZWN0KSB7XG4gIGNvbnN0IHsgeCA9IDAsIHkgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAgfSA9IGFuY2hvclJlY3QgPz8ge307XG4gIGlmICh0eXBlb2YgRE9NUmVjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIG5ldyBET01SZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICB9XG4gIGNvbnN0IHJlY3QgPSB7XG4gICAgeCxcbiAgICB5LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgbGVmdDogeFxuICB9O1xuICByZXR1cm4geyAuLi5yZWN0LCB0b0pTT046ICgpID0+IHJlY3QgfTtcbn1cbmZ1bmN0aW9uIGdldEFuY2hvckVsZW1lbnQoYW5jaG9yLCBnZXRBbmNob3JSZWN0KSB7XG4gIGNvbnN0IGNvbnRleHRFbGVtZW50ID0gYW5jaG9yO1xuICByZXR1cm4ge1xuICAgIGNvbnRleHRFbGVtZW50LFxuICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdDogKCkgPT4ge1xuICAgICAgY29uc3QgYW5jaG9yUmVjdCA9IGdldEFuY2hvclJlY3QoYW5jaG9yKTtcbiAgICAgIGlmIChhbmNob3JSZWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVET01SZWN0KGFuY2hvclJlY3QpO1xuICAgICAgfVxuICAgICAgaWYgKGFuY2hvcikge1xuICAgICAgICByZXR1cm4gYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZURPTVJlY3QoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpc1ZhbGlkUGxhY2VtZW50KGZsaXAyKSB7XG4gIHJldHVybiAvXig/OnRvcHxib3R0b218bGVmdHxyaWdodCkoPzotKD86c3RhcnR8ZW5kKSk/JC8udGVzdChmbGlwMik7XG59XG52YXIgUkVWRVJTRV9CQVNFX1BMQUNFTUVOVCA9IHtcbiAgdG9wOiBcImJvdHRvbVwiLFxuICByaWdodDogXCJsZWZ0XCIsXG4gIGJvdHRvbTogXCJ0b3BcIixcbiAgbGVmdDogXCJyaWdodFwiXG59O1xuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luKHBsYWNlbWVudCwgcmVhZGluZ0RpcmVjdGlvbikge1xuICBjb25zdCBbYmFzZVBsYWNlbWVudCwgYWxpZ25tZW50XSA9IHBsYWNlbWVudC5zcGxpdChcIi1cIik7XG4gIGNvbnN0IHJldmVyc2VQbGFjZW1lbnQgPSBSRVZFUlNFX0JBU0VfUExBQ0VNRU5UW2Jhc2VQbGFjZW1lbnRdO1xuICBpZiAoIWFsaWdubWVudCkge1xuICAgIHJldHVybiBgJHtyZXZlcnNlUGxhY2VtZW50fSBjZW50ZXJgO1xuICB9XG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSBcImxlZnRcIiB8fCBiYXNlUGxhY2VtZW50ID09PSBcInJpZ2h0XCIpIHtcbiAgICByZXR1cm4gYCR7cmV2ZXJzZVBsYWNlbWVudH0gJHthbGlnbm1lbnQgPT09IFwic3RhcnRcIiA/IFwidG9wXCIgOiBcImJvdHRvbVwifWA7XG4gIH1cbiAgaWYgKGFsaWdubWVudCA9PT0gXCJzdGFydFwiKSB7XG4gICAgcmV0dXJuIGAke3JldmVyc2VQbGFjZW1lbnR9ICR7cmVhZGluZ0RpcmVjdGlvbiA9PT0gXCJydGxcIiA/IFwicmlnaHRcIiA6IFwibGVmdFwifWA7XG4gIH1cbiAgcmV0dXJuIGAke3JldmVyc2VQbGFjZW1lbnR9ICR7cmVhZGluZ0RpcmVjdGlvbiA9PT0gXCJydGxcIiA/IFwibGVmdFwiIDogXCJyaWdodFwifWA7XG59XG5cbi8vIHNyYy9wb3BwZXIvcG9wcGVyLXJvb3QudHN4XG5mdW5jdGlvbiBQb3BwZXJSb290KHByb3BzKSB7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMyKFxuICAgIHtcbiAgICAgIGdldEFuY2hvclJlY3Q6IChhbmNob3IpID0+IGFuY2hvcj8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tXCIsXG4gICAgICBndXR0ZXI6IDAsXG4gICAgICBzaGlmdDogMCxcbiAgICAgIGZsaXA6IHRydWUsXG4gICAgICBzbGlkZTogdHJ1ZSxcbiAgICAgIG92ZXJsYXA6IGZhbHNlLFxuICAgICAgc2FtZVdpZHRoOiBmYWxzZSxcbiAgICAgIGZpdFZpZXdwb3J0OiBmYWxzZSxcbiAgICAgIGhpZGVXaGVuRGV0YWNoZWQ6IGZhbHNlLFxuICAgICAgZGV0YWNoZWRQYWRkaW5nOiAwLFxuICAgICAgYXJyb3dQYWRkaW5nOiA0LFxuICAgICAgb3ZlcmZsb3dQYWRkaW5nOiA4XG4gICAgfSxcbiAgICBwcm9wc1xuICApO1xuICBjb25zdCBbcG9zaXRpb25lclJlZiwgc2V0UG9zaXRpb25lclJlZl0gPSBjcmVhdGVTaWduYWwyKCk7XG4gIGNvbnN0IFthcnJvd1JlZiwgc2V0QXJyb3dSZWZdID0gY3JlYXRlU2lnbmFsMigpO1xuICBjb25zdCBbY3VycmVudFBsYWNlbWVudCwgc2V0Q3VycmVudFBsYWNlbWVudF0gPSBjcmVhdGVTaWduYWwyKFxuICAgIG1lcmdlZFByb3BzLnBsYWNlbWVudFxuICApO1xuICBjb25zdCBhbmNob3JSZWYgPSAoKSA9PiBnZXRBbmNob3JFbGVtZW50KG1lcmdlZFByb3BzLmFuY2hvclJlZj8uKCksIG1lcmdlZFByb3BzLmdldEFuY2hvclJlY3QpO1xuICBjb25zdCB7IGRpcmVjdGlvbiB9ID0gdXNlTG9jYWxlKCk7XG4gIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgIGNvbnN0IHJlZmVyZW5jZUVsID0gYW5jaG9yUmVmKCk7XG4gICAgY29uc3QgZmxvYXRpbmdFbCA9IHBvc2l0aW9uZXJSZWYoKTtcbiAgICBjb25zdCBhcnJvd0VsID0gYXJyb3dSZWYoKTtcbiAgICBpZiAoIXJlZmVyZW5jZUVsIHx8ICFmbG9hdGluZ0VsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFycm93T2Zmc2V0ID0gKGFycm93RWw/LmNsaWVudEhlaWdodCB8fCAwKSAvIDI7XG4gICAgY29uc3QgZmluYWxHdXR0ZXIgPSB0eXBlb2YgbWVyZ2VkUHJvcHMuZ3V0dGVyID09PSBcIm51bWJlclwiID8gbWVyZ2VkUHJvcHMuZ3V0dGVyICsgYXJyb3dPZmZzZXQgOiBtZXJnZWRQcm9wcy5ndXR0ZXIgPz8gYXJyb3dPZmZzZXQ7XG4gICAgZmxvYXRpbmdFbC5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgIFwiLS1rYi1wb3BwZXItY29udGVudC1vdmVyZmxvdy1wYWRkaW5nXCIsXG4gICAgICBgJHttZXJnZWRQcm9wcy5vdmVyZmxvd1BhZGRpbmd9cHhgXG4gICAgKTtcbiAgICByZWZlcmVuY2VFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBtaWRkbGV3YXJlID0gW1xuICAgICAgLy8gaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9vZmZzZXRcbiAgICAgIG9mZnNldCgoeyBwbGFjZW1lbnQgfSkgPT4ge1xuICAgICAgICBjb25zdCBoYXNBbGlnbm1lbnQgPSAhIXBsYWNlbWVudC5zcGxpdChcIi1cIilbMV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWFpbkF4aXM6IGZpbmFsR3V0dGVyLFxuICAgICAgICAgIGNyb3NzQXhpczogIWhhc0FsaWdubWVudCA/IG1lcmdlZFByb3BzLnNoaWZ0IDogdm9pZCAwLFxuICAgICAgICAgIGFsaWdubWVudEF4aXM6IG1lcmdlZFByb3BzLnNoaWZ0XG4gICAgICAgIH07XG4gICAgICB9KVxuICAgIF07XG4gICAgaWYgKG1lcmdlZFByb3BzLmZsaXAgIT09IGZhbHNlKSB7XG4gICAgICBjb25zdCBmYWxsYmFja1BsYWNlbWVudHMgPSB0eXBlb2YgbWVyZ2VkUHJvcHMuZmxpcCA9PT0gXCJzdHJpbmdcIiA/IG1lcmdlZFByb3BzLmZsaXAuc3BsaXQoXCIgXCIpIDogdm9pZCAwO1xuICAgICAgaWYgKGZhbGxiYWNrUGxhY2VtZW50cyAhPT0gdm9pZCAwICYmICFmYWxsYmFja1BsYWNlbWVudHMuZXZlcnkoaXNWYWxpZFBsYWNlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGZsaXBgIGV4cGVjdHMgYSBzcGFjZWQtZGVsaW1pdGVkIGxpc3Qgb2YgcGxhY2VtZW50c1wiKTtcbiAgICAgIH1cbiAgICAgIG1pZGRsZXdhcmUucHVzaChcbiAgICAgICAgZmxpcCh7XG4gICAgICAgICAgcGFkZGluZzogbWVyZ2VkUHJvcHMub3ZlcmZsb3dQYWRkaW5nLFxuICAgICAgICAgIGZhbGxiYWNrUGxhY2VtZW50c1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1lcmdlZFByb3BzLnNsaWRlIHx8IG1lcmdlZFByb3BzLm92ZXJsYXApIHtcbiAgICAgIG1pZGRsZXdhcmUucHVzaChcbiAgICAgICAgc2hpZnQoe1xuICAgICAgICAgIG1haW5BeGlzOiBtZXJnZWRQcm9wcy5zbGlkZSxcbiAgICAgICAgICBjcm9zc0F4aXM6IG1lcmdlZFByb3BzLm92ZXJsYXAsXG4gICAgICAgICAgcGFkZGluZzogbWVyZ2VkUHJvcHMub3ZlcmZsb3dQYWRkaW5nXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBtaWRkbGV3YXJlLnB1c2goXG4gICAgICBzaXplKHtcbiAgICAgICAgcGFkZGluZzogbWVyZ2VkUHJvcHMub3ZlcmZsb3dQYWRkaW5nLFxuICAgICAgICBhcHBseSh7IGF2YWlsYWJsZVdpZHRoLCBhdmFpbGFibGVIZWlnaHQsIHJlY3RzIH0pIHtcbiAgICAgICAgICBjb25zdCByZWZlcmVuY2VXaWR0aCA9IE1hdGgucm91bmQocmVjdHMucmVmZXJlbmNlLndpZHRoKTtcbiAgICAgICAgICBhdmFpbGFibGVXaWR0aCA9IE1hdGguZmxvb3IoYXZhaWxhYmxlV2lkdGgpO1xuICAgICAgICAgIGF2YWlsYWJsZUhlaWdodCA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0KTtcbiAgICAgICAgICBmbG9hdGluZ0VsLnN0eWxlLnNldFByb3BlcnR5KFxuICAgICAgICAgICAgXCItLWtiLXBvcHBlci1hbmNob3Itd2lkdGhcIixcbiAgICAgICAgICAgIGAke3JlZmVyZW5jZVdpZHRofXB4YFxuICAgICAgICAgICk7XG4gICAgICAgICAgZmxvYXRpbmdFbC5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgIFwiLS1rYi1wb3BwZXItY29udGVudC1hdmFpbGFibGUtd2lkdGhcIixcbiAgICAgICAgICAgIGAke2F2YWlsYWJsZVdpZHRofXB4YFxuICAgICAgICAgICk7XG4gICAgICAgICAgZmxvYXRpbmdFbC5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgIFwiLS1rYi1wb3BwZXItY29udGVudC1hdmFpbGFibGUtaGVpZ2h0XCIsXG4gICAgICAgICAgICBgJHthdmFpbGFibGVIZWlnaHR9cHhgXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAobWVyZ2VkUHJvcHMuc2FtZVdpZHRoKSB7XG4gICAgICAgICAgICBmbG9hdGluZ0VsLnN0eWxlLndpZHRoID0gYCR7cmVmZXJlbmNlV2lkdGh9cHhgO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWVyZ2VkUHJvcHMuZml0Vmlld3BvcnQpIHtcbiAgICAgICAgICAgIGZsb2F0aW5nRWwuc3R5bGUubWF4V2lkdGggPSBgJHthdmFpbGFibGVXaWR0aH1weGA7XG4gICAgICAgICAgICBmbG9hdGluZ0VsLnN0eWxlLm1heEhlaWdodCA9IGAke2F2YWlsYWJsZUhlaWdodH1weGA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gICAgaWYgKG1lcmdlZFByb3BzLmhpZGVXaGVuRGV0YWNoZWQpIHtcbiAgICAgIG1pZGRsZXdhcmUucHVzaChoaWRlKHsgcGFkZGluZzogbWVyZ2VkUHJvcHMuZGV0YWNoZWRQYWRkaW5nIH0pKTtcbiAgICB9XG4gICAgaWYgKGFycm93RWwpIHtcbiAgICAgIG1pZGRsZXdhcmUucHVzaChcbiAgICAgICAgYXJyb3coeyBlbGVtZW50OiBhcnJvd0VsLCBwYWRkaW5nOiBtZXJnZWRQcm9wcy5hcnJvd1BhZGRpbmcgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHBvcyA9IGF3YWl0IGNvbXB1dGVQb3NpdGlvbihyZWZlcmVuY2VFbCwgZmxvYXRpbmdFbCwge1xuICAgICAgcGxhY2VtZW50OiBtZXJnZWRQcm9wcy5wbGFjZW1lbnQsXG4gICAgICBzdHJhdGVneTogXCJhYnNvbHV0ZVwiLFxuICAgICAgbWlkZGxld2FyZSxcbiAgICAgIHBsYXRmb3JtOiB7XG4gICAgICAgIC4uLnBsYXRmb3JtLFxuICAgICAgICBpc1JUTDogKCkgPT4gZGlyZWN0aW9uKCkgPT09IFwicnRsXCJcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZXRDdXJyZW50UGxhY2VtZW50KHBvcy5wbGFjZW1lbnQpO1xuICAgIG1lcmdlZFByb3BzLm9uQ3VycmVudFBsYWNlbWVudENoYW5nZT8uKHBvcy5wbGFjZW1lbnQpO1xuICAgIGlmICghZmxvYXRpbmdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmbG9hdGluZ0VsLnN0eWxlLnNldFByb3BlcnR5KFxuICAgICAgXCItLWtiLXBvcHBlci1jb250ZW50LXRyYW5zZm9ybS1vcmlnaW5cIixcbiAgICAgIGdldFRyYW5zZm9ybU9yaWdpbihwb3MucGxhY2VtZW50LCBkaXJlY3Rpb24oKSlcbiAgICApO1xuICAgIGNvbnN0IHggPSBNYXRoLnJvdW5kKHBvcy54KTtcbiAgICBjb25zdCB5ID0gTWF0aC5yb3VuZChwb3MueSk7XG4gICAgbGV0IHZpc2liaWxpdHk7XG4gICAgaWYgKG1lcmdlZFByb3BzLmhpZGVXaGVuRGV0YWNoZWQpIHtcbiAgICAgIHZpc2liaWxpdHkgPSBwb3MubWlkZGxld2FyZURhdGEuaGlkZT8ucmVmZXJlbmNlSGlkZGVuID8gXCJoaWRkZW5cIiA6IFwidmlzaWJsZVwiO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKGZsb2F0aW5nRWwuc3R5bGUsIHtcbiAgICAgIHRvcDogXCIwXCIsXG4gICAgICBsZWZ0OiBcIjBcIixcbiAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAwKWAsXG4gICAgICB2aXNpYmlsaXR5XG4gICAgfSk7XG4gICAgaWYgKGFycm93RWwgJiYgcG9zLm1pZGRsZXdhcmVEYXRhLmFycm93KSB7XG4gICAgICBjb25zdCB7IHg6IGFycm93WCwgeTogYXJyb3dZIH0gPSBwb3MubWlkZGxld2FyZURhdGEuYXJyb3c7XG4gICAgICBjb25zdCBkaXIgPSBwb3MucGxhY2VtZW50LnNwbGl0KFwiLVwiKVswXTtcbiAgICAgIE9iamVjdC5hc3NpZ24oYXJyb3dFbC5zdHlsZSwge1xuICAgICAgICBsZWZ0OiBhcnJvd1ggIT0gbnVsbCA/IGAke2Fycm93WH1weGAgOiBcIlwiLFxuICAgICAgICB0b3A6IGFycm93WSAhPSBudWxsID8gYCR7YXJyb3dZfXB4YCA6IFwiXCIsXG4gICAgICAgIFtkaXJdOiBcIjEwMCVcIlxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGNyZWF0ZUVmZmVjdDIoKCkgPT4ge1xuICAgIGNvbnN0IHJlZmVyZW5jZUVsID0gYW5jaG9yUmVmKCk7XG4gICAgY29uc3QgZmxvYXRpbmdFbCA9IHBvc2l0aW9uZXJSZWYoKTtcbiAgICBpZiAoIXJlZmVyZW5jZUVsIHx8ICFmbG9hdGluZ0VsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNsZWFudXBBdXRvVXBkYXRlID0gYXV0b1VwZGF0ZShcbiAgICAgIHJlZmVyZW5jZUVsLFxuICAgICAgZmxvYXRpbmdFbCxcbiAgICAgIHVwZGF0ZVBvc2l0aW9uLFxuICAgICAge1xuICAgICAgICAvLyBKU0RPTSBkb2Vzbid0IHN1cHBvcnQgUmVzaXplT2JzZXJ2ZXJcbiAgICAgICAgZWxlbWVudFJlc2l6ZTogdHlwZW9mIFJlc2l6ZU9ic2VydmVyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgIH1cbiAgICApO1xuICAgIG9uQ2xlYW51cChjbGVhbnVwQXV0b1VwZGF0ZSk7XG4gIH0pO1xuICBjcmVhdGVFZmZlY3QyKCgpID0+IHtcbiAgICBjb25zdCBwb3NpdGlvbmVyID0gcG9zaXRpb25lclJlZigpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBtZXJnZWRQcm9wcy5jb250ZW50UmVmPy4oKTtcbiAgICBpZiAoIXBvc2l0aW9uZXIgfHwgIWNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgcG9zaXRpb25lci5zdHlsZS56SW5kZXggPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRlbnQpLnpJbmRleDtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgY3VycmVudFBsYWNlbWVudCxcbiAgICBjb250ZW50UmVmOiAoKSA9PiBtZXJnZWRQcm9wcy5jb250ZW50UmVmPy4oKSxcbiAgICBzZXRQb3NpdGlvbmVyUmVmLFxuICAgIHNldEFycm93UmVmXG4gIH07XG4gIHJldHVybiA8UG9wcGVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+e21lcmdlZFByb3BzLmNoaWxkcmVufTwvUG9wcGVyQ29udGV4dC5Qcm92aWRlcj47XG59XG5cbi8vIHNyYy9wb3BwZXIvaW5kZXgudHN4XG52YXIgUG9wcGVyID0gT2JqZWN0LmFzc2lnbihQb3BwZXJSb290LCB7XG4gIEFycm93OiBQb3BwZXJBcnJvdyxcbiAgQ29udGV4dDogUG9wcGVyQ29udGV4dCxcbiAgdXNlUG9wcGVyQ29udGV4dCxcbiAgUG9zaXRpb25lcjogUG9wcGVyUG9zaXRpb25lclxufSk7XG5cbmV4cG9ydCB7XG4gIFBvcHBlckNvbnRleHQsXG4gIHVzZVBvcHBlckNvbnRleHQsXG4gIFBvcHBlckFycm93LFxuICBQb3BwZXJQb3NpdGlvbmVyLFxuICBQb3BwZXJSb290LFxuICBQb3BwZXJcbn07XG4iLCJpbXBvcnQge1xuICBpc1NhbWVTZWxlY3Rpb25cbn0gZnJvbSBcIi4vUkxHR0ZBWVEuanN4XCI7XG5pbXBvcnQge1xuICB1c2VGb3JtQ29udHJvbENvbnRleHRcbn0gZnJvbSBcIi4vUEZDWEtRUFYuanN4XCI7XG5cbi8vIHNyYy9zZWxlY3QvaGlkZGVuLXNlbGVjdC1iYXNlLnRzeFxuaW1wb3J0IHsgY2FsbEhhbmRsZXIsIG1lcmdlUmVmcywgdmlzdWFsbHlIaWRkZW5TdHlsZXMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7XG4gIEZvcixcbiAgU2hvdyxcbiAgY3JlYXRlRWZmZWN0LFxuICBjcmVhdGVTaWduYWwsXG4gIG9uLFxuICBzcGxpdFByb3BzXG59IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gSGlkZGVuU2VsZWN0QmFzZShwcm9wcykge1xuICBsZXQgcmVmO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXG4gICAgXCJyZWZcIixcbiAgICBcIm9uQ2hhbmdlXCIsXG4gICAgXCJjb2xsZWN0aW9uXCIsXG4gICAgXCJzZWxlY3Rpb25NYW5hZ2VyXCIsXG4gICAgXCJpc09wZW5cIixcbiAgICBcImlzTXVsdGlwbGVcIixcbiAgICBcImlzVmlydHVhbGl6ZWRcIixcbiAgICBcImZvY3VzVHJpZ2dlclwiXG4gIF0pO1xuICBjb25zdCBmb3JtQ29udHJvbENvbnRleHQgPSB1c2VGb3JtQ29udHJvbENvbnRleHQoKTtcbiAgY29uc3QgW2lzSW50ZXJuYWxDaGFuZ2VFdmVudCwgc2V0SXNJbnRlcm5hbENoYW5nZUV2ZW50XSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IHJlbmRlck9wdGlvbiA9IChrZXkpID0+IHtcbiAgICBjb25zdCBpdGVtID0gbG9jYWwuY29sbGVjdGlvbi5nZXRJdGVtKGtleSk7XG4gICAgcmV0dXJuIDxTaG93IHdoZW49e2l0ZW0/LnR5cGUgPT09IFwiaXRlbVwifT48b3B0aW9uIHZhbHVlPXtrZXl9IHNlbGVjdGVkPXtsb2NhbC5zZWxlY3Rpb25NYW5hZ2VyLmlzU2VsZWN0ZWQoa2V5KX0+e2l0ZW0/LnRleHRWYWx1ZX08L29wdGlvbj48L1Nob3c+O1xuICB9O1xuICBjcmVhdGVFZmZlY3QoXG4gICAgb24oXG4gICAgICAoKSA9PiBsb2NhbC5zZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdGVkS2V5cygpLFxuICAgICAgKGtleXMsIHByZXZLZXlzKSA9PiB7XG4gICAgICAgIGlmIChwcmV2S2V5cyAmJiBpc1NhbWVTZWxlY3Rpb24oa2V5cywgcHJldktleXMpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldElzSW50ZXJuYWxDaGFuZ2VFdmVudCh0cnVlKTtcbiAgICAgICAgcmVmPy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgIG5ldyBFdmVudChcImlucHV0XCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KVxuICAgICAgICApO1xuICAgICAgICByZWY/LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgbmV3IEV2ZW50KFwiY2hhbmdlXCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZGVmZXI6IHRydWVcbiAgICAgIH1cbiAgICApXG4gICk7XG4gIHJldHVybiA8ZGl2IHN0eWxlPXt2aXN1YWxseUhpZGRlblN0eWxlc30gYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgPGlucHV0XG4gICAgICB0eXBlPVwidGV4dFwiXG4gICAgICB0YWJJbmRleD17bG9jYWwuc2VsZWN0aW9uTWFuYWdlci5pc0ZvY3VzZWQoKSB8fCBsb2NhbC5pc09wZW4gPyAtMSA6IDB9XG4gICAgICBzdHlsZT17eyBcImZvbnQtc2l6ZVwiOiBcIjE2cHhcIiB9fVxuICAgICAgcmVxdWlyZWQ9e2Zvcm1Db250cm9sQ29udGV4dC5pc1JlcXVpcmVkKCl9XG4gICAgICBkaXNhYmxlZD17Zm9ybUNvbnRyb2xDb250ZXh0LmlzRGlzYWJsZWQoKX1cbiAgICAgIHJlYWRPbmx5PXtmb3JtQ29udHJvbENvbnRleHQuaXNSZWFkT25seSgpfVxuICAgICAgb25Gb2N1cz17KCkgPT4gbG9jYWwuZm9jdXNUcmlnZ2VyKCl9XG4gICAgLz5cbiAgICA8c2VsZWN0XG4gICAgICByZWY9e21lcmdlUmVmcygoZWwpID0+IHJlZiA9IGVsLCBsb2NhbC5yZWYpfVxuICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgbXVsdGlwbGU9e2xvY2FsLmlzTXVsdGlwbGV9XG4gICAgICBuYW1lPXtmb3JtQ29udHJvbENvbnRleHQubmFtZSgpfVxuICAgICAgcmVxdWlyZWQ9e2Zvcm1Db250cm9sQ29udGV4dC5pc1JlcXVpcmVkKCl9XG4gICAgICBkaXNhYmxlZD17Zm9ybUNvbnRyb2xDb250ZXh0LmlzRGlzYWJsZWQoKX1cbiAgICAgIHNpemU9e2xvY2FsLmNvbGxlY3Rpb24uZ2V0U2l6ZSgpfVxuICAgICAgdmFsdWU9e2xvY2FsLnNlbGVjdGlvbk1hbmFnZXIuZmlyc3RTZWxlY3RlZEtleSgpID8/IFwiXCJ9XG4gICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgY2FsbEhhbmRsZXIoZSwgbG9jYWwub25DaGFuZ2UpO1xuICAgICAgICBpZiAoIWlzSW50ZXJuYWxDaGFuZ2VFdmVudCgpKSB7XG4gICAgICAgICAgbG9jYWwuc2VsZWN0aW9uTWFuYWdlci5zZXRTZWxlY3RlZEtleXMoXG4gICAgICAgICAgICAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbZS50YXJnZXQudmFsdWVdKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0SXNJbnRlcm5hbENoYW5nZUV2ZW50KGZhbHNlKTtcbiAgICAgIH19XG4gICAgICB7Li4ub3RoZXJzfVxuICAgID5cbiAgICAgIDxvcHRpb24gLz5cbiAgICAgIDxTaG93XG4gICAgICAgIHdoZW49e2xvY2FsLmlzVmlydHVhbGl6ZWR9XG4gICAgICAgIGZhbGxiYWNrPXs8Rm9yIGVhY2g9e1suLi5sb2NhbC5jb2xsZWN0aW9uLmdldEtleXMoKV19PntyZW5kZXJPcHRpb259PC9Gb3I+fVxuICAgICAgPjxGb3IgZWFjaD17Wy4uLmxvY2FsLnNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0ZWRLZXlzKCldfT57cmVuZGVyT3B0aW9ufTwvRm9yPjwvU2hvdz5cbiAgICA8L3NlbGVjdD5cbiAgPC9kaXY+O1xufVxuXG5leHBvcnQge1xuICBIaWRkZW5TZWxlY3RCYXNlXG59O1xuIiwiLy8gc3JjL3ByaW1pdGl2ZXMvY3JlYXRlLWNvbGxlY3Rpb24vZ2V0LWl0ZW0tY291bnQudHNcbnZhciBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gZ2V0SXRlbUNvdW50KGNvbGxlY3Rpb24pIHtcbiAgbGV0IGNvdW50ID0gY2FjaGUuZ2V0KGNvbGxlY3Rpb24pO1xuICBpZiAoY291bnQgIT0gbnVsbCkge1xuICAgIHJldHVybiBjb3VudDtcbiAgfVxuICBjb3VudCA9IDA7XG4gIGZvciAoY29uc3QgaXRlbSBvZiBjb2xsZWN0aW9uKSB7XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gXCJpdGVtXCIpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG4gIGNhY2hlLnNldChjb2xsZWN0aW9uLCBjb3VudCk7XG4gIHJldHVybiBjb3VudDtcbn1cblxuZXhwb3J0IHtcbiAgZ2V0SXRlbUNvdW50XG59O1xuIiwiaW1wb3J0IHtcbiAgY3JlYXRlU2VsZWN0YWJsZUNvbGxlY3Rpb25cbn0gZnJvbSBcIi4vUkxHR0ZBWVEuanN4XCI7XG5pbXBvcnQge1xuICBjcmVhdGVDb2xsYXRvclxufSBmcm9tIFwiLi9MUjdMQkpOMy5qc3hcIjtcblxuLy8gc3JjL2xpc3QvbGlzdC1rZXlib2FyZC1kZWxlZ2F0ZS50c1xudmFyIExpc3RLZXlib2FyZERlbGVnYXRlID0gY2xhc3Mge1xuICBjb2xsZWN0aW9uO1xuICByZWY7XG4gIGNvbGxhdG9yO1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCByZWYsIGNvbGxhdG9yKSB7XG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICB0aGlzLmNvbGxhdG9yID0gY29sbGF0b3I7XG4gIH1cbiAgZ2V0S2V5QmVsb3coa2V5KSB7XG4gICAgbGV0IGtleUFmdGVyID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0S2V5QWZ0ZXIoa2V5KTtcbiAgICB3aGlsZSAoa2V5QWZ0ZXIgIT0gbnVsbCkge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5QWZ0ZXIpO1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS50eXBlID09PSBcIml0ZW1cIiAmJiAhaXRlbS5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4ga2V5QWZ0ZXI7XG4gICAgICB9XG4gICAgICBrZXlBZnRlciA9IHRoaXMuY29sbGVjdGlvbigpLmdldEtleUFmdGVyKGtleUFmdGVyKTtcbiAgICB9XG4gIH1cbiAgZ2V0S2V5QWJvdmUoa2V5KSB7XG4gICAgbGV0IGtleUJlZm9yZSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEtleUJlZm9yZShrZXkpO1xuICAgIHdoaWxlIChrZXlCZWZvcmUgIT0gbnVsbCkge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5QmVmb3JlKTtcbiAgICAgIGlmIChpdGVtICYmIGl0ZW0udHlwZSA9PT0gXCJpdGVtXCIgJiYgIWl0ZW0uZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIGtleUJlZm9yZTtcbiAgICAgIH1cbiAgICAgIGtleUJlZm9yZSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEtleUJlZm9yZShrZXlCZWZvcmUpO1xuICAgIH1cbiAgfVxuICBnZXRGaXJzdEtleSgpIHtcbiAgICBsZXQga2V5ID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0Rmlyc3RLZXkoKTtcbiAgICB3aGlsZSAoa2V5ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGtleSk7XG4gICAgICBpZiAoaXRlbSAmJiBpdGVtLnR5cGUgPT09IFwiaXRlbVwiICYmICFpdGVtLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgICBrZXkgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRLZXlBZnRlcihrZXkpO1xuICAgIH1cbiAgfVxuICBnZXRMYXN0S2V5KCkge1xuICAgIGxldCBrZXkgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRMYXN0S2V5KCk7XG4gICAgd2hpbGUgKGtleSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS50eXBlID09PSBcIml0ZW1cIiAmJiAhaXRlbS5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgICAga2V5ID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0S2V5QmVmb3JlKGtleSk7XG4gICAgfVxuICB9XG4gIGdldEl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMucmVmPy4oKT8ucXVlcnlTZWxlY3RvcihgW2RhdGEta2V5PVwiJHtrZXl9XCJdYCkgPz8gbnVsbDtcbiAgfVxuICAvLyBUT0RPOiBub3Qgd29ya2luZyBjb3JyZWN0bHlcbiAgZ2V0S2V5UGFnZUFib3ZlKGtleSkge1xuICAgIGNvbnN0IG1lbnUgPSB0aGlzLnJlZj8uKCk7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLmdldEl0ZW0oa2V5KTtcbiAgICBpZiAoIW1lbnUgfHwgIWl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFnZVkgPSBNYXRoLm1heChcbiAgICAgIDAsXG4gICAgICBpdGVtLm9mZnNldFRvcCArIGl0ZW0ub2Zmc2V0SGVpZ2h0IC0gbWVudS5vZmZzZXRIZWlnaHRcbiAgICApO1xuICAgIGxldCBrZXlBYm92ZSA9IGtleTtcbiAgICB3aGlsZSAoa2V5QWJvdmUgJiYgaXRlbSAmJiBpdGVtLm9mZnNldFRvcCA+IHBhZ2VZKSB7XG4gICAgICBrZXlBYm92ZSA9IHRoaXMuZ2V0S2V5QWJvdmUoa2V5QWJvdmUpO1xuICAgICAgaXRlbSA9IGtleUFib3ZlICE9IG51bGwgPyB0aGlzLmdldEl0ZW0oa2V5QWJvdmUpIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGtleUFib3ZlO1xuICB9XG4gIC8vIFRPRE86IG5vdCB3b3JraW5nIGNvcnJlY3RseVxuICBnZXRLZXlQYWdlQmVsb3coa2V5KSB7XG4gICAgY29uc3QgbWVudSA9IHRoaXMucmVmPy4oKTtcbiAgICBsZXQgaXRlbSA9IHRoaXMuZ2V0SXRlbShrZXkpO1xuICAgIGlmICghbWVudSB8fCAhaXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYWdlWSA9IE1hdGgubWluKFxuICAgICAgbWVudS5zY3JvbGxIZWlnaHQsXG4gICAgICBpdGVtLm9mZnNldFRvcCAtIGl0ZW0ub2Zmc2V0SGVpZ2h0ICsgbWVudS5vZmZzZXRIZWlnaHRcbiAgICApO1xuICAgIGxldCBrZXlCZWxvdyA9IGtleTtcbiAgICB3aGlsZSAoa2V5QmVsb3cgJiYgaXRlbSAmJiBpdGVtLm9mZnNldFRvcCA8IHBhZ2VZKSB7XG4gICAgICBrZXlCZWxvdyA9IHRoaXMuZ2V0S2V5QmVsb3coa2V5QmVsb3cpO1xuICAgICAgaXRlbSA9IGtleUJlbG93ICE9IG51bGwgPyB0aGlzLmdldEl0ZW0oa2V5QmVsb3cpIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGtleUJlbG93O1xuICB9XG4gIGdldEtleUZvclNlYXJjaChzZWFyY2gsIGZyb21LZXkpIHtcbiAgICBjb25zdCBjb2xsYXRvciA9IHRoaXMuY29sbGF0b3I/LigpO1xuICAgIGlmICghY29sbGF0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGtleSA9IGZyb21LZXkgIT0gbnVsbCA/IHRoaXMuZ2V0S2V5QmVsb3coZnJvbUtleSkgOiB0aGlzLmdldEZpcnN0S2V5KCk7XG4gICAgd2hpbGUgKGtleSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgY29uc3Qgc3Vic3RyaW5nID0gaXRlbS50ZXh0VmFsdWUuc2xpY2UoMCwgc2VhcmNoLmxlbmd0aCk7XG4gICAgICAgIGlmIChpdGVtLnRleHRWYWx1ZSAmJiBjb2xsYXRvci5jb21wYXJlKHN1YnN0cmluZywgc2VhcmNoKSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGtleSA9IHRoaXMuZ2V0S2V5QmVsb3coa2V5KTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHNyYy9saXN0L2NyZWF0ZS1zZWxlY3RhYmxlLWxpc3QudHNcbmltcG9ydCB7IGFjY2VzcyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlTWVtbyB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gY3JlYXRlU2VsZWN0YWJsZUxpc3QocHJvcHMsIHJlZiwgc2Nyb2xsUmVmKSB7XG4gIGNvbnN0IGNvbGxhdG9yID0gY3JlYXRlQ29sbGF0b3IoeyB1c2FnZTogXCJzZWFyY2hcIiwgc2Vuc2l0aXZpdHk6IFwiYmFzZVwiIH0pO1xuICBjb25zdCBkZWxlZ2F0ZSA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGtleWJvYXJkRGVsZWdhdGUgPSBhY2Nlc3MocHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgaWYgKGtleWJvYXJkRGVsZWdhdGUpIHtcbiAgICAgIHJldHVybiBrZXlib2FyZERlbGVnYXRlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IExpc3RLZXlib2FyZERlbGVnYXRlKHByb3BzLmNvbGxlY3Rpb24sIHJlZiwgY29sbGF0b3IpO1xuICB9KTtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdGFibGVDb2xsZWN0aW9uKFxuICAgIHtcbiAgICAgIHNlbGVjdGlvbk1hbmFnZXI6ICgpID0+IGFjY2Vzcyhwcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKSxcbiAgICAgIGtleWJvYXJkRGVsZWdhdGU6IGRlbGVnYXRlLFxuICAgICAgYXV0b0ZvY3VzOiAoKSA9PiBhY2Nlc3MocHJvcHMuYXV0b0ZvY3VzKSxcbiAgICAgIGRlZmVyQXV0b0ZvY3VzOiAoKSA9PiBhY2Nlc3MocHJvcHMuZGVmZXJBdXRvRm9jdXMpLFxuICAgICAgc2hvdWxkRm9jdXNXcmFwOiAoKSA9PiBhY2Nlc3MocHJvcHMuc2hvdWxkRm9jdXNXcmFwKSxcbiAgICAgIGRpc2FsbG93RW1wdHlTZWxlY3Rpb246ICgpID0+IGFjY2Vzcyhwcm9wcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKSxcbiAgICAgIHNlbGVjdE9uRm9jdXM6ICgpID0+IGFjY2Vzcyhwcm9wcy5zZWxlY3RPbkZvY3VzKSxcbiAgICAgIGRpc2FsbG93VHlwZUFoZWFkOiAoKSA9PiBhY2Nlc3MocHJvcHMuZGlzYWxsb3dUeXBlQWhlYWQpLFxuICAgICAgc2hvdWxkVXNlVmlydHVhbEZvY3VzOiAoKSA9PiBhY2Nlc3MocHJvcHMuc2hvdWxkVXNlVmlydHVhbEZvY3VzKSxcbiAgICAgIGFsbG93c1RhYk5hdmlnYXRpb246ICgpID0+IGFjY2Vzcyhwcm9wcy5hbGxvd3NUYWJOYXZpZ2F0aW9uKSxcbiAgICAgIGlzVmlydHVhbGl6ZWQ6ICgpID0+IGFjY2Vzcyhwcm9wcy5pc1ZpcnR1YWxpemVkKSxcbiAgICAgIHNjcm9sbFRvS2V5OiAoa2V5KSA9PiBhY2Nlc3MocHJvcHMuc2Nyb2xsVG9LZXkpPy4oa2V5KSxcbiAgICAgIG9yaWVudGF0aW9uOiAoKSA9PiBhY2Nlc3MocHJvcHMub3JpZW50YXRpb24pXG4gICAgfSxcbiAgICByZWYsXG4gICAgc2Nyb2xsUmVmXG4gICk7XG59XG5cbmV4cG9ydCB7XG4gIExpc3RLZXlib2FyZERlbGVnYXRlLFxuICBjcmVhdGVTZWxlY3RhYmxlTGlzdFxufTtcbiIsImltcG9ydCB7XG4gIGdldEl0ZW1Db3VudFxufSBmcm9tIFwiLi9GSU5XTzNBNS5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVNlbGVjdGFibGVMaXN0XG59IGZyb20gXCIuL1BDTDZHTUJRLmpzeFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlTGlzdFN0YXRlLFxuICBjcmVhdGVTZWxlY3RhYmxlSXRlbVxufSBmcm9tIFwiLi9STEdHRkFZUS5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVJlZ2lzdGVySWRcbn0gZnJvbSBcIi4vSk5DQ0Y2TVAuanN4XCI7XG5pbXBvcnQge1xuICBQb2x5bW9ycGhpY1xufSBmcm9tIFwiLi9FNzNQS0ZCMy5qc3hcIjtcbmltcG9ydCB7XG4gIF9fZXhwb3J0XG59IGZyb20gXCIuLzVXWEhKRENaLmpzeFwiO1xuXG4vLyBzcmMvbGlzdGJveC9pbmRleC50c3hcbnZhciBsaXN0Ym94X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGxpc3Rib3hfZXhwb3J0cywge1xuICBJdGVtOiAoKSA9PiBMaXN0Ym94SXRlbSxcbiAgSXRlbURlc2NyaXB0aW9uOiAoKSA9PiBMaXN0Ym94SXRlbURlc2NyaXB0aW9uLFxuICBJdGVtSW5kaWNhdG9yOiAoKSA9PiBMaXN0Ym94SXRlbUluZGljYXRvcixcbiAgSXRlbUxhYmVsOiAoKSA9PiBMaXN0Ym94SXRlbUxhYmVsLFxuICBMaXN0Ym94OiAoKSA9PiBMaXN0Ym94LFxuICBSb290OiAoKSA9PiBMaXN0Ym94Um9vdCxcbiAgU2VjdGlvbjogKCkgPT4gTGlzdGJveFNlY3Rpb25cbn0pO1xuXG4vLyBzcmMvbGlzdGJveC9saXN0Ym94LWl0ZW0udHN4XG5pbXBvcnQge1xuICBjYWxsSGFuZGxlcixcbiAgY29tcG9zZUV2ZW50SGFuZGxlcnMsXG4gIGNyZWF0ZUdlbmVyYXRlSWQsXG4gIGZvY3VzV2l0aG91dFNjcm9sbGluZyxcbiAgaXNNYWMsXG4gIGlzV2ViS2l0LFxuICBtZXJnZURlZmF1bHRQcm9wcyxcbiAgbWVyZ2VSZWZzXG59IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRlTWVtbyxcbiAgY3JlYXRlU2lnbmFsLFxuICBjcmVhdGVVbmlxdWVJZCxcbiAgc3BsaXRQcm9wc1xufSBmcm9tIFwic29saWQtanNcIjtcblxuLy8gc3JjL2xpc3Rib3gvbGlzdGJveC1jb250ZXh0LnRzeFxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gXCJzb2xpZC1qc1wiO1xudmFyIExpc3Rib3hDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlTGlzdGJveENvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KExpc3Rib3hDb250ZXh0KTtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW2tvYmFsdGVdOiBgdXNlTGlzdGJveENvbnRleHRgIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBgTGlzdGJveGAgY29tcG9uZW50XCJcbiAgICApO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuXG4vLyBzcmMvbGlzdGJveC9saXN0Ym94LWl0ZW0tY29udGV4dC50c3hcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQgYXMgY3JlYXRlQ29udGV4dDIsIHVzZUNvbnRleHQgYXMgdXNlQ29udGV4dDIgfSBmcm9tIFwic29saWQtanNcIjtcbnZhciBMaXN0Ym94SXRlbUNvbnRleHQgPSBjcmVhdGVDb250ZXh0MigpO1xuZnVuY3Rpb24gdXNlTGlzdGJveEl0ZW1Db250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dDIoTGlzdGJveEl0ZW1Db250ZXh0KTtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW2tvYmFsdGVdOiBgdXNlTGlzdGJveEl0ZW1Db250ZXh0YCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYExpc3Rib3guSXRlbWAgY29tcG9uZW50XCJcbiAgICApO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuXG4vLyBzcmMvbGlzdGJveC9saXN0Ym94LWl0ZW0udHN4XG5mdW5jdGlvbiBMaXN0Ym94SXRlbShwcm9wcykge1xuICBsZXQgcmVmO1xuICBjb25zdCBsaXN0Qm94Q29udGV4dCA9IHVzZUxpc3Rib3hDb250ZXh0KCk7XG4gIGNvbnN0IGRlZmF1bHRJZCA9IGAke2xpc3RCb3hDb250ZXh0LmdlbmVyYXRlSWQoXCJpdGVtXCIpfS0ke2NyZWF0ZVVuaXF1ZUlkKCl9YDtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyhcbiAgICB7IGlkOiBkZWZhdWx0SWQgfSxcbiAgICBwcm9wc1xuICApO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKG1lcmdlZFByb3BzLCBbXG4gICAgXCJyZWZcIixcbiAgICBcIml0ZW1cIixcbiAgICBcImFyaWEtbGFiZWxcIixcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiLFxuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiLFxuICAgIFwib25Qb2ludGVyTW92ZVwiLFxuICAgIFwib25Qb2ludGVyRG93blwiLFxuICAgIFwib25Qb2ludGVyVXBcIixcbiAgICBcIm9uQ2xpY2tcIixcbiAgICBcIm9uS2V5RG93blwiLFxuICAgIFwib25Nb3VzZURvd25cIixcbiAgICBcIm9uRm9jdXNcIlxuICBdKTtcbiAgY29uc3QgW2xhYmVsSWQsIHNldExhYmVsSWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtkZXNjcmlwdGlvbklkLCBzZXREZXNjcmlwdGlvbklkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBzZWxlY3Rpb25NYW5hZ2VyID0gKCkgPT4gbGlzdEJveENvbnRleHQubGlzdFN0YXRlKCkuc2VsZWN0aW9uTWFuYWdlcigpO1xuICBjb25zdCBpc0hpZ2hsaWdodGVkID0gKCkgPT4gc2VsZWN0aW9uTWFuYWdlcigpLmZvY3VzZWRLZXkoKSA9PT0gbG9jYWwuaXRlbS5rZXk7XG4gIGNvbnN0IHNlbGVjdGFibGVJdGVtID0gY3JlYXRlU2VsZWN0YWJsZUl0ZW0oXG4gICAge1xuICAgICAga2V5OiAoKSA9PiBsb2NhbC5pdGVtLmtleSxcbiAgICAgIHNlbGVjdGlvbk1hbmFnZXIsXG4gICAgICBzaG91bGRTZWxlY3RPblByZXNzVXA6IGxpc3RCb3hDb250ZXh0LnNob3VsZFNlbGVjdE9uUHJlc3NVcCxcbiAgICAgIGFsbG93c0RpZmZlcmVudFByZXNzT3JpZ2luOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBsaXN0Qm94Q29udGV4dC5zaG91bGRTZWxlY3RPblByZXNzVXAoKSAmJiBsaXN0Qm94Q29udGV4dC5zaG91bGRGb2N1c09uSG92ZXIoKTtcbiAgICAgIH0sXG4gICAgICBzaG91bGRVc2VWaXJ0dWFsRm9jdXM6IGxpc3RCb3hDb250ZXh0LnNob3VsZFVzZVZpcnR1YWxGb2N1cyxcbiAgICAgIGRpc2FibGVkOiAoKSA9PiBsb2NhbC5pdGVtLmRpc2FibGVkXG4gICAgfSxcbiAgICAoKSA9PiByZWZcbiAgKTtcbiAgY29uc3QgYXJpYVNlbGVjdGVkID0gKCkgPT4ge1xuICAgIGlmIChzZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGFibGVJdGVtLmlzU2VsZWN0ZWQoKTtcbiAgfTtcbiAgY29uc3QgaXNOb3RTYWZhcmlNYWNPUyA9IGNyZWF0ZU1lbW8oKCkgPT4gIShpc01hYygpICYmIGlzV2ViS2l0KCkpKTtcbiAgY29uc3QgYXJpYUxhYmVsID0gKCkgPT4gaXNOb3RTYWZhcmlNYWNPUygpID8gbG9jYWxbXCJhcmlhLWxhYmVsXCJdIDogdm9pZCAwO1xuICBjb25zdCBhcmlhTGFiZWxsZWRCeSA9ICgpID0+IGlzTm90U2FmYXJpTWFjT1MoKSA/IGxhYmVsSWQoKSA6IHZvaWQgMDtcbiAgY29uc3QgYXJpYURlc2NyaWJlZEJ5ID0gKCkgPT4gaXNOb3RTYWZhcmlNYWNPUygpID8gZGVzY3JpcHRpb25JZCgpIDogdm9pZCAwO1xuICBjb25zdCBhcmlhUG9zSW5TZXQgPSAoKSA9PiB7XG4gICAgaWYgKCFsaXN0Qm94Q29udGV4dC5pc1ZpcnR1YWxpemVkKCkpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gbGlzdEJveENvbnRleHQubGlzdFN0YXRlKCkuY29sbGVjdGlvbigpLmdldEl0ZW0obG9jYWwuaXRlbS5rZXkpPy5pbmRleDtcbiAgICByZXR1cm4gaW5kZXggIT0gbnVsbCA/IGluZGV4ICsgMSA6IHZvaWQgMDtcbiAgfTtcbiAgY29uc3QgYXJpYVNldFNpemUgPSAoKSA9PiB7XG4gICAgaWYgKCFsaXN0Qm94Q29udGV4dC5pc1ZpcnR1YWxpemVkKCkpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBnZXRJdGVtQ291bnQobGlzdEJveENvbnRleHQubGlzdFN0YXRlKCkuY29sbGVjdGlvbigpKTtcbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyTW92ZSA9IChlKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZSwgbG9jYWwub25Qb2ludGVyTW92ZSk7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgIT09IFwibW91c2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXNlbGVjdGFibGVJdGVtLmlzRGlzYWJsZWQoKSAmJiBsaXN0Qm94Q29udGV4dC5zaG91bGRGb2N1c09uSG92ZXIoKSkge1xuICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGUuY3VycmVudFRhcmdldCk7XG4gICAgICBzZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIHNlbGVjdGlvbk1hbmFnZXIoKS5zZXRGb2N1c2VkS2V5KGxvY2FsLml0ZW0ua2V5KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGRhdGFzZXQgPSBjcmVhdGVNZW1vKCgpID0+ICh7XG4gICAgXCJkYXRhLWRpc2FibGVkXCI6IHNlbGVjdGFibGVJdGVtLmlzRGlzYWJsZWQoKSA/IFwiXCIgOiB2b2lkIDAsXG4gICAgXCJkYXRhLXNlbGVjdGVkXCI6IHNlbGVjdGFibGVJdGVtLmlzU2VsZWN0ZWQoKSA/IFwiXCIgOiB2b2lkIDAsXG4gICAgXCJkYXRhLWhpZ2hsaWdodGVkXCI6IGlzSGlnaGxpZ2h0ZWQoKSA/IFwiXCIgOiB2b2lkIDBcbiAgfSkpO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGlzU2VsZWN0ZWQ6IHNlbGVjdGFibGVJdGVtLmlzU2VsZWN0ZWQsXG4gICAgZGF0YXNldCxcbiAgICBnZW5lcmF0ZUlkOiBjcmVhdGVHZW5lcmF0ZUlkKCgpID0+IG90aGVycy5pZCksXG4gICAgcmVnaXN0ZXJMYWJlbElkOiBjcmVhdGVSZWdpc3RlcklkKHNldExhYmVsSWQpLFxuICAgIHJlZ2lzdGVyRGVzY3JpcHRpb25JZDogY3JlYXRlUmVnaXN0ZXJJZChzZXREZXNjcmlwdGlvbklkKVxuICB9O1xuICByZXR1cm4gPExpc3Rib3hJdGVtQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+PFBvbHltb3JwaGljXG4gICAgYXM9XCJsaVwiXG4gICAgcmVmPXttZXJnZVJlZnMoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKX1cbiAgICByb2xlPVwib3B0aW9uXCJcbiAgICB0YWJJbmRleD17c2VsZWN0YWJsZUl0ZW0udGFiSW5kZXgoKX1cbiAgICBhcmlhLWRpc2FibGVkPXtzZWxlY3RhYmxlSXRlbS5pc0Rpc2FibGVkKCl9XG4gICAgYXJpYS1zZWxlY3RlZD17YXJpYVNlbGVjdGVkKCl9XG4gICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsKCl9XG4gICAgYXJpYS1sYWJlbGxlZGJ5PXthcmlhTGFiZWxsZWRCeSgpfVxuICAgIGFyaWEtZGVzY3JpYmVkYnk9e2FyaWFEZXNjcmliZWRCeSgpfVxuICAgIGFyaWEtcG9zaW5zZXQ9e2FyaWFQb3NJblNldCgpfVxuICAgIGFyaWEtc2V0c2l6ZT17YXJpYVNldFNpemUoKX1cbiAgICBkYXRhLWtleT17c2VsZWN0YWJsZUl0ZW0uZGF0YUtleSgpfVxuICAgIG9uUG9pbnRlckRvd249e2NvbXBvc2VFdmVudEhhbmRsZXJzKFtcbiAgICAgIGxvY2FsLm9uUG9pbnRlckRvd24sXG4gICAgICBzZWxlY3RhYmxlSXRlbS5vblBvaW50ZXJEb3duXG4gICAgXSl9XG4gICAgb25Qb2ludGVyVXA9e2NvbXBvc2VFdmVudEhhbmRsZXJzKFtcbiAgICAgIGxvY2FsLm9uUG9pbnRlclVwLFxuICAgICAgc2VsZWN0YWJsZUl0ZW0ub25Qb2ludGVyVXBcbiAgICBdKX1cbiAgICBvbkNsaWNrPXtjb21wb3NlRXZlbnRIYW5kbGVycyhbbG9jYWwub25DbGljaywgc2VsZWN0YWJsZUl0ZW0ub25DbGlja10pfVxuICAgIG9uS2V5RG93bj17Y29tcG9zZUV2ZW50SGFuZGxlcnMoW1xuICAgICAgbG9jYWwub25LZXlEb3duLFxuICAgICAgc2VsZWN0YWJsZUl0ZW0ub25LZXlEb3duXG4gICAgXSl9XG4gICAgb25Nb3VzZURvd249e2NvbXBvc2VFdmVudEhhbmRsZXJzKFtcbiAgICAgIGxvY2FsLm9uTW91c2VEb3duLFxuICAgICAgc2VsZWN0YWJsZUl0ZW0ub25Nb3VzZURvd25cbiAgICBdKX1cbiAgICBvbkZvY3VzPXtjb21wb3NlRXZlbnRIYW5kbGVycyhbbG9jYWwub25Gb2N1cywgc2VsZWN0YWJsZUl0ZW0ub25Gb2N1c10pfVxuICAgIG9uUG9pbnRlck1vdmU9e29uUG9pbnRlck1vdmV9XG4gICAgey4uLmRhdGFzZXQoKX1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjwvTGlzdGJveEl0ZW1Db250ZXh0LlByb3ZpZGVyPjtcbn1cblxuLy8gc3JjL2xpc3Rib3gvbGlzdGJveC1pdGVtLWRlc2NyaXB0aW9uLnRzeFxuaW1wb3J0IHsgbWVyZ2VEZWZhdWx0UHJvcHMgYXMgbWVyZ2VEZWZhdWx0UHJvcHMyIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVFZmZlY3QsIG9uQ2xlYW51cCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gTGlzdGJveEl0ZW1EZXNjcmlwdGlvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTGlzdGJveEl0ZW1Db250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMyKFxuICAgIHtcbiAgICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJkZXNjcmlwdGlvblwiKVxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IG9uQ2xlYW51cChjb250ZXh0LnJlZ2lzdGVyRGVzY3JpcHRpb25JZChtZXJnZWRQcm9wcy5pZCkpKTtcbiAgcmV0dXJuIDxQb2x5bW9ycGhpY1xuICAgIGFzPVwiZGl2XCJcbiAgICB7Li4uY29udGV4dC5kYXRhc2V0KCl9XG4gICAgey4uLm1lcmdlZFByb3BzfVxuICAvPjtcbn1cblxuLy8gc3JjL2xpc3Rib3gvbGlzdGJveC1pdGVtLWluZGljYXRvci50c3hcbmltcG9ydCB7IG1lcmdlRGVmYXVsdFByb3BzIGFzIG1lcmdlRGVmYXVsdFByb3BzMyB9IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgU2hvdywgc3BsaXRQcm9wcyBhcyBzcGxpdFByb3BzMiB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gTGlzdGJveEl0ZW1JbmRpY2F0b3IocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUxpc3Rib3hJdGVtQ29udGV4dCgpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzMyhcbiAgICB7XG4gICAgICBpZDogY29udGV4dC5nZW5lcmF0ZUlkKFwiaW5kaWNhdG9yXCIpXG4gICAgfSxcbiAgICBwcm9wc1xuICApO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzMihtZXJnZWRQcm9wcywgW1wiZm9yY2VNb3VudFwiXSk7XG4gIHJldHVybiA8U2hvdyB3aGVuPXtsb2NhbC5mb3JjZU1vdW50IHx8IGNvbnRleHQuaXNTZWxlY3RlZCgpfT48UG9seW1vcnBoaWNcbiAgICBhcz1cImRpdlwiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICB7Li4uY29udGV4dC5kYXRhc2V0KCl9XG4gICAgey4uLm90aGVyc31cbiAgLz48L1Nob3c+O1xufVxuXG4vLyBzcmMvbGlzdGJveC9saXN0Ym94LWl0ZW0tbGFiZWwudHN4XG5pbXBvcnQgeyBtZXJnZURlZmF1bHRQcm9wcyBhcyBtZXJnZURlZmF1bHRQcm9wczQgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZUVmZmVjdCBhcyBjcmVhdGVFZmZlY3QyLCBvbkNsZWFudXAgYXMgb25DbGVhbnVwMiB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gTGlzdGJveEl0ZW1MYWJlbChwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTGlzdGJveEl0ZW1Db250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHM0KFxuICAgIHtcbiAgICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJsYWJlbFwiKVxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY3JlYXRlRWZmZWN0MigoKSA9PiBvbkNsZWFudXAyKGNvbnRleHQucmVnaXN0ZXJMYWJlbElkKG1lcmdlZFByb3BzLmlkKSkpO1xuICByZXR1cm4gPFBvbHltb3JwaGljXG4gICAgYXM9XCJkaXZcIlxuICAgIHsuLi5jb250ZXh0LmRhdGFzZXQoKX1cbiAgICB7Li4ubWVyZ2VkUHJvcHN9XG4gIC8+O1xufVxuXG4vLyBzcmMvbGlzdGJveC9saXN0Ym94LXJvb3QudHN4XG5pbXBvcnQge1xuICBLZXksXG4gIGFjY2VzcyxcbiAgY29tcG9zZUV2ZW50SGFuZGxlcnMgYXMgY29tcG9zZUV2ZW50SGFuZGxlcnMyLFxuICBjcmVhdGVHZW5lcmF0ZUlkIGFzIGNyZWF0ZUdlbmVyYXRlSWQyLFxuICBtZXJnZURlZmF1bHRQcm9wcyBhcyBtZXJnZURlZmF1bHRQcm9wczUsXG4gIG1lcmdlUmVmcyBhcyBtZXJnZVJlZnMyXG59IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHtcbiAgTWF0Y2gsXG4gIFNob3cgYXMgU2hvdzIsXG4gIFN3aXRjaCxcbiAgY3JlYXRlTWVtbyBhcyBjcmVhdGVNZW1vMixcbiAgY3JlYXRlVW5pcXVlSWQgYXMgY3JlYXRlVW5pcXVlSWQyLFxuICBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHM0XG59IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gTGlzdGJveFJvb3QocHJvcHMpIHtcbiAgbGV0IHJlZjtcbiAgY29uc3QgZGVmYXVsdElkID0gYGxpc3Rib3gtJHtjcmVhdGVVbmlxdWVJZDIoKX1gO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzNShcbiAgICB7XG4gICAgICBpZDogZGVmYXVsdElkLFxuICAgICAgc2VsZWN0aW9uTW9kZTogXCJzaW5nbGVcIixcbiAgICAgIHZpcnR1YWxpemVkOiBmYWxzZVxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wczQobWVyZ2VkUHJvcHMsIFtcbiAgICBcInJlZlwiLFxuICAgIFwiY2hpbGRyZW5cIixcbiAgICBcInJlbmRlckl0ZW1cIixcbiAgICBcInJlbmRlclNlY3Rpb25cIixcbiAgICBcInZhbHVlXCIsXG4gICAgXCJkZWZhdWx0VmFsdWVcIixcbiAgICBcIm9uQ2hhbmdlXCIsXG4gICAgXCJvcHRpb25zXCIsXG4gICAgXCJvcHRpb25WYWx1ZVwiLFxuICAgIFwib3B0aW9uVGV4dFZhbHVlXCIsXG4gICAgXCJvcHRpb25EaXNhYmxlZFwiLFxuICAgIFwib3B0aW9uR3JvdXBDaGlsZHJlblwiLFxuICAgIFwic3RhdGVcIixcbiAgICBcImtleWJvYXJkRGVsZWdhdGVcIixcbiAgICBcImF1dG9Gb2N1c1wiLFxuICAgIFwic2VsZWN0aW9uTW9kZVwiLFxuICAgIFwic2hvdWxkRm9jdXNXcmFwXCIsXG4gICAgXCJzaG91bGRVc2VWaXJ0dWFsRm9jdXNcIixcbiAgICBcInNob3VsZFNlbGVjdE9uUHJlc3NVcFwiLFxuICAgIFwic2hvdWxkRm9jdXNPbkhvdmVyXCIsXG4gICAgXCJhbGxvd0R1cGxpY2F0ZVNlbGVjdGlvbkV2ZW50c1wiLFxuICAgIFwiZGlzYWxsb3dFbXB0eVNlbGVjdGlvblwiLFxuICAgIFwic2VsZWN0aW9uQmVoYXZpb3JcIixcbiAgICBcInNlbGVjdE9uRm9jdXNcIixcbiAgICBcImRpc2FsbG93VHlwZUFoZWFkXCIsXG4gICAgXCJhbGxvd3NUYWJOYXZpZ2F0aW9uXCIsXG4gICAgXCJ2aXJ0dWFsaXplZFwiLFxuICAgIFwic2Nyb2xsVG9JdGVtXCIsXG4gICAgXCJzY3JvbGxSZWZcIixcbiAgICBcIm9uS2V5RG93blwiLFxuICAgIFwib25Nb3VzZURvd25cIixcbiAgICBcIm9uRm9jdXNJblwiLFxuICAgIFwib25Gb2N1c091dFwiXG4gIF0pO1xuICBjb25zdCBsaXN0U3RhdGUgPSBjcmVhdGVNZW1vMigoKSA9PiB7XG4gICAgaWYgKGxvY2FsLnN0YXRlKSB7XG4gICAgICByZXR1cm4gbG9jYWwuc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVMaXN0U3RhdGUoe1xuICAgICAgc2VsZWN0ZWRLZXlzOiAoKSA9PiBsb2NhbC52YWx1ZSxcbiAgICAgIGRlZmF1bHRTZWxlY3RlZEtleXM6ICgpID0+IGxvY2FsLmRlZmF1bHRWYWx1ZSxcbiAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlOiBsb2NhbC5vbkNoYW5nZSxcbiAgICAgIGFsbG93RHVwbGljYXRlU2VsZWN0aW9uRXZlbnRzOiAoKSA9PiBhY2Nlc3MobG9jYWwuYWxsb3dEdXBsaWNhdGVTZWxlY3Rpb25FdmVudHMpLFxuICAgICAgZGlzYWxsb3dFbXB0eVNlbGVjdGlvbjogKCkgPT4gYWNjZXNzKGxvY2FsLmRpc2FsbG93RW1wdHlTZWxlY3Rpb24pLFxuICAgICAgc2VsZWN0aW9uQmVoYXZpb3I6ICgpID0+IGFjY2Vzcyhsb2NhbC5zZWxlY3Rpb25CZWhhdmlvciksXG4gICAgICBzZWxlY3Rpb25Nb2RlOiAoKSA9PiBhY2Nlc3MobG9jYWwuc2VsZWN0aW9uTW9kZSksXG4gICAgICBkYXRhU291cmNlOiAoKSA9PiBsb2NhbC5vcHRpb25zID8/IFtdLFxuICAgICAgZ2V0S2V5OiAoKSA9PiBsb2NhbC5vcHRpb25WYWx1ZSxcbiAgICAgIGdldFRleHRWYWx1ZTogKCkgPT4gbG9jYWwub3B0aW9uVGV4dFZhbHVlLFxuICAgICAgZ2V0RGlzYWJsZWQ6ICgpID0+IGxvY2FsLm9wdGlvbkRpc2FibGVkLFxuICAgICAgZ2V0U2VjdGlvbkNoaWxkcmVuOiAoKSA9PiBsb2NhbC5vcHRpb25Hcm91cENoaWxkcmVuXG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBzZWxlY3RhYmxlTGlzdCA9IGNyZWF0ZVNlbGVjdGFibGVMaXN0KFxuICAgIHtcbiAgICAgIHNlbGVjdGlvbk1hbmFnZXI6ICgpID0+IGxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKSxcbiAgICAgIGNvbGxlY3Rpb246ICgpID0+IGxpc3RTdGF0ZSgpLmNvbGxlY3Rpb24oKSxcbiAgICAgIGF1dG9Gb2N1czogKCkgPT4gYWNjZXNzKGxvY2FsLmF1dG9Gb2N1cyksXG4gICAgICBzaG91bGRGb2N1c1dyYXA6ICgpID0+IGFjY2Vzcyhsb2NhbC5zaG91bGRGb2N1c1dyYXApLFxuICAgICAga2V5Ym9hcmREZWxlZ2F0ZTogKCkgPT4gbG9jYWwua2V5Ym9hcmREZWxlZ2F0ZSxcbiAgICAgIGRpc2FsbG93RW1wdHlTZWxlY3Rpb246ICgpID0+IGFjY2Vzcyhsb2NhbC5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKSxcbiAgICAgIHNlbGVjdE9uRm9jdXM6ICgpID0+IGFjY2Vzcyhsb2NhbC5zZWxlY3RPbkZvY3VzKSxcbiAgICAgIGRpc2FsbG93VHlwZUFoZWFkOiAoKSA9PiBhY2Nlc3MobG9jYWwuZGlzYWxsb3dUeXBlQWhlYWQpLFxuICAgICAgc2hvdWxkVXNlVmlydHVhbEZvY3VzOiAoKSA9PiBhY2Nlc3MobG9jYWwuc2hvdWxkVXNlVmlydHVhbEZvY3VzKSxcbiAgICAgIGFsbG93c1RhYk5hdmlnYXRpb246ICgpID0+IGFjY2Vzcyhsb2NhbC5hbGxvd3NUYWJOYXZpZ2F0aW9uKSxcbiAgICAgIGlzVmlydHVhbGl6ZWQ6ICgpID0+IGxvY2FsLnZpcnR1YWxpemVkLFxuICAgICAgc2Nyb2xsVG9LZXk6ICgpID0+IGxvY2FsLnNjcm9sbFRvSXRlbVxuICAgIH0sXG4gICAgKCkgPT4gcmVmLFxuICAgICgpID0+IGxvY2FsLnNjcm9sbFJlZj8uKClcbiAgKTtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICBsaXN0U3RhdGUsXG4gICAgZ2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZDIoKCkgPT4gb3RoZXJzLmlkKSxcbiAgICBzaG91bGRVc2VWaXJ0dWFsRm9jdXM6ICgpID0+IG1lcmdlZFByb3BzLnNob3VsZFVzZVZpcnR1YWxGb2N1cyxcbiAgICBzaG91bGRTZWxlY3RPblByZXNzVXA6ICgpID0+IG1lcmdlZFByb3BzLnNob3VsZFNlbGVjdE9uUHJlc3NVcCxcbiAgICBzaG91bGRGb2N1c09uSG92ZXI6ICgpID0+IG1lcmdlZFByb3BzLnNob3VsZEZvY3VzT25Ib3ZlcixcbiAgICBpc1ZpcnR1YWxpemVkOiAoKSA9PiBsb2NhbC52aXJ0dWFsaXplZFxuICB9O1xuICByZXR1cm4gPExpc3Rib3hDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT48UG9seW1vcnBoaWNcbiAgICBhcz1cInVsXCJcbiAgICByZWY9e21lcmdlUmVmczIoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKX1cbiAgICByb2xlPVwibGlzdGJveFwiXG4gICAgdGFiSW5kZXg9e3NlbGVjdGFibGVMaXN0LnRhYkluZGV4KCl9XG4gICAgYXJpYS1tdWx0aXNlbGVjdGFibGU9e2xpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKS5zZWxlY3Rpb25Nb2RlKCkgPT09IFwibXVsdGlwbGVcIiA/IHRydWUgOiB2b2lkIDB9XG4gICAgb25LZXlEb3duPXtjb21wb3NlRXZlbnRIYW5kbGVyczIoW1xuICAgICAgbG9jYWwub25LZXlEb3duLFxuICAgICAgc2VsZWN0YWJsZUxpc3Qub25LZXlEb3duXG4gICAgXSl9XG4gICAgb25Nb3VzZURvd249e2NvbXBvc2VFdmVudEhhbmRsZXJzMihbXG4gICAgICBsb2NhbC5vbk1vdXNlRG93bixcbiAgICAgIHNlbGVjdGFibGVMaXN0Lm9uTW91c2VEb3duXG4gICAgXSl9XG4gICAgb25Gb2N1c0luPXtjb21wb3NlRXZlbnRIYW5kbGVyczIoW1xuICAgICAgbG9jYWwub25Gb2N1c0luLFxuICAgICAgc2VsZWN0YWJsZUxpc3Qub25Gb2N1c0luXG4gICAgXSl9XG4gICAgb25Gb2N1c091dD17Y29tcG9zZUV2ZW50SGFuZGxlcnMyKFtcbiAgICAgIGxvY2FsLm9uRm9jdXNPdXQsXG4gICAgICBzZWxlY3RhYmxlTGlzdC5vbkZvY3VzT3V0XG4gICAgXSl9XG4gICAgey4uLm90aGVyc31cbiAgPjxTaG93MlxuICAgIHdoZW49eyFsb2NhbC52aXJ0dWFsaXplZH1cbiAgICBmYWxsYmFjaz17bG9jYWwuY2hpbGRyZW4/LihsaXN0U3RhdGUoKS5jb2xsZWN0aW9uKX1cbiAgPjxLZXkgZWFjaD17Wy4uLmxpc3RTdGF0ZSgpLmNvbGxlY3Rpb24oKV19IGJ5PVwia2V5XCI+eyhpdGVtKSA9PiA8U3dpdGNoPlxuICAgIDxNYXRjaCB3aGVuPXtpdGVtKCkudHlwZSA9PT0gXCJzZWN0aW9uXCJ9Pntsb2NhbC5yZW5kZXJTZWN0aW9uPy4oaXRlbSgpKX08L01hdGNoPlxuICAgIDxNYXRjaCB3aGVuPXtpdGVtKCkudHlwZSA9PT0gXCJpdGVtXCJ9Pntsb2NhbC5yZW5kZXJJdGVtPy4oaXRlbSgpKX08L01hdGNoPlxuICA8L1N3aXRjaD59PC9LZXk+PC9TaG93Mj48L1BvbHltb3JwaGljPjwvTGlzdGJveENvbnRleHQuUHJvdmlkZXI+O1xufVxuXG4vLyBzcmMvbGlzdGJveC9saXN0Ym94LXNlY3Rpb24udHN4XG5mdW5jdGlvbiBMaXN0Ym94U2VjdGlvbihwcm9wcykge1xuICByZXR1cm4gPFBvbHltb3JwaGljXG4gICAgYXM9XCJsaVwiXG4gICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgey4uLnByb3BzfVxuICAvPjtcbn1cblxuLy8gc3JjL2xpc3Rib3gvaW5kZXgudHN4XG52YXIgTGlzdGJveCA9IE9iamVjdC5hc3NpZ24oTGlzdGJveFJvb3QsIHtcbiAgSXRlbTogTGlzdGJveEl0ZW0sXG4gIEl0ZW1EZXNjcmlwdGlvbjogTGlzdGJveEl0ZW1EZXNjcmlwdGlvbixcbiAgSXRlbUluZGljYXRvcjogTGlzdGJveEl0ZW1JbmRpY2F0b3IsXG4gIEl0ZW1MYWJlbDogTGlzdGJveEl0ZW1MYWJlbCxcbiAgU2VjdGlvbjogTGlzdGJveFNlY3Rpb25cbn0pO1xuXG5leHBvcnQge1xuICBMaXN0Ym94SXRlbSxcbiAgTGlzdGJveEl0ZW1EZXNjcmlwdGlvbixcbiAgTGlzdGJveEl0ZW1JbmRpY2F0b3IsXG4gIExpc3Rib3hJdGVtTGFiZWwsXG4gIExpc3Rib3hSb290LFxuICBMaXN0Ym94U2VjdGlvbixcbiAgTGlzdGJveCxcbiAgbGlzdGJveF9leHBvcnRzXG59O1xuIiwiaW1wb3J0IHtcbiAgSGlkZGVuU2VsZWN0QmFzZVxufSBmcm9tIFwiLi9TWkRWSkpQNi5qc3hcIjtcbmltcG9ydCB7XG4gIExpc3Rib3hJdGVtLFxuICBMaXN0Ym94SXRlbURlc2NyaXB0aW9uLFxuICBMaXN0Ym94SXRlbUluZGljYXRvcixcbiAgTGlzdGJveEl0ZW1MYWJlbCxcbiAgTGlzdGJveFJvb3QsXG4gIExpc3Rib3hTZWN0aW9uXG59IGZyb20gXCIuL0VXTENIU09ULmpzeFwiO1xuaW1wb3J0IHtcbiAgZ2V0SXRlbUNvdW50XG59IGZyb20gXCIuL0ZJTldPM0E1LmpzeFwiO1xuaW1wb3J0IHtcbiAgUG9wcGVyLFxuICBQb3BwZXJBcnJvd1xufSBmcm9tIFwiLi9RRTdRUTROTC5qc3hcIjtcbmltcG9ydCB7XG4gIExpc3RLZXlib2FyZERlbGVnYXRlXG59IGZyb20gXCIuL1BDTDZHTUJRLmpzeFwiO1xuaW1wb3J0IHtcbiAgU2VsZWN0aW9uLFxuICBjcmVhdGVMaXN0U3RhdGUsXG4gIGNyZWF0ZVNlbGVjdGFibGVDb2xsZWN0aW9uXG59IGZyb20gXCIuL1JMR0dGQVlRLmpzeFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlRmlsdGVyXG59IGZyb20gXCIuL0xSN0xCSk4zLmpzeFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlRm9jdXNTY29wZVxufSBmcm9tIFwiLi83QTNHREY0WS5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUhpZGVPdXRzaWRlXG59IGZyb20gXCIuL1A2WFU3NVpHLmpzeFwiO1xuaW1wb3J0IHtcbiAgYW5ub3VuY2Vcbn0gZnJvbSBcIi4vSkhNTldPTFkuanN4XCI7XG5pbXBvcnQge1xuICBEaXNtaXNzYWJsZUxheWVyXG59IGZyb20gXCIuL05OR01SWTJPLmpzeFwiO1xuaW1wb3J0IHtcbiAgRk9STV9DT05UUk9MX0ZJRUxEX1BST1BfTkFNRVMsXG4gIGNyZWF0ZUZvcm1Db250cm9sRmllbGRcbn0gZnJvbSBcIi4vR0lGRFFFWFYuanN4XCI7XG5pbXBvcnQge1xuICBGT1JNX0NPTlRST0xfUFJPUF9OQU1FUyxcbiAgRm9ybUNvbnRyb2xDb250ZXh0LFxuICBGb3JtQ29udHJvbERlc2NyaXB0aW9uLFxuICBGb3JtQ29udHJvbEVycm9yTWVzc2FnZSxcbiAgRm9ybUNvbnRyb2xMYWJlbCxcbiAgY3JlYXRlRm9ybUNvbnRyb2wsXG4gIHVzZUZvcm1Db250cm9sQ29udGV4dFxufSBmcm9tIFwiLi9QRkNYS1FQVi5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUZvcm1SZXNldExpc3RlbmVyXG59IGZyb20gXCIuL1FKSUI2QkRGLmpzeFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlRGlzY2xvc3VyZVN0YXRlXG59IGZyb20gXCIuL0U1M0RCN0JTLmpzeFwiO1xuaW1wb3J0IHtcbiAgQnV0dG9uUm9vdFxufSBmcm9tIFwiLi9TQTI3VjVZSi5qc3hcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVJlZ2lzdGVySWRcbn0gZnJvbSBcIi4vSk5DQ0Y2TVAuanN4XCI7XG5pbXBvcnQge1xuICBjcmVhdGVDb250cm9sbGFibGVTaWduYWxcbn0gZnJvbSBcIi4vRk42RUlDR08uanN4XCI7XG5pbXBvcnQge1xuICBQb2x5bW9ycGhpY1xufSBmcm9tIFwiLi9FNzNQS0ZCMy5qc3hcIjtcbmltcG9ydCB7XG4gIF9fZXhwb3J0XG59IGZyb20gXCIuLzVXWEhKRENaLmpzeFwiO1xuXG4vLyBzcmMvY29tYm9ib3gvaW5kZXgudHN4XG52YXIgY29tYm9ib3hfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoY29tYm9ib3hfZXhwb3J0cywge1xuICBBcnJvdzogKCkgPT4gUG9wcGVyQXJyb3csXG4gIENvbWJvYm94OiAoKSA9PiBDb21ib2JveCxcbiAgQ29udGVudDogKCkgPT4gQ29tYm9ib3hDb250ZW50LFxuICBDb250cm9sOiAoKSA9PiBDb21ib2JveENvbnRyb2wsXG4gIERlc2NyaXB0aW9uOiAoKSA9PiBGb3JtQ29udHJvbERlc2NyaXB0aW9uLFxuICBFcnJvck1lc3NhZ2U6ICgpID0+IEZvcm1Db250cm9sRXJyb3JNZXNzYWdlLFxuICBIaWRkZW5TZWxlY3Q6ICgpID0+IENvbWJvYm94SGlkZGVuU2VsZWN0LFxuICBJY29uOiAoKSA9PiBDb21ib2JveEljb24sXG4gIElucHV0OiAoKSA9PiBDb21ib2JveElucHV0LFxuICBJdGVtOiAoKSA9PiBMaXN0Ym94SXRlbSxcbiAgSXRlbURlc2NyaXB0aW9uOiAoKSA9PiBMaXN0Ym94SXRlbURlc2NyaXB0aW9uLFxuICBJdGVtSW5kaWNhdG9yOiAoKSA9PiBMaXN0Ym94SXRlbUluZGljYXRvcixcbiAgSXRlbUxhYmVsOiAoKSA9PiBMaXN0Ym94SXRlbUxhYmVsLFxuICBMYWJlbDogKCkgPT4gRm9ybUNvbnRyb2xMYWJlbCxcbiAgTGlzdGJveDogKCkgPT4gQ29tYm9ib3hMaXN0Ym94LFxuICBQb3J0YWw6ICgpID0+IENvbWJvYm94UG9ydGFsLFxuICBSb290OiAoKSA9PiBDb21ib2JveFJvb3QsXG4gIFNlY3Rpb246ICgpID0+IExpc3Rib3hTZWN0aW9uLFxuICBUcmlnZ2VyOiAoKSA9PiBDb21ib2JveFRyaWdnZXJcbn0pO1xuXG4vLyBzcmMvY29tYm9ib3gvY29tYm9ib3gtY29udGVudC50c3hcbmltcG9ydCB7IGZvY3VzV2l0aG91dFNjcm9sbGluZywgbWVyZ2VSZWZzIH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBTaG93LCBzcGxpdFByb3BzIH0gZnJvbSBcInNvbGlkLWpzXCI7XG5pbXBvcnQgY3JlYXRlUHJldmVudFNjcm9sbCBmcm9tIFwic29saWQtcHJldmVudC1zY3JvbGxcIjtcblxuLy8gc3JjL2NvbWJvYm94L2NvbWJvYm94LWNvbnRleHQudHN4XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSBcInNvbGlkLWpzXCI7XG52YXIgQ29tYm9ib3hDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlQ29tYm9ib3hDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChDb21ib2JveENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJba29iYWx0ZV06IGB1c2VDb21ib2JveENvbnRleHRgIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBgQ29tYm9ib3hgIGNvbXBvbmVudFwiXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cblxuLy8gc3JjL2NvbWJvYm94L2NvbWJvYm94LWNvbnRlbnQudHN4XG5mdW5jdGlvbiBDb21ib2JveENvbnRlbnQocHJvcHMpIHtcbiAgbGV0IHJlZjtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbWJvYm94Q29udGV4dCgpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXG4gICAgXCJyZWZcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJvbkNsb3NlQXV0b0ZvY3VzXCIsXG4gICAgXCJvbkZvY3VzT3V0c2lkZVwiXG4gIF0pO1xuICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBjb250ZXh0LnJlc2V0SW5wdXRWYWx1ZShcbiAgICAgIGNvbnRleHQubGlzdFN0YXRlKCkuc2VsZWN0aW9uTWFuYWdlcigpLnNlbGVjdGVkS2V5cygpXG4gICAgKTtcbiAgICBjb250ZXh0LmNsb3NlKCk7XG4gIH07XG4gIGNvbnN0IG9uRm9jdXNPdXRzaWRlID0gKGUpID0+IHtcbiAgICBsb2NhbC5vbkZvY3VzT3V0c2lkZT8uKGUpO1xuICAgIGlmIChjb250ZXh0LmlzT3BlbigpICYmIGNvbnRleHQuaXNNb2RhbCgpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuICBjcmVhdGVIaWRlT3V0c2lkZSh7XG4gICAgaXNEaXNhYmxlZDogKCkgPT4gIShjb250ZXh0LmlzT3BlbigpICYmIGNvbnRleHQuaXNNb2RhbCgpKSxcbiAgICB0YXJnZXRzOiAoKSA9PiB7XG4gICAgICBjb25zdCBleGNsdWRlZEVsZW1lbnRzID0gW107XG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGV4Y2x1ZGVkRWxlbWVudHMucHVzaChyZWYpO1xuICAgICAgfVxuICAgICAgY29uc3QgY29udHJvbEVsID0gY29udGV4dC5jb250cm9sUmVmKCk7XG4gICAgICBpZiAoY29udHJvbEVsKSB7XG4gICAgICAgIGV4Y2x1ZGVkRWxlbWVudHMucHVzaChjb250cm9sRWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4Y2x1ZGVkRWxlbWVudHM7XG4gICAgfVxuICB9KTtcbiAgY3JlYXRlUHJldmVudFNjcm9sbCh7XG4gICAgZWxlbWVudDogKCkgPT4gcmVmID8/IG51bGwsXG4gICAgZW5hYmxlZDogKCkgPT4gY29udGV4dC5pc09wZW4oKSAmJiBjb250ZXh0LnByZXZlbnRTY3JvbGwoKVxuICB9KTtcbiAgY3JlYXRlRm9jdXNTY29wZShcbiAgICB7XG4gICAgICB0cmFwRm9jdXM6ICgpID0+IGNvbnRleHQuaXNPcGVuKCkgJiYgY29udGV4dC5pc01vZGFsKCksXG4gICAgICBvbk1vdW50QXV0b0ZvY3VzOiAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50QXV0b0ZvY3VzOiAoZSkgPT4ge1xuICAgICAgICBsb2NhbC5vbkNsb3NlQXV0b0ZvY3VzPy4oZSk7XG4gICAgICAgIGlmICghZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGNvbnRleHQuaW5wdXRSZWYoKSk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAoKSA9PiByZWZcbiAgKTtcbiAgcmV0dXJuIDxTaG93IHdoZW49e2NvbnRleHQuY29udGVudFByZXNlbnQoKX0+PFBvcHBlci5Qb3NpdGlvbmVyPjxEaXNtaXNzYWJsZUxheWVyXG4gICAgcmVmPXttZXJnZVJlZnMoKGVsKSA9PiB7XG4gICAgICBjb250ZXh0LnNldENvbnRlbnRSZWYoZWwpO1xuICAgICAgcmVmID0gZWw7XG4gICAgfSwgbG9jYWwucmVmKX1cbiAgICBkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHM9e2NvbnRleHQuaXNNb2RhbCgpICYmIGNvbnRleHQuaXNPcGVuKCl9XG4gICAgZXhjbHVkZWRFbGVtZW50cz17W2NvbnRleHQuY29udHJvbFJlZl19XG4gICAgc3R5bGU9e3tcbiAgICAgIFwiLS1rYi1jb21ib2JveC1jb250ZW50LXRyYW5zZm9ybS1vcmlnaW5cIjogXCJ2YXIoLS1rYi1wb3BwZXItY29udGVudC10cmFuc2Zvcm0tb3JpZ2luKVwiLFxuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIC4uLmxvY2FsLnN0eWxlXG4gICAgfX1cbiAgICBvbkZvY3VzT3V0c2lkZT17b25Gb2N1c091dHNpZGV9XG4gICAgb25EaXNtaXNzPXtjbG9zZX1cbiAgICB7Li4uY29udGV4dC5kYXRhc2V0KCl9XG4gICAgey4uLm90aGVyc31cbiAgLz48L1BvcHBlci5Qb3NpdGlvbmVyPjwvU2hvdz47XG59XG5cbi8vIHNyYy9jb21ib2JveC9jb21ib2JveC1pbnB1dC50c3hcbmltcG9ydCB7XG4gIGNhbGxIYW5kbGVyLFxuICBjb250YWlucyxcbiAgbWVyZ2VEZWZhdWx0UHJvcHMsXG4gIG1lcmdlUmVmcyBhcyBtZXJnZVJlZnMyXG59IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgc3BsaXRQcm9wcyBhcyBzcGxpdFByb3BzMiB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gQ29tYm9ib3hJbnB1dChwcm9wcykge1xuICBsZXQgcmVmO1xuICBjb25zdCBmb3JtQ29udHJvbENvbnRleHQgPSB1c2VGb3JtQ29udHJvbENvbnRleHQoKTtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbWJvYm94Q29udGV4dCgpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKFxuICAgIHtcbiAgICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJpbnB1dFwiKVxuICAgIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgY29uc3QgW2xvY2FsLCBmb3JtQ29udHJvbEZpZWxkUHJvcHMsIG90aGVyc10gPSBzcGxpdFByb3BzMihcbiAgICBtZXJnZWRQcm9wcyxcbiAgICBbXG4gICAgICBcInJlZlwiLFxuICAgICAgXCJkaXNhYmxlZFwiLFxuICAgICAgXCJvbklucHV0XCIsXG4gICAgICBcIm9uS2V5RG93blwiLFxuICAgICAgXCJvbkZvY3VzXCIsXG4gICAgICBcIm9uQmx1clwiLFxuICAgICAgXCJvblRvdWNoRW5kXCJcbiAgICBdLFxuICAgIEZPUk1fQ09OVFJPTF9GSUVMRF9QUk9QX05BTUVTXG4gICk7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSAoKSA9PiBjb250ZXh0Lmxpc3RTdGF0ZSgpLmNvbGxlY3Rpb24oKTtcbiAgY29uc3Qgc2VsZWN0aW9uTWFuYWdlciA9ICgpID0+IGNvbnRleHQubGlzdFN0YXRlKCkuc2VsZWN0aW9uTWFuYWdlcigpO1xuICBjb25zdCBpc0Rpc2FibGVkID0gKCkgPT4ge1xuICAgIHJldHVybiBsb2NhbC5kaXNhYmxlZCB8fCBjb250ZXh0LmlzRGlzYWJsZWQoKSB8fCBmb3JtQ29udHJvbENvbnRleHQuaXNEaXNhYmxlZCgpO1xuICB9O1xuICBjb25zdCB7IGZpZWxkUHJvcHMgfSA9IGNyZWF0ZUZvcm1Db250cm9sRmllbGQoZm9ybUNvbnRyb2xGaWVsZFByb3BzKTtcbiAgY29uc3Qgb25JbnB1dCA9IChlKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZSwgbG9jYWwub25JbnB1dCk7XG4gICAgaWYgKGZvcm1Db250cm9sQ29udGV4dC5pc1JlYWRPbmx5KCkgfHwgaXNEaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGNvbnRleHQuc2V0SW5wdXRWYWx1ZSh0YXJnZXQudmFsdWUpO1xuICAgIHRhcmdldC52YWx1ZSA9IGNvbnRleHQuaW5wdXRWYWx1ZSgpID8/IFwiXCI7XG4gICAgaWYgKGNvbnRleHQuaXNPcGVuKCkpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uKCkuZ2V0U2l6ZSgpIDw9IDAgJiYgIWNvbnRleHQuYWxsb3dzRW1wdHlDb2xsZWN0aW9uKCkpIHtcbiAgICAgICAgY29udGV4dC5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY29sbGVjdGlvbigpLmdldFNpemUoKSA+IDApIHtcbiAgICAgICAgY29udGV4dC5vcGVuKGZhbHNlLCBcImlucHV0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25LZXlEb3duID0gKGUpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlLCBsb2NhbC5vbktleURvd24pO1xuICAgIGlmIChmb3JtQ29udHJvbENvbnRleHQuaXNSZWFkT25seSgpIHx8IGlzRGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5pc09wZW4oKSkge1xuICAgICAgY2FsbEhhbmRsZXIoZSwgY29udGV4dC5vbklucHV0S2V5RG93bik7XG4gICAgfVxuICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgIGNhc2UgXCJFbnRlclwiOlxuICAgICAgICBpZiAoY29udGV4dC5pc09wZW4oKSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBmb2N1c2VkS2V5ID0gc2VsZWN0aW9uTWFuYWdlcigpLmZvY3VzZWRLZXkoKTtcbiAgICAgICAgICBpZiAoZm9jdXNlZEtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0KGZvY3VzZWRLZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJUYWJcIjpcbiAgICAgICAgaWYgKGNvbnRleHQuaXNPcGVuKCkpIHtcbiAgICAgICAgICBjb250ZXh0LmNsb3NlKCk7XG4gICAgICAgICAgY29udGV4dC5yZXNldElucHV0VmFsdWUoXG4gICAgICAgICAgICBjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKS5zZWxlY3RlZEtleXMoKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICAgIGlmIChjb250ZXh0LmlzT3BlbigpKSB7XG4gICAgICAgICAgY29udGV4dC5jbG9zZSgpO1xuICAgICAgICAgIGNvbnRleHQucmVzZXRJbnB1dFZhbHVlKFxuICAgICAgICAgICAgY29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0ZWRLZXlzKClcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuc2V0SW5wdXRWYWx1ZShcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgICAgaWYgKCFjb250ZXh0LmlzT3BlbigpKSB7XG4gICAgICAgICAgY29udGV4dC5vcGVuKGUuYWx0S2V5ID8gZmFsc2UgOiBcImZpcnN0XCIsIFwibWFudWFsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93VXBcIjpcbiAgICAgICAgaWYgKCFjb250ZXh0LmlzT3BlbigpKSB7XG4gICAgICAgICAgY29udGV4dC5vcGVuKFwibGFzdFwiLCBcIm1hbnVhbFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2UoKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzZXRJbnB1dFZhbHVlKFxuICAgICAgICAgICAgICBjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKS5zZWxlY3RlZEtleXMoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICBzZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleSh2b2lkIDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJCYWNrc3BhY2VcIjpcbiAgICAgICAgaWYgKGNvbnRleHQucmVtb3ZlT25CYWNrc3BhY2UoKSAmJiBzZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0aW9uTW9kZSgpID09PSBcIm11bHRpcGxlXCIgJiYgY29udGV4dC5pbnB1dFZhbHVlKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICBjb25zdCBsYXN0U2VsZWN0ZWRLZXkgPSBbLi4uc2VsZWN0aW9uTWFuYWdlcigpLnNlbGVjdGVkS2V5cygpXS5wb3AoKSA/PyBcIlwiO1xuICAgICAgICAgIHNlbGVjdGlvbk1hbmFnZXIoKS50b2dnbGVTZWxlY3Rpb24obGFzdFNlbGVjdGVkS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uRm9jdXMgPSAoZSkgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUsIGxvY2FsLm9uRm9jdXMpO1xuICAgIGlmIChjb250ZXh0LmlzSW5wdXRGb2N1c2VkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC5zZXRJc0lucHV0Rm9jdXNlZCh0cnVlKTtcbiAgfTtcbiAgY29uc3Qgb25CbHVyID0gKGUpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlLCBsb2NhbC5vbkJsdXIpO1xuICAgIGlmIChjb250YWlucyhjb250ZXh0LmNvbnRyb2xSZWYoKSwgZS5yZWxhdGVkVGFyZ2V0KSB8fCBjb250YWlucyhjb250ZXh0LmNvbnRlbnRSZWYoKSwgZS5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb250ZXh0LnNldElzSW5wdXRGb2N1c2VkKGZhbHNlKTtcbiAgfTtcbiAgbGV0IGxhc3RFdmVudFRpbWUgPSAwO1xuICBjb25zdCBvblRvdWNoRW5kID0gKGUpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlLCBsb2NhbC5vblRvdWNoRW5kKTtcbiAgICBpZiAoIXJlZiB8fCBmb3JtQ29udHJvbENvbnRleHQuaXNSZWFkT25seSgpIHx8IGlzRGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZS50aW1lU3RhbXAgLSBsYXN0RXZlbnRUaW1lIDwgNTAwKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZWYuZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHRvdWNoID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICBjb25zdCBjZW50ZXJYID0gTWF0aC5jZWlsKHJlY3QubGVmdCArIDAuNSAqIHJlY3Qud2lkdGgpO1xuICAgIGNvbnN0IGNlbnRlclkgPSBNYXRoLmNlaWwocmVjdC50b3AgKyAwLjUgKiByZWN0LmhlaWdodCk7XG4gICAgaWYgKHRvdWNoLmNsaWVudFggPT09IGNlbnRlclggJiYgdG91Y2guY2xpZW50WSA9PT0gY2VudGVyWSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmVmLmZvY3VzKCk7XG4gICAgICBjb250ZXh0LnRvZ2dsZShmYWxzZSwgXCJtYW51YWxcIik7XG4gICAgICBsYXN0RXZlbnRUaW1lID0gZS50aW1lU3RhbXA7XG4gICAgfVxuICB9O1xuICByZXR1cm4gPFBvbHltb3JwaGljXG4gICAgYXM9XCJpbnB1dFwiXG4gICAgcmVmPXttZXJnZVJlZnMyKChlbCkgPT4ge1xuICAgICAgY29udGV4dC5zZXRJbnB1dFJlZihlbCk7XG4gICAgICByZWYgPSBlbDtcbiAgICB9LCBsb2NhbC5yZWYpfVxuICAgIGlkPXtmaWVsZFByb3BzLmlkKCl9XG4gICAgdmFsdWU9e2NvbnRleHQuaW5wdXRWYWx1ZSgpfVxuICAgIHJlcXVpcmVkPXtmb3JtQ29udHJvbENvbnRleHQuaXNSZXF1aXJlZCgpfVxuICAgIGRpc2FibGVkPXtmb3JtQ29udHJvbENvbnRleHQuaXNEaXNhYmxlZCgpfVxuICAgIHJlYWRvbmx5PXtmb3JtQ29udHJvbENvbnRleHQuaXNSZWFkT25seSgpfVxuICAgIHBsYWNlaG9sZGVyPXtjb250ZXh0LnBsYWNlaG9sZGVyKCl9XG4gICAgdHlwZT1cInRleHRcIlxuICAgIHJvbGU9XCJjb21ib2JveFwiXG4gICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICBhdXRvQ29ycmVjdD1cIm9mZlwiXG4gICAgc3BlbGxDaGVjaz1cImZhbHNlXCJcbiAgICBhcmlhLWhhc3BvcHVwPVwibGlzdGJveFwiXG4gICAgYXJpYS1hdXRvY29tcGxldGU9XCJsaXN0XCJcbiAgICBhcmlhLWV4cGFuZGVkPXtjb250ZXh0LmlzT3BlbigpfVxuICAgIGFyaWEtY29udHJvbHM9e2NvbnRleHQuaXNPcGVuKCkgPyBjb250ZXh0Lmxpc3Rib3hJZCgpIDogdm9pZCAwfVxuICAgIGFyaWEtYWN0aXZlZGVzY2VuZGFudD17Y29udGV4dC5hY3RpdmVEZXNjZW5kYW50KCl9XG4gICAgYXJpYS1sYWJlbD17ZmllbGRQcm9wcy5hcmlhTGFiZWwoKX1cbiAgICBhcmlhLWxhYmVsbGVkYnk9e2ZpZWxkUHJvcHMuYXJpYUxhYmVsbGVkQnkoKX1cbiAgICBhcmlhLWRlc2NyaWJlZGJ5PXtmaWVsZFByb3BzLmFyaWFEZXNjcmliZWRCeSgpfVxuICAgIGFyaWEtaW52YWxpZD17Zm9ybUNvbnRyb2xDb250ZXh0LnZhbGlkYXRpb25TdGF0ZSgpID09PSBcImludmFsaWRcIiB8fCB2b2lkIDB9XG4gICAgYXJpYS1yZXF1aXJlZD17Zm9ybUNvbnRyb2xDb250ZXh0LmlzUmVxdWlyZWQoKSB8fCB2b2lkIDB9XG4gICAgYXJpYS1kaXNhYmxlZD17Zm9ybUNvbnRyb2xDb250ZXh0LmlzRGlzYWJsZWQoKSB8fCB2b2lkIDB9XG4gICAgYXJpYS1yZWFkb25seT17Zm9ybUNvbnRyb2xDb250ZXh0LmlzUmVhZE9ubHkoKSB8fCB2b2lkIDB9XG4gICAgb25JbnB1dD17b25JbnB1dH1cbiAgICBvbktleURvd249e29uS2V5RG93bn1cbiAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgIG9uQmx1cj17b25CbHVyfVxuICAgIG9uVG91Y2hFbmQ9e29uVG91Y2hFbmR9XG4gICAgey4uLmNvbnRleHQuZGF0YXNldCgpfVxuICAgIHsuLi5mb3JtQ29udHJvbENvbnRleHQuZGF0YXNldCgpfVxuICAgIHsuLi5vdGhlcnN9XG4gIC8+O1xufVxuXG4vLyBzcmMvY29tYm9ib3gvY29tYm9ib3gtbGlzdGJveC50c3hcbmltcG9ydCB7IG1lcmdlRGVmYXVsdFByb3BzIGFzIG1lcmdlRGVmYXVsdFByb3BzMiwgbWVyZ2VSZWZzIGFzIG1lcmdlUmVmczMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUVmZmVjdCxcbiAgb25DbGVhbnVwLFxuICBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHMzXG59IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gQ29tYm9ib3hMaXN0Ym94KHByb3BzKSB7XG4gIGNvbnN0IGZvcm1Db250cm9sQ29udGV4dCA9IHVzZUZvcm1Db250cm9sQ29udGV4dCgpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29tYm9ib3hDb250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMyKFxuICAgIHtcbiAgICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJsaXN0Ym94XCIpXG4gICAgfSxcbiAgICBwcm9wc1xuICApO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzMyhtZXJnZWRQcm9wcywgW1wicmVmXCJdKTtcbiAgY29uc3QgYXJpYUxhYmVsbGVkQnkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZvcm1Db250cm9sQ29udGV4dC5nZXRBcmlhTGFiZWxsZWRCeShcbiAgICAgIG90aGVycy5pZCxcbiAgICAgIGNvbnRleHQubGlzdGJveEFyaWFMYWJlbCgpLFxuICAgICAgdm9pZCAwXG4gICAgKTtcbiAgfTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IG9uQ2xlYW51cChjb250ZXh0LnJlZ2lzdGVyTGlzdGJveElkKG90aGVycy5pZCkpKTtcbiAgcmV0dXJuIDxMaXN0Ym94Um9vdFxuICAgIHJlZj17bWVyZ2VSZWZzMyhjb250ZXh0LnNldExpc3Rib3hSZWYsIGxvY2FsLnJlZil9XG4gICAgc3RhdGU9e2NvbnRleHQubGlzdFN0YXRlKCl9XG4gICAgYXV0b0ZvY3VzPXtjb250ZXh0LmF1dG9Gb2N1cygpfVxuICAgIHNob3VsZFVzZVZpcnR1YWxGb2N1c1xuICAgIHNob3VsZFNlbGVjdE9uUHJlc3NVcFxuICAgIHNob3VsZEZvY3VzT25Ib3ZlclxuICAgIGFyaWEtbGFiZWw9e2NvbnRleHQubGlzdGJveEFyaWFMYWJlbCgpfVxuICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsbGVkQnkoKX1cbiAgICByZW5kZXJJdGVtPXtjb250ZXh0LnJlbmRlckl0ZW19XG4gICAgcmVuZGVyU2VjdGlvbj17Y29udGV4dC5yZW5kZXJTZWN0aW9ufVxuICAgIHZpcnR1YWxpemVkPXtjb250ZXh0LmlzVmlydHVhbGl6ZWQoKX1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjtcbn1cblxuLy8gc3JjL2NvbWJvYm94L2NvbWJvYm94LXBvcnRhbC50c3hcbmltcG9ydCB7IFNob3cgYXMgU2hvdzIgfSBmcm9tIFwic29saWQtanNcIjtcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gXCJzb2xpZC1qcy93ZWJcIjtcbmZ1bmN0aW9uIENvbWJvYm94UG9ydGFsKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb21ib2JveENvbnRleHQoKTtcbiAgcmV0dXJuIDxTaG93MiB3aGVuPXtjb250ZXh0LmNvbnRlbnRQcmVzZW50KCl9PjxQb3J0YWwgey4uLnByb3BzfSAvPjwvU2hvdzI+O1xufVxuXG4vLyBzcmMvY29tYm9ib3gvY29tYm9ib3gtY29udHJvbC50c3hcbmltcG9ydCB7IGlzRnVuY3Rpb24sIG1lcmdlUmVmcyBhcyBtZXJnZVJlZnM0IH0gZnJvbSBcIkBrb2JhbHRlL3V0aWxzXCI7XG5pbXBvcnQgeyBjaGlsZHJlbiwgc3BsaXRQcm9wcyBhcyBzcGxpdFByb3BzNCB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gQ29tYm9ib3hDb250cm9sKHByb3BzKSB7XG4gIGNvbnN0IGZvcm1Db250cm9sQ29udGV4dCA9IHVzZUZvcm1Db250cm9sQ29udGV4dCgpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29tYm9ib3hDb250ZXh0KCk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHM0KHByb3BzLCBbXG4gICAgXCJyZWZcIixcbiAgICBcImNoaWxkcmVuXCJcbiAgXSk7XG4gIGNvbnN0IHNlbGVjdGlvbk1hbmFnZXIgPSAoKSA9PiBjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKTtcbiAgcmV0dXJuIDxQb2x5bW9ycGhpY1xuICAgIGFzPVwiZGl2XCJcbiAgICByZWY9e21lcmdlUmVmczQoY29udGV4dC5zZXRDb250cm9sUmVmLCBsb2NhbC5yZWYpfVxuICAgIHsuLi5jb250ZXh0LmRhdGFzZXQoKX1cbiAgICB7Li4uZm9ybUNvbnRyb2xDb250ZXh0LmRhdGFzZXQoKX1cbiAgICB7Li4ub3RoZXJzfVxuICA+PENvbWJvYm94Q29udHJvbENoaWxkXG4gICAgc3RhdGU9e3tcbiAgICAgIHNlbGVjdGVkT3B0aW9uczogKCkgPT4gY29udGV4dC5zZWxlY3RlZE9wdGlvbnMoKSxcbiAgICAgIHJlbW92ZTogKG9wdGlvbikgPT4gY29udGV4dC5yZW1vdmVPcHRpb25Gcm9tU2VsZWN0aW9uKG9wdGlvbiksXG4gICAgICBjbGVhcjogKCkgPT4gc2VsZWN0aW9uTWFuYWdlcigpLmNsZWFyU2VsZWN0aW9uKClcbiAgICB9fVxuICAgIGNoaWxkcmVuPXtsb2NhbC5jaGlsZHJlbn1cbiAgLz48L1BvbHltb3JwaGljPjtcbn1cbmZ1bmN0aW9uIENvbWJvYm94Q29udHJvbENoaWxkKHByb3BzKSB7XG4gIGNvbnN0IHJlc29sdmVkQ2hpbGRyZW4gPSBjaGlsZHJlbigoKSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHByb3BzLmNoaWxkcmVuO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGJvZHkpID8gYm9keShwcm9wcy5zdGF0ZSkgOiBib2R5O1xuICB9KTtcbiAgcmV0dXJuIDw+e3Jlc29sdmVkQ2hpbGRyZW4oKX08Lz47XG59XG5cbi8vIHNyYy9jb21ib2JveC9jb21ib2JveC1oaWRkZW4tc2VsZWN0LnRzeFxuZnVuY3Rpb24gQ29tYm9ib3hIaWRkZW5TZWxlY3QocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbWJvYm94Q29udGV4dCgpO1xuICByZXR1cm4gPEhpZGRlblNlbGVjdEJhc2VcbiAgICBjb2xsZWN0aW9uPXtjb250ZXh0Lmxpc3RTdGF0ZSgpLmNvbGxlY3Rpb24oKX1cbiAgICBzZWxlY3Rpb25NYW5hZ2VyPXtjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKX1cbiAgICBpc09wZW49e2NvbnRleHQuaXNPcGVuKCl9XG4gICAgaXNNdWx0aXBsZT17Y29udGV4dC5pc011bHRpcGxlKCl9XG4gICAgaXNWaXJ0dWFsaXplZD17Y29udGV4dC5pc1ZpcnR1YWxpemVkKCl9XG4gICAgZm9jdXNUcmlnZ2VyPXsoKSA9PiBjb250ZXh0LmlucHV0UmVmKCk/LmZvY3VzKCl9XG4gICAgey4uLnByb3BzfVxuICAvPjtcbn1cblxuLy8gc3JjL2NvbWJvYm94L2NvbWJvYm94LWljb24udHN4XG5pbXBvcnQgeyBtZXJnZURlZmF1bHRQcm9wcyBhcyBtZXJnZURlZmF1bHRQcm9wczMgfSBmcm9tIFwiQGtvYmFsdGUvdXRpbHNcIjtcbmZ1bmN0aW9uIENvbWJvYm94SWNvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29tYm9ib3hDb250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMzKFxuICAgIHsgY2hpbGRyZW46IFwiXFx1MjVCQ1wiIH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgcmV0dXJuIDxQb2x5bW9ycGhpY1xuICAgIGFzPVwic3BhblwiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICB7Li4uY29udGV4dC5kYXRhc2V0KCl9XG4gICAgey4uLm1lcmdlZFByb3BzfVxuICAvPjtcbn1cblxuLy8gc3JjL2NvbWJvYm94L2NvbWJvYm94LXJvb3QudHN4XG5pbXBvcnQgeyBjcmVhdGVNZW1vIGFzIGNyZWF0ZU1lbW8yLCBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHM2IH0gZnJvbSBcInNvbGlkLWpzXCI7XG5cbi8vIHNyYy9jb21ib2JveC9jb21ib2JveC1iYXNlLnRzeFxuaW1wb3J0IHtcbiAgYWNjZXNzLFxuICBjcmVhdGVHZW5lcmF0ZUlkLFxuICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcgYXMgZm9jdXNXaXRob3V0U2Nyb2xsaW5nMixcbiAgaXNBcHBsZURldmljZSxcbiAgaXNGdW5jdGlvbiBhcyBpc0Z1bmN0aW9uMixcbiAgbWVyZ2VEZWZhdWx0UHJvcHMgYXMgbWVyZ2VEZWZhdWx0UHJvcHM0XG59IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRlRWZmZWN0IGFzIGNyZWF0ZUVmZmVjdDIsXG4gIGNyZWF0ZU1lbW8sXG4gIGNyZWF0ZVNpZ25hbCxcbiAgY3JlYXRlVW5pcXVlSWQsXG4gIG9uLFxuICBzcGxpdFByb3BzIGFzIHNwbGl0UHJvcHM1XG59IGZyb20gXCJzb2xpZC1qc1wiO1xuaW1wb3J0IGNyZWF0ZVByZXNlbmNlIGZyb20gXCJzb2xpZC1wcmVzZW5jZVwiO1xuXG4vLyBzcmMvY29tYm9ib3gvY29tYm9ib3guaW50bC50c1xudmFyIENPTUJPQk9YX0lOVExfVFJBTlNMQVRJT05TID0ge1xuICAvLyBBbm5vdWNlIG9wdGlvbiB0byBzY3JlZW4gcmVhZGVycyBvbiBmb2N1cy5cbiAgZm9jdXNBbm5vdW5jZW1lbnQ6IChvcHRpb25UZXh0LCBpc1NlbGVjdGVkKSA9PiBgJHtvcHRpb25UZXh0fSR7aXNTZWxlY3RlZCA/IFwiLCBzZWxlY3RlZFwiIDogXCJcIn1gLFxuICAvLyBBbm5vdWNlIHRoZSBudW1iZXIgb2Ygb3B0aW9ucyBhdmFpbGFibGUgdG8gc2NyZWVuIHJlYWRlcnMgb24gb3Blbi5cbiAgY291bnRBbm5vdW5jZW1lbnQ6IChvcHRpb25Db3VudCkgPT4ge1xuICAgIHN3aXRjaCAob3B0aW9uQ291bnQpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIFwib25lIG9wdGlvbiBhdmFpbGFibGVcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGAke29wdGlvbkNvdW50fSBvcHRpb25zIGF2YWlsYWJsZWA7XG4gICAgfVxuICB9LFxuICAvLyBBbm5vdWNlIHRoZSBzZWxlY3Rpb24gb2YgYW4gb3B0aW9uIHRvIHNjcmVlbiByZWFkZXJzLlxuICBzZWxlY3RlZEFubm91bmNlbWVudDogKG9wdGlvblRleHQpID0+IGAke29wdGlvblRleHR9LCBzZWxlY3RlZGAsXG4gIC8vIGBhcmlhLWxhYmVsYCBvZiBDb21ib2JveC5UcmlnZ2VyLlxuICB0cmlnZ2VyTGFiZWw6IFwiU2hvdyBzdWdnZXN0aW9uc1wiLFxuICAvLyBgYXJpYS1sYWJlbGAgb2YgQ29tYm9ib3guTGlzdGJveC5cbiAgbGlzdGJveExhYmVsOiBcIlN1Z2dlc3Rpb25zXCJcbn07XG5cbi8vIHNyYy9jb21ib2JveC9jb21ib2JveC1iYXNlLnRzeFxuZnVuY3Rpb24gQ29tYm9ib3hCYXNlKHByb3BzKSB7XG4gIGNvbnN0IGRlZmF1bHRJZCA9IGBjb21ib2JveC0ke2NyZWF0ZVVuaXF1ZUlkKCl9YDtcbiAgY29uc3QgZmlsdGVyID0gY3JlYXRlRmlsdGVyKHsgc2Vuc2l0aXZpdHk6IFwiYmFzZVwiIH0pO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzNChcbiAgICB7XG4gICAgICBpZDogZGVmYXVsdElkLFxuICAgICAgc2VsZWN0aW9uTW9kZTogXCJzaW5nbGVcIixcbiAgICAgIGFsbG93c0VtcHR5Q29sbGVjdGlvbjogZmFsc2UsXG4gICAgICBkaXNhbGxvd0VtcHR5U2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgIGFsbG93RHVwbGljYXRlU2VsZWN0aW9uRXZlbnRzOiB0cnVlLFxuICAgICAgY2xvc2VPblNlbGVjdGlvbjogcHJvcHMuc2VsZWN0aW9uTW9kZSA9PT0gXCJzaW5nbGVcIixcbiAgICAgIHJlbW92ZU9uQmFja3NwYWNlOiB0cnVlLFxuICAgICAgZ3V0dGVyOiA4LFxuICAgICAgc2FtZVdpZHRoOiB0cnVlLFxuICAgICAgbW9kYWw6IGZhbHNlLFxuICAgICAgZGVmYXVsdEZpbHRlcjogXCJjb250YWluc1wiLFxuICAgICAgdHJpZ2dlck1vZGU6IFwiaW5wdXRcIixcbiAgICAgIHRyYW5zbGF0aW9uczogQ09NQk9CT1hfSU5UTF9UUkFOU0xBVElPTlNcbiAgICB9LFxuICAgIHByb3BzXG4gICk7XG4gIGNvbnN0IFtsb2NhbCwgcG9wcGVyUHJvcHMsIGZvcm1Db250cm9sUHJvcHMsIG90aGVyc10gPSBzcGxpdFByb3BzNShcbiAgICBtZXJnZWRQcm9wcyxcbiAgICBbXG4gICAgICBcInRyYW5zbGF0aW9uc1wiLFxuICAgICAgXCJpdGVtQ29tcG9uZW50XCIsXG4gICAgICBcInNlY3Rpb25Db21wb25lbnRcIixcbiAgICAgIFwib3BlblwiLFxuICAgICAgXCJkZWZhdWx0T3BlblwiLFxuICAgICAgXCJvbk9wZW5DaGFuZ2VcIixcbiAgICAgIFwib25JbnB1dENoYW5nZVwiLFxuICAgICAgXCJ2YWx1ZVwiLFxuICAgICAgXCJkZWZhdWx0VmFsdWVcIixcbiAgICAgIFwib25DaGFuZ2VcIixcbiAgICAgIFwidHJpZ2dlck1vZGVcIixcbiAgICAgIFwicGxhY2Vob2xkZXJcIixcbiAgICAgIFwib3B0aW9uc1wiLFxuICAgICAgXCJvcHRpb25WYWx1ZVwiLFxuICAgICAgXCJvcHRpb25UZXh0VmFsdWVcIixcbiAgICAgIFwib3B0aW9uTGFiZWxcIixcbiAgICAgIFwib3B0aW9uRGlzYWJsZWRcIixcbiAgICAgIFwib3B0aW9uR3JvdXBDaGlsZHJlblwiLFxuICAgICAgXCJrZXlib2FyZERlbGVnYXRlXCIsXG4gICAgICBcImFsbG93RHVwbGljYXRlU2VsZWN0aW9uRXZlbnRzXCIsXG4gICAgICBcImRpc2FsbG93RW1wdHlTZWxlY3Rpb25cIixcbiAgICAgIFwiZGVmYXVsdEZpbHRlclwiLFxuICAgICAgXCJzaG91bGRGb2N1c1dyYXBcIixcbiAgICAgIFwiYWxsb3dzRW1wdHlDb2xsZWN0aW9uXCIsXG4gICAgICBcImNsb3NlT25TZWxlY3Rpb25cIixcbiAgICAgIFwicmVtb3ZlT25CYWNrc3BhY2VcIixcbiAgICAgIFwic2VsZWN0aW9uQmVoYXZpb3JcIixcbiAgICAgIFwic2VsZWN0aW9uTW9kZVwiLFxuICAgICAgXCJ2aXJ0dWFsaXplZFwiLFxuICAgICAgXCJtb2RhbFwiLFxuICAgICAgXCJwcmV2ZW50U2Nyb2xsXCIsXG4gICAgICBcImZvcmNlTW91bnRcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXRBbmNob3JSZWN0XCIsXG4gICAgICBcInBsYWNlbWVudFwiLFxuICAgICAgXCJndXR0ZXJcIixcbiAgICAgIFwic2hpZnRcIixcbiAgICAgIFwiZmxpcFwiLFxuICAgICAgXCJzbGlkZVwiLFxuICAgICAgXCJvdmVybGFwXCIsXG4gICAgICBcInNhbWVXaWR0aFwiLFxuICAgICAgXCJmaXRWaWV3cG9ydFwiLFxuICAgICAgXCJoaWRlV2hlbkRldGFjaGVkXCIsXG4gICAgICBcImRldGFjaGVkUGFkZGluZ1wiLFxuICAgICAgXCJhcnJvd1BhZGRpbmdcIixcbiAgICAgIFwib3ZlcmZsb3dQYWRkaW5nXCJcbiAgICBdLFxuICAgIEZPUk1fQ09OVFJPTF9QUk9QX05BTUVTXG4gICk7XG4gIGNvbnN0IFtsaXN0Ym94SWQsIHNldExpc3Rib3hJZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2NvbnRyb2xSZWYsIHNldENvbnRyb2xSZWZdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtpbnB1dFJlZiwgc2V0SW5wdXRSZWZdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFt0cmlnZ2VyUmVmLCBzZXRUcmlnZ2VyUmVmXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbY29udGVudFJlZiwgc2V0Q29udGVudFJlZl0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2xpc3Rib3hSZWYsIHNldExpc3Rib3hSZWZdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtmb2N1c1N0cmF0ZWd5LCBzZXRGb2N1c1N0cmF0ZWd5XSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IFtpc0lucHV0Rm9jdXNlZCwgc2V0SXNJbnB1dEZvY3VzZWRTdGF0ZV0gPSBjcmVhdGVTaWduYWwoZmFsc2UpO1xuICBjb25zdCBbc2hvd0FsbE9wdGlvbnMsIHNldFNob3dBbGxPcHRpb25zXSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IFtsYXN0RGlzcGxheWVkT3B0aW9ucywgc2V0TGFzdERpc3BsYXllZE9wdGlvbnNdID0gY3JlYXRlU2lnbmFsKFxuICAgIGxvY2FsLm9wdGlvbnNcbiAgKTtcbiAgY29uc3QgZGlzY2xvc3VyZVN0YXRlID0gY3JlYXRlRGlzY2xvc3VyZVN0YXRlKHtcbiAgICBvcGVuOiAoKSA9PiBsb2NhbC5vcGVuLFxuICAgIGRlZmF1bHRPcGVuOiAoKSA9PiBsb2NhbC5kZWZhdWx0T3BlbixcbiAgICBvbk9wZW5DaGFuZ2U6IChpc09wZW4pID0+IGxvY2FsLm9uT3BlbkNoYW5nZT8uKGlzT3Blbiwgb3BlblRyaWdnZXJNb2RlKVxuICB9KTtcbiAgY29uc3QgW2lucHV0VmFsdWUsIHNldElucHV0VmFsdWVdID0gY3JlYXRlQ29udHJvbGxhYmxlU2lnbmFsKHtcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IFwiXCIsXG4gICAgb25DaGFuZ2U6ICh2YWx1ZSkgPT4ge1xuICAgICAgbG9jYWwub25JbnB1dENoYW5nZT8uKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIiAmJiBsb2NhbC5zZWxlY3Rpb25Nb2RlID09PSBcInNpbmdsZVwiICYmICFsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLmlzRW1wdHkoKSAmJiBsb2NhbC52YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0U2VsZWN0ZWRLZXlzKFtdKTtcbiAgICAgIH1cbiAgICAgIGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleSh2b2lkIDApO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGdldE9wdGlvblZhbHVlID0gKG9wdGlvbikgPT4ge1xuICAgIGNvbnN0IG9wdGlvblZhbHVlID0gbG9jYWwub3B0aW9uVmFsdWU7XG4gICAgaWYgKG9wdGlvblZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBTdHJpbmcob3B0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhcbiAgICAgIGlzRnVuY3Rpb24yKG9wdGlvblZhbHVlKSA/IG9wdGlvblZhbHVlKG9wdGlvbikgOiBvcHRpb25bb3B0aW9uVmFsdWVdXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgZ2V0T3B0aW9uTGFiZWwgPSAob3B0aW9uKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uTGFiZWwgPSBsb2NhbC5vcHRpb25MYWJlbDtcbiAgICBpZiAob3B0aW9uTGFiZWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFN0cmluZyhvcHRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKFxuICAgICAgaXNGdW5jdGlvbjIob3B0aW9uTGFiZWwpID8gb3B0aW9uTGFiZWwob3B0aW9uKSA6IG9wdGlvbltvcHRpb25MYWJlbF1cbiAgICApO1xuICB9O1xuICBjb25zdCBhbGxPcHRpb25zID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uR3JvdXBDaGlsZHJlbiA9IGxvY2FsLm9wdGlvbkdyb3VwQ2hpbGRyZW47XG4gICAgaWYgKG9wdGlvbkdyb3VwQ2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGxvY2FsLm9wdGlvbnM7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbC5vcHRpb25zLmZsYXRNYXAoXG4gICAgICAoaXRlbSkgPT4gaXRlbVtvcHRpb25Hcm91cENoaWxkcmVuXSA/PyBpdGVtXG4gICAgKTtcbiAgfSk7XG4gIGNvbnN0IGZpbHRlckZuID0gKG9wdGlvbikgPT4ge1xuICAgIGNvbnN0IGlucHV0VmFsID0gaW5wdXRWYWx1ZSgpID8/IFwiXCI7XG4gICAgaWYgKGlzRnVuY3Rpb24yKGxvY2FsLmRlZmF1bHRGaWx0ZXIpKSB7XG4gICAgICByZXR1cm4gbG9jYWwuZGVmYXVsdEZpbHRlcj8uKG9wdGlvbiwgaW5wdXRWYWwpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0VmFsID0gZ2V0T3B0aW9uTGFiZWwob3B0aW9uKTtcbiAgICBzd2l0Y2ggKGxvY2FsLmRlZmF1bHRGaWx0ZXIpIHtcbiAgICAgIGNhc2UgXCJzdGFydHNXaXRoXCI6XG4gICAgICAgIHJldHVybiBmaWx0ZXIuc3RhcnRzV2l0aCh0ZXh0VmFsLCBpbnB1dFZhbCk7XG4gICAgICBjYXNlIFwiZW5kc1dpdGhcIjpcbiAgICAgICAgcmV0dXJuIGZpbHRlci5lbmRzV2l0aCh0ZXh0VmFsLCBpbnB1dFZhbCk7XG4gICAgICBjYXNlIFwiY29udGFpbnNcIjpcbiAgICAgICAgcmV0dXJuIGZpbHRlci5jb250YWlucyh0ZXh0VmFsLCBpbnB1dFZhbCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBvcHRpb25Hcm91cENoaWxkcmVuID0gbG9jYWwub3B0aW9uR3JvdXBDaGlsZHJlbjtcbiAgICBpZiAob3B0aW9uR3JvdXBDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbG9jYWwub3B0aW9ucy5maWx0ZXIoZmlsdGVyRm4pO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJlZEdyb3VwcyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3B0R3JvdXAgb2YgbG9jYWwub3B0aW9ucykge1xuICAgICAgY29uc3QgZmlsdGVyZWRDaGlsZHJlbk9wdGlvbnMgPSBvcHRHcm91cFtvcHRpb25Hcm91cENoaWxkcmVuXS5maWx0ZXIoZmlsdGVyRm4pO1xuICAgICAgaWYgKGZpbHRlcmVkQ2hpbGRyZW5PcHRpb25zLmxlbmd0aCA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBmaWx0ZXJlZEdyb3Vwcy5wdXNoKHtcbiAgICAgICAgLi4ub3B0R3JvdXAsXG4gICAgICAgIFtvcHRpb25Hcm91cENoaWxkcmVuXTogZmlsdGVyZWRDaGlsZHJlbk9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRHcm91cHM7XG4gIH0pO1xuICBjb25zdCBkaXNwbGF5ZWRPcHRpb25zID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgaWYgKGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKSkge1xuICAgICAgaWYgKHNob3dBbGxPcHRpb25zKCkpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsLm9wdGlvbnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zKCk7XG4gICAgfVxuICAgIHJldHVybiBsYXN0RGlzcGxheWVkT3B0aW9ucygpO1xuICB9KTtcbiAgbGV0IG9wZW5UcmlnZ2VyTW9kZSA9IFwiZm9jdXNcIjtcbiAgY29uc3QgZ2V0T3B0aW9uc0Zyb21WYWx1ZXMgPSAodmFsdWVzKSA9PiB7XG4gICAgcmV0dXJuIFsuLi52YWx1ZXNdLm1hcChcbiAgICAgICh2YWx1ZSkgPT4gYWxsT3B0aW9ucygpLmZpbmQoKG9wdGlvbikgPT4gZ2V0T3B0aW9uVmFsdWUob3B0aW9uKSA9PT0gdmFsdWUpXG4gICAgKS5maWx0ZXIoKG9wdGlvbikgPT4gb3B0aW9uICE9IG51bGwpO1xuICB9O1xuICBjb25zdCBsaXN0U3RhdGUgPSBjcmVhdGVMaXN0U3RhdGUoe1xuICAgIHNlbGVjdGVkS2V5czogKCkgPT4ge1xuICAgICAgaWYgKGxvY2FsLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsLnZhbHVlLm1hcChnZXRPcHRpb25WYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG9jYWwudmFsdWU7XG4gICAgfSxcbiAgICBkZWZhdWx0U2VsZWN0ZWRLZXlzOiAoKSA9PiB7XG4gICAgICBpZiAobG9jYWwuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsLmRlZmF1bHRWYWx1ZS5tYXAoZ2V0T3B0aW9uVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvY2FsLmRlZmF1bHRWYWx1ZTtcbiAgICB9LFxuICAgIG9uU2VsZWN0aW9uQ2hhbmdlOiAoc2VsZWN0ZWRLZXlzKSA9PiB7XG4gICAgICBsb2NhbC5vbkNoYW5nZT8uKGdldE9wdGlvbnNGcm9tVmFsdWVzKHNlbGVjdGVkS2V5cykpO1xuICAgICAgaWYgKGxvY2FsLmNsb3NlT25TZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKSAmJiBzZWxlY3RlZEtleXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgIHNldFRpbWVvdXQoY2xvc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBpbnB1dEVsID0gaW5wdXRSZWYoKTtcbiAgICAgIGlmIChpbnB1dEVsKSB7XG4gICAgICAgIGlucHV0RWwuc2V0U2VsZWN0aW9uUmFuZ2UoaW5wdXRFbC52YWx1ZS5sZW5ndGgsIGlucHV0RWwudmFsdWUubGVuZ3RoKTtcbiAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nMihpbnB1dEVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFsbG93RHVwbGljYXRlU2VsZWN0aW9uRXZlbnRzOiAoKSA9PiBhY2Nlc3MobG9jYWwuYWxsb3dEdXBsaWNhdGVTZWxlY3Rpb25FdmVudHMpLFxuICAgIGRpc2FsbG93RW1wdHlTZWxlY3Rpb246ICgpID0+IGxvY2FsLmRpc2FsbG93RW1wdHlTZWxlY3Rpb24sXG4gICAgc2VsZWN0aW9uQmVoYXZpb3I6ICgpID0+IGFjY2Vzcyhsb2NhbC5zZWxlY3Rpb25CZWhhdmlvciksXG4gICAgc2VsZWN0aW9uTW9kZTogKCkgPT4gbG9jYWwuc2VsZWN0aW9uTW9kZSxcbiAgICBkYXRhU291cmNlOiBkaXNwbGF5ZWRPcHRpb25zLFxuICAgIGdldEtleTogKCkgPT4gbG9jYWwub3B0aW9uVmFsdWUsXG4gICAgZ2V0VGV4dFZhbHVlOiAoKSA9PiBsb2NhbC5vcHRpb25UZXh0VmFsdWUsXG4gICAgZ2V0RGlzYWJsZWQ6ICgpID0+IGxvY2FsLm9wdGlvbkRpc2FibGVkLFxuICAgIGdldFNlY3Rpb25DaGlsZHJlbjogKCkgPT4gbG9jYWwub3B0aW9uR3JvdXBDaGlsZHJlblxuICB9KTtcbiAgY29uc3Qgc2VsZWN0ZWRPcHRpb25zID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIGdldE9wdGlvbnNGcm9tVmFsdWVzKGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0ZWRLZXlzKCkpO1xuICB9KTtcbiAgY29uc3QgcmVtb3ZlT3B0aW9uRnJvbVNlbGVjdGlvbiA9IChvcHRpb24pID0+IHtcbiAgICBsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLnRvZ2dsZVNlbGVjdGlvbihnZXRPcHRpb25WYWx1ZShvcHRpb24pKTtcbiAgfTtcbiAgY29uc3QgeyBwcmVzZW50OiBjb250ZW50UHJlc2VudCB9ID0gY3JlYXRlUHJlc2VuY2Uoe1xuICAgIHNob3c6ICgpID0+IGxvY2FsLmZvcmNlTW91bnQgfHwgZGlzY2xvc3VyZVN0YXRlLmlzT3BlbigpLFxuICAgIGVsZW1lbnQ6IGNvbnRlbnRSZWZcbiAgfSk7XG4gIGNvbnN0IG9wZW4gPSAoZm9jdXNTdHJhdGVneTIsIHRyaWdnZXJNb2RlKSA9PiB7XG4gICAgY29uc3Qgc2hvd0FsbE9wdGlvbnMyID0gc2V0U2hvd0FsbE9wdGlvbnModHJpZ2dlck1vZGUgPT09IFwibWFudWFsXCIpO1xuICAgIGNvbnN0IGhhc09wdGlvbnMgPSBzaG93QWxsT3B0aW9uczIgPyBsb2NhbC5vcHRpb25zLmxlbmd0aCA+IDAgOiBmaWx0ZXJlZE9wdGlvbnMoKS5sZW5ndGggPiAwO1xuICAgIGlmICghaGFzT3B0aW9ucyAmJiAhbG9jYWwuYWxsb3dzRW1wdHlDb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wZW5UcmlnZ2VyTW9kZSA9IHRyaWdnZXJNb2RlO1xuICAgIHNldEZvY3VzU3RyYXRlZ3koZm9jdXNTdHJhdGVneTIpO1xuICAgIGRpc2Nsb3N1cmVTdGF0ZS5vcGVuKCk7XG4gICAgbGV0IGZvY3VzZWRLZXkgPSBsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLmZpcnN0U2VsZWN0ZWRLZXkoKTtcbiAgICBpZiAoZm9jdXNlZEtleSA9PSBudWxsKSB7XG4gICAgICBpZiAoZm9jdXNTdHJhdGVneTIgPT09IFwiZmlyc3RcIikge1xuICAgICAgICBmb2N1c2VkS2V5ID0gbGlzdFN0YXRlLmNvbGxlY3Rpb24oKS5nZXRGaXJzdEtleSgpO1xuICAgICAgfSBlbHNlIGlmIChmb2N1c1N0cmF0ZWd5MiA9PT0gXCJsYXN0XCIpIHtcbiAgICAgICAgZm9jdXNlZEtleSA9IGxpc3RTdGF0ZS5jb2xsZWN0aW9uKCkuZ2V0TGFzdEtleSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLnNldEZvY3VzZWQodHJ1ZSk7XG4gICAgbGlzdFN0YXRlLnNlbGVjdGlvbk1hbmFnZXIoKS5zZXRGb2N1c2VkS2V5KGZvY3VzZWRLZXkpO1xuICB9O1xuICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBkaXNjbG9zdXJlU3RhdGUuY2xvc2UoKTtcbiAgICBsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgIGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleSh2b2lkIDApO1xuICB9O1xuICBjb25zdCB0b2dnbGUgPSAoZm9jdXNTdHJhdGVneTIsIHRyaWdnZXJNb2RlKSA9PiB7XG4gICAgaWYgKGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKSkge1xuICAgICAgY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3Blbihmb2N1c1N0cmF0ZWd5MiwgdHJpZ2dlck1vZGUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgeyBmb3JtQ29udHJvbENvbnRleHQgfSA9IGNyZWF0ZUZvcm1Db250cm9sKGZvcm1Db250cm9sUHJvcHMpO1xuICBjcmVhdGVGb3JtUmVzZXRMaXN0ZW5lcihpbnB1dFJlZiwgKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRTZWxlY3RlZEtleXMgPSBsb2NhbC5kZWZhdWx0VmFsdWUgPyBbLi4ubG9jYWwuZGVmYXVsdFZhbHVlXS5tYXAoZ2V0T3B0aW9uVmFsdWUpIDogbmV3IFNlbGVjdGlvbigpO1xuICAgIGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0U2VsZWN0ZWRLZXlzKGRlZmF1bHRTZWxlY3RlZEtleXMpO1xuICB9KTtcbiAgY29uc3QgZGVsZWdhdGUgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBrZXlib2FyZERlbGVnYXRlID0gYWNjZXNzKGxvY2FsLmtleWJvYXJkRGVsZWdhdGUpO1xuICAgIGlmIChrZXlib2FyZERlbGVnYXRlKSB7XG4gICAgICByZXR1cm4ga2V5Ym9hcmREZWxlZ2F0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMaXN0S2V5Ym9hcmREZWxlZ2F0ZShcbiAgICAgIGxpc3RTdGF0ZS5jb2xsZWN0aW9uLFxuICAgICAgbGlzdGJveFJlZixcbiAgICAgIHZvaWQgMFxuICAgICk7XG4gIH0pO1xuICBjb25zdCBzZWxlY3RhYmxlQ29sbGVjdGlvbiA9IGNyZWF0ZVNlbGVjdGFibGVDb2xsZWN0aW9uKFxuICAgIHtcbiAgICAgIHNlbGVjdGlvbk1hbmFnZXI6ICgpID0+IGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCksXG4gICAgICBrZXlib2FyZERlbGVnYXRlOiBkZWxlZ2F0ZSxcbiAgICAgIGRpc2FsbG93VHlwZUFoZWFkOiB0cnVlLFxuICAgICAgZGlzYWxsb3dFbXB0eVNlbGVjdGlvbjogdHJ1ZSxcbiAgICAgIHNob3VsZEZvY3VzV3JhcDogKCkgPT4gbG9jYWwuc2hvdWxkRm9jdXNXcmFwLFxuICAgICAgLy8gUHJldmVudCBpdGVtIHNjcm9sbCBiZWhhdmlvciBmcm9tIGJlaW5nIGFwcGxpZWQgaGVyZSwgaGFuZGxlZCBpbiB0aGUgTGlzdGJveCBjb21wb25lbnQuXG4gICAgICBpc1ZpcnR1YWxpemVkOiB0cnVlXG4gICAgfSxcbiAgICBpbnB1dFJlZlxuICApO1xuICBjb25zdCBzZXRJc0lucHV0Rm9jdXNlZCA9IChpc0ZvY3VzZWQpID0+IHtcbiAgICBpZiAoaXNGb2N1c2VkICYmIGxvY2FsLnRyaWdnZXJNb2RlID09PSBcImZvY3VzXCIpIHtcbiAgICAgIG9wZW4oZmFsc2UsIFwiZm9jdXNcIik7XG4gICAgfVxuICAgIHNldElzSW5wdXRGb2N1c2VkU3RhdGUoaXNGb2N1c2VkKTtcbiAgICBsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLnNldEZvY3VzZWQoaXNGb2N1c2VkKTtcbiAgfTtcbiAgY29uc3QgYWN0aXZlRGVzY2VuZGFudCA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGZvY3VzZWRLZXkgPSBsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLmZvY3VzZWRLZXkoKTtcbiAgICBpZiAoZm9jdXNlZEtleSkge1xuICAgICAgcmV0dXJuIGxpc3Rib3hSZWYoKT8ucXVlcnlTZWxlY3RvcihgW2RhdGEta2V5PVwiJHtmb2N1c2VkS2V5fVwiXWApPy5pZDtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfSk7XG4gIGNvbnN0IHJlc2V0SW5wdXRWYWx1ZSA9IChzZWxlY3RlZEtleXMpID0+IHtcbiAgICBpZiAobG9jYWwuc2VsZWN0aW9uTW9kZSA9PT0gXCJzaW5nbGVcIikge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRLZXkgPSBbLi4uc2VsZWN0ZWRLZXlzXVswXTtcbiAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gYWxsT3B0aW9ucygpLmZpbmQoXG4gICAgICAgIChvcHRpb24pID0+IGdldE9wdGlvblZhbHVlKG9wdGlvbikgPT09IHNlbGVjdGVkS2V5XG4gICAgICApO1xuICAgICAgc2V0SW5wdXRWYWx1ZShzZWxlY3RlZE9wdGlvbiA/IGdldE9wdGlvbkxhYmVsKHNlbGVjdGVkT3B0aW9uKSA6IFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbnB1dFZhbHVlKFwiXCIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVuZGVySXRlbSA9IChpdGVtKSA9PiB7XG4gICAgcmV0dXJuIGxvY2FsLml0ZW1Db21wb25lbnQ/Lih7IGl0ZW0gfSk7XG4gIH07XG4gIGNvbnN0IHJlbmRlclNlY3Rpb24gPSAoc2VjdGlvbikgPT4ge1xuICAgIHJldHVybiBsb2NhbC5zZWN0aW9uQ29tcG9uZW50Py4oeyBzZWN0aW9uIH0pO1xuICB9O1xuICBjcmVhdGVFZmZlY3QyKFxuICAgIG9uKFtmaWx0ZXJlZE9wdGlvbnMsIHNob3dBbGxPcHRpb25zXSwgKGlucHV0LCBwcmV2SW5wdXQpID0+IHtcbiAgICAgIGlmIChkaXNjbG9zdXJlU3RhdGUuaXNPcGVuKCkgJiYgcHJldklucHV0ICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgcHJldkZpbHRlcmVkT3B0aW9ucyA9IHByZXZJbnB1dFswXTtcbiAgICAgICAgY29uc3QgcHJldlNob3dBbGxPcHRpb25zID0gcHJldklucHV0WzFdO1xuICAgICAgICBzZXRMYXN0RGlzcGxheWVkT3B0aW9ucyhcbiAgICAgICAgICBwcmV2U2hvd0FsbE9wdGlvbnMgPyBsb2NhbC5vcHRpb25zIDogcHJldkZpbHRlcmVkT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRPcHRpb25zMiA9IGlucHV0WzBdO1xuICAgICAgICBjb25zdCBzaG93QWxsT3B0aW9uczIgPSBpbnB1dFsxXTtcbiAgICAgICAgc2V0TGFzdERpc3BsYXllZE9wdGlvbnMoXG4gICAgICAgICAgc2hvd0FsbE9wdGlvbnMyID8gbG9jYWwub3B0aW9ucyA6IGZpbHRlcmVkT3B0aW9uczJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xuICBjcmVhdGVFZmZlY3QyKFxuICAgIG9uKGlucHV0VmFsdWUsICgpID0+IHtcbiAgICAgIGlmIChzaG93QWxsT3B0aW9ucygpKSB7XG4gICAgICAgIHNldFNob3dBbGxPcHRpb25zKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xuICBjcmVhdGVFZmZlY3QyKFxuICAgIG9uKCgpID0+IGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2VsZWN0ZWRLZXlzKCksIHJlc2V0SW5wdXRWYWx1ZSlcbiAgKTtcbiAgbGV0IGxhc3RBbm5vdW5jZWRGb2N1c2VkS2V5ID0gXCJcIjtcbiAgY3JlYXRlRWZmZWN0MigoKSA9PiB7XG4gICAgY29uc3QgZm9jdXNlZEtleSA9IGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuZm9jdXNlZEtleSgpID8/IFwiXCI7XG4gICAgY29uc3QgZm9jdXNlZEl0ZW0gPSBsaXN0U3RhdGUuY29sbGVjdGlvbigpLmdldEl0ZW0oZm9jdXNlZEtleSk7XG4gICAgaWYgKGlzQXBwbGVEZXZpY2UoKSAmJiBmb2N1c2VkSXRlbSAhPSBudWxsICYmIGZvY3VzZWRLZXkgIT09IGxhc3RBbm5vdW5jZWRGb2N1c2VkS2V5KSB7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gbGlzdFN0YXRlLnNlbGVjdGlvbk1hbmFnZXIoKS5pc1NlbGVjdGVkKGZvY3VzZWRLZXkpO1xuICAgICAgY29uc3QgYW5ub3VuY2VtZW50ID0gbG9jYWwudHJhbnNsYXRpb25zPy5mb2N1c0Fubm91bmNlbWVudChcbiAgICAgICAgZm9jdXNlZEl0ZW0/LnRleHRWYWx1ZSB8fCBcIlwiLFxuICAgICAgICBpc1NlbGVjdGVkXG4gICAgICApID8/IFwiXCI7XG4gICAgICBhbm5vdW5jZShhbm5vdW5jZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoZm9jdXNlZEtleSkge1xuICAgICAgbGFzdEFubm91bmNlZEZvY3VzZWRLZXkgPSBmb2N1c2VkS2V5O1xuICAgIH1cbiAgfSk7XG4gIGxldCBsYXN0T3B0aW9uQ291bnQgPSBnZXRJdGVtQ291bnQobGlzdFN0YXRlLmNvbGxlY3Rpb24oKSk7XG4gIGxldCBsYXN0T3BlbiA9IGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKTtcbiAgY3JlYXRlRWZmZWN0MigoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uQ291bnQgPSBnZXRJdGVtQ291bnQobGlzdFN0YXRlLmNvbGxlY3Rpb24oKSk7XG4gICAgY29uc3QgaXNPcGVuID0gZGlzY2xvc3VyZVN0YXRlLmlzT3BlbigpO1xuICAgIGNvbnN0IGRpZE9wZW5XaXRob3V0Rm9jdXNlZEl0ZW0gPSBpc09wZW4gIT09IGxhc3RPcGVuICYmIChsaXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLmZvY3VzZWRLZXkoKSA9PSBudWxsIHx8IGlzQXBwbGVEZXZpY2UoKSk7XG4gICAgaWYgKGlzT3BlbiAmJiAoZGlkT3BlbldpdGhvdXRGb2N1c2VkSXRlbSB8fCBvcHRpb25Db3VudCAhPT0gbGFzdE9wdGlvbkNvdW50KSkge1xuICAgICAgY29uc3QgYW5ub3VuY2VtZW50ID0gbG9jYWwudHJhbnNsYXRpb25zPy5jb3VudEFubm91bmNlbWVudChvcHRpb25Db3VudCkgPz8gXCJcIjtcbiAgICAgIGFubm91bmNlKGFubm91bmNlbWVudCk7XG4gICAgfVxuICAgIGxhc3RPcHRpb25Db3VudCA9IG9wdGlvbkNvdW50O1xuICAgIGxhc3RPcGVuID0gaXNPcGVuO1xuICB9KTtcbiAgbGV0IGxhc3RBbm5vdW5jZWRTZWxlY3RlZEtleSA9IFwiXCI7XG4gIGNyZWF0ZUVmZmVjdDIoKCkgPT4ge1xuICAgIGNvbnN0IGxhc3RTZWxlY3RlZEtleSA9IFsuLi5saXN0U3RhdGUuc2VsZWN0aW9uTWFuYWdlcigpLnNlbGVjdGVkS2V5cygpXS5wb3AoKSA/PyBcIlwiO1xuICAgIGNvbnN0IGxhc3RTZWxlY3RlZEl0ZW0gPSBsaXN0U3RhdGUuY29sbGVjdGlvbigpLmdldEl0ZW0obGFzdFNlbGVjdGVkS2V5KTtcbiAgICBpZiAoaXNBcHBsZURldmljZSgpICYmIGlzSW5wdXRGb2N1c2VkKCkgJiYgbGFzdFNlbGVjdGVkSXRlbSAmJiBsYXN0U2VsZWN0ZWRLZXkgIT09IGxhc3RBbm5vdW5jZWRTZWxlY3RlZEtleSkge1xuICAgICAgY29uc3QgYW5ub3VuY2VtZW50ID0gbG9jYWwudHJhbnNsYXRpb25zPy5zZWxlY3RlZEFubm91bmNlbWVudChcbiAgICAgICAgbGFzdFNlbGVjdGVkSXRlbT8udGV4dFZhbHVlIHx8IFwiXCJcbiAgICAgICkgPz8gXCJcIjtcbiAgICAgIGFubm91bmNlKGFubm91bmNlbWVudCk7XG4gICAgfVxuICAgIGlmIChsYXN0U2VsZWN0ZWRLZXkpIHtcbiAgICAgIGxhc3RBbm5vdW5jZWRTZWxlY3RlZEtleSA9IGxhc3RTZWxlY3RlZEtleTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkYXRhc2V0ID0gY3JlYXRlTWVtbygoKSA9PiAoe1xuICAgIFwiZGF0YS1leHBhbmRlZFwiOiBkaXNjbG9zdXJlU3RhdGUuaXNPcGVuKCkgPyBcIlwiIDogdm9pZCAwLFxuICAgIFwiZGF0YS1jbG9zZWRcIjogIWRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKSA/IFwiXCIgOiB2b2lkIDBcbiAgfSkpO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGRhdGFzZXQsXG4gICAgaXNPcGVuOiBkaXNjbG9zdXJlU3RhdGUuaXNPcGVuLFxuICAgIGlzRGlzYWJsZWQ6ICgpID0+IGZvcm1Db250cm9sQ29udGV4dC5pc0Rpc2FibGVkKCkgPz8gZmFsc2UsXG4gICAgaXNNdWx0aXBsZTogKCkgPT4gYWNjZXNzKGxvY2FsLnNlbGVjdGlvbk1vZGUpID09PSBcIm11bHRpcGxlXCIsXG4gICAgaXNWaXJ0dWFsaXplZDogKCkgPT4gbG9jYWwudmlydHVhbGl6ZWQgPz8gZmFsc2UsXG4gICAgaXNNb2RhbDogKCkgPT4gbG9jYWwubW9kYWwgPz8gZmFsc2UsXG4gICAgcHJldmVudFNjcm9sbDogKCkgPT4gbG9jYWwucHJldmVudFNjcm9sbCA/PyBjb250ZXh0LmlzTW9kYWwoKSxcbiAgICBhbGxvd3NFbXB0eUNvbGxlY3Rpb246ICgpID0+IGxvY2FsLmFsbG93c0VtcHR5Q29sbGVjdGlvbiA/PyBmYWxzZSxcbiAgICBzaG91bGRGb2N1c1dyYXA6ICgpID0+IGxvY2FsLnNob3VsZEZvY3VzV3JhcCA/PyBmYWxzZSxcbiAgICByZW1vdmVPbkJhY2tzcGFjZTogKCkgPT4gbG9jYWwucmVtb3ZlT25CYWNrc3BhY2UgPz8gdHJ1ZSxcbiAgICBzZWxlY3RlZE9wdGlvbnMsXG4gICAgaXNJbnB1dEZvY3VzZWQsXG4gICAgY29udGVudFByZXNlbnQsXG4gICAgYXV0b0ZvY3VzOiBmb2N1c1N0cmF0ZWd5LFxuICAgIGlucHV0VmFsdWUsXG4gICAgdHJpZ2dlck1vZGU6ICgpID0+IGxvY2FsLnRyaWdnZXJNb2RlLFxuICAgIGFjdGl2ZURlc2NlbmRhbnQsXG4gICAgY29udHJvbFJlZixcbiAgICBpbnB1dFJlZixcbiAgICB0cmlnZ2VyUmVmLFxuICAgIGNvbnRlbnRSZWYsXG4gICAgbGlzdFN0YXRlOiAoKSA9PiBsaXN0U3RhdGUsXG4gICAga2V5Ym9hcmREZWxlZ2F0ZTogZGVsZWdhdGUsXG4gICAgbGlzdGJveElkLFxuICAgIHRyaWdnZXJBcmlhTGFiZWw6ICgpID0+IGxvY2FsLnRyYW5zbGF0aW9ucz8udHJpZ2dlckxhYmVsLFxuICAgIGxpc3Rib3hBcmlhTGFiZWw6ICgpID0+IGxvY2FsLnRyYW5zbGF0aW9ucz8ubGlzdGJveExhYmVsLFxuICAgIHNldElzSW5wdXRGb2N1c2VkLFxuICAgIHJlc2V0SW5wdXRWYWx1ZSxcbiAgICBzZXRJbnB1dFZhbHVlLFxuICAgIHNldENvbnRyb2xSZWYsXG4gICAgc2V0SW5wdXRSZWYsXG4gICAgc2V0VHJpZ2dlclJlZixcbiAgICBzZXRDb250ZW50UmVmLFxuICAgIHNldExpc3Rib3hSZWYsXG4gICAgb3BlbixcbiAgICBjbG9zZSxcbiAgICB0b2dnbGUsXG4gICAgcGxhY2Vob2xkZXI6ICgpID0+IGxvY2FsLnBsYWNlaG9sZGVyLFxuICAgIHJlbmRlckl0ZW0sXG4gICAgcmVuZGVyU2VjdGlvbixcbiAgICByZW1vdmVPcHRpb25Gcm9tU2VsZWN0aW9uLFxuICAgIG9uSW5wdXRLZXlEb3duOiAoZSkgPT4gc2VsZWN0YWJsZUNvbGxlY3Rpb24ub25LZXlEb3duKGUpLFxuICAgIGdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQoKCkgPT4gYWNjZXNzKGZvcm1Db250cm9sUHJvcHMuaWQpKSxcbiAgICByZWdpc3Rlckxpc3Rib3hJZDogY3JlYXRlUmVnaXN0ZXJJZChzZXRMaXN0Ym94SWQpXG4gIH07XG4gIHJldHVybiA8Rm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtmb3JtQ29udHJvbENvbnRleHR9PjxDb21ib2JveENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PjxQb3BwZXIgYW5jaG9yUmVmPXtjb250cm9sUmVmfSBjb250ZW50UmVmPXtjb250ZW50UmVmfSB7Li4ucG9wcGVyUHJvcHN9PjxQb2x5bW9ycGhpY1xuICAgIGFzPVwiZGl2XCJcbiAgICByb2xlPVwiZ3JvdXBcIlxuICAgIGlkPXthY2Nlc3MoZm9ybUNvbnRyb2xQcm9wcy5pZCl9XG4gICAgey4uLmZvcm1Db250cm9sQ29udGV4dC5kYXRhc2V0KCl9XG4gICAgey4uLmRhdGFzZXQoKX1cbiAgICB7Li4ub3RoZXJzfVxuICAvPjwvUG9wcGVyPjwvQ29tYm9ib3hDb250ZXh0LlByb3ZpZGVyPjwvRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyPjtcbn1cblxuLy8gc3JjL2NvbWJvYm94L2NvbWJvYm94LXJvb3QudHN4XG5mdW5jdGlvbiBDb21ib2JveFJvb3QocHJvcHMpIHtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wczYoXG4gICAgcHJvcHMsXG4gICAgW1widmFsdWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJvbkNoYW5nZVwiLCBcIm11bHRpcGxlXCJdXG4gICk7XG4gIGNvbnN0IHZhbHVlID0gY3JlYXRlTWVtbzIoKCkgPT4ge1xuICAgIGlmIChsb2NhbC52YWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbG9jYWwubXVsdGlwbGUgPyBsb2NhbC52YWx1ZSA6IFtsb2NhbC52YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiBsb2NhbC52YWx1ZTtcbiAgfSk7XG4gIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGNyZWF0ZU1lbW8yKCgpID0+IHtcbiAgICBpZiAobG9jYWwuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBsb2NhbC5tdWx0aXBsZSA/IGxvY2FsLmRlZmF1bHRWYWx1ZSA6IFtsb2NhbC5kZWZhdWx0VmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWwuZGVmYXVsdFZhbHVlO1xuICB9KTtcbiAgY29uc3Qgb25DaGFuZ2UgPSAodmFsdWUyKSA9PiB7XG4gICAgaWYgKGxvY2FsLm11bHRpcGxlKSB7XG4gICAgICBsb2NhbC5vbkNoYW5nZT8uKHZhbHVlMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsLm9uQ2hhbmdlPy4odmFsdWUyWzBdID8/IG51bGwpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIDxDb21ib2JveEJhc2VcbiAgICB2YWx1ZT17dmFsdWUoKX1cbiAgICBkZWZhdWx0VmFsdWU9e2RlZmF1bHRWYWx1ZSgpfVxuICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICBzZWxlY3Rpb25Nb2RlPXtsb2NhbC5tdWx0aXBsZSA/IFwibXVsdGlwbGVcIiA6IFwic2luZ2xlXCJ9XG4gICAgey4uLm90aGVyc31cbiAgLz47XG59XG5cbi8vIHNyYy9jb21ib2JveC9jb21ib2JveC10cmlnZ2VyLnRzeFxuaW1wb3J0IHtcbiAgY2FsbEhhbmRsZXIgYXMgY2FsbEhhbmRsZXIyLFxuICBtZXJnZURlZmF1bHRQcm9wcyBhcyBtZXJnZURlZmF1bHRQcm9wczUsXG4gIG1lcmdlUmVmcyBhcyBtZXJnZVJlZnM1XG59IGZyb20gXCJAa29iYWx0ZS91dGlsc1wiO1xuaW1wb3J0IHsgc3BsaXRQcm9wcyBhcyBzcGxpdFByb3BzNyB9IGZyb20gXCJzb2xpZC1qc1wiO1xuZnVuY3Rpb24gQ29tYm9ib3hUcmlnZ2VyKHByb3BzKSB7XG4gIGNvbnN0IGZvcm1Db250cm9sQ29udGV4dCA9IHVzZUZvcm1Db250cm9sQ29udGV4dCgpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29tYm9ib3hDb250ZXh0KCk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHM1KFxuICAgIHtcbiAgICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJ0cmlnZ2VyXCIpXG4gICAgfSxcbiAgICBwcm9wc1xuICApO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzNyhtZXJnZWRQcm9wcywgW1xuICAgIFwicmVmXCIsXG4gICAgXCJkaXNhYmxlZFwiLFxuICAgIFwib25Qb2ludGVyRG93blwiLFxuICAgIFwib25DbGlja1wiLFxuICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCJcbiAgXSk7XG4gIGNvbnN0IGlzRGlzYWJsZWQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGxvY2FsLmRpc2FibGVkIHx8IGNvbnRleHQuaXNEaXNhYmxlZCgpIHx8IGZvcm1Db250cm9sQ29udGV4dC5pc0Rpc2FibGVkKCkgfHwgZm9ybUNvbnRyb2xDb250ZXh0LmlzUmVhZE9ubHkoKTtcbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyRG93biA9IChlKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIyKGUsIGxvY2FsLm9uUG9pbnRlckRvd24pO1xuICAgIGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnBvaW50ZXJUeXBlID0gZS5wb2ludGVyVHlwZTtcbiAgICBpZiAoIWlzRGlzYWJsZWQoKSAmJiBlLnBvaW50ZXJUeXBlICE9PSBcInRvdWNoXCIgJiYgZS5idXR0b24gPT09IDApIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnRleHQudG9nZ2xlKGZhbHNlLCBcIm1hbnVhbFwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4ge1xuICAgIGNhbGxIYW5kbGVyMihlLCBsb2NhbC5vbkNsaWNrKTtcbiAgICBpZiAoIWlzRGlzYWJsZWQoKSkge1xuICAgICAgaWYgKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcbiAgICAgICAgY29udGV4dC50b2dnbGUoZmFsc2UsIFwibWFudWFsXCIpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5pbnB1dFJlZigpPy5mb2N1cygpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYXJpYUxhYmVsbGVkQnkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZvcm1Db250cm9sQ29udGV4dC5nZXRBcmlhTGFiZWxsZWRCeShcbiAgICAgIG90aGVycy5pZCxcbiAgICAgIGNvbnRleHQudHJpZ2dlckFyaWFMYWJlbCgpLFxuICAgICAgbG9jYWxbXCJhcmlhLWxhYmVsbGVkYnlcIl1cbiAgICApO1xuICB9O1xuICByZXR1cm4gPEJ1dHRvblJvb3RcbiAgICByZWY9e21lcmdlUmVmczUoY29udGV4dC5zZXRUcmlnZ2VyUmVmLCBsb2NhbC5yZWYpfVxuICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkKCl9XG4gICAgdGFiSW5kZXg9ey0xfVxuICAgIGFyaWEtaGFzcG9wdXA9XCJsaXN0Ym94XCJcbiAgICBhcmlhLWV4cGFuZGVkPXtjb250ZXh0LmlzT3BlbigpfVxuICAgIGFyaWEtY29udHJvbHM9e2NvbnRleHQuaXNPcGVuKCkgPyBjb250ZXh0Lmxpc3Rib3hJZCgpIDogdm9pZCAwfVxuICAgIGFyaWEtbGFiZWw9e2NvbnRleHQudHJpZ2dlckFyaWFMYWJlbCgpfVxuICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsbGVkQnkoKX1cbiAgICBvblBvaW50ZXJEb3duPXtvblBvaW50ZXJEb3dufVxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgey4uLmNvbnRleHQuZGF0YXNldCgpfVxuICAgIHsuLi5vdGhlcnN9XG4gIC8+O1xufVxuXG4vLyBzcmMvY29tYm9ib3gvaW5kZXgudHN4XG52YXIgQ29tYm9ib3ggPSBPYmplY3QuYXNzaWduKENvbWJvYm94Um9vdCwge1xuICBBcnJvdzogUG9wcGVyQXJyb3csXG4gIENvbnRlbnQ6IENvbWJvYm94Q29udGVudCxcbiAgQ29udHJvbDogQ29tYm9ib3hDb250cm9sLFxuICBEZXNjcmlwdGlvbjogRm9ybUNvbnRyb2xEZXNjcmlwdGlvbixcbiAgRXJyb3JNZXNzYWdlOiBGb3JtQ29udHJvbEVycm9yTWVzc2FnZSxcbiAgSGlkZGVuU2VsZWN0OiBDb21ib2JveEhpZGRlblNlbGVjdCxcbiAgSWNvbjogQ29tYm9ib3hJY29uLFxuICBJbnB1dDogQ29tYm9ib3hJbnB1dCxcbiAgSXRlbTogTGlzdGJveEl0ZW0sXG4gIEl0ZW1EZXNjcmlwdGlvbjogTGlzdGJveEl0ZW1EZXNjcmlwdGlvbixcbiAgSXRlbUluZGljYXRvcjogTGlzdGJveEl0ZW1JbmRpY2F0b3IsXG4gIEl0ZW1MYWJlbDogTGlzdGJveEl0ZW1MYWJlbCxcbiAgTGFiZWw6IEZvcm1Db250cm9sTGFiZWwsXG4gIExpc3Rib3g6IENvbWJvYm94TGlzdGJveCxcbiAgUG9ydGFsOiBDb21ib2JveFBvcnRhbCxcbiAgU2VjdGlvbjogTGlzdGJveFNlY3Rpb24sXG4gIFRyaWdnZXI6IENvbWJvYm94VHJpZ2dlclxufSk7XG5cbmV4cG9ydCB7XG4gIENvbWJvYm94Q29udGVudCxcbiAgQ29tYm9ib3hJbnB1dCxcbiAgQ29tYm9ib3hMaXN0Ym94LFxuICBDb21ib2JveFBvcnRhbCxcbiAgQ29tYm9ib3hDb250cm9sLFxuICBDb21ib2JveEhpZGRlblNlbGVjdCxcbiAgQ29tYm9ib3hJY29uLFxuICBDb21ib2JveFJvb3QsXG4gIENvbWJvYm94VHJpZ2dlcixcbiAgQ29tYm9ib3gsXG4gIGNvbWJvYm94X2V4cG9ydHNcbn07XG4iLCJpbXBvcnQgeyBOT19NQVRDSF9GT1VORCB9IGZyb20gXCJAL2xpYi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWJzL2NuXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUZpbHRlciB9IGZyb20gXCJAa29iYWx0ZS9jb3JlXCI7XHJcbmltcG9ydCB0eXBlIHtcclxuICBDb21ib2JveENvbnRlbnRQcm9wcyxcclxuICBDb21ib2JveElucHV0UHJvcHMsXHJcbiAgQ29tYm9ib3hJdGVtUHJvcHMsXHJcbiAgQ29tYm9ib3hUcmlnZ2VyUHJvcHMsXHJcbn0gZnJvbSBcIkBrb2JhbHRlL2NvcmUvY29tYm9ib3hcIjtcclxuaW1wb3J0IHsgQ29tYm9ib3ggYXMgQ29tYm9ib3hQcmltaXRpdmUgfSBmcm9tIFwiQGtvYmFsdGUvY29yZS9jb21ib2JveFwiO1xyXG5pbXBvcnQgdHlwZSB7IFBvbHltb3JwaGljUHJvcHMgfSBmcm9tIFwiQGtvYmFsdGUvY29yZS9wb2x5bW9ycGhpY1wiO1xyXG5pbXBvcnQgeyBBcHAsIEhlYWRpbmdDYWNoZSwgU2VjdGlvbkNhY2hlLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgdHlwZSB7XHJcbiAgSlNYRWxlbWVudCxcclxuICBQYXJlbnRQcm9wcyxcclxuICBWYWxpZENvbXBvbmVudCxcclxuICBWb2lkUHJvcHMsXHJcbn0gZnJvbSBcInNvbGlkLWpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVmZmVjdCwgY3JlYXRlU2lnbmFsLCBJbmRleCwgU2hvdywgc3BsaXRQcm9wcyB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gXCJzb2xpZC1qcy9zdG9yZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbWJvYm94ID0gQ29tYm9ib3hQcmltaXRpdmU7XHJcbmV4cG9ydCBjb25zdCBDb21ib2JveERlc2NyaXB0aW9uID0gQ29tYm9ib3hQcmltaXRpdmUuRGVzY3JpcHRpb247XHJcbmV4cG9ydCBjb25zdCBDb21ib2JveEVycm9yTWVzc2FnZSA9IENvbWJvYm94UHJpbWl0aXZlLkVycm9yTWVzc2FnZTtcclxuZXhwb3J0IGNvbnN0IENvbWJvYm94SXRlbURlc2NyaXB0aW9uID0gQ29tYm9ib3hQcmltaXRpdmUuSXRlbURlc2NyaXB0aW9uO1xyXG5leHBvcnQgY29uc3QgQ29tYm9ib3hIaWRkZW5TZWxlY3QgPSBDb21ib2JveFByaW1pdGl2ZS5IaWRkZW5TZWxlY3Q7XHJcblxyXG50eXBlIGNvbWJvYm94SW5wdXRQcm9wczxUIGV4dGVuZHMgVmFsaWRDb21wb25lbnQgPSBcImlucHV0XCI+ID0gVm9pZFByb3BzPFxyXG4gIENvbWJvYm94SW5wdXRQcm9wczxUPiAmIHtcclxuICAgIGNsYXNzPzogc3RyaW5nO1xyXG4gIH1cclxuPjtcclxuXHJcbmV4cG9ydCBjb25zdCBDb21ib2JveElucHV0ID0gPFQgZXh0ZW5kcyBWYWxpZENvbXBvbmVudCA9IFwiaW5wdXRcIj4oXHJcbiAgcHJvcHM6IFBvbHltb3JwaGljUHJvcHM8VCwgY29tYm9ib3hJbnB1dFByb3BzPFQ+PixcclxuKSA9PiB7XHJcbiAgY29uc3QgW2xvY2FsLCByZXN0XSA9IHNwbGl0UHJvcHMocHJvcHMgYXMgY29tYm9ib3hJbnB1dFByb3BzLCBbXCJjbGFzc1wiXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q29tYm9ib3hQcmltaXRpdmUuSW5wdXRcclxuICAgICAgLy8gICBjbGFzcz17Y24oXHJcbiAgICAgIC8vICAgICBcInBsYWNlaG9sZGVyOnRleHQtbXV0ZWQtZm9yZWdyb3VuZCBoLWZ1bGwgYmctdHJhbnNwYXJlbnQgdGV4dC1zbSBmb2N1czpvdXRsaW5lLW5vbmUgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTBcIixcclxuICAgICAgLy8gICAgIGxvY2FsLmNsYXNzLFxyXG4gICAgICAvLyAgICl9XHJcbiAgICAgIGNsYXNzPXtjbihcIlwiLCBsb2NhbC5jbGFzcyl9XHJcbiAgICAgIHsuLi5yZXN0fVxyXG4gICAgICB7Li4ucmVzdH1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbnR5cGUgY29tYm9ib3hUcmlnZ2VyUHJvcHM8VCBleHRlbmRzIFZhbGlkQ29tcG9uZW50ID0gXCJidXR0b25cIj4gPSBQYXJlbnRQcm9wczxcclxuICBDb21ib2JveFRyaWdnZXJQcm9wczxUPiAmIHtcclxuICAgIGNsYXNzPzogc3RyaW5nO1xyXG4gIH1cclxuPjtcclxuXHJcbmV4cG9ydCBjb25zdCBDb21ib2JveFRyaWdnZXIgPSA8VCBleHRlbmRzIFZhbGlkQ29tcG9uZW50ID0gXCJidXR0b25cIj4oXHJcbiAgcHJvcHM6IFBvbHltb3JwaGljUHJvcHM8VCwgY29tYm9ib3hUcmlnZ2VyUHJvcHM8VD4+LFxyXG4pID0+IHtcclxuICBjb25zdCBbbG9jYWwsIHJlc3RdID0gc3BsaXRQcm9wcyhwcm9wcyBhcyBjb21ib2JveFRyaWdnZXJQcm9wcywgW1xyXG4gICAgXCJjbGFzc1wiLFxyXG4gICAgXCJjaGlsZHJlblwiLFxyXG4gIF0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENvbWJvYm94UHJpbWl0aXZlLkNvbnRyb2w+XHJcbiAgICAgIDxDb21ib2JveFByaW1pdGl2ZS5UcmlnZ2VyXHJcbiAgICAgICAgLy8gb2JzaWRpYW4gYWx3YXlzIHNob3cncyBhcmlhIGxhYmVscyBhcyB0b29sdGlwcywgd2hpY2ggbG9va3Mgd2VpcmQgaW4gdGhpcyBjYXNlXHJcbiAgICAgICAgYXJpYS1sYWJlbD1cIlwiIC8vIFRPRE8gbG9vayBpbnRvIGEgd2F5IHRvIGRpc2FibGUgdG9vbHRpcCBmcm9tIGFyaWEtbGFiZWwgaW4gb2JzaWRpYW4/XHJcbiAgICAgICAgY2xhc3M9e2NuKFxyXG4gICAgICAgICAgXCJzaXplLWZpdCBib3JkZXItbm9uZSBiZy10cmFuc3BhcmVudCBwLTEgc2hhZG93LW5vbmVcIixcclxuICAgICAgICAgIGxvY2FsLmNsYXNzLFxyXG4gICAgICAgICl9XHJcbiAgICAgICAgey4uLnJlc3R9XHJcbiAgICAgID5cclxuICAgICAgICB7bG9jYWwuY2hpbGRyZW59XHJcbiAgICAgICAgey8qIDxDb21ib2JveFByaW1pdGl2ZS5JY29uIGNsYXNzPVwiZmxleCBoLTMuNSB3LTMuNSBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cclxuICAgICAgICAgIDxzdmdcclxuICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImgtNCB3LTQgb3BhY2l0eS01MFwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxwYXRoXHJcbiAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXHJcbiAgICAgICAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXHJcbiAgICAgICAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxyXG4gICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjJcIlxyXG4gICAgICAgICAgICAgIGQ9XCJtOCA5bDQtNGw0IDRtMCA2bC00IDRsLTQtNFwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDx0aXRsZT5BcnJvdzwvdGl0bGU+XHJcbiAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICA8L0NvbWJvYm94UHJpbWl0aXZlLkljb24+ICovfVxyXG4gICAgICA8L0NvbWJvYm94UHJpbWl0aXZlLlRyaWdnZXI+XHJcbiAgICA8L0NvbWJvYm94UHJpbWl0aXZlLkNvbnRyb2w+XHJcbiAgKTtcclxufTtcclxuXHJcbnR5cGUgUHJvbXB0SW5zdHJ1Y3Rpb25zID0gW2NvbW1hbmQ6IHN0cmluZywgdGV4dDogc3RyaW5nXVtdIHwgc3RyaW5nW11bXTtcclxuXHJcbnR5cGUgY29tYm9ib3hDb250ZW50UHJvcHM8VCBleHRlbmRzIFZhbGlkQ29tcG9uZW50ID0gXCJkaXZcIj4gPVxyXG4gIENvbWJvYm94Q29udGVudFByb3BzPFQ+ICYge1xyXG4gICAgY2xhc3M/OiBzdHJpbmc7XHJcbiAgICBwcm9tcHRJbnN0cnVjdGlvbnM/OiBQcm9tcHRJbnN0cnVjdGlvbnM7XHJcbiAgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb21ib2JveENvbnRlbnQgPSA8VCBleHRlbmRzIFZhbGlkQ29tcG9uZW50ID0gXCJkaXZcIj4oXHJcbiAgcHJvcHM6IFBvbHltb3JwaGljUHJvcHM8VCwgY29tYm9ib3hDb250ZW50UHJvcHM8VD4+LFxyXG4pID0+IHtcclxuICBjb25zdCBbbG9jYWwsIHJlc3RdID0gc3BsaXRQcm9wcyhwcm9wcyBhcyBjb21ib2JveENvbnRlbnRQcm9wcywgW1xyXG4gICAgXCJjbGFzc1wiLFxyXG4gICAgXCJwcm9tcHRJbnN0cnVjdGlvbnNcIixcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDb21ib2JveFByaW1pdGl2ZS5Qb3J0YWw+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJ0d2Nzc1wiPlxyXG4gICAgICAgIDxDb21ib2JveFByaW1pdGl2ZS5Db250ZW50XHJcbiAgICAgICAgICBjbGFzcz17Y24oXHJcbiAgICAgICAgICAgIFwic3VnZ2VzdGlvbi1jb250YWluZXIgcmVsYXRpdmUgei01MCBtaW4tdy1bOHJlbV0gb3ZlcmZsb3ctaGlkZGVuIGRhdGEtW2V4cGFuZGVkXTphbmltYXRlLWluIGRhdGEtW2Nsb3NlZF06YW5pbWF0ZS1vdXQgZGF0YS1bY2xvc2VkXTpmYWRlLW91dC0wIGRhdGEtW2V4cGFuZGVkXTpmYWRlLWluLTAgZGF0YS1bY2xvc2VkXTp6b29tLW91dC05NSBkYXRhLVtleHBhbmRlZF06em9vbS1pbi05NVwiLFxyXG4gICAgICAgICAgICBsb2NhbC5jbGFzcyxcclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICB7Li4ucmVzdH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7LyogPGRpdiBjbGFzcz1cInN1Z2dlc3Rpb25cIj4gKi99XHJcbiAgICAgICAgICA8Q29tYm9ib3hQcmltaXRpdmUuTGlzdGJveFxyXG4gICAgICAgICAgICAvLyBvYnNpZGlhbiBhbHdheXMgc2hvdydzIGFyaWEgbGFiZWxzIGFzIHRvb2x0aXBzLCB3aGljaCBsb29rcyB3ZWlyZCBpbiB0aGlzIGNhc2VcclxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlwiIC8vIFRPRE8gbG9vayBpbnRvIGEgd2F5IHRvIGRpc2FibGUgdG9vbHRpcCBmcm9tIGFyaWEtbGFiZWwgaW4gb2JzaWRpYW4/XHJcbiAgICAgICAgICAgIGNsYXNzPVwic3VnZ2VzdGlvbiBtLTBcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIHsvKiA8L2Rpdj4gKi99XHJcbiAgICAgICAgICA8U2hvd1xyXG4gICAgICAgICAgICB3aGVuPXtsb2NhbC5wcm9tcHRJbnN0cnVjdGlvbnMgJiYgbG9jYWwucHJvbXB0SW5zdHJ1Y3Rpb25zLmxlbmd0aH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb21wdC1pbnN0cnVjdGlvbnNcIj5cclxuICAgICAgICAgICAgICA8SW5kZXggZWFjaD17bG9jYWwucHJvbXB0SW5zdHJ1Y3Rpb25zfT5cclxuICAgICAgICAgICAgICAgIHsoYXJyKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9tcHQtaW5zdHJ1Y3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb21wdC1pbnN0cnVjdGlvbi1jb21tYW5kXCI+e2FycigpWzBdfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57YXJyKClbMV19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgPC9JbmRleD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L1Nob3c+XHJcbiAgICAgICAgPC9Db21ib2JveFByaW1pdGl2ZS5Db250ZW50PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvQ29tYm9ib3hQcmltaXRpdmUuUG9ydGFsPlxyXG4gICk7XHJcbn07XHJcblxyXG50eXBlIGNvbWJvYm94SXRlbVByb3BzPFQgZXh0ZW5kcyBWYWxpZENvbXBvbmVudCA9IFwibGlcIj4gPSBQYXJlbnRQcm9wczxcclxuICBDb21ib2JveEl0ZW1Qcm9wczxUPiAmIHtcclxuICAgIGNsYXNzPzogc3RyaW5nO1xyXG4gICAgbm90ZT86IHN0cmluZztcclxuICAgIGF1eExhYmVsPzogc3RyaW5nIHwgSlNYRWxlbWVudDtcclxuICB9XHJcbj47XHJcblxyXG5leHBvcnQgY29uc3QgQ29tYm9ib3hJdGVtID0gPFQgZXh0ZW5kcyBWYWxpZENvbXBvbmVudCA9IFwibGlcIj4oXHJcbiAgcHJvcHM6IFBvbHltb3JwaGljUHJvcHM8VCwgY29tYm9ib3hJdGVtUHJvcHM8VD4+LFxyXG4pID0+IHtcclxuICBjb25zdCBbbG9jYWwsIHJlc3RdID0gc3BsaXRQcm9wcyhwcm9wcyBhcyBjb21ib2JveEl0ZW1Qcm9wcywgW1xyXG4gICAgXCJjbGFzc1wiLFxyXG4gICAgXCJjaGlsZHJlblwiLFxyXG4gICAgXCJub3RlXCIsXHJcbiAgICBcImF1eExhYmVsXCIsXHJcbiAgXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q29tYm9ib3hQcmltaXRpdmUuSXRlbVxyXG4gICAgICBjbGFzcz17Y24oXHJcbiAgICAgICAgXCJzdWdnZXN0aW9uLWl0ZW0gbW9kLWNvbXBsZXggcmVsYXRpdmUgZmxleCB3LWZ1bGwgY3Vyc29yLWRlZmF1bHQgc2VsZWN0LW5vbmUgaXRlbXMtY2VudGVyIHJvdW5kZWQtc20gcHktMS41IHBsLTIgcHItOCB0ZXh0LXNtIG91dGxpbmUtbm9uZSBkYXRhLVtkaXNhYmxlZF06cG9pbnRlci1ldmVudHMtbm9uZSBkYXRhLVtoaWdobGlnaHRlZF06YmctaW50ZXJhY3RpdmUtaG92ZXIgZGF0YS1baGlnaGxpZ2h0ZWRdOnRleHQtYWNjZW50LWZvcmVncm91bmQgZGF0YS1bZGlzYWJsZWRdOm9wYWNpdHktNTBcIixcclxuICAgICAgICBsb2NhbC5jbGFzcyxcclxuICAgICAgKX1cclxuICAgICAgLy8gICBjbGFzcz17Y24oXCJzdWdnZXN0aW9uLWl0ZW0gbW9kLWNvbXBsZXhcIiwgbG9jYWwuY2xhc3MpfVxyXG4gICAgICB7Li4ucmVzdH1cclxuICAgID5cclxuICAgICAgPENvbWJvYm94UHJpbWl0aXZlLkl0ZW1JbmRpY2F0b3IgY2xhc3M9XCJhYnNvbHV0ZSByaWdodC0yIGZsZXggaC0zLjUgdy0zLjUgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XHJcbiAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgICAgICAgIGNsYXNzPVwiaC00IHctNFwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgICAgICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxyXG4gICAgICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcclxuICAgICAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxyXG4gICAgICAgICAgICBzdHJva2Utd2lkdGg9XCIyXCJcclxuICAgICAgICAgICAgZD1cIm01IDEybDUgNUwyMCA3XCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8dGl0bGU+Q2hlY2tlZDwvdGl0bGU+XHJcbiAgICAgICAgPC9zdmc+XHJcbiAgICAgIDwvQ29tYm9ib3hQcmltaXRpdmUuSXRlbUluZGljYXRvcj5cclxuICAgICAgPENvbWJvYm94UHJpbWl0aXZlLkl0ZW1MYWJlbCBjbGFzcz1cInN1Z2dlc3Rpb24tY29udGVudFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdWdnZXN0aW9uLXRpdGxlXCI+e2xvY2FsLmNoaWxkcmVufTwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdWdnZXN0aW9uLW5vdGVcIj57bG9jYWwubm90ZX08L2Rpdj5cclxuICAgICAgPC9Db21ib2JveFByaW1pdGl2ZS5JdGVtTGFiZWw+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzdWdnZXN0aW9uLWF1eFwiPntsb2NhbC5hdXhMYWJlbH08L2Rpdj5cclxuICAgIDwvQ29tYm9ib3hQcmltaXRpdmUuSXRlbT5cclxuICApO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdEluc3RydWN0aW9ucyA9IFtcclxuICBbXCJUeXBlIFtbXCIsIFwidG8gbGluayBub3RlXCJdLFxyXG4gIFtcIlR5cGUgI1wiLCBcInRvIGNob29zZSB0YWdcIl0sXHJcbl07XHJcbmNvbnN0IGxpbmtJbnN0cnVjdGlvbnMgPSBbXHJcbiAgW1wiVHlwZSAjXCIsIFwidG8gbGluayBoZWFkaW5nXCJdLFxyXG4gIFtcIlR5cGUgXlwiLCBcInRvIGxpbmsgYmxvY2tzXCJdLFxyXG4gIFtcIlR5cGUgfFwiLCBcInRvIGNoYW5nZSBkaXNwbGF5IHRleHRcIl0sXHJcbl07XHJcbmNvbnN0IHN1YkxpbmtJbnN0cnVjdGlvbnMgPSBbW1wi4oa1XCIsIFwidG8gYWNjZXB0XCJdXTtcclxuXHJcbmNvbnN0IGZpbHRlciA9IGNyZWF0ZUZpbHRlcih7IHNlbnNpdGl2aXR5OiBcImJhc2VcIiB9KTtcclxuXHJcbmV4cG9ydCB0eXBlIFByb21wdENvbWJvQm94UHJvcHMgPSB7XHJcbiAgYXBwOiBBcHA7XHJcbiAgZGVmYXVsdE9wdGlvbnM6IHN0cmluZ1tdO1xyXG4gIHRyaWdnZXJQcm9wcz86IENvbWJvYm94VHJpZ2dlclByb3BzO1xyXG4gIGlucHV0UHJvcHM/OiBDb21ib2JveElucHV0UHJvcHM7XHJcbiAgaXRlbVByb3BzPzogQ29tYm9ib3hJdGVtUHJvcHM7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBQcm9tcHRDb21ib0JveCA9IChwcm9wczogUHJvbXB0Q29tYm9Cb3hQcm9wcykgPT4ge1xyXG4gIGNvbnN0IFtpbnB1dFZhbHVlLCBzZXRJbnB1dFZhbHVlXSA9IGNyZWF0ZVNpZ25hbChcIlwiKTtcclxuICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSBjcmVhdGVTdG9yZShwcm9wcy5kZWZhdWx0T3B0aW9ucyk7XHJcbiAgY29uc3QgW2xhYmVscywgc2V0TGFiZWxzXSA9IGNyZWF0ZVN0b3JlPHN0cmluZ1tdPihbXSk7XHJcbiAgY29uc3QgW2F1eCwgc2V0QXV4XSA9IGNyZWF0ZVN0b3JlPHN0cmluZ1tdPihbXSk7XHJcbiAgY29uc3QgW3Byb21wdEluc3RydWN0aW9ucywgc2V0UHJvbXB0SW5zdHJ1Y3Rpb25zXSA9XHJcbiAgICBjcmVhdGVTdG9yZTxQcm9tcHRJbnN0cnVjdGlvbnM+KGRlZmF1bHRJbnN0cnVjdGlvbnMpO1xyXG4gIC8vIHdpbGwgYmUgY2hlY2tlZCB3aGVuIG5lZWRlZCwgc28gbm8gbmVlZCBmb3IgcmVhY3Rpdml0eVxyXG4gIGxldCBpc1N1YkxpbmsgPSBmYWxzZTtcclxuXHJcbiAgLy8gZm9yIHNvbWUgcmVhc29uIHByb3BzLmRlZmF1bHRPcHRpb25zIGlzIGdldHRpbmcgcmVhc2lnbmVkIGJlaGluZCB0aGUgc2NlbmVzLCBzbyB0aGlzIHN0b3BzIHRoYXRcclxuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IFsuLi5wcm9wcy5kZWZhdWx0T3B0aW9uc107XHJcbiAgY29uc3QgZGVmYXVsdE9uSW5wdXRDaGFuZ2UgPSAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgdmFsID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGZpbHRlcmVkID0gZGVmYXVsdE9wdGlvbnMuZmlsdGVyKChvcHRpb24pID0+IHtcclxuICAgICAgY29uc3QgYiA9IGZpbHRlci5jb250YWlucyhvcHRpb24sIHZhbCk7XHJcbiAgICAgIGlmICghYikgcmV0dXJuIGI7XHJcbiAgICAgIGxhYmVscy5wdXNoKCk7XHJcbiAgICAgIHJldHVybiBiO1xyXG4gICAgfSk7XHJcbiAgICBzZXRQcm9tcHRJbnN0cnVjdGlvbnMoZGVmYXVsdEluc3RydWN0aW9ucyk7XHJcbiAgICBzZXRPcHRpb25zKGZpbHRlcmVkKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVOb01hdGNoRm91bmQgPSAoKSA9PiB7XHJcbiAgICBzZXRPcHRpb25zKFtOT19NQVRDSF9GT1VORF0pO1xyXG4gICAgc2V0TGFiZWxzKFtdKTtcclxuICAgIHNldEF1eChbXSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0TGlua09wdGlvbnMgPSAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3Qgc2VhcmNoTmFtZSA9IHZhbHVlLnNsaWNlKDIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBmaWxlcyA9IHByb3BzLmFwcC52YXVsdFxyXG4gICAgICAuZ2V0QWxsTG9hZGVkRmlsZXMoKVxyXG4gICAgICAuZmlsdGVyKChmKSA9PiBmIGluc3RhbmNlb2YgVEZpbGUpO1xyXG4gICAgY29uc3QgbmV3TGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBmaWxlc1xyXG4gICAgICAuZmlsdGVyKChmKSA9PiBmaWx0ZXIuY29udGFpbnMoZi5wYXRoLCBzZWFyY2hOYW1lKSlcclxuICAgICAgLm1hcCgoZikgPT4ge1xyXG4gICAgICAgIG5ld0xhYmVscy5wdXNoKGYucGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIGYuYmFzZW5hbWU7XHJcbiAgICAgIH0pO1xyXG4gICAgc2V0TGFiZWxzKG5ld0xhYmVscyk7XHJcbiAgICBzZXRPcHRpb25zKGZpbHRlcmVkKTtcclxuICAgIHNldFByb21wdEluc3RydWN0aW9ucyhsaW5rSW5zdHJ1Y3Rpb25zKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRUYWdPcHRpb25zID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgIC8vIHJlbW92ZSB0aGUgJyMnIGF0IHRoZSBiZWdpbm5pbmdcclxuICAgIGNvbnN0IHNlYXJjaFRhZyA9IHZhbHVlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICBjb25zdCB0YWdzID0gT2JqZWN0LmtleXMocHJvcHMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0VGFncygpKTtcclxuICAgIC8vIGdldCByaWQgb2YgJyMnIHRoYXQgd2lsbCBhbHdheXMgYmUgaW4gc3RhcnQgb2YgdGFnXHJcbiAgICBjb25zdCBvcHRzID0gdGFncy5tYXAoKHQpID0+IHQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSk7XHJcbiAgICBjb25zdCBmaWx0ZXJlZCA9IG9wdHMuZmlsdGVyKCh0KSA9PiBmaWx0ZXIuY29udGFpbnModCwgc2VhcmNoVGFnKSk7XHJcbiAgICBzZXRPcHRpb25zKGZpbHRlcmVkKTtcclxuICAgIHNldExhYmVscyhbXSk7XHJcbiAgICBzZXRQcm9tcHRJbnN0cnVjdGlvbnMoW10pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldEhlYWRlck9wdGlvbnMgPSAoaGVhZGVyOiBzdHJpbmcsIGhlYWRpbmdzOiBIZWFkaW5nQ2FjaGVbXSkgPT4ge1xyXG4gICAgY29uc3QgbmV3QXV4OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBoZWFkaW5nc1xyXG4gICAgICAuZmlsdGVyKChoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYiA9IGZpbHRlci5jb250YWlucyhoLmhlYWRpbmcsIGhlYWRlcik7XHJcbiAgICAgICAgaWYgKCFiKSByZXR1cm4gYjtcclxuICAgICAgICBuZXdBdXgucHVzaChcIkhcIiArIGgubGV2ZWwpO1xyXG4gICAgICAgIHJldHVybiBiO1xyXG4gICAgICB9KVxyXG4gICAgICAubWFwKChoKSA9PiBoLmhlYWRpbmcpO1xyXG4gICAgaWYgKCFmaWx0ZXJlZC5sZW5ndGgpIHJldHVybiBoYW5kbGVOb01hdGNoRm91bmQoKTtcclxuICAgIHNldEF1eChuZXdBdXgpO1xyXG4gICAgc2V0T3B0aW9ucyhmaWx0ZXJlZCk7XHJcbiAgfTtcclxuXHJcbiAgLypcclxuICAgIFRPRE9cclxuICAgIEFzIGlzLCB0aGlzIG9ubHkgd2lsbCByZXR1cm4gc2VjdGlvbnMgdGhhdCBoYXZlIGEgYmxvY2sgaWQuXHJcbiAgICBJbiBPYnNpZGlhbidzIG5hdGl2ZSBzdWdnZXN0ZXIsICphbGwqIHNlY3Rpb25zIHdpbGwgYmUgc2hvd24sIGFuZCBpZiBvbmUgaXMgY2xpY2tlZCB3aXRob3V0IGEgYmxvY2sgaWQsIG9uZSB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIGRvY3VtZW50LiBBcyB3ZWxsLCB0aGV5IHNob3cgYWxsIHRoZSB0ZXh0IGluIHRoZSBzZWN0aW9uIGluIHRoZSBwb3BvdmVyLCB3aGljaCB3b3VsZCByZXF1aXJlIGFzeW5jIHJlYWRpbmcgbWFueSBmaWxlcyBvbiBldmVyeSBpbnB1dC4gXHJcbiAgICBJJ20gYXNzdW1pbmcgdGhlcmUncyBhIHdheSB0byBnZXQgdGhlIG9wdGlvbnMgYW5kIGdlbmVyYXRlIGFuIGlkIGluIHRoZSBwcml2YXRlIGFwaSwgYnV0IEkgaGF2ZW4ndCBmb3VuZCBpdCB5ZXQuXHJcbiAgKi9cclxuICBjb25zdCBnZXRTZWN0aW9uT3B0aW9ucyA9IChibG9ja0lkOiBzdHJpbmcsIHNlY3Rpb25zOiBTZWN0aW9uQ2FjaGVbXSkgPT4ge1xyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBzZWN0aW9uc1xyXG4gICAgICAuZmlsdGVyKChzKSA9PiBzLmlkICYmIGZpbHRlci5jb250YWlucyhzLmlkLCBibG9ja0lkKSlcclxuICAgICAgLm1hcCgocykgPT4gcy5pZCEpO1xyXG4gICAgY29uc29sZS5sb2coXCJmaWx0ZXJlZDogXCIsIGZpbHRlcmVkKTtcclxuICAgIGlmICghZmlsdGVyZWQubGVuZ3RoKSByZXR1cm4gaGFuZGxlTm9NYXRjaEZvdW5kKCk7XHJcbiAgICBzZXRPcHRpb25zKGZpbHRlcmVkKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRMaW5rU3ViT3B0aW9ucyA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICBpc1N1YkxpbmsgPSB0cnVlO1xyXG4gICAgc2V0TGFiZWxzKFtdKTtcclxuICAgIHNldEF1eChbXSk7XHJcbiAgICBzZXRQcm9tcHRJbnN0cnVjdGlvbnMoc3ViTGlua0luc3RydWN0aW9ucyk7XHJcbiAgICAvLyBleHRyYWN0cyB0aXRsZSBiZXR3ZWVuICdbWycgYW5kICcjJywgYW5kIGhlYWRlciBhZnRlciBoYXN0YWcgYnV0IGJlZm9yZSAnXV0nIChpZiBwcmVzZW50KVxyXG4gICAgY29uc3QgbWF0Y2ggPVxyXG4gICAgICAvXFxbXFxbKD88dGl0bGU+XFxTfFteXFxbfFxcXXxcXF1cXF1dKykoPzojfFxcXikoPzxzdWI+LipbXlxcXV18KS9nbS5leGVjKHZhbHVlKTtcclxuICAgIGNvbnN0IHByZVRpdGxlID0gbWF0Y2g/Lmdyb3Vwcz8udGl0bGU7XHJcbiAgICBjb25zdCBzdWIgPSBtYXRjaD8uZ3JvdXBzPy5zdWIgPz8gXCJcIjtcclxuICAgIGlmICghcHJlVGl0bGUpIHJldHVybiBoYW5kbGVOb01hdGNoRm91bmQoKTtcclxuICAgIGNvbnN0IHRpdGxlID0gcHJlVGl0bGUuZW5kc1dpdGgoXCIubWRcIikgPyBwcmVUaXRsZSA6IHByZVRpdGxlICsgXCIubWRcIjtcclxuICAgIGNvbnN0IGYgPSBwcm9wcy5hcHAudmF1bHQuZ2V0RmlsZUJ5UGF0aCh0aXRsZSk7XHJcbiAgICBpZiAoIWYpIHJldHVybiBoYW5kbGVOb01hdGNoRm91bmQoKTtcclxuICAgIGNvbnN0IGNhY2hlID0gcHJvcHMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGYpO1xyXG4gICAgaWYgKCFjYWNoZSkgcmV0dXJuIGhhbmRsZU5vTWF0Y2hGb3VuZCgpO1xyXG4gICAgY29uc3QgeyBzZWN0aW9ucywgaGVhZGluZ3MgfSA9IGNhY2hlO1xyXG4gICAgaWYgKHZhbHVlLmluY2x1ZGVzKFwiI1wiKSkge1xyXG4gICAgICBpZiAoIWhlYWRpbmdzKSByZXR1cm4gaGFuZGxlTm9NYXRjaEZvdW5kKCk7XHJcbiAgICAgIHJldHVybiBnZXRIZWFkZXJPcHRpb25zKHN1YiwgaGVhZGluZ3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzZWN0aW9ucykgcmV0dXJuIGhhbmRsZU5vTWF0Y2hGb3VuZCgpO1xyXG4gICAgZ2V0U2VjdGlvbk9wdGlvbnMoc3ViLCBzZWN0aW9ucyk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25JbnB1dENoYW5nZSA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICBpc1N1YkxpbmsgPSBmYWxzZTtcclxuICAgIHNldEF1eChbXSk7XHJcbiAgICBpZiAodmFsdWVbMF0gPT09IFwiI1wiKSByZXR1cm4gZ2V0VGFnT3B0aW9ucyh2YWx1ZSk7XHJcbiAgICAvLyByZWdleCBsb29rcyBmb3IgJ1tbJyB3aXRoIGEgJyMnIGFmdGVyIGl0LCB3aGVyZSB0aGVyZSdzIG5vICddXScgYmVmb3JlIHRoZSAnIydcclxuICAgIGlmICgvXFxbXFxbLiojfFxcXi8udGVzdCh2YWx1ZSkpIHJldHVybiBnZXRMaW5rU3ViT3B0aW9ucyh2YWx1ZSk7XHJcbiAgICBpZiAodmFsdWUuc3RhcnRzV2l0aChcIltbXCIpKSByZXR1cm4gZ2V0TGlua09wdGlvbnModmFsdWUpO1xyXG4gICAgcmV0dXJuIGRlZmF1bHRPbklucHV0Q2hhbmdlKHZhbHVlKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENvbWJvYm94XHJcbiAgICAgIHRyaWdnZXJNb2RlPVwiaW5wdXRcIlxyXG4gICAgICB2YWx1ZT17aW5wdXRWYWx1ZSgpfVxyXG4gICAgICAvLy8gdGhpcyBydW5zIHdoZW4gYW4gb3B0aW9uIGlzIGNsaWNrZWRcclxuICAgICAgb25DaGFuZ2U9eyh2YWwpID0+IHtcclxuICAgICAgICBpZiAodmFsID09PSBOT19NQVRDSF9GT1VORCkge1xyXG4gICAgICAgICAgcmV0dXJuIHNldElucHV0VmFsdWUoXCJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1N1YkxpbmspIHtcclxuICAgICAgICAgIGNvbnN0IGlucCA9IGlucHV0VmFsdWUoKTtcclxuICAgICAgICAgIGNvbnN0IGhhc2hJbmRleCA9IGlucC5pbmRleE9mKFwiI1wiKTtcclxuICAgICAgICAgIGNvbnN0IGluZGV4ID0gaGFzaEluZGV4ICE9PSAtMSA/IGhhc2hJbmRleCA6IGlucC5pbmRleE9mKFwiXlwiKTtcclxuICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2hvdWxkbid0IGhhcHBlblwiKTtcclxuICAgICAgICAgIHJldHVybiBzZXRJbnB1dFZhbHVlKFxyXG4gICAgICAgICAgICBpbnAuc2xpY2UoMCwgaW5kZXggKyAxKSArIHZhbCArIGlucC5zbGljZShpbmRleCArIDEpLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlucHV0VmFsdWUoKS5pbmNsdWRlcyhcIltbXCIpKSB7XHJcbiAgICAgICAgICByZXR1cm4gc2V0SW5wdXRWYWx1ZShcIltbXCIgKyB2YWwgKyBcIl1dXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5wdXRWYWx1ZSgpLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XHJcbiAgICAgICAgICByZXR1cm4gc2V0SW5wdXRWYWx1ZShcIiNcIiArIHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldElucHV0VmFsdWUodmFsKTtcclxuICAgICAgfX1cclxuICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgLy8gdGhpcyBydW5zIHdoZW4gdGhlIGlucHV0IGlzIHR5cGVkIGluXHJcbiAgICAgIG9uSW5wdXRDaGFuZ2U9e29uSW5wdXRDaGFuZ2V9XHJcbiAgICAgIC8vIGFscmVhZHkgZmlsdGVyaW5nIHRoZSBvcHRpb25zIG9uIGlucHV0LCBzbyB0aGlzIGlzbid0IG5lZWRlZFxyXG4gICAgICBkZWZhdWx0RmlsdGVyPXsoKSA9PiB0cnVlfVxyXG4gICAgICBpdGVtQ29tcG9uZW50PXsoaVByb3BzKSA9PiAoXHJcbiAgICAgICAgPENvbWJvYm94SXRlbVxyXG4gICAgICAgICAgey4uLnByb3BzLml0ZW1Qcm9wc31cclxuICAgICAgICAgIGl0ZW09e2lQcm9wcy5pdGVtfVxyXG4gICAgICAgICAgbm90ZT17bGFiZWxzW2lQcm9wcy5pdGVtLmluZGV4XX1cclxuICAgICAgICAgIGF1eExhYmVsPXthdXhbaVByb3BzLml0ZW0uaW5kZXhdfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtpUHJvcHMuaXRlbS5yYXdWYWx1ZX1cclxuICAgICAgICA8L0NvbWJvYm94SXRlbT5cclxuICAgICAgKX1cclxuICAgID5cclxuICAgICAgPENvbWJvYm94VHJpZ2dlciB7Li4ucHJvcHMudHJpZ2dlclByb3BzfT5cclxuICAgICAgICA8Q29tYm9ib3hJbnB1dFxyXG4gICAgICAgICAgey4uLnByb3BzLmlucHV0UHJvcHN9XHJcbiAgICAgICAgICB2YWx1ZT17aW5wdXRWYWx1ZSgpfVxyXG4gICAgICAgICAgLy8gd2l0aG91dCBkb2luZyB0aGlzLCBkZWZhdWx0IG9wdGlvbnMgd2lsbCBhbHdheXMgYmUgc2hvd24gb24gZm9jdXMsIGV2ZW4gaWYgaW5wdXQgdmFsdWUgaXMgbm90IGVtcHR5XHJcbiAgICAgICAgICBvbkZvY3VzPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICBvbklucHV0Q2hhbmdlKGUuY3VycmVudFRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgb25Gb2N1cyB9ID0gcHJvcHMuaW5wdXRQcm9wcyA/PyB7fTtcclxuICAgICAgICAgICAgaWYgKCFvbkZvY3VzIHx8IHR5cGVvZiBvbkZvY3VzICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybjtcclxuICAgICAgICAgICAgb25Gb2N1cyhlKTtcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgICBvbklucHV0PXsoZSkgPT4gc2V0SW5wdXRWYWx1ZShlLmN1cnJlbnRUYXJnZXQudmFsdWUpfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvQ29tYm9ib3hUcmlnZ2VyPlxyXG4gICAgICA8Q29tYm9ib3hDb250ZW50IHByb21wdEluc3RydWN0aW9ucz17cHJvbXB0SW5zdHJ1Y3Rpb25zfSAvPlxyXG4gICAgPC9Db21ib2JveD5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG4gIEFjY2Vzc29yLFxyXG4gIGNyZWF0ZU1lbW8sXHJcbiAgY3JlYXRlU2lnbmFsLFxyXG4gIEZvcixcclxuICBKU1hFbGVtZW50LFxyXG4gIE1hdGNoLFxyXG4gIG9uQ2xlYW51cCxcclxuICBvbk1vdW50LFxyXG4gIFNldHRlcixcclxuICBTaG93LFxyXG4gIHNwbGl0UHJvcHMsXHJcbiAgU3dpdGNoLFxyXG59IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5pbXBvcnQgXCJAL0FwcC5jc3NcIjtcclxuaW1wb3J0IHsgTW9kaWZpZWREYXRhdmlld1F1ZXJ5UmVzdWx0IH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBTZXRTdG9yZUZ1bmN0aW9uIH0gZnJvbSBcInNvbGlkLWpzL3N0b3JlXCI7XHJcbmltcG9ydCB7XHJcbiAgRGF0YUVkaXRCbG9ja0NvbmZpZyxcclxuICBEYXRhRWRpdEJsb2NrQ29uZmlnS2V5LFxyXG4gIGRlZmF1bHREYXRhRWRpdEJsb2NrQ29uZmlnLFxyXG4gIGdldENvbHVtblByb3BlcnR5TmFtZXMsXHJcbiAgZ2V0VGVtcGxhdGVGaWxlcyxcclxuICByZWdpc3RlckRhdGF2aWV3RXZlbnRzLFxyXG4gIHNldEJsb2NrQ29uZmlnLFxyXG4gIHRyeURhdGF2aWV3QXJyYXlUb0FycmF5LFxyXG4gIHVucmVnaXN0ZXJEYXRhdmlld0V2ZW50cyxcclxuICB1cGRhdGVCbG9ja0NvbmZpZyxcclxufSBmcm9tIFwiQC9saWIvdXRpbFwiO1xyXG4vLyBpbXBvcnQgeyBNaW51cywgUGx1cyB9IGZyb20gXCJsdWNpZGUtc29saWRcIjtcclxuaW1wb3J0IExvY2sgZnJvbSBcImx1Y2lkZS1zb2xpZC9pY29ucy9Mb2NrXCI7XHJcbmltcG9ydCBMb2NrT3BlbiBmcm9tIFwibHVjaWRlLXNvbGlkL2ljb25zL0xvY2stb3BlblwiO1xyXG5pbXBvcnQgR2VhciBmcm9tIFwibHVjaWRlLXNvbGlkL2ljb25zL1NldHRpbmdzXCI7XHJcbi8qXHJcbiAgVE9ET1xyXG4gIC0gcHJvYmxlbTogYnVpbGQgcHJvY2VzcyBidW5kbGVzICphbGwqIGx1Y2lkZSBpY29ucywgYnV0ICpkb2VzKiBjb3JyZWN0bHkgdHJlZXNoYWtlIGZvciBmaW5hbCBidW5kbGUuIFRoaXMgY2F1c2VzIDUwMCUgaW5jcmVhc2UgdG8gYnVpbGQgdGltZSBkZXNwaXRlIGJ1bmRsZSBiZWluZyBjb3JyZWN0LlxyXG4gIC0gd29ya2Fyb3VuZDpcclxuICAgIC0gZWZmZWN0OiBjb3JyZWN0cyBidWlsZCBwcm9jZXNzIHRpbWUgXHJcbiAgICAtIGZyb20gaHR0cHM6Ly9jaHJpc3RvcGhlci5lbmdpbmVlcmluZy9lbi9ibG9nL2x1Y2lkZS1pY29ucy13aXRoLXZpdGUtZGV2LXNlcnZlci9cclxuICAgIC0gaXNzdWU6IG5vIGF1dG9jb21wbGV0ZVxyXG4qL1xyXG5pbXBvcnQgeyBkZWZhdWx0UXVlcnlSZXN1bHQgfSBmcm9tIFwiQC9saWIvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSBcIkAvY29tcG9uZW50cy9UYWJsZVwiO1xyXG5pbXBvcnQge1xyXG4gIERpYWxvZyxcclxuICBEaWFsb2dDbG9zZSxcclxuICBEaWFsb2dDb250ZW50LFxyXG4gIERpYWxvZ0Rlc2NyaXB0aW9uLFxyXG4gIERpYWxvZ0Zvb3RlcixcclxuICBEaWFsb2dUaXRsZSxcclxuICBEaWFsb2dUcmlnZ2VyLFxyXG59IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvZGlhbG9nXCI7XHJcbmltcG9ydCB7IEV4dGVybmFsTGluayB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvZXh0ZXJuYWwtbGlua1wiO1xyXG5pbXBvcnQgeyBidXR0b25WYXJpYW50cyB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XHJcbmltcG9ydCB7IFRvZ2dsZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvdG9nZ2xlXCI7XHJcbmltcG9ydCB7XHJcbiAgQ29kZUJsb2NrQ29udGV4dCxcclxuICBDb2RlQmxvY2tJbmZvLFxyXG4gIHVzZUNvZGVCbG9jayxcclxufSBmcm9tIFwiLi9ob29rcy91c2VEYXRhRWRpdFwiO1xyXG5pbXBvcnQgeyBNYXJrZG93blZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQ29tYm9ib3ggfSBmcm9tIFwiQGtvYmFsdGUvY29yZS9jb21ib2JveFwiO1xyXG5pbXBvcnQge1xyXG4gIENvbWJvYm94Q29udGVudCxcclxuICBDb21ib2JveElucHV0LFxyXG4gIENvbWJvYm94SXRlbSxcclxuICBDb21ib2JveFRyaWdnZXIsXHJcbiAgUHJvbXB0Q29tYm9Cb3gsXHJcbn0gZnJvbSBcIi4vY29tcG9uZW50cy91aS9jb21iby1ib3hcIjtcclxuXHJcbmV4cG9ydCB0eXBlIEFwcFByb3BzID0gQ29kZUJsb2NrSW5mbyAmIHtcclxuICB1aWQ6IHN0cmluZztcclxuICBxdWVyeVJlc3VsdFN0b3JlOiBSZWNvcmQ8c3RyaW5nLCBNb2RpZmllZERhdGF2aWV3UXVlcnlSZXN1bHQ+O1xyXG4gIHNldFF1ZXJ5UmVzdWx0U3RvcmU6IFNldFN0b3JlRnVuY3Rpb248XHJcbiAgICBSZWNvcmQ8c3RyaW5nLCBNb2RpZmllZERhdGF2aWV3UXVlcnlSZXN1bHQ+XHJcbiAgPjtcclxuICBzZXRDb25maWdTdG9yZTogU2V0U3RvcmVGdW5jdGlvbjxEYXRhRWRpdEJsb2NrQ29uZmlnPjtcclxuICBoaWRlRmlsZUNvbDogYm9vbGVhbjtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEFwcChwcm9wczogQXBwUHJvcHMpIHtcclxuICBjb25zdCBbbG9jYWwsIGNvZGVCbG9ja0luZm9dID0gc3BsaXRQcm9wcyhwcm9wcywgW1xyXG4gICAgXCJ1aWRcIixcclxuICAgIFwicXVlcnlSZXN1bHRTdG9yZVwiLFxyXG4gICAgXCJzZXRRdWVyeVJlc3VsdFN0b3JlXCIsXHJcbiAgXSk7XHJcbiAgY29uc3QgeyBwbHVnaW4sIHF1ZXJ5LCBjb25maWcsIGRhdGF2aWV3QVBJIH0gPSBjb2RlQmxvY2tJbmZvO1xyXG4gIGNvbnN0IHF1ZXJ5UmVzdWx0czogQWNjZXNzb3I8TW9kaWZpZWREYXRhdmlld1F1ZXJ5UmVzdWx0PiA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xyXG4gICAgcmV0dXJuIHByb3BzLnF1ZXJ5UmVzdWx0U3RvcmVbcHJvcHMudWlkXSA/PyBkZWZhdWx0UXVlcnlSZXN1bHQ7XHJcbiAgfSwgZGVmYXVsdFF1ZXJ5UmVzdWx0KTtcclxuXHJcbiAgY29uc3QgdXBkYXRlUXVlcnlSZXN1bHRzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJ3ZSBvdXQgaGVyZVwiLCBwcm9wcy5xdWVyeSk7XHJcbiAgICBjb25zdCB0cnVlUHJvcGVydHlOYW1lcyA9IGdldENvbHVtblByb3BlcnR5TmFtZXMocXVlcnkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJ0cnVlIHByb3BzOyBcIiwgdHJ1ZVByb3BlcnR5TmFtZXMpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGF0YXZpZXdBUEkucXVlcnkocXVlcnkpO1xyXG4gICAgaWYgKCFyZXN1bHQuc3VjY2Vzc2Z1bCkge1xyXG4gICAgICBsb2NhbC5zZXRRdWVyeVJlc3VsdFN0b3JlKGxvY2FsLnVpZCwgeyAuLi5yZXN1bHQsIHRydWVQcm9wZXJ0eU5hbWVzIH0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICByZXN1bHQudmFsdWUudmFsdWVzID0gcmVzdWx0LnZhbHVlLnZhbHVlcy5tYXAoKGFycikgPT5cclxuICAgICAgYXJyLm1hcCgodikgPT4gdHJ5RGF0YXZpZXdBcnJheVRvQXJyYXkodikpLFxyXG4gICAgKTtcclxuICAgIGxvY2FsLnNldFF1ZXJ5UmVzdWx0U3RvcmUobG9jYWwudWlkLCB7IC4uLnJlc3VsdCwgdHJ1ZVByb3BlcnR5TmFtZXMgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXBkYXRlUXVlcnlSZXN1bHRzKCk7XHJcbiAgcmVnaXN0ZXJEYXRhdmlld0V2ZW50cyhwbHVnaW4sIHVwZGF0ZVF1ZXJ5UmVzdWx0cyk7XHJcblxyXG4gIG9uQ2xlYW51cCgoKSA9PiB7XHJcbiAgICB1bnJlZ2lzdGVyRGF0YXZpZXdFdmVudHMocGx1Z2luLCB1cGRhdGVRdWVyeVJlc3VsdHMpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENvZGVCbG9ja0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvZGVCbG9ja0luZm99PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiaC1maXQgdy1mdWxsIG92ZXJmbG93LXgtc2Nyb2xsXCI+XHJcbiAgICAgICAgPFRhYmxlIHF1ZXJ5UmVzdWx0cz17cXVlcnlSZXN1bHRzKCl9IGhpZGVGaWxlQ29sPXtwcm9wcy5oaWRlRmlsZUNvbH0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxyXG4gICAgICAgIDxUb29sYmFyIGNvbmZpZz17Y29uZmlnfSBzZXRDb25maWdTdG9yZT17cHJvcHMuc2V0Q29uZmlnU3RvcmV9IC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9Db2RlQmxvY2tDb250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuXHJcbmV4cG9ydCBjb25zdCBUb29sYmFyID0gKHByb3BzOiB7XHJcbiAgY29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnO1xyXG4gIHNldENvbmZpZ1N0b3JlOiBTZXRTdG9yZUZ1bmN0aW9uPERhdGFFZGl0QmxvY2tDb25maWc+O1xyXG59KSA9PiB7XHJcbiAgY29uc3QgY29kZUJsb2NrSW5mbyA9IHVzZUNvZGVCbG9jaygpO1xyXG4gIGNvbnN0IFtpc0NvbmZpZ09wZW4sIHNldENvbmZpZ09wZW5dID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgdXBkYXRlQ29uZmlnID0gKFxyXG4gICAga2V5OiBEYXRhRWRpdEJsb2NrQ29uZmlnS2V5LFxyXG4gICAgdmFsdWU6IERhdGFFZGl0QmxvY2tDb25maWdbdHlwZW9mIGtleV0sXHJcbiAgKSA9PiB7XHJcbiAgICB1cGRhdGVCbG9ja0NvbmZpZyhrZXksIHZhbHVlLCBjb2RlQmxvY2tJbmZvKTtcclxuICB9O1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8QmxvY2tDb25maWdNb2RhbFxyXG4gICAgICAgIGNvbmZpZz17cHJvcHMuY29uZmlnfVxyXG4gICAgICAgIGNvZGVCbG9ja0luZm89e2NvZGVCbG9ja0luZm99XHJcbiAgICAgICAgb3Blbj17aXNDb25maWdPcGVuKCl9XHJcbiAgICAgICAgc2V0T3Blbj17c2V0Q29uZmlnT3Blbn1cclxuICAgICAgLz5cclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzPVwiY2xpY2thYmxlLWljb25cIlxyXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldENvbmZpZ09wZW4oKHByZXYpID0+ICFwcmV2KX1cclxuICAgICAgPlxyXG4gICAgICAgIDxHZWFyIHNpemU9XCIxcmVtXCIgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxGb3IgZWFjaD17T2JqZWN0LmtleXMoY29kZUJsb2NrSW5mby5jb25maWcpIGFzIERhdGFFZGl0QmxvY2tDb25maWdLZXlbXX0+XHJcbiAgICAgICAgeyhrZXkpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29kZUJsb2NrSW5mby5jb25maWdba2V5XTtcclxuICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgICAgPE1hdGNoIHdoZW49e2tleSA9PT0gXCJsb2NrRWRpdGluZ1wifT5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjbGlja2FibGUtaWNvblwiXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHVwZGF0ZUNvbmZpZyhrZXksICF2YWx1ZSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIDxTaG93XHJcbiAgICAgICAgICAgICAgICAgICAgd2hlbj17dmFsdWUgPT09IHRydWV9XHJcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2s9ezxMb2NrT3BlbiBzaXplPXtcIjFyZW1cIn0gLz59XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8TG9jayBzaXplPXtcIjFyZW1cIn0gLz5cclxuICAgICAgICAgICAgICAgICAgPC9TaG93PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9NYXRjaD5cclxuICAgICAgICAgICAgPC9Td2l0Y2g+XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH19XHJcbiAgICAgIDwvRm9yPlxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxQcm9tcHRDb21ib0JveFxyXG4gICAgICAgICAgYXBwPXtjb2RlQmxvY2tJbmZvLnBsdWdpbi5hcHB9XHJcbiAgICAgICAgICBkZWZhdWx0T3B0aW9ucz17W1wib3B0aW9uIGFcIiwgXCJvcHRpb24gYlwiLCBcIm9wdGlvbiBjXCJdfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBCbG9ja0NvbmZpZ01vZGFsID0gKHByb3BzOiB7XHJcbiAgY29uZmlnOiBEYXRhRWRpdEJsb2NrQ29uZmlnO1xyXG4gIGNvZGVCbG9ja0luZm86IENvZGVCbG9ja0luZm87XHJcbiAgb3Blbj86IGJvb2xlYW47XHJcbiAgc2V0T3Blbj86IFNldHRlcjxib29sZWFuPjtcclxuICB0cmlnZ2VyPzogSlNYRWxlbWVudDtcclxufSkgPT4ge1xyXG4gIGNvbnN0IFtmb3JtLCBzZXRGb3JtXSA9IGNyZWF0ZVN0b3JlKHByb3BzLmNvbmZpZyk7XHJcbiAgY29uc3QgdGVtcGxhdGVzID0gZ2V0VGVtcGxhdGVGaWxlcyhwcm9wcy5jb2RlQmxvY2tJbmZvLnBsdWdpbi5hcHApO1xyXG5cclxuICBjb25zdCB1cGRhdGVGb3JtID0gKFxyXG4gICAga2V5OiBrZXlvZiBEYXRhRWRpdEJsb2NrQ29uZmlnLFxyXG4gICAgdmFsdWU6IERhdGFFZGl0QmxvY2tDb25maWdbdHlwZW9mIGtleV0sXHJcbiAgKSA9PiB7XHJcbiAgICBzZXRGb3JtKChwcmV2KSA9PiAoeyAuLi5wcmV2LCBba2V5XTogdmFsdWUgfSkpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8RGlhbG9nIG9wZW49e3Byb3BzLm9wZW59IG9uT3BlbkNoYW5nZT17cHJvcHMuc2V0T3Blbn0+XHJcbiAgICAgIDxTaG93IHdoZW49e3Byb3BzLnRyaWdnZXJ9PlxyXG4gICAgICAgIDxEaWFsb2dUcmlnZ2VyPntwcm9wcy50cmlnZ2VyIX08L0RpYWxvZ1RyaWdnZXI+XHJcbiAgICAgIDwvU2hvdz5cclxuICAgICAgPERpYWxvZ0NvbnRlbnQ+XHJcbiAgICAgICAgPERpYWxvZ1RpdGxlPkJsb2NrIGNvbmZpZ3VyYXRpb248L0RpYWxvZ1RpdGxlPlxyXG4gICAgICAgIDxEaWFsb2dEZXNjcmlwdGlvbj5cclxuICAgICAgICAgIHNlZSB0aGUgZG9jc3tcIiBcIn1cclxuICAgICAgICAgIDxFeHRlcm5hbExpbmsgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS91bnhvay9vYnNpZGlhbi1kYXRhZWRpdFwiPlxyXG4gICAgICAgICAgICBoZXJlXHJcbiAgICAgICAgICA8L0V4dGVybmFsTGluaz57XCIgXCJ9XHJcbiAgICAgICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG4gICAgICAgIDwvRGlhbG9nRGVzY3JpcHRpb24+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggc2l6ZS1mdWxsIG1heC1oLVs5MCVdIGZsZXgtY29sIGdhcC0yIG92ZXJmbG93LXktYXV0byBwci0yXCI+XHJcbiAgICAgICAgICA8U2V0dGluZ1xyXG4gICAgICAgICAgICB0aXRsZT1cIkxvY2sgZWRpdGluZ1wiXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiUHJldmVudHMgZWRpdGluZyBpbiBhbGwgY2VsbHMgd2hpY2ggbWFrZXMgbGlua3MgYW5kIHRhZ3NcclxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZS5cIlxyXG4gICAgICAgICAgICBsYWJlbEZvcj1cImxvY2stZWRpdGluZy10b2dnbGVcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8VG9nZ2xlXHJcbiAgICAgICAgICAgICAgaWQ9XCJsb2NrLWVkaXRpbmctdG9nZ2xlXCJcclxuICAgICAgICAgICAgICBuYW1lPVwibG9jay1lZGl0aW5nLXRvZ2dsZVwiXHJcbiAgICAgICAgICAgICAgY2hlY2tlZD17Zm9ybS5sb2NrRWRpdGluZ31cclxuICAgICAgICAgICAgICBvbkNoZWNrZWRDaGFuZ2U9eyhiKSA9PiB1cGRhdGVGb3JtKFwibG9ja0VkaXRpbmdcIiwgYil9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L1NldHRpbmc+XHJcbiAgICAgICAgICA8U2V0dGluZ1xyXG4gICAgICAgICAgICB0aXRsZT1cIkhlYWRlciBpY29uc1wiXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiSWYgZW5hYmxlZCwgd2lsbCBkaXNwbGF5IHRoZSBpY29uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IHR5cGUgaW4gdGhlIGhlYWRlciBjZWxsLlwiXHJcbiAgICAgICAgICAgIGxhYmVsRm9yPVwiaGVhZGVyLWljb25zLXRvZ2dsZVwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxUb2dnbGVcclxuICAgICAgICAgICAgICBpZD1cImhlYWRlci1pY29ucy10b2dnbGVcIlxyXG4gICAgICAgICAgICAgIG5hbWU9XCJoZWFkZXItaWNvbnMtdG9nZ2xlXCJcclxuICAgICAgICAgICAgICBjaGVja2VkPXtmb3JtLmhlYWRlckljb25zfVxyXG4gICAgICAgICAgICAgIG9uQ2hlY2tlZENoYW5nZT17KGIpID0+IHVwZGF0ZUZvcm0oXCJoZWFkZXJJY29uc1wiLCBiKX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvU2V0dGluZz5cclxuICAgICAgICAgIDxTZXR0aW5nXHJcbiAgICAgICAgICAgIHRpdGxlPVwiTmV3IG5vdGUgdGVtcGxhdGVcIlxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbj1cIlBhdGggdG8gdGhlIHRlbXBsYXRlIGZpbGUgdG8gdXNlIGJ5IGRlZmF1bHQgZm9yIG5vdGVzIGNyZWF0ZWQgdmlldyB0aGUgJ2FkZCByb3cnIGJ1dHRvbi4gTXVzdCBiZSB3aXRoaW4gdGhlIHRlbXBsYXRlIGZvbGRlciBjb25maWd1cmVkIGluIGNvcmUgcGx1Z2luIHNldHRpbmcuXCJcclxuICAgICAgICAgICAgbGFiZWxGb3I9XCJuZXctbm90ZS10ZW1wbGF0ZVwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHsvKiBUT0RPIG1ha2UgdGhpcyBhIGNvbWJvYm94ICovfVxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgaWQ9XCJuZXctbm90ZS10ZW1wbGF0ZVwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cIm5ldy1ub3RlLXRlbXBsYXRlXCJcclxuICAgICAgICAgICAgICBsaXN0PVwidGVtcGxhdGUtbGlzdFwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e2Zvcm0ubmV3Tm90ZVRlbXBsYXRlUGF0aH1cclxuICAgICAgICAgICAgICBvbklucHV0PXsoZSkgPT5cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUZvcm0oXCJuZXdOb3RlVGVtcGxhdGVQYXRoXCIsIGUuY3VycmVudFRhcmdldC52YWx1ZSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxkYXRhbGlzdCBpZD1cInRlbXBsYXRlLWxpc3RcIj5cclxuICAgICAgICAgICAgICA8Rm9yIGVhY2g9e3RlbXBsYXRlc30+XHJcbiAgICAgICAgICAgICAgICB7KGYpID0+IDxvcHRpb24gdmFsdWU9e2YucGF0aH0+e2YuYmFzZW5hbWV9PC9vcHRpb24+fVxyXG4gICAgICAgICAgICAgIDwvRm9yPlxyXG4gICAgICAgICAgICA8L2RhdGFsaXN0PlxyXG4gICAgICAgICAgPC9TZXR0aW5nPlxyXG4gICAgICAgICAgPFNldHRpbmdcclxuICAgICAgICAgICAgdGl0bGU9XCJUYWJsZSBDU1MgY2xhc3NcIlxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbj1cIkNsYXNzIG5hbWUgdG8gYXR0YWNoIHRvIHRoZSB0YWJsZSBlbGVtZW50LiBEbyBzcGFjZXMgdG8gc2VwYXJhdGUgbXVsdGlwbGUgaWYgZGVzaXJlZC5cIlxyXG4gICAgICAgICAgICBsYWJlbEZvcj1cInRhYmxlLWNsYXNzLW5hbWVcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgaWQ9XCJ0YWJsZS1jbGFzcy1uYW1lXCJcclxuICAgICAgICAgICAgICBuYW1lPVwidGFibGUtY2xhc3MtbmFtZVwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e2Zvcm0udGFibGVDbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgb25JbnB1dD17KGUpID0+XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVGb3JtKFwidGFibGVDbGFzc05hbWVcIiwgZS5jdXJyZW50VGFyZ2V0LnZhbHVlKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvU2V0dGluZz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8RGlhbG9nRm9vdGVyPlxyXG4gICAgICAgICAgPERpYWxvZ0Nsb3NlXHJcbiAgICAgICAgICAgIC8vIHZhcmlhbnQ9XCJvdXRsaW5lXCJcclxuICAgICAgICAgICAgY2xhc3M9e2J1dHRvblZhcmlhbnRzLm91dGxpbmV9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICBzZXRCbG9ja0NvbmZpZyhkZWZhdWx0RGF0YUVkaXRCbG9ja0NvbmZpZywgcHJvcHMuY29kZUJsb2NrSW5mbyk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHJlc2V0XHJcbiAgICAgICAgICA8L0RpYWxvZ0Nsb3NlPlxyXG4gICAgICAgICAgPERpYWxvZ0Nsb3NlXHJcbiAgICAgICAgICAgIC8vIHZhcmlhbnQ9XCJnaG9zdFwiXHJcbiAgICAgICAgICAgIGNsYXNzPXtidXR0b25WYXJpYW50cy5naG9zdH1cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gcHJvcHMuc2V0T3BlbiAmJiBwcm9wcy5zZXRPcGVuKGZhbHNlKX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgY2FuY2VsXHJcbiAgICAgICAgICA8L0RpYWxvZ0Nsb3NlPlxyXG4gICAgICAgICAgPERpYWxvZ0Nsb3NlXHJcbiAgICAgICAgICAgIC8vIHZhcmlhbnQ9XCJhY2NlbnRcIlxyXG4gICAgICAgICAgICBjbGFzcz17YnV0dG9uVmFyaWFudHMuYWNjZW50fVxyXG4gICAgICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgc2V0QmxvY2tDb25maWcoZm9ybSwgcHJvcHMuY29kZUJsb2NrSW5mbyk7XHJcbiAgICAgICAgICAgICAgaWYgKCFwcm9wcy5zZXRPcGVuKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgcHJvcHMuc2V0T3BlbihmYWxzZSk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHNhdmVcclxuICAgICAgICAgIDwvRGlhbG9nQ2xvc2U+XHJcbiAgICAgICAgPC9EaWFsb2dGb290ZXI+XHJcbiAgICAgIDwvRGlhbG9nQ29udGVudD5cclxuICAgIDwvRGlhbG9nPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgU2V0dGluZyA9IChwcm9wczoge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBjaGlsZHJlbjogSlNYRWxlbWVudDtcclxuICBsYWJlbEZvcjogc3RyaW5nO1xyXG59KSA9PiAoXHJcbiAgPGRpdiBjbGFzcz1cImZsZXggdy1mdWxsIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gYm9yZGVyLTAgYm9yZGVyLXQtWzFweF0gYm9yZGVyLXNvbGlkIGJvcmRlci10LVt2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcildIHB0LTJcIj5cclxuICAgIDxsYWJlbCBmb3I9e3Byb3BzLmxhYmVsRm9yfT5cclxuICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1uYW1lXCI+e3Byb3BzLnRpdGxlfTwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCI+e3Byb3BzLmRlc2NyaXB0aW9ufTwvZGl2PlxyXG4gICAgPC9sYWJlbD5cclxuICAgIHtwcm9wcy5jaGlsZHJlbn1cclxuICA8L2Rpdj5cclxuKTtcclxuIiwiLy8gQHJlZnJlc2ggcmVsb2FkXHJcblxyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwic29saWQtanMvd2ViXCI7XHJcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLnRzeFwiO1xyXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQge1xyXG4gIEFwcCBhcyBPYnNpZGlhbkFwcCxcclxuICBOb3RpY2UsXHJcbiAgUGx1Z2luLFxyXG4gIE1hcmtkb3duUmVuZGVyQ2hpbGQsXHJcbiAgTWFya2Rvd25WaWV3LFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBEYXRhdmlld0FQSSwgTW9kaWZpZWREYXRhdmlld1F1ZXJ5UmVzdWx0IH0gZnJvbSBcIi4vbGliL3R5cGVzLnRzXCI7XHJcbmltcG9ydCB7IGVuc3VyZUZpbGVMaW5rQ29sdW1uLCBzcGxpdFF1ZXJ5T25Db25maWcgfSBmcm9tIFwiLi9saWIvdXRpbC50c1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gXCJzb2xpZC1qcy9zdG9yZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVVbmlxdWVJZCB9IGZyb20gXCJzb2xpZC1qc1wiO1xyXG5cclxuY29uc3QgZ2V0RGF0YXZpZXdBUEkgPSAocEFwcD86IE9ic2lkaWFuQXBwKSA9PiB7XHJcbiAgaWYgKHBBcHApIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IHsgcGx1Z2lucyB9ID0gcEFwcC5wbHVnaW5zO1xyXG4gICAgaWYgKHBsdWdpbnMuaGFzT3duUHJvcGVydHkoXCJkYXRhdmlld1wiKSkge1xyXG4gICAgICByZXR1cm4gcGx1Z2lucy5kYXRhdmlldy5hcGkgYXMgRGF0YXZpZXdBUEk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIEB0cy1pZ25vcmVcclxuICBjb25zdCBnUGx1Z2lucyA9IGFwcC5wbHVnaW5zLnBsdWdpbnM7XHJcbiAgaWYgKGdQbHVnaW5zLmhhc093blByb3BlcnR5KFwiZGF0YXZpZXdcIikpIHtcclxuICAgIHJldHVybiBnUGx1Z2lucy5kYXRhdmlldy5hcGkgYXMgRGF0YXZpZXdBUEk7XHJcbiAgfVxyXG4gIGNvbnN0IG1zZyA9IFwiRmFpbGVkIHRvIGdldCBEYXRhdmlldyBBUEkuIElzIERhdGF2aWV3IGluc3RhbGxlZCAmIGVuYWJsZWQ/XCI7XHJcbiAgbmV3IE5vdGljZShtc2cpO1xyXG4gIHRocm93IG5ldyBFcnJvcihtc2cpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YUVkaXQgZXh0ZW5kcyBQbHVnaW4ge1xyXG4gIGFzeW5jIG9ubG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGF3YWl0IGFwcC5wbHVnaW5zLmxvYWRQbHVnaW4oXCJkYXRhdmlld1wiKTtcclxuICAgIC8vIGNvbnN0IGRhdGF2aWV3QVBJID0gZ2V0QVBJKHRoaXMuYXBwKSBhcyBEYXRhdmlld0FQSTtcclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXHJcbiAgICAgIFwiZGF0YWVkaXRcIixcclxuICAgICAgYXN5bmMgKHByZVNvdXJjZSwgZWwsIGN0eCkgPT4ge1xyXG4gICAgICAgIGVsLmVtcHR5KCk7XHJcbiAgICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZShcInR3Y3NzXCIsIHRydWUpO1xyXG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQhLnN0eWxlLmJveFNoYWRvdyA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICBjb25zdCB7IHNvdXJjZSwgaGlkZTogaGlkZUZpbGVDb2wgfSA9IGVuc3VyZUZpbGVMaW5rQ29sdW1uKHByZVNvdXJjZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVpZCA9IGNyZWF0ZVVuaXF1ZUlkKCk7XHJcbiAgICAgICAgY29uc3QgZGF0YXZpZXdBUEkgPSBnZXREYXRhdmlld0FQSSh0aGlzLmFwcCkgYXMgRGF0YXZpZXdBUEk7XHJcbiAgICAgICAgY29uc3QgeyBxdWVyeSwgY29uZmlnIH0gPSBzcGxpdFF1ZXJ5T25Db25maWcoc291cmNlKTtcclxuICAgICAgICBjb25zdCBbY29uZmlnU3RvcmUsIHNldENvbmZpZ1N0b3JlXSA9IGNyZWF0ZVN0b3JlKGNvbmZpZyk7XHJcblxyXG4gICAgICAgIC8vIG9ic2lkaWFuIHJlY2NvbWVuZHMgdGhpcyBhcHByb2FjaCBhY2NvcmRpbmcgdG8gaHR0cHM6Ly9mb3J1bS5vYnNpZGlhbi5tZC90L2hvdy10by1saXN0ZW4tZm9yLXRvZ2dsaW5nLXJlYWRpbmctdmlldy82NzcwOS8yXHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XHJcbiAgICAgICAgICAvLyB1c2Ugc29tZSgpIHNvIHdlIGNhbiBlbmQgdGhlIGxvb3AgZWFybHlcclxuICAgICAgICAgIG11dGF0aW9ucy5zb21lKChtdXQpID0+IHtcclxuICAgICAgICAgICAgaWYgKG11dC5hdHRyaWJ1dGVOYW1lICE9PSBcImRhdGEtbW9kZVwiKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHVzaW5nIHRoZSBvbGQgdmFsdWUgc2VlbXMgdG8gYmUgdGhlIG1vc3QgY29uc2lzdGVudCBiZWNhdXNlIGNoZWNraW5nIGF0dHJpYnV0ZSB2YWx1ZXMgZnJvbSB0aGUgRE9NIGluc2lkZSBhIE1PIGNhbiBoYXZlIGdvdGNoYXNcclxuICAgICAgICAgICAgY29uc3QgbW9kZSA9IG11dC5vbGRWYWx1ZTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJnb3QgbW9kZTogXCIsIG1vZGUpO1xyXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJzb3VyY2VcIikge1xyXG4gICAgICAgICAgICAgIHNldENvbmZpZ1N0b3JlKFwibG9ja0VkaXRpbmdcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicHJldmlld1wiKSB7XHJcbiAgICAgICAgICAgICAgc2V0Q29uZmlnU3RvcmUoXCJsb2NrRWRpdGluZ1wiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaW4gY2FzZSBtb2RlIGlzIHNvbWV0aGluZyB1bmV4cGVjdGVkXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlcykgPT4gc2V0VGltZW91dChyZXMsIDApKTtcclxuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGVsLmNsb3Nlc3QoXCJbZGF0YS1tb2RlXVwiKTtcclxuICAgICAgICAgIGlmICghY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGNvbnRhaW5lciBlbGVtZW50XCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIG11dGF0aW9uIHdvbid0IHJ1biBjYWxsYmFjayBvbiBpbnN0YW50aWF0aW9uIHNvIHdlIGNoZWNrIGhlcmVcclxuICAgICAgICAgIGNvbnN0IG1vZGUgPSBjb250YWluZXIuZ2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlXCIpO1xyXG4gICAgICAgICAgaWYgKG1vZGUgPT09IFwicHJldmlld1wiKSB7XHJcbiAgICAgICAgICAgIHNldENvbmZpZ1N0b3JlKFwibG9ja0VkaXRpbmdcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBpZiAobW9kZSA9PT0gXCJzb3VyY2VcIikge1xyXG4gICAgICAgICAgLy8gICBzZXRDb25maWdTdG9yZShcImxvY2tFZGl0aW5nXCIsIGZhbHNlKTtcclxuICAgICAgICAgIC8vIH1cclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAvLyBmb3Igc29tZSByZWFzb24sIGRvaW5nIHRoaXMgYXMgYSBzaWduYWwgaW5zaWRlIGVhY2ggPEFwcCAvPiBjYXVzZXMgZ2xpdGNoZXMgd2hlbiB1cGRhdGluZyBmcm9tIGRhdGF2aWV3IGV2ZW50c1xyXG4gICAgICAgIC8vIGJ1dCB0aGlzIHdvcmtzIGp1c3QgZmluZVxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICBUT0RPIGFmdGVyIGNvbWluZyBiYWNrIHRvIHNlZSB0aGlzIGFuZCBzZWVpbmcgdGhlIGFib3ZlIGNvbW1lbnRzLCB0aGlzIGlzIGJlaW5nIGNyZWF0ZWQgaW4gZWFjaCBjb2RlIGJsb2NrIHJlZ2lzdGVyIGNhbGxiYWNrLi4uIHdoaWNoIGRvZXNuJ3QgbWFrZSBzZW5zZSB0aGF0IHRoaXMgd29ya3MgYnV0IGRvaW5nIHRoZSBzdG9yZSB3aXRoaW4gPEFwcCAvPiBkb2Vzbid0IHdvcms/IEkgbmVlZCB0byBmaWd1cmUgb3V0IHdoYXQgdGhlIHRydWUgaXNzdWUgd2FzIGJlZm9yZSBhbmQgd2h5IHRoaXMgd29ya3MgdG8gZmlndXJlIG91dCB3aGF0IHRoZSBhY3R1YWwgd2F5IHRvIGRvIHRoaXMgc2hvdWxkIGJlLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgY29uc3QgW3F1ZXJ5UmVzdWx0U3RvcmUsIHNldFF1ZXJ5UmVzdWx0U3RvcmVdID0gY3JlYXRlU3RvcmU8XHJcbiAgICAgICAgICBSZWNvcmQ8c3RyaW5nLCBNb2RpZmllZERhdGF2aWV3UXVlcnlSZXN1bHQ+XHJcbiAgICAgICAgPih7fSk7XHJcbiAgICAgICAgY29uc3QgZGlzcG9zZSA9IHJlbmRlcigoKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8QXBwXHJcbiAgICAgICAgICAgICAgcGx1Z2luPXt0aGlzfVxyXG4gICAgICAgICAgICAgIGVsPXtlbH1cclxuICAgICAgICAgICAgICBzb3VyY2U9e3NvdXJjZX1cclxuICAgICAgICAgICAgICBxdWVyeT17cXVlcnl9XHJcbiAgICAgICAgICAgICAgLy8gY29uZmlnPXtjb25maWd9XHJcbiAgICAgICAgICAgICAgY29uZmlnPXtjb25maWdTdG9yZX1cclxuICAgICAgICAgICAgICBzZXRDb25maWdTdG9yZT17c2V0Q29uZmlnU3RvcmV9XHJcbiAgICAgICAgICAgICAgY3R4PXtjdHh9XHJcbiAgICAgICAgICAgICAgZGF0YXZpZXdBUEk9e2RhdGF2aWV3QVBJfVxyXG4gICAgICAgICAgICAgIHVpZD17dWlkfVxyXG4gICAgICAgICAgICAgIHF1ZXJ5UmVzdWx0U3RvcmU9e3F1ZXJ5UmVzdWx0U3RvcmV9XHJcbiAgICAgICAgICAgICAgc2V0UXVlcnlSZXN1bHRTdG9yZT17c2V0UXVlcnlSZXN1bHRTdG9yZX1cclxuICAgICAgICAgICAgICBoaWRlRmlsZUNvbD17aGlkZUZpbGVDb2x9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sIGVsKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWRDaGlsZCA9IG5ldyBNYXJrZG93blJlbmRlckNoaWxkKGVsKTtcclxuICAgICAgICBtZENoaWxkLnJlZ2lzdGVyKCgpID0+IHtcclxuICAgICAgICAgIGRpc3Bvc2UoKTtcclxuICAgICAgICAgIC8vIHJlbW92ZU9uQ2xpY2soKTtcclxuICAgICAgICAgIHNldFF1ZXJ5UmVzdWx0U3RvcmUoKHByZXYpID0+IHtcclxuICAgICAgICAgICAgZGVsZXRlIHByZXZbdWlkXTtcclxuICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjdHguYWRkQ2hpbGQobWRDaGlsZCk7XHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsidmFsdWUiLCJjaGlsZHJlbiIsIkZBTExCQUNLIiwiZGlzcG9zZSIsImkiLCJzb3VyY2VzIiwiZG9jdW1lbnQiLCJ1bndyYXAiLCJtaW4iLCJtYXgiLCJOb3RpY2UiLCJhcHAiLCJwYXJzZVlhbWwiLCJzdHJpbmdpZnlZYW1sIiwiVEZpbGUiLCJkZWZhdWx0QXR0cmlidXRlcyIsInhtbG5zIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3Qm94IiwiZmlsbCIsInN0cm9rZSIsImRlZmF1bHRBdHRyaWJ1dGVzX2RlZmF1bHQiLCJJY29uIiwicHJvcHMiLCJsb2NhbFByb3BzIiwicmVzdCIsInNwbGl0UHJvcHMiLCJfZWwkIiwiX3RtcGwkIiwiXyRtZXJnZVByb3BzIiwic2l6ZSIsImNvbG9yIiwiXyRtZW1vIiwiYWJzb2x1dGVTdHJva2VXaWR0aCIsIk51bWJlciIsInN0cm9rZVdpZHRoIiwibWVyZ2VDbGFzc2VzIiwibmFtZSIsInRvS2ViYWJDYXNlIiwiY2xhc3MiLCJfJGNyZWF0ZUNvbXBvbmVudCIsIkZvciIsImVhY2giLCJpY29uTm9kZSIsImVsZW1lbnROYW1lIiwiYXR0cnMiLCJEeW5hbWljIiwiY29tcG9uZW50IiwiSWNvbl9kZWZhdWx0IiwieCIsInkiLCJyeCIsInJ5Iiwia2V5IiwiZCIsIkxvY2siLCJsb2NrX2RlZmF1bHQiLCJMb2NrT3BlbiIsImxvY2tfb3Blbl9kZWZhdWx0IiwiY3giLCJjeSIsInIiLCJTZXR0aW5ncyIsInNldHRpbmdzX2RlZmF1bHQiLCJjbGFzc05hbWUiLCJjbGFzc0dyb3VwIiwiY2FjaGUiLCJjbGFzc0xpc3QiLCJpc051bWJlciIsIk1hcmtkb3duIiwicmVmIiwiZGl2UHJvcHMiLCJtZCIsImNyZWF0ZU1lbW8iLCJzdHIiLCJtYXJrZG93biIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJ0b1N0cmluZyIsIkNvbXBvbmVudCIsImNyZWF0ZUVmZmVjdCIsImVtcHR5IiwicmVuZGVyIiwic291cmNlUGF0aCIsInR3TWVyZ2UiLCJDb2RlQmxvY2tDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInBsdWdpbiIsImVsIiwic291cmNlIiwicXVlcnkiLCJjb25maWciLCJjdHgiLCJkYXRhdmlld0FQSSIsImhpZGVGaWxlQ29sIiwidXNlQ29kZUJsb2NrIiwidXNlQ29udGV4dCIsIkNoZWNrYm94SW5wdXQiLCIkJGNsaWNrIiwiZSIsInVwZGF0ZU1ldGFkYXRhUHJvcGVydHkiLCJwcm9wZXJ0eSIsImN1cnJlbnRUYXJnZXQiLCJjaGVja2VkIiwiZmlsZVBhdGgiLCJfJGVmZmVjdCIsImRpc2FibGVkIiwibG9ja0VkaXRpbmciLCJfJGRlbGVnYXRlRXZlbnRzIiwiRGF0ZURhdGV0aW1lSW5wdXQiLCJsdXhvbiIsIkRhdGVUaW1lIiwiaXNUaW1lIiwiY2hlY2tJZkRhdGVIYXNUaW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzVmFsaWQiLCJ0YXJnZXQiLCJ2YWxpZGl0eSIsInNldEVkaXRpbmciLCJmb3JtYXQiLCJkdCIsImZyb21Gb3JtYXQiLCJuZXdWYWx1ZSIsInRvRm9ybWF0IiwiZm9ybWF0dGVkT2xkIiwiYXV0b2ZvY3VzIiwiXyRzZXRBdHRyaWJ1dGUiLCJQbHVzIiwicGx1c19kZWZhdWx0IiwiVGV4dElucHV0Iiwic2V0U2l6ZSIsImNyZWF0ZVNpZ25hbCIsImxlbmd0aCIsIiQkaW5wdXQiLCJ1cGRhdGVQcm9wZXJ0eSIsIkxpc3RUYWJsZURhdGFXcmFwcGVyIiwiX2VsJDIiLCJmaXJzdENoaWxkIiwidmFsIiwiaW5kZXgiLCJMaXN0VGFibGVEYXRhSXRlbSIsIml0ZW1WYWx1ZSIsIml0ZW1JbmRleCIsInByZXZlbnREZWZhdWx0IiwiaXNFZGl0aW5nIiwiX2VsJDMiLCJfdG1wbCQyIiwiU2hvdyIsIndoZW4iLCJmYWxsYmFjayIsInRyeURhdGF2aWV3TGlua1RvTWFya2Rvd24iLCJvbkNsaWNrIiwidW5kZWZpbmVkIiwiTGlzdElucHV0IiwidmFsdWVUeXBlIiwibmV3VmFsIiwiYXJyIiwiZmlsdGVyIiwiXyIsImFjY2VzcyIsImNvbnRhaW5zIiwiZ2V0V2luZG93IiwiaXNXZWJLaXQiLCJnZXRDb21wdXRlZFN0eWxlIiwiREFUQV9UT1BfTEFZRVJfQVRUUiIsIm9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHMiLCJoYXNEaXNhYmxlZEJvZHlQb2ludGVyRXZlbnRzIiwibGF5ZXJzIiwiaW5kZXhPZiIsIm5vZGUiLCJmaW5kSW5kZXgiLCJsYXllciIsImZpbmQiLCJpc1RvcE1vc3RMYXllciIsImdldFBvaW50ZXJCbG9ja2luZ0xheWVycyIsImlzUG9pbnRlckJsb2NraW5nIiwiZ2V0VG9wTW9zdFBvaW50ZXJCbG9ja2luZ0xheWVyIiwic2xpY2UiLCJoYXNQb2ludGVyQmxvY2tpbmdMYXllciIsImlzQmVsb3dQb2ludGVyQmxvY2tpbmdMYXllciIsImhpZ2hlc3RCbG9ja2luZ0luZGV4IiwiYWRkTGF5ZXIiLCJwdXNoIiwicmVtb3ZlTGF5ZXIiLCJzcGxpY2UiLCJhc3NpZ25Qb2ludGVyRXZlbnRUb0xheWVycyIsInN0eWxlIiwicG9pbnRlckV2ZW50cyIsImRpc2FibGVCb2R5UG9pbnRlckV2ZW50cyIsIm93bmVyRG9jdW1lbnQiLCJnZXREb2N1bWVudCIsImJvZHkiLCJyZXN0b3JlQm9keVBvaW50ZXJFdmVudHMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJsYXllclN0YWNrIiwiQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5UIiwiQVVUT0ZPQ1VTX09OX1VOTU9VTlRfRVZFTlQiLCJFVkVOVF9PUFRJT05TIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJmb2N1c1Njb3BlU3RhY2siLCJzdGFjayIsImFjdGl2ZSIsImFkZCIsInNjb3BlIiwicGF1c2UiLCJyZW1vdmVJdGVtRnJvbUFycmF5IiwidW5zaGlmdCIsInJlbW92ZSIsInJlc3VtZSIsImNyZWF0ZUZvY3VzU2NvcGUiLCJpc1BhdXNlZCIsInNldElzUGF1c2VkIiwiZm9jdXNTY29wZSIsImxhc3RGb2N1c2VkRWxlbWVudCIsIm9uTW91bnRBdXRvRm9jdXMiLCJvblVubW91bnRBdXRvRm9jdXMiLCJjcmVhdGVTZW50aW5lbCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwidGFiSW5kZXgiLCJhc3NpZ24iLCJ2aXN1YWxseUhpZGRlblN0eWxlcyIsInRhYmJhYmxlcyIsImNvbnRhaW5lciIsImdldEFsbFRhYmJhYmxlSW4iLCJoYXNBdHRyaWJ1dGUiLCJmaXJzdFRhYmJhYmxlIiwiaXRlbXMiLCJsYXN0VGFiYmFibGUiLCJzaG91bGRQcmV2ZW50VW5tb3VudEF1dG9Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJnZXRBY3RpdmVFbGVtZW50IiwiaXNGb2N1c2FibGUiLCJwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQiLCJoYXNGb2N1c2VkQ2FuZGlkYXRlIiwibW91bnRFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJzZXRUaW1lb3V0IiwiZm9jdXNXaXRob3V0U2Nyb2xsaW5nIiwib25DbGVhbnVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVubW91bnRFdmVudCIsInRyYXBGb2N1cyIsIm9uRm9jdXNJbiIsImV2ZW50IiwiY2xvc2VzdCIsIm9uRm9jdXNPdXQiLCJyZWxhdGVkVGFyZ2V0Iiwic3RhcnRTZW50aW5lbCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImVuZFNlbnRpbmVsIiwib25Gb2N1cyIsImZpcnN0IiwibGFzdCIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm11dGF0aW9uIiwicHJldmlvdXNTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJMSVZFUkVHSU9OX1RJTUVPVVRfREVMQVkiLCJsaXZlQW5ub3VuY2VyIiwiREFUQV9MSVZFX0FOTk9VTkNFUl9BVFRSIiwiYW5ub3VuY2UiLCJtZXNzYWdlIiwiYXNzZXJ0aXZlbmVzcyIsInRpbWVvdXQiLCJMaXZlQW5ub3VuY2VyIiwiY29uc3RydWN0b3IiLCJhc3NlcnRpdmVMb2ciLCJwb2xpdGVMb2ciLCJkYXRhc2V0IiwiT2JqZWN0IiwiY3JlYXRlTG9nIiwiYXBwZW5kQ2hpbGQiLCJwcmVwZW5kIiwiYXJpYUxpdmUiLCJkZXN0cm95IiwicmVtb3ZlQ2hpbGQiLCJ0ZXh0Q29udGVudCIsImNsZWFyIiwiaW5uZXJIVE1MIiwiY3JlYXRlSGlkZU91dHNpZGUiLCJpc0Rpc2FibGVkIiwiYXJpYUhpZGVPdXRzaWRlIiwidGFyZ2V0cyIsInJvb3QiLCJyZWZDb3VudE1hcCIsIldlYWtNYXAiLCJvYnNlcnZlclN0YWNrIiwidmlzaWJsZU5vZGVzIiwiU2V0IiwiaGlkZGVuTm9kZXMiLCJ3YWxrIiwicm9vdDIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWNjZXB0Tm9kZSIsImhhcyIsInBhcmVudEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJOb2RlRmlsdGVyIiwiRklMVEVSX1JFSkVDVCIsIkZJTFRFUl9TS0lQIiwiRklMVEVSX0FDQ0VQVCIsIndhbGtlciIsImNyZWF0ZVRyZWVXYWxrZXIiLCJTSE9XX0VMRU1FTlQiLCJhY2NlcHRSb290IiwiaGlkZSIsIm5leHROb2RlIiwicmVmQ291bnQiLCJnZXQiLCJzZXQiLCJjaGFuZ2VzIiwiY2hhbmdlIiwidHlwZSIsImFkZGVkTm9kZXMiLCJzb21lIiwicmVtb3ZlZE5vZGVzIiwiRWxlbWVudCIsImRlbGV0ZSIsIkhUTUxFbGVtZW50IiwiU1ZHRWxlbWVudCIsInJlYWN0QXJpYVRvcExheWVyIiwib2JzZXJ2ZXJXcmFwcGVyIiwiY291bnQiLCJwb3AiLCJjcmVhdGVFc2NhcGVLZXlEb3duIiwiaGFuZGxlS2V5RG93biIsIkV2ZW50S2V5IiwiRXNjYXBlIiwib25Fc2NhcGVLZXlEb3duIiwiUE9JTlRFUl9ET1dOX09VVFNJREVfRVZFTlQiLCJGT0NVU19PVVRTSURFX0VWRU5UIiwiY3JlYXRlSW50ZXJhY3RPdXRzaWRlIiwicG9pbnRlckRvd25UaW1lb3V0SWQiLCJjbGlja0hhbmRsZXIiLCJub29wIiwib25Qb2ludGVyRG93bk91dHNpZGUiLCJvbkZvY3VzT3V0c2lkZSIsIm9uSW50ZXJhY3RPdXRzaWRlIiwiaXNFdmVudE91dHNpZGUiLCJzaG91bGRFeGNsdWRlRWxlbWVudCIsIm9uUG9pbnRlckRvd24iLCJoYW5kbGVyIiwiaGFuZGxlcjIiLCJjb21wb3NlRXZlbnRIYW5kbGVycyIsIm9uY2UiLCJwb2ludGVyRG93bk91dHNpZGVFdmVudCIsImRldGFpbCIsIm9yaWdpbmFsRXZlbnQiLCJpc0NvbnRleHRNZW51IiwiYnV0dG9uIiwiaXNDdHJsS2V5IiwicG9pbnRlclR5cGUiLCJmb2N1c091dHNpZGVFdmVudCIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsIlBvbHltb3JwaGljIiwibG9jYWwiLCJvdGhlcnMiLCJhcyIsIkVycm9yIiwiRGlzbWlzc2FibGVMYXllckNvbnRleHQiLCJ1c2VPcHRpb25hbERpc21pc3NhYmxlTGF5ZXJDb250ZXh0IiwiRGlzbWlzc2FibGVMYXllciIsInBhcmVudENvbnRleHQiLCJuZXN0ZWRMYXllcnMiLCJyZWdpc3Rlck5lc3RlZExheWVyIiwicGFyZW50VW5yZWdpc3RlciIsImV4Y2x1ZGVkRWxlbWVudHMiLCJieXBhc3NUb3BNb3N0TGF5ZXJDaGVjayIsIm9uRGlzbWlzcyIsIm9uTW91bnQiLCJkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHMiLCJkaXNtaXNzIiwidW5yZWdpc3RlckZyb21QYXJlbnRMYXllciIsIm9uIiwicmVmMiIsImRlZmVyIiwiY29udGV4dCIsIlByb3ZpZGVyIiwiciQiLCJfcmVmJCIsIm1lcmdlUmVmcyIsImNyZWF0ZUNvbnRyb2xsYWJsZVNpZ25hbCIsIl92YWx1ZSIsIl9zZXRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsImlzQ29udHJvbGxlZCIsInNldFZhbHVlIiwibmV4dCIsInVudHJhY2siLCJuZXh0VmFsdWUiLCJhY2Nlc3NXaXRoIiwiaXMiLCJvbkNoYW5nZSIsImNyZWF0ZUNvbnRyb2xsYWJsZUJvb2xlYW5TaWduYWwiLCJjcmVhdGVEaXNjbG9zdXJlU3RhdGUiLCJpc09wZW4iLCJzZXRJc09wZW4iLCJvcGVuIiwiZGVmYXVsdE9wZW4iLCJvbk9wZW5DaGFuZ2UiLCJjbG9zZSIsInRvZ2dsZSIsImNyZWF0ZVRhZ05hbWUiLCJ0YWdOYW1lIiwic2V0VGFnTmFtZSIsInN0cmluZ09yVW5kZWZpbmVkIiwidG9Mb3dlckNhc2UiLCJpc1N0cmluZyIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnQiLCJhbGwiLCJlbnVtZXJhYmxlIiwiYnV0dG9uX2V4cG9ydHMiLCJCdXR0b24iLCJSb290IiwiQnV0dG9uUm9vdCIsIkJVVFRPTl9JTlBVVF9UWVBFUyIsImlzQnV0dG9uIiwibWVyZ2VkUHJvcHMiLCJtZXJnZURlZmF1bHRQcm9wcyIsImlzTmF0aXZlQnV0dG9uIiwiZWxlbWVudFRhZ05hbWUiLCJpc05hdGl2ZUlucHV0IiwiaXNOYXRpdmVMaW5rIiwicm9sZSIsImNyZWF0ZVJlZ2lzdGVySWQiLCJzZXR0ZXIiLCJpZCIsInYiLCJhY3RpdmVTdHlsZXMiLCJNYXAiLCJjcmVhdGVTdHlsZSIsInByb3BlcnRpZXMiLCJvcmlnaW5hbFN0eWxlcyIsImFjdGl2ZVN0eWxlIiwiYWN0aXZlQ291bnQiLCJtYXAiLCJzZXRQcm9wZXJ0eSIsImFjdGl2ZVN0eWxlMiIsImVudHJpZXMiLCJyZW1vdmVQcm9wZXJ0eSIsImNsZWFudXAiLCJzdHlsZV9kZWZhdWx0IiwiZ2V0U2Nyb2xsRGltZW5zaW9ucyIsImF4aXMiLCJjbGllbnRXaWR0aCIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsImNsaWVudEhlaWdodCIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsImlzU2Nyb2xsQ29udGFpbmVyIiwic3R5bGVzIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRTY3JvbGxBdExvY2F0aW9uIiwibG9jYXRpb24iLCJzdG9wQXQiLCJkaXJlY3Rpb25GYWN0b3IiLCJkaXJlY3Rpb24iLCJjdXJyZW50RWxlbWVudCIsImF2YWlsYWJsZVNjcm9sbCIsImF2YWlsYWJsZVNjcm9sbFRvcCIsIndyYXBwZXJSZWFjaGVkIiwiY2xpZW50U2l6ZSIsInNjcm9sbE9mZnNldCIsInNjcm9sbFNpemUiLCJzY3JvbGxlZCIsImRvY3VtZW50RWxlbWVudCIsIl8kaG9zdCIsInByZXZlbnRTY3JvbGxTdGFjayIsInNldFByZXZlbnRTY3JvbGxTdGFjayIsImlzQWN0aXZlIiwiY3JlYXRlUHJldmVudFNjcm9sbCIsImRlZmF1bHRlZFByb3BzIiwibWVyZ2VQcm9wcyIsImVuYWJsZWQiLCJoaWRlU2Nyb2xsYmFyIiwicHJldmVudFNjcm9sbGJhclNoaWZ0IiwicHJldmVudFNjcm9sbGJhclNoaWZ0TW9kZSIsInJlc3RvcmVTY3JvbGxQb3NpdGlvbiIsImFsbG93UGluY2hab29tIiwicHJldmVudFNjcm9sbElkIiwiY3JlYXRlVW5pcXVlSWQiLCJjdXJyZW50VG91Y2hTdGFydCIsImN1cnJlbnRUb3VjaFN0YXJ0QXhpcyIsImN1cnJlbnRUb3VjaFN0YXJ0RGVsdGEiLCJzY3JvbGxiYXJXaWR0aCIsImlubmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsInBhZGRpbmdSaWdodCIsIm1hcmdpblJpZ2h0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsWSIsIm9mZnNldExlZnQiLCJzY3JvbGxYIiwic2Nyb2xsVG8iLCJtYXliZVByZXZlbnRXaGVlbCIsInBhc3NpdmUiLCJsb2dUb3VjaFN0YXJ0IiwibWF5YmVQcmV2ZW50VG91Y2giLCJnZXRUb3VjaFhZIiwid3JhcHBlciIsImRlbHRhIiwiZ2V0RGVsdGFYWSIsIk1hdGgiLCJhYnMiLCJheGlzRGVsdGEiLCJyZXN1bHRzSW5TY3JvbGwiLCJ3b3VsZFNjcm9sbCIsInNob3VsZENhbmNlbCIsInRvdWNoZXMiLCJ0b3VjaCIsIndvdWxkUmVzdWx0SW5TY3JvbGwiLCJkZWx0YVgiLCJkZWx0YVkiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwidGFyZ2V0SW5XcmFwcGVyIiwicHJldmVudFNjcm9sbF9kZWZhdWx0Iiwic3JjX2RlZmF1bHQiLCJjcmVhdGVQcmVzZW5jZSIsInJlZlN0eWxlcyIsImdldEFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25OYW1lIiwicHJlc2VudFN0YXRlIiwic2V0UHJlc2VudFN0YXRlIiwic2hvdyIsInByZXZTaG93IiwicHJldkFuaW1hdGlvbk5hbWUiLCJjdXJyZW50QW5pbWF0aW9uTmFtZSIsImRpc3BsYXkiLCJpc0FuaW1hdGluZyIsImhhbmRsZUFuaW1hdGlvblN0YXJ0IiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwiaXNDdXJyZW50QW5pbWF0aW9uIiwiaW5jbHVkZXMiLCJwcmVzZW50Iiwic3RhdGUiLCJwcmVzZW5jZV9kZWZhdWx0IiwiZGlhbG9nX2V4cG9ydHMiLCJDbG9zZUJ1dHRvbiIsIkRpYWxvZ0Nsb3NlQnV0dG9uIiwiQ29udGVudCIsIkRpYWxvZ0NvbnRlbnQiLCJEZXNjcmlwdGlvbiIsIkRpYWxvZ0Rlc2NyaXB0aW9uIiwiRGlhbG9nIiwiT3ZlcmxheSIsIkRpYWxvZ092ZXJsYXkiLCJQb3J0YWwiLCJEaWFsb2dQb3J0YWwiLCJEaWFsb2dSb290IiwiVGl0bGUiLCJEaWFsb2dUaXRsZSIsIlRyaWdnZXIiLCJEaWFsb2dUcmlnZ2VyIiwiRGlhbG9nQ29udGV4dCIsInVzZURpYWxvZ0NvbnRleHQiLCJ0cmFuc2xhdGlvbnMiLCJnZW5lcmF0ZUlkIiwic3BsaXRQcm9wczIiLCJoYXNJbnRlcmFjdGVkT3V0c2lkZSIsImhhc1BvaW50ZXJEb3duT3V0c2lkZSIsIm1vZGFsIiwidHJpZ2dlclJlZiIsIm9uQ2xvc2VBdXRvRm9jdXMiLCJwcmV2ZW50U2Nyb2xsIiwib25PcGVuQXV0b0ZvY3VzIiwicmVnaXN0ZXJDb250ZW50SWQiLCJjb250ZW50UHJlc2VudCIsInNldENvbnRlbnRSZWYiLCJ0aXRsZUlkIiwiZGVzY3JpcHRpb25JZCIsIm1lcmdlRGVmYXVsdFByb3BzMiIsInNwbGl0UHJvcHMzIiwiY3JlYXRlRWZmZWN0MiIsIm9uQ2xlYW51cDIiLCJyZWdpc3RlckRlc2NyaXB0aW9uSWQiLCJzcGxpdFByb3BzNCIsIlNob3cyIiwib3ZlcmxheVByZXNlbnQiLCJfcmVmJDIiLCJtZXJnZVJlZnMyIiwic2V0T3ZlcmxheVJlZiIsIlNob3czIiwiRElBTE9HX0lOVExfVFJBTlNMQVRJT05TIiwiZGVmYXVsdElkIiwibWVyZ2VEZWZhdWx0UHJvcHMzIiwiY29udGVudElkIiwic2V0Q29udGVudElkIiwic2V0VGl0bGVJZCIsInNldERlc2NyaXB0aW9uSWQiLCJvdmVybGF5UmVmIiwiY29udGVudFJlZiIsInNldFRyaWdnZXJSZWYiLCJkaXNjbG9zdXJlU3RhdGUiLCJzaG91bGRNb3VudCIsImZvcmNlTW91bnQiLCJjcmVhdGVHZW5lcmF0ZUlkIiwicmVnaXN0ZXJUaXRsZUlkIiwibWVyZ2VEZWZhdWx0UHJvcHM0Iiwic3BsaXRQcm9wczUiLCJjcmVhdGVFZmZlY3QzIiwib25DbGVhbnVwMyIsInNwbGl0UHJvcHM2IiwiX3JlZiQzIiwibWVyZ2VSZWZzMyIsImJ1dHRvblZhcmlhbnRzIiwiZGVmYXVsdCIsImdob3N0Iiwib3V0bGluZSIsImFjY2VudCIsImRlc3RydWN0aXZlIiwiRGlhbG9nUHJpbWl0aXZlIiwiRGlhbG9nQ2xvc2UiLCJjbiIsIkRpYWxvZ0Nsb3NlWCIsIl8kaW5zZXJ0IiwiRGlhbG9nSGVhZGVyIiwiX3RtcGwkMyIsIl8kc3ByZWFkIiwiRGlhbG9nRm9vdGVyIiwiX2VsJDQiLCJFeHRlcm5hbExpbmsiLCJNaW51cyIsIm1pbnVzX2RlZmF1bHQiLCJQYXJlbnRoZXNlcyIsInBhcmVudGhlc2VzX2RlZmF1bHQiLCJOdW1iZXJJbnB1dCIsInRvTnVtYmVyIiwiTnVtYmVyQnV0dG9ucyIsIk51bWJlckV4cHJlc3Npb25CdXR0b24iLCJzZXRPcGVuIiwiY2FsY3VsYXRlZCIsInNldENhbGN1bGF0ZWQiLCJiIiwiaHJlZiIsIl90bXBsJDQiLCJfZWwkNyIsIl90bXBsJDUiLCJleHAiLCJyZXBsYWNlQWxsIiwidHJpbSIsInJlc3VsdCIsInBsdWdpbnMiLCJkYXRhdmlldyIsImFwaSIsImV2YWx1YXRlIiwic3VjY2Vzc2Z1bCIsIk5hTiIsIiQka2V5ZG93biIsImlzTmFOIiwiX2VsJDgiLCJfdG1wbCQ3IiwiX2VsJDEyIiwiX3RtcGwkOSIsIl90bXBsJDYiLCJfZWwkMTEiLCJfdG1wbCQ4IiwiVGFibGVEYXRhIiwic2V0dGluZ3MiLCJ0YWJsZUlkQ29sdW1uTmFtZSIsImRlZmF1bHREYXRlRm9ybWF0IiwiZGVmYXVsdERhdGVUaW1lRm9ybWF0IiwicmVuZGVyTnVsbEFzIiwiZ2V0VmFsdWVUeXBlIiwiaGVhZGVyIiwiaXNFZGl0YWJsZVByb3BlcnR5IiwiQ09NUExFWF9QUk9QRVJUWV9QTEFDRUhPTERFUiIsIl8kYWRkRXZlbnRMaXN0ZW5lciIsIm9uTW91c2VNb3ZlIiwiVGFibGVEYXRhRGlzcGxheSIsIlRhYmxlRGF0YUVkaXQiLCJfJHAiLCJfJHN0eWxlIiwiaGlnaGxpZ2h0U3R5bGUiLCJkcmFnZ2VkT3ZlclJpZ2h0IiwiZHJhZ2dlZE92ZXJMZWZ0IiwibGFzdENlbGxIaWdobGlnaHQiLCJUYWJsZUJvZHkiLCJjb2RlQmxvY2tJbmZvIiwicm93cyIsInJvdyIsInJvd0luZGV4IiwidmFsdWVJbmRleCIsImhlYWRlcnMiLCJnZXRJZENvbHVtbkluZGV4IiwicGF0aCIsImhpZ2hsaWdodEluZGV4Iiwic2V0RHJhZ2dlZE92ZXJJbmRleCIsImRyYWdnZWRPdmVySW5kZXgiLCJHcmlwSG9yaXpvbnRhbCIsImdyaXBfaG9yaXpvbnRhbF9kZWZhdWx0IiwieDEiLCJ4MiIsInkxIiwieTIiLCJBbGlnbkxlZnQiLCJhbGlnbl9sZWZ0X2RlZmF1bHQiLCJTcXVhcmVDaGVja0JpZyIsInNxdWFyZV9jaGVja19iaWdfZGVmYXVsdCIsIkxpc3QiLCJsaXN0X2RlZmF1bHQiLCJwb2ludHMiLCJDbG9jayIsImNsb2NrX2RlZmF1bHQiLCJDYWxlbmRhciIsImNhbGVuZGFyX2RlZmF1bHQiLCJCaW5hcnkiLCJiaW5hcnlfZGVmYXVsdCIsIlNwYXJrbGVzIiwic3BhcmtsZXNfZGVmYXVsdCIsIlRhZ3MiLCJ0YWdzX2RlZmF1bHQiLCJDb3JuZXJVcFJpZ2h0IiwiY29ybmVyX3VwX3JpZ2h0X2RlZmF1bHQiLCJGaWxlIiwiZmlsZV9kZWZhdWx0IiwiUHJvcGVydHlJY29uIiwiaGVhZGVySWNvbnMiLCJTd2l0Y2giLCJNYXRjaCIsIlRhYmxlSGVhZCIsInRyYW5zbGF0ZVgiLCJzZXRUcmFuc2xhdGVYIiwicHJvcGVydHlUeXBlcyIsImdldFByb3BlcnR5VHlwZXMiLCJtZXRhZGF0YUNhY2hlIiwibGFzdE1vdXNlUG9zIiwib25Nb3VzZVVwIiwid29ya3NwYWNlIiwidmlldyIsImdldEFjdGl2ZVZpZXdPZlR5cGUiLCJNYXJrZG93blZpZXciLCJzZWN0aW9uSW5mbyIsImdldFNlY3Rpb25JbmZvIiwibGluZVN0YXJ0IiwibGluZSIsInByZVByZVRhYmxlTGluZSIsImdldFRhYmxlTGluZSIsInByZVRhYmxlTGluZSIsInRhYmxlTGluZUluZGV4IiwiaXNXaXRob3V0SWQiLCJSZWdFeHAiLCJ0ZXN0IiwiaXNEcmFnZ2luZ0RlZmF1bHRJZCIsImlzRHJhZ2dlZE92ZXJEZWZhdWx0SWQiLCJpc1JlbGF0aW5nVG9EZWZhdWx0SWQiLCJ0YWJsZUxpbmUiLCJyZXBsYWNlIiwidGFibGVLZXl3b3JkIiwicHJlQ29scyIsInNwbGl0IiwiYyIsImNvbHMiLCJkcmFnZ2VkSW5kZXgiLCJjb2xzV2l0aG91dEhpZ2hsaWdodCIsInRvU3BsaWNlZCIsIm5ld0NvbHMiLCJzY3JvbGxGaXhlciIsIlNjcm9sbEZpeGVyIiwiZWRpdG9yIiwic2V0TGluZSIsImZpeCIsInNldEhpZ2hsaWdodEluZGV4IiwiX2VsJDUiLCIkJG1vdXNlbW92ZSIsIiQkbW91c2Vkb3duIiwiX3AkIiwiX3YkIiwiX3YkMiIsImJhY2tncm91bmQiLCJ0cmFuc2xhdGUiLCJjdXJzb3IiLCJfJGNsYXNzTmFtZSIsInQiLCJoIiwiX2VsJDYiLCJUYWJsZSIsInRhYmxlQ2xhc3NOYW1lIiwiaXNBZGRDb2x1bW5EaWFsb2dPcGVuIiwic2V0QWRkQ29sdW1uRGlhbG9nT3BlbiIsImlzQWRkUm93RGlhbG9nT3BlbiIsInNldEFkZFJvd0RpYWxvZ09wZW4iLCJxdWVyeVJlc3VsdHMiLCJUYWJsZUZhbGxiYWNrIiwidHJ1ZVByb3BlcnR5TmFtZXMiLCJ2YWx1ZXMiLCJBZGRDb2x1bW5CdXR0b24iLCJBZGRSb3dCdXR0b24iLCJlcnJvciIsInByb3BlcnR5VmFsdWUiLCJzZXRQcm9wZXJ0eVZhbHVlIiwiYWxpYXNWYWx1ZSIsInNldEFsaWFzVmFsdWUiLCJwcm9wIiwibGluZXMiLCJhbGlhcyIsImFsaWFzU3RyIiwiYWRkQ29sIiwicmVsYXRpdmVJbmRleCIsImdldEV4aXN0aW5nUHJvcGVydGllcyIsInByb3BlcnR5TmFtZXMiLCJrZXlzIiwic29ydCIsIl9lbCQ5IiwiX2VsJDEwIiwiX2VsJDE2IiwiX2VsJDEzIiwiX2VsJDE0IiwiX2VsJDE1IiwidGl0bGVWYWx1ZSIsInNldFRpdGxlVmFsdWUiLCJ0ZW1wbGF0ZVZhbHVlIiwic2V0VGVtcGxhdGVWYWx1ZSIsImlzU2F2ZURlZmF1bHQiLCJzZXRTYXZlRGVmYXVsdCIsInRlbXBsYXRlcyIsImdldFRlbXBsYXRlRmlsZXMiLCJoYW5kbGVIYXNEZWZhdWx0IiwibmV3Tm90ZVRlbXBsYXRlUGF0aCIsImZvdW5kIiwiZiIsIl9lbCQxNyIsIl9lbCQxOCIsIl9lbCQxOSIsIl9lbCQyMCIsIl90bXBsJDEwIiwiX2VsJDIxIiwiX2VsJDIyIiwiX2VsJDIzIiwiZmlsZSIsIl9lbCQyOCIsIl9lbCQyNCIsIl90bXBsJDExIiwiX2VsJDI1IiwicHJldiIsIl9lbCQyNiIsIl9lbCQyNyIsInRpdGxlIiwidmF1bHQiLCJjcmVhdGUiLCJ0ZW1wbGF0ZUZpbGUiLCJjb250ZW50IiwiY2FjaGVkUmVhZCIsIlRvZ2dsZSIsImlzQ2hlY2tlZCIsInNldENoZWNrZWQiLCJvbkNoZWNrZWRDaGFuZ2UiLCJGT1JNX0NPTlRST0xfUFJPUF9OQU1FUyIsImNyZWF0ZUZvcm1Db250cm9sIiwibGFiZWxJZCIsInNldExhYmVsSWQiLCJmaWVsZElkIiwic2V0RmllbGRJZCIsImVycm9yTWVzc2FnZUlkIiwic2V0RXJyb3JNZXNzYWdlSWQiLCJnZXRBcmlhTGFiZWxsZWRCeSIsImZpZWxkSWQyIiwiZmllbGRBcmlhTGFiZWwiLCJmaWVsZEFyaWFMYWJlbGxlZEJ5IiwiaGFzQXJpYUxhYmVsbGVkQnkiLCJCb29sZWFuIiwiZ2V0QXJpYURlc2NyaWJlZEJ5IiwiZmllbGRBcmlhRGVzY3JpYmVkQnkiLCJ2YWxpZGF0aW9uU3RhdGUiLCJyZXF1aXJlZCIsInJlYWRPbmx5IiwiZm9ybUNvbnRyb2xDb250ZXh0IiwiaXNSZXF1aXJlZCIsImlzUmVhZE9ubHkiLCJyZWdpc3RlckxhYmVsIiwicmVnaXN0ZXJGaWVsZCIsInJlZ2lzdGVyRGVzY3JpcHRpb24iLCJyZWdpc3RlckVycm9yTWVzc2FnZSIsIkZvcm1Db250cm9sQ29udGV4dCIsInVzZUZvcm1Db250cm9sQ29udGV4dCIsIkZvcm1Db250cm9sRGVzY3JpcHRpb24iLCJGb3JtQ29udHJvbEVycm9yTWVzc2FnZSIsImlzSW52YWxpZCIsIkZvcm1Db250cm9sTGFiZWwiLCJGT1JNX0NPTlRST0xfRklFTERfUFJPUF9OQU1FUyIsImNyZWF0ZUZvcm1Db250cm9sRmllbGQiLCJmaWVsZFByb3BzIiwiYXJpYUxhYmVsIiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhRGVzY3JpYmVkQnkiLCJjcmVhdGVGb3JtUmVzZXRMaXN0ZW5lciIsImVsZW1lbnQyIiwiZm9ybSIsImdldENsb3Nlc3RGb3JtIiwiaXNGb3JtRWxlbWVudCIsIm1hdGNoZXMiLCJidWlsZE5vZGVzIiwicGFyYW1zIiwic3RhcnRJbmRleCIsImxldmVsIiwic3RhcnRMZXZlbCIsIm5vZGVzIiwiZ2V0S2V5IiwiZGF0YSIsIl9nZXRLZXkiLCJkYXRhS2V5IiwiU3RyaW5nIiwiZ2V0VGV4dFZhbHVlIiwiX2dldFRleHRWYWx1ZSIsImRhdGFUZXh0VmFsdWUiLCJnZXREaXNhYmxlZCIsIl9nZXREaXNhYmxlZCIsImdldFNlY3Rpb25DaGlsZHJlbiIsImRhdGFTb3VyY2UiLCJyYXdWYWx1ZSIsInRleHRWYWx1ZSIsInNlY3Rpb25DaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJjcmVhdGVDb2xsZWN0aW9uIiwiZGVwcyIsImZhY3RvcnkiLCJSVExfU0NSSVBUUyIsIlJUTF9MQU5HUyIsImlzUlRMIiwibG9jYWxlIiwiSW50bCIsIkxvY2FsZSIsInNjcmlwdCIsIm1heGltaXplIiwibGFuZyIsImdldFJlYWRpbmdEaXJlY3Rpb24iLCJnZXREZWZhdWx0TG9jYWxlIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJEYXRlVGltZUZvcm1hdCIsInN1cHBvcnRlZExvY2FsZXNPZiIsIl9lcnIiLCJjdXJyZW50TG9jYWxlIiwibGlzdGVuZXJzIiwidXBkYXRlTG9jYWxlIiwibGlzdGVuZXIiLCJjcmVhdGVEZWZhdWx0TG9jYWxlIiwiZGVmYXVsdENsaWVudExvY2FsZSIsInNldERlZmF1bHRDbGllbnRMb2NhbGUiLCJkZWZhdWx0TG9jYWxlIiwiSTE4bkNvbnRleHQiLCJ1c2VMb2NhbGUiLCJjcmVhdGVDb2xsYXRvciIsIm9wdGlvbnMiLCJjYWNoZUtleSIsImNyZWF0ZU1lbW8yIiwiYSIsImNvbGxhdG9yIiwiQ29sbGF0b3IiLCJjcmVhdGVGaWx0ZXIiLCJ1c2FnZSIsInN0YXJ0c1dpdGgiLCJzdWJzdHIiLCJub3JtYWxpemVkU3RyIiwibm9ybWFsaXplIiwibm9ybWFsaXplZFN1YnN0ciIsImNvbXBhcmUiLCJlbmRzV2l0aCIsInNjYW4iLCJzbGljZUxlbiIsIlNlbGVjdGlvbiIsIl9TZWxlY3Rpb24iLCJhbmNob3JLZXkiLCJjdXJyZW50S2V5IiwiY3JlYXRlQ29udHJvbGxhYmxlU2VsZWN0aW9uU2lnbmFsIiwiaXNOb25Db250aWd1b3VzU2VsZWN0aW9uTW9kaWZpZXIiLCJpc0FwcGxlRGV2aWNlIiwiYWx0S2V5IiwiY3RybEtleSIsImlzQ3RybEtleVByZXNzZWQiLCJpc01hYyIsIm1ldGFLZXkiLCJjb252ZXJ0U2VsZWN0aW9uIiwic2VsZWN0aW9uIiwiaXNTYW1lU2VsZWN0aW9uIiwic2V0QSIsInNldEIiLCJpdGVtIiwiY3JlYXRlTXVsdGlwbGVTZWxlY3Rpb25TdGF0ZSIsInNlbGVjdGlvbk1vZGUiLCJzZWxlY3Rpb25CZWhhdmlvciIsImlzRm9jdXNlZCIsInNldEZvY3VzZWQiLCJmb2N1c2VkS2V5Iiwic2V0Rm9jdXNlZEtleSIsInNlbGVjdGVkS2V5c1Byb3AiLCJzZWxlY3RlZEtleXMiLCJkZWZhdWx0U2VsZWN0ZWRLZXlzIiwiZGVmYXVsdFNlbGVjdGlvbiIsIl9zZXRTZWxlY3RlZEtleXMiLCJvblNlbGVjdGlvbkNoYW5nZSIsInNldFNlbGVjdGlvbkJlaGF2aW9yIiwiZGlzYWxsb3dFbXB0eVNlbGVjdGlvbiIsInNldFNlbGVjdGVkS2V5cyIsImFsbG93RHVwbGljYXRlU2VsZWN0aW9uRXZlbnRzIiwiY3JlYXRlVHlwZVNlbGVjdCIsInNlYXJjaCIsInNldFNlYXJjaCIsImNyZWF0ZVNpZ25hbDIiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0SWQiLCJvbktleURvd24iLCJhY2Nlc3MyIiwiZGVsZWdhdGUiLCJrZXlib2FyZERlbGVnYXRlIiwibWFuYWdlciIsInNlbGVjdGlvbk1hbmFnZXIiLCJnZXRLZXlGb3JTZWFyY2giLCJjaGFyYWN0ZXIiLCJnZXRTdHJpbmdGb3JLZXkiLCJzdG9wUHJvcGFnYXRpb24iLCJuZXdTZWFyY2giLCJpc0FsbFNhbWVMZXR0ZXIiLCJvblR5cGVTZWxlY3QiLCJ0eXBlU2VsZWN0SGFuZGxlcnMiLCJldmVyeSIsImxldHRlciIsImNyZWF0ZVNlbGVjdGFibGVDb2xsZWN0aW9uIiwic2Nyb2xsUmVmIiwiZGVmYXVsdFByb3BzIiwic2VsZWN0T25Gb2N1cyIsImFjY2VzczMiLCJmaW5hbFNjcm9sbFJlZiIsInNjcm9sbFBvcyIsInRvcCIsImxlZnQiLCJpc1ZpcnR1YWxpemVkIiwic2Nyb2xsRWwiLCJkaXNhbGxvd1R5cGVBaGVhZCIsIm9yaWVudGF0aW9uIiwicmVmRWwiLCJuYXZpZ2F0ZVRvS2V5Iiwic2hpZnRLZXkiLCJleHRlbmRTZWxlY3Rpb24iLCJyZXBsYWNlU2VsZWN0aW9uIiwic2hvdWxkRm9jdXNXcmFwIiwiZ2V0S2V5QmVsb3ciLCJuZXh0S2V5IiwiZ2V0Rmlyc3RLZXkiLCJnZXRLZXlBYm92ZSIsImdldExhc3RLZXkiLCJnZXRLZXlMZWZ0T2YiLCJnZXRLZXlSaWdodE9mIiwiZmlyc3RLZXkiLCJsYXN0S2V5IiwiZ2V0S2V5UGFnZUJlbG93IiwiZ2V0S2V5UGFnZUFib3ZlIiwiZGlzYWxsb3dTZWxlY3RBbGwiLCJzZWxlY3RBbGwiLCJjbGVhclNlbGVjdGlvbiIsImFsbG93c1RhYk5hdmlnYXRpb24iLCJmb2N1cyIsImdldEZvY3VzYWJsZVRyZWVXYWxrZXIiLCJ0YWJiYWJsZSIsImxhc3RDaGlsZCIsIm5hdmlnYXRlVG9GaXJzdEtleSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsImxhc3RTZWxlY3RlZEtleSIsImZpcnN0U2VsZWN0ZWRLZXkiLCJxdWVyeVNlbGVjdG9yIiwic2Nyb2xsSW50b1ZpZXciLCJvbk1vdXNlRG93biIsInRyeUF1dG9Gb2N1cyIsImF1dG9Gb2N1cyIsInNob3VsZFVzZVZpcnR1YWxGb2N1cyIsImRlZmVyQXV0b0ZvY3VzIiwic2Nyb2xsVG9LZXkiLCJjcmVhdGVTZWxlY3RhYmxlSXRlbSIsImFjY2VzczQiLCJvblNlbGVjdCIsImlzU2VsZWN0ZWQiLCJ0b2dnbGVTZWxlY3Rpb24iLCJhbGxvd3NTZWxlY3Rpb24iLCJjYW5TZWxlY3RJdGVtIiwicG9pbnRlckRvd25UeXBlIiwic2hvdWxkU2VsZWN0T25QcmVzc1VwIiwib25Qb2ludGVyVXAiLCJhbGxvd3NEaWZmZXJlbnRQcmVzc09yaWdpbiIsImNyZWF0ZU1lbW8zIiwidmlydHVhbGl6ZWQiLCJvbjIiLCJrZXkyIiwic2hvdWxkVXNlVmlydHVhbEZvY3VzMiIsImZvY3VzV2l0aG91dFNjcm9sbGluZzIiLCJTZWxlY3Rpb25NYW5hZ2VyIiwiY29sbGVjdGlvbiIsImdldEl0ZW0iLCJyZXRyaWV2ZWRLZXkiLCJpc0VtcHR5IiwiaXNTZWxlY3RBbGwiLCJnZXRBbGxTZWxlY3RhYmxlS2V5cyIsImsiLCJpc0l0ZW1CZWZvcmVGaXJzdCIsImlzSXRlbUFmdGVyTGFzdCIsInRvS2V5IiwicmV0cmlldmVkVG9LZXkiLCJnZXRLZXlSYW5nZSIsImZyb20iLCJ0byIsImZyb21JdGVtIiwidG9JdGVtIiwiZ2V0S2V5UmFuZ2VJbnRlcm5hbCIsImdldEtleUFmdGVyIiwidG9nZ2xlU2VsZWN0QWxsIiwic2VsZWN0IiwiaXNTZWxlY3Rpb25FcXVhbCIsImFkZEtleXMiLCJMaXN0Q29sbGVjdGlvbiIsImtleU1hcCIsIml0ZXJhYmxlIiwicHJldktleSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZ2V0U2l6ZSIsImdldEtleXMiLCJnZXRLZXlCZWZvcmUiLCJhdCIsImlkeCIsImNyZWF0ZUxpc3RTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwiYWNjZXNzNSIsImNyZWF0ZUNvbXB1dGVkIiwiY29tcHV0ZVBvc2l0aW9uIiwicGxhdGZvcm0iLCJhcnJvdyIsIm9mZnNldCIsImZsaXAiLCJzaWRlcyIsInNpZGUiLCJwbGFjZW1lbnQiLCJzaGlmdCIsIlBvcHBlckNvbnRleHQiLCJ1c2VQb3BwZXJDb250ZXh0IiwiREVGQVVMVF9TSVpFIiwiSEFMRl9ERUZBVUxUX1NJWkUiLCJST1RBVElPTl9ERUciLCJyaWdodCIsImJvdHRvbSIsIlBvcHBlckFycm93IiwiZGlyIiwiY3VycmVudFBsYWNlbWVudCIsImNvbnRlbnRTdHlsZSIsImNyZWF0ZUNvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYm9yZGVyV2lkdGgiLCJwYXJzZUludCIsInJvdGF0ZSIsInNldEFycm93UmVmIiwicG9zaXRpb24iLCJzZXRTdHlsZSIsIlBvcHBlclBvc2l0aW9uZXIiLCJzZXRQb3NpdGlvbmVyUmVmIiwiY3JlYXRlRE9NUmVjdCIsImFuY2hvclJlY3QiLCJET01SZWN0IiwicmVjdCIsInRvSlNPTiIsImdldEFuY2hvckVsZW1lbnQiLCJhbmNob3IiLCJnZXRBbmNob3JSZWN0IiwiY29udGV4dEVsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc1ZhbGlkUGxhY2VtZW50IiwiZmxpcDIiLCJSRVZFUlNFX0JBU0VfUExBQ0VNRU5UIiwiZ2V0VHJhbnNmb3JtT3JpZ2luIiwicmVhZGluZ0RpcmVjdGlvbiIsImJhc2VQbGFjZW1lbnQiLCJhbGlnbm1lbnQiLCJyZXZlcnNlUGxhY2VtZW50IiwiUG9wcGVyUm9vdCIsImd1dHRlciIsInNsaWRlIiwib3ZlcmxhcCIsInNhbWVXaWR0aCIsImZpdFZpZXdwb3J0IiwiaGlkZVdoZW5EZXRhY2hlZCIsImRldGFjaGVkUGFkZGluZyIsImFycm93UGFkZGluZyIsIm92ZXJmbG93UGFkZGluZyIsInBvc2l0aW9uZXJSZWYiLCJhcnJvd1JlZiIsInNldEN1cnJlbnRQbGFjZW1lbnQiLCJhbmNob3JSZWYiLCJ1cGRhdGVQb3NpdGlvbiIsInJlZmVyZW5jZUVsIiwiZmxvYXRpbmdFbCIsImFycm93RWwiLCJhcnJvd09mZnNldCIsImZpbmFsR3V0dGVyIiwibWlkZGxld2FyZSIsImhhc0FsaWdubWVudCIsIm1haW5BeGlzIiwiY3Jvc3NBeGlzIiwiYWxpZ25tZW50QXhpcyIsImZhbGxiYWNrUGxhY2VtZW50cyIsInBhZGRpbmciLCJhcHBseSIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwicmVjdHMiLCJyZWZlcmVuY2VXaWR0aCIsInJvdW5kIiwicmVmZXJlbmNlIiwiZmxvb3IiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInBvcyIsInN0cmF0ZWd5Iiwib25DdXJyZW50UGxhY2VtZW50Q2hhbmdlIiwidmlzaWJpbGl0eSIsIm1pZGRsZXdhcmVEYXRhIiwicmVmZXJlbmNlSGlkZGVuIiwidHJhbnNmb3JtIiwiYXJyb3dYIiwiYXJyb3dZIiwiY2xlYW51cEF1dG9VcGRhdGUiLCJhdXRvVXBkYXRlIiwiZWxlbWVudFJlc2l6ZSIsIlJlc2l6ZU9ic2VydmVyIiwicG9zaXRpb25lciIsInF1ZXVlTWljcm90YXNrIiwiekluZGV4IiwiUG9wcGVyIiwiQXJyb3ciLCJDb250ZXh0IiwiUG9zaXRpb25lciIsIkhpZGRlblNlbGVjdEJhc2UiLCJpc0ludGVybmFsQ2hhbmdlRXZlbnQiLCJzZXRJc0ludGVybmFsQ2hhbmdlRXZlbnQiLCJyZW5kZXJPcHRpb24iLCJzZWxlY3RlZCIsInByZXZLZXlzIiwiRXZlbnQiLCJmb2N1c1RyaWdnZXIiLCJfJHVzZSIsIm11bHRpcGxlIiwiaXNNdWx0aXBsZSIsIl92JDMiLCJfdiQ0IiwiX3YkNSIsIm8iLCJnZXRJdGVtQ291bnQiLCJMaXN0S2V5Ym9hcmREZWxlZ2F0ZSIsImtleUFmdGVyIiwia2V5QmVmb3JlIiwibWVudSIsInBhZ2VZIiwib2Zmc2V0SGVpZ2h0Iiwia2V5QWJvdmUiLCJrZXlCZWxvdyIsImZyb21LZXkiLCJzdWJzdHJpbmciLCJjcmVhdGVTZWxlY3RhYmxlTGlzdCIsInNlbnNpdGl2aXR5IiwibGlzdGJveF9leHBvcnRzIiwiSXRlbSIsIkxpc3Rib3hJdGVtIiwiSXRlbURlc2NyaXB0aW9uIiwiTGlzdGJveEl0ZW1EZXNjcmlwdGlvbiIsIkl0ZW1JbmRpY2F0b3IiLCJMaXN0Ym94SXRlbUluZGljYXRvciIsIkl0ZW1MYWJlbCIsIkxpc3Rib3hJdGVtTGFiZWwiLCJMaXN0Ym94IiwiTGlzdGJveFJvb3QiLCJTZWN0aW9uIiwiTGlzdGJveFNlY3Rpb24iLCJMaXN0Ym94Q29udGV4dCIsInVzZUxpc3Rib3hDb250ZXh0IiwiTGlzdGJveEl0ZW1Db250ZXh0IiwiY3JlYXRlQ29udGV4dDIiLCJ1c2VMaXN0Ym94SXRlbUNvbnRleHQiLCJ1c2VDb250ZXh0MiIsImxpc3RCb3hDb250ZXh0IiwibGlzdFN0YXRlIiwiaXNIaWdobGlnaHRlZCIsInNlbGVjdGFibGVJdGVtIiwic2hvdWxkRm9jdXNPbkhvdmVyIiwiYXJpYVNlbGVjdGVkIiwiaXNOb3RTYWZhcmlNYWNPUyIsImFyaWFQb3NJblNldCIsImFyaWFTZXRTaXplIiwib25Qb2ludGVyTW92ZSIsInJlZ2lzdGVyTGFiZWxJZCIsImNyZWF0ZVVuaXF1ZUlkMiIsIm1lcmdlRGVmYXVsdFByb3BzNSIsIm9wdGlvblZhbHVlIiwib3B0aW9uVGV4dFZhbHVlIiwib3B0aW9uRGlzYWJsZWQiLCJvcHRpb25Hcm91cENoaWxkcmVuIiwic2VsZWN0YWJsZUxpc3QiLCJzY3JvbGxUb0l0ZW0iLCJjcmVhdGVHZW5lcmF0ZUlkMiIsImNvbXBvc2VFdmVudEhhbmRsZXJzMiIsIktleSIsImJ5IiwicmVuZGVyU2VjdGlvbiIsInJlbmRlckl0ZW0iLCJjb21ib2JveF9leHBvcnRzIiwiQ29tYm9ib3giLCJDb21ib2JveENvbnRlbnQiLCJDb250cm9sIiwiQ29tYm9ib3hDb250cm9sIiwiRXJyb3JNZXNzYWdlIiwiSGlkZGVuU2VsZWN0IiwiQ29tYm9ib3hIaWRkZW5TZWxlY3QiLCJDb21ib2JveEljb24iLCJJbnB1dCIsIkNvbWJvYm94SW5wdXQiLCJMYWJlbCIsIkNvbWJvYm94TGlzdGJveCIsIkNvbWJvYm94UG9ydGFsIiwiQ29tYm9ib3hSb290IiwiQ29tYm9ib3hUcmlnZ2VyIiwiQ29tYm9ib3hDb250ZXh0IiwidXNlQ29tYm9ib3hDb250ZXh0IiwicmVzZXRJbnB1dFZhbHVlIiwiaXNNb2RhbCIsImNvbnRyb2xFbCIsImNvbnRyb2xSZWYiLCJpbnB1dFJlZiIsImZvcm1Db250cm9sRmllbGRQcm9wcyIsIm9uSW5wdXQiLCJzZXRJbnB1dFZhbHVlIiwiaW5wdXRWYWx1ZSIsImFsbG93c0VtcHR5Q29sbGVjdGlvbiIsIm9uSW5wdXRLZXlEb3duIiwicmVtb3ZlT25CYWNrc3BhY2UiLCJpc0lucHV0Rm9jdXNlZCIsInNldElzSW5wdXRGb2N1c2VkIiwib25CbHVyIiwibGFzdEV2ZW50VGltZSIsIm9uVG91Y2hFbmQiLCJ0aW1lU3RhbXAiLCJjZW50ZXJYIiwiY2VpbCIsImNlbnRlclkiLCJzZXRJbnB1dFJlZiIsInJlYWRvbmx5IiwicGxhY2Vob2xkZXIiLCJhdXRvQ29tcGxldGUiLCJhdXRvQ29ycmVjdCIsInNwZWxsQ2hlY2siLCJsaXN0Ym94SWQiLCJhY3RpdmVEZXNjZW5kYW50IiwibGlzdGJveEFyaWFMYWJlbCIsInJlZ2lzdGVyTGlzdGJveElkIiwic2V0TGlzdGJveFJlZiIsIl9yZWYkNCIsIm1lcmdlUmVmczQiLCJzZXRDb250cm9sUmVmIiwiQ29tYm9ib3hDb250cm9sQ2hpbGQiLCJzZWxlY3RlZE9wdGlvbnMiLCJvcHRpb24iLCJyZW1vdmVPcHRpb25Gcm9tU2VsZWN0aW9uIiwicmVzb2x2ZWRDaGlsZHJlbiIsImlzRnVuY3Rpb24iLCJDT01CT0JPWF9JTlRMX1RSQU5TTEFUSU9OUyIsImZvY3VzQW5ub3VuY2VtZW50Iiwib3B0aW9uVGV4dCIsImNvdW50QW5ub3VuY2VtZW50Iiwib3B0aW9uQ291bnQiLCJzZWxlY3RlZEFubm91bmNlbWVudCIsInRyaWdnZXJMYWJlbCIsImxpc3Rib3hMYWJlbCIsIkNvbWJvYm94QmFzZSIsImNsb3NlT25TZWxlY3Rpb24iLCJkZWZhdWx0RmlsdGVyIiwidHJpZ2dlck1vZGUiLCJwb3BwZXJQcm9wcyIsImZvcm1Db250cm9sUHJvcHMiLCJzZXRMaXN0Ym94SWQiLCJsaXN0Ym94UmVmIiwiZm9jdXNTdHJhdGVneSIsInNldEZvY3VzU3RyYXRlZ3kiLCJzZXRJc0lucHV0Rm9jdXNlZFN0YXRlIiwic2hvd0FsbE9wdGlvbnMiLCJzZXRTaG93QWxsT3B0aW9ucyIsImxhc3REaXNwbGF5ZWRPcHRpb25zIiwic2V0TGFzdERpc3BsYXllZE9wdGlvbnMiLCJvcGVuVHJpZ2dlck1vZGUiLCJvbklucHV0Q2hhbmdlIiwiZ2V0T3B0aW9uVmFsdWUiLCJpc0Z1bmN0aW9uMiIsImdldE9wdGlvbkxhYmVsIiwib3B0aW9uTGFiZWwiLCJhbGxPcHRpb25zIiwiZmxhdE1hcCIsImZpbHRlckZuIiwiaW5wdXRWYWwiLCJ0ZXh0VmFsIiwiZmlsdGVyZWRPcHRpb25zIiwiZmlsdGVyZWRHcm91cHMiLCJvcHRHcm91cCIsImZpbHRlcmVkQ2hpbGRyZW5PcHRpb25zIiwiZGlzcGxheWVkT3B0aW9ucyIsImdldE9wdGlvbnNGcm9tVmFsdWVzIiwiaW5wdXRFbCIsInNldFNlbGVjdGlvblJhbmdlIiwiZm9jdXNTdHJhdGVneTIiLCJzaG93QWxsT3B0aW9uczIiLCJoYXNPcHRpb25zIiwic2VsZWN0YWJsZUNvbGxlY3Rpb24iLCJzZWxlY3RlZEtleSIsInNlbGVjdGVkT3B0aW9uIiwiaXRlbUNvbXBvbmVudCIsInNlY3Rpb24iLCJzZWN0aW9uQ29tcG9uZW50IiwiaW5wdXQiLCJwcmV2SW5wdXQiLCJwcmV2RmlsdGVyZWRPcHRpb25zIiwicHJldlNob3dBbGxPcHRpb25zIiwiZmlsdGVyZWRPcHRpb25zMiIsImxhc3RBbm5vdW5jZWRGb2N1c2VkS2V5IiwiZm9jdXNlZEl0ZW0iLCJhbm5vdW5jZW1lbnQiLCJsYXN0T3B0aW9uQ291bnQiLCJsYXN0T3BlbiIsImRpZE9wZW5XaXRob3V0Rm9jdXNlZEl0ZW0iLCJsYXN0QW5ub3VuY2VkU2VsZWN0ZWRLZXkiLCJsYXN0U2VsZWN0ZWRJdGVtIiwidHJpZ2dlckFyaWFMYWJlbCIsInZhbHVlMiIsInNwbGl0UHJvcHM3IiwiX3JlZiQ1IiwibWVyZ2VSZWZzNSIsIkNvbWJvYm94UHJpbWl0aXZlIiwicHJvbXB0SW5zdHJ1Y3Rpb25zIiwiSW5kZXgiLCJDb21ib2JveEl0ZW0iLCJub3RlIiwiYXV4TGFiZWwiLCJkZWZhdWx0SW5zdHJ1Y3Rpb25zIiwibGlua0luc3RydWN0aW9ucyIsInN1YkxpbmtJbnN0cnVjdGlvbnMiLCJQcm9tcHRDb21ib0JveCIsInNldE9wdGlvbnMiLCJjcmVhdGVTdG9yZSIsImRlZmF1bHRPcHRpb25zIiwibGFiZWxzIiwic2V0TGFiZWxzIiwiYXV4Iiwic2V0QXV4Iiwic2V0UHJvbXB0SW5zdHJ1Y3Rpb25zIiwiaXNTdWJMaW5rIiwiZGVmYXVsdE9uSW5wdXRDaGFuZ2UiLCJmaWx0ZXJlZCIsImhhbmRsZU5vTWF0Y2hGb3VuZCIsIk5PX01BVENIX0ZPVU5EIiwiZ2V0TGlua09wdGlvbnMiLCJzZWFyY2hOYW1lIiwiZmlsZXMiLCJnZXRBbGxMb2FkZWRGaWxlcyIsIm5ld0xhYmVscyIsImJhc2VuYW1lIiwiZ2V0VGFnT3B0aW9ucyIsInNlYXJjaFRhZyIsInRhZ3MiLCJnZXRUYWdzIiwib3B0cyIsImdldEhlYWRlck9wdGlvbnMiLCJoZWFkaW5ncyIsIm5ld0F1eCIsImhlYWRpbmciLCJnZXRTZWN0aW9uT3B0aW9ucyIsImJsb2NrSWQiLCJzZWN0aW9ucyIsInMiLCJsb2ciLCJnZXRMaW5rU3ViT3B0aW9ucyIsIm1hdGNoIiwiZXhlYyIsInByZVRpdGxlIiwiZ3JvdXBzIiwic3ViIiwiZ2V0RmlsZUJ5UGF0aCIsImdldEZpbGVDYWNoZSIsImlucCIsImhhc2hJbmRleCIsImlQcm9wcyIsIml0ZW1Qcm9wcyIsInRyaWdnZXJQcm9wcyIsImlucHV0UHJvcHMiLCJBcHAiLCJxdWVyeVJlc3VsdFN0b3JlIiwidWlkIiwiZGVmYXVsdFF1ZXJ5UmVzdWx0IiwidXBkYXRlUXVlcnlSZXN1bHRzIiwiZ2V0Q29sdW1uUHJvcGVydHlOYW1lcyIsInNldFF1ZXJ5UmVzdWx0U3RvcmUiLCJ0cnlEYXRhdmlld0FycmF5VG9BcnJheSIsInJlZ2lzdGVyRGF0YXZpZXdFdmVudHMiLCJ1bnJlZ2lzdGVyRGF0YXZpZXdFdmVudHMiLCJUb29sYmFyIiwic2V0Q29uZmlnU3RvcmUiLCJpc0NvbmZpZ09wZW4iLCJzZXRDb25maWdPcGVuIiwidXBkYXRlQ29uZmlnIiwiQmxvY2tDb25maWdNb2RhbCIsIkdlYXIiLCJzZXRGb3JtIiwidXBkYXRlRm9ybSIsInRyaWdnZXIiLCJTZXR0aW5nIiwiZGVzY3JpcHRpb24iLCJsYWJlbEZvciIsImRlZmF1bHREYXRhRWRpdEJsb2NrQ29uZmlnIiwiZ2V0RGF0YXZpZXdBUEkiLCJwQXBwIiwiaGFzT3duUHJvcGVydHkiLCJnUGx1Z2lucyIsIm1zZyIsIkRhdGFFZGl0IiwiUGx1Z2luIiwib25sb2FkIiwibG9hZFBsdWdpbiIsInJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IiLCJwcmVTb3VyY2UiLCJib3hTaGFkb3ciLCJlbnN1cmVGaWxlTGlua0NvbHVtbiIsInNwbGl0UXVlcnlPbkNvbmZpZyIsImNvbmZpZ1N0b3JlIiwibXV0IiwiYXR0cmlidXRlTmFtZSIsIm1vZGUiLCJvbGRWYWx1ZSIsIlByb21pc2UiLCJyZXMiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlT2xkVmFsdWUiLCJfc2VsZiQiLCJtZENoaWxkIiwiTWFya2Rvd25SZW5kZXJDaGlsZCIsInJlZ2lzdGVyIiwiYWRkQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBc0hBLE1BQU0sZUFBZTtBQUFBLEVBQ25CLFNBQVM7QUFBQSxFQUNULFVBQVU7QUFDWjtBQVlBLE1BQU0sVUFBVSxDQUFDLEdBQUcsTUFBTSxNQUFNO0FBQ2hDLE1BQU0sU0FBUyxPQUFPLGFBQWE7QUFDbkMsTUFBTSxTQUFTLE9BQU8sYUFBYTtBQUVuQyxNQUFNLGdCQUFnQjtBQUFBLEVBQ3BCLFFBQVE7QUFDVjtBQUVBLElBQUksYUFBYTtBQUNqQixNQUFNLFFBQVE7QUFDZCxNQUFNLFVBQVU7QUFDaEIsTUFBTSxVQUFVO0FBQUEsRUFDZCxPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQ1Q7QUFFQSxJQUFJLFFBQVE7QUFDWixJQUFJLGFBQWE7QUFFakIsSUFBSSx1QkFBdUI7QUFDM0IsSUFBSSxXQUFXO0FBQ2YsSUFBSSxVQUFVO0FBQ2QsSUFBSSxVQUFVO0FBQ2QsSUFBSSxZQUFZO0FBQ2hCLFNBQVMsV0FBVyxJQUFJLGVBQWU7QUFDckMsUUFBTSxXQUFXLFVBQ2YsUUFBUSxPQUNSLFVBQVUsR0FBRyxXQUFXLEdBQ3hCLFVBQVUsa0JBQWtCLFNBQVksUUFBUSxlQUNoRCxPQUFPLFVBQ0gsVUFDQTtBQUFBLElBQ0UsT0FBTztBQUFBLElBQ1AsVUFBVTtBQUFBLElBQ1YsU0FBUyxVQUFVLFFBQVEsVUFBVTtBQUFBLElBQ3JDLE9BQU87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LEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRixDQUFDO0FBQ0QsTUFBTSxjQUE0QixvQkFBSSxJQUFJO0FBQUEsRUFDeEM7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxF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QUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsT0FBTztBQUFBLE1BQ3BCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsR0FBRyxDQUFDO0FBQUEsUUFDRixHQUFHLENBQUMsTUFBTTtBQUFBLE1BQ2xCLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsTUFBTTtBQUFBLE1BQ25CLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsTUFBTTtBQUFBLE1BQ25CLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsSUFBSSxDQUFDO0FBQUEsUUFDSCxJQUFJLENBQUMsTUFBTTtBQUFBLE1BQ25CLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0Qs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LE1BQ2xDLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsYUFBYSxDQUFDO0FBQUEsUUFDWixhQUFhLENBQUMsWUFBWTtBQUFBLE1BQ2xDLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsYUFBYSxDQUFDO0FBQUEsUUFDWixhQUFhLENBQUMsWUFBWTtBQUFBLE1BQ2xDLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsYUFBYSxDQUFDO0FBQUEsUUFDWixhQUFhLENBQUMsWUFBWTtBQUFBLE1BQ2xDLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BS0QsY0FBYyxDQUFDO0FBQUEsUUFDYixjQUFjLENBQUMsWUFBWTtBQUFBLE1BQ25DLENB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QUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELFlBQVksQ0FBQztBQUFBLFFBQ1gsWUFBWSx3QkFBeUI7QUFBQSxNQUM3QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFBYSx3QkFBeUI7QUFBQSxNQUM5QyxDQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtELGFBQWEsQ0FBQztBQUFBLFFBQ1osYUFB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ZUFBZSxJQUFJO0FBQzNCLG1CQUFBO0FBQUEsVUFDVDtBQUNBLGNBQUk4QixTQUFTLFdBQVc7QUFDdEI5QiwyQkFBZSxlQUFlLEtBQUs7QUFDNUIsbUJBQUE7QUFBQSxVQUNUO0FBRU8saUJBQUE7QUFBQSxRQUFBLENBQ1I7QUFBQSxNQUFBLENBQ0Y7QUFFRCxPQUFDLFlBQVk7QUFDWCxjQUFNLElBQUlnQyxRQUFlQyxDQUFBQSxRQUFRNXhDLFdBQVc0eEMsS0FBSyxDQUFDLENBQUM7QUFDN0M1eUMsY0FBQUEsWUFBWXpJLEdBQUdpSyxRQUFRLGFBQWE7QUFDMUMsWUFBSSxDQUFDeEIsV0FBVztBQUVkO0FBQUEsUUFDRjtBQUNBaUMsaUJBQVNNLFFBQVF2QyxXQUFXO0FBQUEsVUFDMUI2eUMsWUFBWTtBQUFBLFVBQ1pDLG1CQUFtQjtBQUFBLFFBQUEsQ0FDcEI7QUFHS0wsY0FBQUEsT0FBT3p5QyxVQUFVa0YsYUFBYSxXQUFXO0FBQy9DLFlBQUl1dEMsU0FBUyxXQUFXO0FBQ3RCOUIseUJBQWUsZUFBZSxJQUFJO0FBQUEsUUFDcEM7QUFBQSxNQUFBO0FBV0YsWUFBTSxDQUFDVixrQkFBa0JLLG1CQUFtQixJQUFJcEQsWUFFOUMsQ0FBRSxDQUFBO0FBQ0VsN0MsWUFBQUEsV0FBVWlGLE9BQU8sTUFBTTtBQUFBLGNBQUE4N0MsU0FBQTtBQUMzQixlQUFBeitDLGdCQUNHMDdDLEtBQUc7QUFBQSxVQUNGMTRDLFFBQU15N0M7QUFBQUEsVUFDTng3QztBQUFBQSxVQUNBQztBQUFBQSxVQUNBQztBQUFBQSxVQUVBQyxRQUFRNDZDO0FBQUFBLFVBQ1IzQjtBQUFBQSxVQUNBaDVDO0FBQUFBLFVBQ0FDO0FBQUFBLFVBQ0FzNEM7QUFBQUEsVUFDQUQ7QUFBQUEsVUFDQUs7QUFBQUEsVUFDQXo0QztBQUFBQSxRQUFBQSxDQUF3QjtBQUFBLFNBRzNCTixFQUFFO0FBRUN5N0MsWUFBQUEsVUFBVSxJQUFJQyw2QkFBb0IxN0MsRUFBRTtBQUMxQ3k3QyxjQUFRRSxTQUFTLE1BQU07QUFDYixRQUFBbGhEO0FBRVJzK0MsNEJBQXFCbnBCLENBQVMsU0FBQTtBQUM1QixpQkFBT0EsS0FBSytvQixHQUFHO0FBQ1Ivb0IsaUJBQUFBO0FBQUFBLFFBQUFBLENBQ1I7QUFBQSxNQUFBLENBQ0Y7QUFDRHh2QixVQUFJdzdDLFNBQVNILE9BQU87QUFBQSxJQUFBLENBRXhCO0FBQUEsRUFDRjtBQUNGOzsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsNSw2LDcsOCw5LDEwLDE0LDE2LDE5LDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ5LDUwLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0XX0=
